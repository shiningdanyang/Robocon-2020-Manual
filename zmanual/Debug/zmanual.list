
zmanual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f94  08004f94  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004f94  08004f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f9c  08004f9c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f9c  08004f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fa0  08004fa0  00014fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000020  08004fc4  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08004fc4  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc1b  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000193b  00000000  00000000  0002bc6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  0002d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  0002e240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000209cf  00000000  00000000  0002ee10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008810  00000000  00000000  0004f7df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c936f  00000000  00000000  00057fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012135e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003574  00000000  00000000  001213dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f5c 	.word	0x08004f5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004f5c 	.word	0x08004f5c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_uldivmod>:
 8000540:	b953      	cbnz	r3, 8000558 <__aeabi_uldivmod+0x18>
 8000542:	b94a      	cbnz	r2, 8000558 <__aeabi_uldivmod+0x18>
 8000544:	2900      	cmp	r1, #0
 8000546:	bf08      	it	eq
 8000548:	2800      	cmpeq	r0, #0
 800054a:	bf1c      	itt	ne
 800054c:	f04f 31ff 	movne.w	r1, #4294967295
 8000550:	f04f 30ff 	movne.w	r0, #4294967295
 8000554:	f000 b972 	b.w	800083c <__aeabi_idiv0>
 8000558:	f1ad 0c08 	sub.w	ip, sp, #8
 800055c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000560:	f000 f806 	bl	8000570 <__udivmoddi4>
 8000564:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800056c:	b004      	add	sp, #16
 800056e:	4770      	bx	lr

08000570 <__udivmoddi4>:
 8000570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000574:	9e08      	ldr	r6, [sp, #32]
 8000576:	4604      	mov	r4, r0
 8000578:	4688      	mov	r8, r1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d14b      	bne.n	8000616 <__udivmoddi4+0xa6>
 800057e:	428a      	cmp	r2, r1
 8000580:	4615      	mov	r5, r2
 8000582:	d967      	bls.n	8000654 <__udivmoddi4+0xe4>
 8000584:	fab2 f282 	clz	r2, r2
 8000588:	b14a      	cbz	r2, 800059e <__udivmoddi4+0x2e>
 800058a:	f1c2 0720 	rsb	r7, r2, #32
 800058e:	fa01 f302 	lsl.w	r3, r1, r2
 8000592:	fa20 f707 	lsr.w	r7, r0, r7
 8000596:	4095      	lsls	r5, r2
 8000598:	ea47 0803 	orr.w	r8, r7, r3
 800059c:	4094      	lsls	r4, r2
 800059e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005a2:	0c23      	lsrs	r3, r4, #16
 80005a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80005a8:	fa1f fc85 	uxth.w	ip, r5
 80005ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80005b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005b4:	fb07 f10c 	mul.w	r1, r7, ip
 80005b8:	4299      	cmp	r1, r3
 80005ba:	d909      	bls.n	80005d0 <__udivmoddi4+0x60>
 80005bc:	18eb      	adds	r3, r5, r3
 80005be:	f107 30ff 	add.w	r0, r7, #4294967295
 80005c2:	f080 811b 	bcs.w	80007fc <__udivmoddi4+0x28c>
 80005c6:	4299      	cmp	r1, r3
 80005c8:	f240 8118 	bls.w	80007fc <__udivmoddi4+0x28c>
 80005cc:	3f02      	subs	r7, #2
 80005ce:	442b      	add	r3, r5
 80005d0:	1a5b      	subs	r3, r3, r1
 80005d2:	b2a4      	uxth	r4, r4
 80005d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80005e4:	45a4      	cmp	ip, r4
 80005e6:	d909      	bls.n	80005fc <__udivmoddi4+0x8c>
 80005e8:	192c      	adds	r4, r5, r4
 80005ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80005ee:	f080 8107 	bcs.w	8000800 <__udivmoddi4+0x290>
 80005f2:	45a4      	cmp	ip, r4
 80005f4:	f240 8104 	bls.w	8000800 <__udivmoddi4+0x290>
 80005f8:	3802      	subs	r0, #2
 80005fa:	442c      	add	r4, r5
 80005fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000600:	eba4 040c 	sub.w	r4, r4, ip
 8000604:	2700      	movs	r7, #0
 8000606:	b11e      	cbz	r6, 8000610 <__udivmoddi4+0xa0>
 8000608:	40d4      	lsrs	r4, r2
 800060a:	2300      	movs	r3, #0
 800060c:	e9c6 4300 	strd	r4, r3, [r6]
 8000610:	4639      	mov	r1, r7
 8000612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000616:	428b      	cmp	r3, r1
 8000618:	d909      	bls.n	800062e <__udivmoddi4+0xbe>
 800061a:	2e00      	cmp	r6, #0
 800061c:	f000 80eb 	beq.w	80007f6 <__udivmoddi4+0x286>
 8000620:	2700      	movs	r7, #0
 8000622:	e9c6 0100 	strd	r0, r1, [r6]
 8000626:	4638      	mov	r0, r7
 8000628:	4639      	mov	r1, r7
 800062a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062e:	fab3 f783 	clz	r7, r3
 8000632:	2f00      	cmp	r7, #0
 8000634:	d147      	bne.n	80006c6 <__udivmoddi4+0x156>
 8000636:	428b      	cmp	r3, r1
 8000638:	d302      	bcc.n	8000640 <__udivmoddi4+0xd0>
 800063a:	4282      	cmp	r2, r0
 800063c:	f200 80fa 	bhi.w	8000834 <__udivmoddi4+0x2c4>
 8000640:	1a84      	subs	r4, r0, r2
 8000642:	eb61 0303 	sbc.w	r3, r1, r3
 8000646:	2001      	movs	r0, #1
 8000648:	4698      	mov	r8, r3
 800064a:	2e00      	cmp	r6, #0
 800064c:	d0e0      	beq.n	8000610 <__udivmoddi4+0xa0>
 800064e:	e9c6 4800 	strd	r4, r8, [r6]
 8000652:	e7dd      	b.n	8000610 <__udivmoddi4+0xa0>
 8000654:	b902      	cbnz	r2, 8000658 <__udivmoddi4+0xe8>
 8000656:	deff      	udf	#255	; 0xff
 8000658:	fab2 f282 	clz	r2, r2
 800065c:	2a00      	cmp	r2, #0
 800065e:	f040 808f 	bne.w	8000780 <__udivmoddi4+0x210>
 8000662:	1b49      	subs	r1, r1, r5
 8000664:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000668:	fa1f f885 	uxth.w	r8, r5
 800066c:	2701      	movs	r7, #1
 800066e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000672:	0c23      	lsrs	r3, r4, #16
 8000674:	fb0e 111c 	mls	r1, lr, ip, r1
 8000678:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800067c:	fb08 f10c 	mul.w	r1, r8, ip
 8000680:	4299      	cmp	r1, r3
 8000682:	d907      	bls.n	8000694 <__udivmoddi4+0x124>
 8000684:	18eb      	adds	r3, r5, r3
 8000686:	f10c 30ff 	add.w	r0, ip, #4294967295
 800068a:	d202      	bcs.n	8000692 <__udivmoddi4+0x122>
 800068c:	4299      	cmp	r1, r3
 800068e:	f200 80cd 	bhi.w	800082c <__udivmoddi4+0x2bc>
 8000692:	4684      	mov	ip, r0
 8000694:	1a59      	subs	r1, r3, r1
 8000696:	b2a3      	uxth	r3, r4
 8000698:	fbb1 f0fe 	udiv	r0, r1, lr
 800069c:	fb0e 1410 	mls	r4, lr, r0, r1
 80006a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80006a4:	fb08 f800 	mul.w	r8, r8, r0
 80006a8:	45a0      	cmp	r8, r4
 80006aa:	d907      	bls.n	80006bc <__udivmoddi4+0x14c>
 80006ac:	192c      	adds	r4, r5, r4
 80006ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b2:	d202      	bcs.n	80006ba <__udivmoddi4+0x14a>
 80006b4:	45a0      	cmp	r8, r4
 80006b6:	f200 80b6 	bhi.w	8000826 <__udivmoddi4+0x2b6>
 80006ba:	4618      	mov	r0, r3
 80006bc:	eba4 0408 	sub.w	r4, r4, r8
 80006c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006c4:	e79f      	b.n	8000606 <__udivmoddi4+0x96>
 80006c6:	f1c7 0c20 	rsb	ip, r7, #32
 80006ca:	40bb      	lsls	r3, r7
 80006cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80006d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80006d4:	fa01 f407 	lsl.w	r4, r1, r7
 80006d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80006dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80006e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80006e4:	4325      	orrs	r5, r4
 80006e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80006ea:	0c2c      	lsrs	r4, r5, #16
 80006ec:	fb08 3319 	mls	r3, r8, r9, r3
 80006f0:	fa1f fa8e 	uxth.w	sl, lr
 80006f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80006f8:	fb09 f40a 	mul.w	r4, r9, sl
 80006fc:	429c      	cmp	r4, r3
 80006fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000702:	fa00 f107 	lsl.w	r1, r0, r7
 8000706:	d90b      	bls.n	8000720 <__udivmoddi4+0x1b0>
 8000708:	eb1e 0303 	adds.w	r3, lr, r3
 800070c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000710:	f080 8087 	bcs.w	8000822 <__udivmoddi4+0x2b2>
 8000714:	429c      	cmp	r4, r3
 8000716:	f240 8084 	bls.w	8000822 <__udivmoddi4+0x2b2>
 800071a:	f1a9 0902 	sub.w	r9, r9, #2
 800071e:	4473      	add	r3, lr
 8000720:	1b1b      	subs	r3, r3, r4
 8000722:	b2ad      	uxth	r5, r5
 8000724:	fbb3 f0f8 	udiv	r0, r3, r8
 8000728:	fb08 3310 	mls	r3, r8, r0, r3
 800072c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000730:	fb00 fa0a 	mul.w	sl, r0, sl
 8000734:	45a2      	cmp	sl, r4
 8000736:	d908      	bls.n	800074a <__udivmoddi4+0x1da>
 8000738:	eb1e 0404 	adds.w	r4, lr, r4
 800073c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000740:	d26b      	bcs.n	800081a <__udivmoddi4+0x2aa>
 8000742:	45a2      	cmp	sl, r4
 8000744:	d969      	bls.n	800081a <__udivmoddi4+0x2aa>
 8000746:	3802      	subs	r0, #2
 8000748:	4474      	add	r4, lr
 800074a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800074e:	fba0 8902 	umull	r8, r9, r0, r2
 8000752:	eba4 040a 	sub.w	r4, r4, sl
 8000756:	454c      	cmp	r4, r9
 8000758:	46c2      	mov	sl, r8
 800075a:	464b      	mov	r3, r9
 800075c:	d354      	bcc.n	8000808 <__udivmoddi4+0x298>
 800075e:	d051      	beq.n	8000804 <__udivmoddi4+0x294>
 8000760:	2e00      	cmp	r6, #0
 8000762:	d069      	beq.n	8000838 <__udivmoddi4+0x2c8>
 8000764:	ebb1 050a 	subs.w	r5, r1, sl
 8000768:	eb64 0403 	sbc.w	r4, r4, r3
 800076c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000770:	40fd      	lsrs	r5, r7
 8000772:	40fc      	lsrs	r4, r7
 8000774:	ea4c 0505 	orr.w	r5, ip, r5
 8000778:	e9c6 5400 	strd	r5, r4, [r6]
 800077c:	2700      	movs	r7, #0
 800077e:	e747      	b.n	8000610 <__udivmoddi4+0xa0>
 8000780:	f1c2 0320 	rsb	r3, r2, #32
 8000784:	fa20 f703 	lsr.w	r7, r0, r3
 8000788:	4095      	lsls	r5, r2
 800078a:	fa01 f002 	lsl.w	r0, r1, r2
 800078e:	fa21 f303 	lsr.w	r3, r1, r3
 8000792:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000796:	4338      	orrs	r0, r7
 8000798:	0c01      	lsrs	r1, r0, #16
 800079a:	fbb3 f7fe 	udiv	r7, r3, lr
 800079e:	fa1f f885 	uxth.w	r8, r5
 80007a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80007a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007aa:	fb07 f308 	mul.w	r3, r7, r8
 80007ae:	428b      	cmp	r3, r1
 80007b0:	fa04 f402 	lsl.w	r4, r4, r2
 80007b4:	d907      	bls.n	80007c6 <__udivmoddi4+0x256>
 80007b6:	1869      	adds	r1, r5, r1
 80007b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80007bc:	d22f      	bcs.n	800081e <__udivmoddi4+0x2ae>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d92d      	bls.n	800081e <__udivmoddi4+0x2ae>
 80007c2:	3f02      	subs	r7, #2
 80007c4:	4429      	add	r1, r5
 80007c6:	1acb      	subs	r3, r1, r3
 80007c8:	b281      	uxth	r1, r0
 80007ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80007ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80007d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d6:	fb00 f308 	mul.w	r3, r0, r8
 80007da:	428b      	cmp	r3, r1
 80007dc:	d907      	bls.n	80007ee <__udivmoddi4+0x27e>
 80007de:	1869      	adds	r1, r5, r1
 80007e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80007e4:	d217      	bcs.n	8000816 <__udivmoddi4+0x2a6>
 80007e6:	428b      	cmp	r3, r1
 80007e8:	d915      	bls.n	8000816 <__udivmoddi4+0x2a6>
 80007ea:	3802      	subs	r0, #2
 80007ec:	4429      	add	r1, r5
 80007ee:	1ac9      	subs	r1, r1, r3
 80007f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80007f4:	e73b      	b.n	800066e <__udivmoddi4+0xfe>
 80007f6:	4637      	mov	r7, r6
 80007f8:	4630      	mov	r0, r6
 80007fa:	e709      	b.n	8000610 <__udivmoddi4+0xa0>
 80007fc:	4607      	mov	r7, r0
 80007fe:	e6e7      	b.n	80005d0 <__udivmoddi4+0x60>
 8000800:	4618      	mov	r0, r3
 8000802:	e6fb      	b.n	80005fc <__udivmoddi4+0x8c>
 8000804:	4541      	cmp	r1, r8
 8000806:	d2ab      	bcs.n	8000760 <__udivmoddi4+0x1f0>
 8000808:	ebb8 0a02 	subs.w	sl, r8, r2
 800080c:	eb69 020e 	sbc.w	r2, r9, lr
 8000810:	3801      	subs	r0, #1
 8000812:	4613      	mov	r3, r2
 8000814:	e7a4      	b.n	8000760 <__udivmoddi4+0x1f0>
 8000816:	4660      	mov	r0, ip
 8000818:	e7e9      	b.n	80007ee <__udivmoddi4+0x27e>
 800081a:	4618      	mov	r0, r3
 800081c:	e795      	b.n	800074a <__udivmoddi4+0x1da>
 800081e:	4667      	mov	r7, ip
 8000820:	e7d1      	b.n	80007c6 <__udivmoddi4+0x256>
 8000822:	4681      	mov	r9, r0
 8000824:	e77c      	b.n	8000720 <__udivmoddi4+0x1b0>
 8000826:	3802      	subs	r0, #2
 8000828:	442c      	add	r4, r5
 800082a:	e747      	b.n	80006bc <__udivmoddi4+0x14c>
 800082c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000830:	442b      	add	r3, r5
 8000832:	e72f      	b.n	8000694 <__udivmoddi4+0x124>
 8000834:	4638      	mov	r0, r7
 8000836:	e708      	b.n	800064a <__udivmoddi4+0xda>
 8000838:	4637      	mov	r7, r6
 800083a:	e6e9      	b.n	8000610 <__udivmoddi4+0xa0>

0800083c <__aeabi_idiv0>:
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop

08000840 <HAL_UART_TxCpltCallback>:
void wait4CompassRx(void);
void compassDeInit(void);
void compassInit(void);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_UART_TxCpltCallback+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	d102      	bne.n	800085a <HAL_UART_TxCpltCallback+0x1a>
	{
		compassTxCplt = 1;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_UART_TxCpltCallback+0x2c>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
	}
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000318 	.word	0x20000318
 800086c:	20000368 	.word	0x20000368

08000870 <peripheralUART_Init>:

void peripheralUART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000874:	2201      	movs	r2, #1
 8000876:	4905      	ldr	r1, [pc, #20]	; (800088c <peripheralUART_Init+0x1c>)
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <peripheralUART_Init+0x20>)
 800087a:	f003 fc65 	bl	8004148 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800087e:	2202      	movs	r2, #2
 8000880:	4904      	ldr	r1, [pc, #16]	; (8000894 <peripheralUART_Init+0x24>)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <peripheralUART_Init+0x28>)
 8000884:	f003 fc60 	bl	8004148 <HAL_UART_Receive_DMA>
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000300 	.word	0x20000300
 8000890:	20000228 	.word	0x20000228
 8000894:	20000120 	.word	0x20000120
 8000898:	20000318 	.word	0x20000318

0800089c <PS2DMA_ProcessingData>:
	PS2RxCplt = 0;
}

//put in function handles DMA stream global interrupt of brainDMA Rx in stm32f4xx_it.c
void PS2DMA_ProcessingData(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
	if(PS2CheckbyteCount == 4 )
 80008a0:	4b35      	ldr	r3, [pc, #212]	; (8000978 <PS2DMA_ProcessingData+0xdc>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d14f      	bne.n	8000948 <PS2DMA_ProcessingData+0xac>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 80008a8:	4b34      	ldr	r3, [pc, #208]	; (800097c <PS2DMA_ProcessingData+0xe0>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	b2d1      	uxtb	r1, r2
 80008b0:	4a32      	ldr	r2, [pc, #200]	; (800097c <PS2DMA_ProcessingData+0xe0>)
 80008b2:	7011      	strb	r1, [r2, #0]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b32      	ldr	r3, [pc, #200]	; (8000980 <PS2DMA_ProcessingData+0xe4>)
 80008b8:	7819      	ldrb	r1, [r3, #0]
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <PS2DMA_ProcessingData+0xe8>)
 80008bc:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <PS2DMA_ProcessingData+0xe0>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b05      	cmp	r3, #5
 80008c4:	d940      	bls.n	8000948 <PS2DMA_ProcessingData+0xac>
		{
			PS2DataIndex = 0;
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <PS2DMA_ProcessingData+0xe0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <PS2DMA_ProcessingData+0xdc>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <PS2DMA_ProcessingData+0xe8>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	b21a      	sxth	r2, r3
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <PS2DMA_ProcessingData+0xe8>)
 80008dc:	785b      	ldrb	r3, [r3, #1]
 80008de:	b21b      	sxth	r3, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b21a      	sxth	r2, r3
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <PS2DMA_ProcessingData+0xec>)
 80008e6:	801a      	strh	r2, [r3, #0]
			joyRigtHor = PS2Data[2] - joyRigtMidHor;
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <PS2DMA_ProcessingData+0xe8>)
 80008ea:	789b      	ldrb	r3, [r3, #2]
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b27      	ldr	r3, [pc, #156]	; (800098c <PS2DMA_ProcessingData+0xf0>)
 80008f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	4b24      	ldr	r3, [pc, #144]	; (8000990 <PS2DMA_ProcessingData+0xf4>)
 80008fe:	801a      	strh	r2, [r3, #0]
			joyRigtVer = PS2Data[3] - joyRigtMidVer;
 8000900:	4b20      	ldr	r3, [pc, #128]	; (8000984 <PS2DMA_ProcessingData+0xe8>)
 8000902:	78db      	ldrb	r3, [r3, #3]
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b23      	ldr	r3, [pc, #140]	; (8000994 <PS2DMA_ProcessingData+0xf8>)
 8000908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800090c:	b29b      	uxth	r3, r3
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	b29b      	uxth	r3, r3
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <PS2DMA_ProcessingData+0xfc>)
 8000916:	801a      	strh	r2, [r3, #0]
			joyLeftHor = PS2Data[4] - joyLeftMidHor;
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <PS2DMA_ProcessingData+0xe8>)
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <PS2DMA_ProcessingData+0x100>)
 8000920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000924:	b29b      	uxth	r3, r3
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	b29b      	uxth	r3, r3
 800092a:	b21a      	sxth	r2, r3
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <PS2DMA_ProcessingData+0x104>)
 800092e:	801a      	strh	r2, [r3, #0]
			joyLeftVer = PS2Data[5] - joyLeftMidVer;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <PS2DMA_ProcessingData+0xe8>)
 8000932:	795b      	ldrb	r3, [r3, #5]
 8000934:	b29a      	uxth	r2, r3
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <PS2DMA_ProcessingData+0x108>)
 8000938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093c:	b29b      	uxth	r3, r3
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	b29b      	uxth	r3, r3
 8000942:	b21a      	sxth	r2, r3
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <PS2DMA_ProcessingData+0x10c>)
 8000946:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <PS2DMA_ProcessingData+0xe4>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2baa      	cmp	r3, #170	; 0xaa
 800094e:	d106      	bne.n	800095e <PS2DMA_ProcessingData+0xc2>
		PS2CheckbyteCount++;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <PS2DMA_ProcessingData+0xdc>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <PS2DMA_ProcessingData+0xdc>)
 800095a:	701a      	strb	r2, [r3, #0]
	else
		if(PS2CheckbyteCount != 4)
			PS2CheckbyteCount = 0;
}
 800095c:	e006      	b.n	800096c <PS2DMA_ProcessingData+0xd0>
		if(PS2CheckbyteCount != 4)
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <PS2DMA_ProcessingData+0xdc>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b04      	cmp	r3, #4
 8000964:	d002      	beq.n	800096c <PS2DMA_ProcessingData+0xd0>
			PS2CheckbyteCount = 0;
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <PS2DMA_ProcessingData+0xdc>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	2000003c 	.word	0x2000003c
 800097c:	200001a9 	.word	0x200001a9
 8000980:	20000300 	.word	0x20000300
 8000984:	20000118 	.word	0x20000118
 8000988:	20000278 	.word	0x20000278
 800098c:	20000006 	.word	0x20000006
 8000990:	20000110 	.word	0x20000110
 8000994:	20000004 	.word	0x20000004
 8000998:	200002a0 	.word	0x200002a0
 800099c:	20000002 	.word	0x20000002
 80009a0:	2000036c 	.word	0x2000036c
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000380 	.word	0x20000380

080009ac <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <compassReset+0x24>)
 80009b2:	2261      	movs	r2, #97	; 0x61
 80009b4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80009b6:	2201      	movs	r2, #1
 80009b8:	4905      	ldr	r1, [pc, #20]	; (80009d0 <compassReset+0x24>)
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <compassReset+0x28>)
 80009bc:	f003 fb7f 	bl	80040be <HAL_UART_Transmit_IT>
	wait4CompassTx();
 80009c0:	f000 f830 	bl	8000a24 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <compassReset+0x24>)
 80009c6:	227a      	movs	r2, #122	; 0x7a
 80009c8:	701a      	strb	r2, [r3, #0]
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000318 	.word	0x20000318

080009d8 <compassRequest>:
void compassRequest(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	compassTxPacket[0]='z';
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <compassRequest+0x18>)
 80009de:	227a      	movs	r2, #122	; 0x7a
 80009e0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80009e2:	2201      	movs	r2, #1
 80009e4:	4902      	ldr	r1, [pc, #8]	; (80009f0 <compassRequest+0x18>)
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <compassRequest+0x1c>)
 80009e8:	f003 fb69 	bl	80040be <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000318 	.word	0x20000318

080009f8 <compassDecode>:
//	HAL_UART_Receive(&compass, compassRxPacket, 2, 50);

	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}
void compassDecode(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <compassDecode+0x24>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	021b      	lsls	r3, r3, #8
 8000a02:	b21a      	sxth	r2, r3
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <compassDecode+0x24>)
 8000a06:	785b      	ldrb	r3, [r3, #1]
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <compassDecode+0x28>)
 8000a10:	801a      	strh	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20000120 	.word	0x20000120
 8000a20:	2000019e 	.word	0x2000019e

08000a24 <wait4CompassTx>:
void wait4CompassTx(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 8000a28:	e004      	b.n	8000a34 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <wait4CompassTx+0x28>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <wait4CompassTx+0x28>)
 8000a32:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <wait4CompassTx+0x2c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0f6      	beq.n	8000a2a <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <wait4CompassTx+0x2c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	20000388 	.word	0x20000388
 8000a50:	20000368 	.word	0x20000368

08000a54 <peripheralPWM_Init>:
uint8_t motor3Dir;
uint8_t motor4Dir;


void peripheralPWM_Init()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&motor1, motor1_channel);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4808      	ldr	r0, [pc, #32]	; (8000a7c <peripheralPWM_Init+0x28>)
 8000a5c:	f002 fc04 	bl	8003268 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor2, motor2_channel);
 8000a60:	2104      	movs	r1, #4
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <peripheralPWM_Init+0x28>)
 8000a64:	f002 fc00 	bl	8003268 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor3, motor3_channel);
 8000a68:	2108      	movs	r1, #8
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <peripheralPWM_Init+0x2c>)
 8000a6c:	f002 fbfc 	bl	8003268 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor4, motor4_channel);	
 8000a70:	210c      	movs	r1, #12
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <peripheralPWM_Init+0x2c>)
 8000a74:	f002 fbf8 	bl	8003268 <HAL_TIM_PWM_Start>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200000b8 	.word	0x200000b8
 8000a80:	200002b0 	.word	0x200002b0

08000a84 <controlMotor1>:

void controlMotor1(int _speed)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db05      	blt.n	8000a9e <controlMotor1+0x1a>
	{
		HAL_GPIO_WritePin(motor1Dir_GPIO_Port, motor1Dir_Pin, CCW);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2101      	movs	r1, #1
 8000a96:	481b      	ldr	r0, [pc, #108]	; (8000b04 <controlMotor1+0x80>)
 8000a98:	f001 fecc 	bl	8002834 <HAL_GPIO_WritePin>
 8000a9c:	e004      	b.n	8000aa8 <controlMotor1+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor1Dir_GPIO_Port, motor1Dir_Pin, FCW);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4818      	ldr	r0, [pc, #96]	; (8000b04 <controlMotor1+0x80>)
 8000aa4:	f001 fec6 	bl	8002834 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	dc05      	bgt.n	8000aba <controlMotor1+0x36>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f113 0f03 	cmn.w	r3, #3
 8000ab4:	db01      	blt.n	8000aba <controlMotor1+0x36>
		_speed = 3;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2bfa      	cmp	r3, #250	; 0xfa
 8000abe:	dd01      	ble.n	8000ac4 <controlMotor1+0x40>
	{
		_speed = 250;
 8000ac0:	23fa      	movs	r3, #250	; 0xfa
 8000ac2:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000aca:	da02      	bge.n	8000ad2 <controlMotor1+0x4e>
	{
		_speed = -250;
 8000acc:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000ad0:	607b      	str	r3, [r7, #4]
	}
	debugSpeed1 = abs(_speed);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bfb8      	it	lt
 8000ad8:	425b      	neglt	r3, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fcc6 	bl	800046c <__aeabi_i2d>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <controlMotor1+0x84>)
 8000ae6:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor1, motor1_channel, abs(_speed));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000af0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <controlMotor1+0x88>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd90      	pop	{r4, r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	20000140 	.word	0x20000140
 8000b0c:	200000b8 	.word	0x200000b8

08000b10 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db05      	blt.n	8000b2a <controlMotor2+0x1a>
	{
		HAL_GPIO_WritePin(motor2Dir_GPIO_Port, motor2Dir_Pin, CCW);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2102      	movs	r1, #2
 8000b22:	481b      	ldr	r0, [pc, #108]	; (8000b90 <controlMotor2+0x80>)
 8000b24:	f001 fe86 	bl	8002834 <HAL_GPIO_WritePin>
 8000b28:	e004      	b.n	8000b34 <controlMotor2+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor2Dir_GPIO_Port, motor2Dir_Pin, FCW);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <controlMotor2+0x80>)
 8000b30:	f001 fe80 	bl	8002834 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	dc05      	bgt.n	8000b46 <controlMotor2+0x36>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f113 0f03 	cmn.w	r3, #3
 8000b40:	db01      	blt.n	8000b46 <controlMotor2+0x36>
			_speed = 3;
 8000b42:	2303      	movs	r3, #3
 8000b44:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2bfa      	cmp	r3, #250	; 0xfa
 8000b4a:	dd01      	ble.n	8000b50 <controlMotor2+0x40>
	{
		_speed = 250;
 8000b4c:	23fa      	movs	r3, #250	; 0xfa
 8000b4e:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000b56:	da02      	bge.n	8000b5e <controlMotor2+0x4e>
	{
		_speed = -250;
 8000b58:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000b5c:	607b      	str	r3, [r7, #4]
	}
	debugSpeed2 = abs(_speed);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	bfb8      	it	lt
 8000b64:	425b      	neglt	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fc80 	bl	800046c <__aeabi_i2d>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	460c      	mov	r4, r1
 8000b70:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <controlMotor2+0x84>)
 8000b72:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor2, motor2_channel, abs(_speed));
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b7c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <controlMotor2+0x88>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	20000040 	.word	0x20000040
 8000b98:	200000b8 	.word	0x200000b8

08000b9c <controlMotor3>:
void controlMotor3(int _speed)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db05      	blt.n	8000bb6 <controlMotor3+0x1a>
	{
		HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, CCW);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2108      	movs	r1, #8
 8000bae:	481b      	ldr	r0, [pc, #108]	; (8000c1c <controlMotor3+0x80>)
 8000bb0:	f001 fe40 	bl	8002834 <HAL_GPIO_WritePin>
 8000bb4:	e004      	b.n	8000bc0 <controlMotor3+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, FCW);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	4818      	ldr	r0, [pc, #96]	; (8000c1c <controlMotor3+0x80>)
 8000bbc:	f001 fe3a 	bl	8002834 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	dc05      	bgt.n	8000bd2 <controlMotor3+0x36>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f113 0f03 	cmn.w	r3, #3
 8000bcc:	db01      	blt.n	8000bd2 <controlMotor3+0x36>
				_speed = 3;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2bfa      	cmp	r3, #250	; 0xfa
 8000bd6:	dd01      	ble.n	8000bdc <controlMotor3+0x40>
	{
		_speed = 250;
 8000bd8:	23fa      	movs	r3, #250	; 0xfa
 8000bda:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000be2:	da02      	bge.n	8000bea <controlMotor3+0x4e>
	{
		_speed = -250;
 8000be4:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000be8:	607b      	str	r3, [r7, #4]
	}
	debugSpeed3 = abs(_speed);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	bfb8      	it	lt
 8000bf0:	425b      	neglt	r3, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fc3a 	bl	800046c <__aeabi_i2d>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	460c      	mov	r4, r1
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <controlMotor3+0x84>)
 8000bfe:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor3, motor3_channel, abs(_speed));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c08:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <controlMotor3+0x88>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	20000130 	.word	0x20000130
 8000c24:	200002b0 	.word	0x200002b0

08000c28 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	db05      	blt.n	8000c42 <controlMotor4+0x1a>
	{
		HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, CCW);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2110      	movs	r1, #16
 8000c3a:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <controlMotor4+0x80>)
 8000c3c:	f001 fdfa 	bl	8002834 <HAL_GPIO_WritePin>
 8000c40:	e004      	b.n	8000c4c <controlMotor4+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, FCW);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2110      	movs	r1, #16
 8000c46:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <controlMotor4+0x80>)
 8000c48:	f001 fdf4 	bl	8002834 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	dc05      	bgt.n	8000c5e <controlMotor4+0x36>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f113 0f03 	cmn.w	r3, #3
 8000c58:	db01      	blt.n	8000c5e <controlMotor4+0x36>
		_speed = 3;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2bfa      	cmp	r3, #250	; 0xfa
 8000c62:	dd01      	ble.n	8000c68 <controlMotor4+0x40>
	{
		_speed = 250;
 8000c64:	23fa      	movs	r3, #250	; 0xfa
 8000c66:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000c6e:	da02      	bge.n	8000c76 <controlMotor4+0x4e>
	{
		_speed = -250;
 8000c70:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000c74:	607b      	str	r3, [r7, #4]
	}
	debugSpeed4 = abs(_speed);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bfb8      	it	lt
 8000c7c:	425b      	neglt	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fbf4 	bl	800046c <__aeabi_i2d>
 8000c84:	4603      	mov	r3, r0
 8000c86:	460c      	mov	r4, r1
 8000c88:	4a08      	ldr	r2, [pc, #32]	; (8000cac <controlMotor4+0x84>)
 8000c8a:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor4, motor4_channel, abs(_speed));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c94:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <controlMotor4+0x88>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd90      	pop	{r4, r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40020c00 	.word	0x40020c00
 8000cac:	20000210 	.word	0x20000210
 8000cb0:	200002b0 	.word	0x200002b0

08000cb4 <testPWM>:

void testPWM(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
  for(int i = -1; i > -255; --i)
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	e016      	b.n	8000cf0 <testPWM+0x3c>
  {
	  controlMotor1(i);
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff fede 	bl	8000a84 <controlMotor1>
	  controlMotor2(i);
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff ff21 	bl	8000b10 <controlMotor2>
	  controlMotor3(i);
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f7ff ff64 	bl	8000b9c <controlMotor3>
	  controlMotor4(i);
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f7ff ffa7 	bl	8000c28 <controlMotor4>
	  HAL_Delay(20);
 8000cda:	2014      	movs	r0, #20
 8000cdc:	f000 ff4c 	bl	8001b78 <HAL_Delay>
	  tracking++;
 8000ce0:	4b33      	ldr	r3, [pc, #204]	; (8000db0 <testPWM+0xfc>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4a32      	ldr	r2, [pc, #200]	; (8000db0 <testPWM+0xfc>)
 8000ce8:	6013      	str	r3, [r2, #0]
  for(int i = -1; i > -255; --i)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f113 0ffe 	cmn.w	r3, #254	; 0xfe
 8000cf6:	dae4      	bge.n	8000cc2 <testPWM+0xe>
  }
  for(int i = -255; i < 0; ++i)
 8000cf8:	f06f 03fe 	mvn.w	r3, #254	; 0xfe
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	e016      	b.n	8000d2e <testPWM+0x7a>
  {
	  controlMotor1(i);
 8000d00:	68b8      	ldr	r0, [r7, #8]
 8000d02:	f7ff febf 	bl	8000a84 <controlMotor1>
	  controlMotor2(i);
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f7ff ff02 	bl	8000b10 <controlMotor2>
	  controlMotor3(i);
 8000d0c:	68b8      	ldr	r0, [r7, #8]
 8000d0e:	f7ff ff45 	bl	8000b9c <controlMotor3>
	  controlMotor4(i);
 8000d12:	68b8      	ldr	r0, [r7, #8]
 8000d14:	f7ff ff88 	bl	8000c28 <controlMotor4>
	  HAL_Delay(20);
 8000d18:	2014      	movs	r0, #20
 8000d1a:	f000 ff2d 	bl	8001b78 <HAL_Delay>
	  tracking++;
 8000d1e:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <testPWM+0xfc>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <testPWM+0xfc>)
 8000d26:	6013      	str	r3, [r2, #0]
  for(int i = -255; i < 0; ++i)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	dbe5      	blt.n	8000d00 <testPWM+0x4c>
  }
  for(int i = 1 ; i < 255; ++i)
 8000d34:	2301      	movs	r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	e016      	b.n	8000d68 <testPWM+0xb4>
  {
	  controlMotor1(i);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fea2 	bl	8000a84 <controlMotor1>
	  controlMotor2(i);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff fee5 	bl	8000b10 <controlMotor2>
	  controlMotor3(i);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff28 	bl	8000b9c <controlMotor3>
	  controlMotor4(i);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff6b 	bl	8000c28 <controlMotor4>
	  HAL_Delay(20);
 8000d52:	2014      	movs	r0, #20
 8000d54:	f000 ff10 	bl	8001b78 <HAL_Delay>
	  tracking++;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <testPWM+0xfc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <testPWM+0xfc>)
 8000d60:	6013      	str	r3, [r2, #0]
  for(int i = 1 ; i < 255; ++i)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3301      	adds	r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2bfe      	cmp	r3, #254	; 0xfe
 8000d6c:	dde5      	ble.n	8000d3a <testPWM+0x86>
  }
  for(int i = 255; i > 0; --i)
 8000d6e:	23ff      	movs	r3, #255	; 0xff
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	e016      	b.n	8000da2 <testPWM+0xee>
  {
	  controlMotor1(i);
 8000d74:	6838      	ldr	r0, [r7, #0]
 8000d76:	f7ff fe85 	bl	8000a84 <controlMotor1>
	  controlMotor2(i);
 8000d7a:	6838      	ldr	r0, [r7, #0]
 8000d7c:	f7ff fec8 	bl	8000b10 <controlMotor2>
	  controlMotor3(i);
 8000d80:	6838      	ldr	r0, [r7, #0]
 8000d82:	f7ff ff0b 	bl	8000b9c <controlMotor3>
	  controlMotor4(i);
 8000d86:	6838      	ldr	r0, [r7, #0]
 8000d88:	f7ff ff4e 	bl	8000c28 <controlMotor4>
	  HAL_Delay(20);
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	f000 fef3 	bl	8001b78 <HAL_Delay>
	  tracking++;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <testPWM+0xfc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <testPWM+0xfc>)
 8000d9a:	6013      	str	r3, [r2, #0]
  for(int i = 255; i > 0; --i)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dce5      	bgt.n	8000d74 <testPWM+0xc0>
  }
}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000029c 	.word	0x2000029c

08000db4 <handControl_Init>:
int handElapsedPulses;

uint32_t delayTick001;

void handControl_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&hand);
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <handControl_Init+0x1c>)
 8000dba:	f002 f9fc 	bl	80031b6 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(handEn_GPIO_Port, handEn_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <handControl_Init+0x20>)
 8000dc6:	f001 fd35 	bl	8002834 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000015c 	.word	0x2000015c
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <HAL_TIM_PeriodElapsedCallback>:
	handEn = 1;
	handStatus = _handStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	if(htim->Instance == hand.Instance)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d17f      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x114>
	{
		delayTick001++;
 8000dec:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	4a41      	ldr	r2, [pc, #260]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000df4:	6013      	str	r3, [r2, #0]
		if(handEn == 1)
 8000df6:	4b41      	ldr	r3, [pc, #260]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d176      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x114>
		{
			if(handStatus == HAND_STATUS_READY)
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d122      	bne.n	8000e4c <HAL_TIM_PeriodElapsedCallback+0x74>
			{
				HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, handForward);		//cấu hình chân handDir để tiến
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0c:	483d      	ldr	r0, [pc, #244]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e0e:	f001 fd11 	bl	8002834 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(handPul_GPIO_Port, handPul_Pin);					//tạo xung chân handPul
 8000e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e16:	483b      	ldr	r0, [pc, #236]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e18:	f001 fd25 	bl	8002866 <HAL_GPIO_TogglePin>
				trackingHand++;
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3301      	adds	r3, #1
 8000e22:	4a39      	ldr	r2, [pc, #228]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000e24:	6013      	str	r3, [r2, #0]
				handElapsedPulses++;												//đếm số xung
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a37      	ldr	r2, [pc, #220]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e2e:	6013      	str	r3, [r2, #0]
				debug_HAND_STATUS_READY = handElapsedPulses;
 8000e30:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a36      	ldr	r2, [pc, #216]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000e36:	6013      	str	r3, [r2, #0]
				if (handElapsedPulses >= HAND_PUL_RUNUP)
 8000e38:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2bc7      	cmp	r3, #199	; 0xc7
 8000e3e:	dd05      	ble.n	8000e4c <HAL_TIM_PeriodElapsedCallback+0x74>
				{
					handEn = 0;														//kết thúc quá trình điều khiển
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
					handElapsedPulses = 0;											//reset số xung
 8000e46:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
				}
			}
			if(handStatus == HAND_STATUS_PUT)
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d123      	bne.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0xc4>
			{
				HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, handForward);		//cấu hình chân handDir để tiến
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5a:	482a      	ldr	r0, [pc, #168]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e5c:	f001 fcea 	bl	8002834 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(handPul_GPIO_Port, handPul_Pin);					//tạo xung chân handPul
 8000e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e64:	4827      	ldr	r0, [pc, #156]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e66:	f001 fcfe 	bl	8002866 <HAL_GPIO_TogglePin>
				trackingHand++;
 8000e6a:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000e72:	6013      	str	r3, [r2, #0]
				handElapsedPulses++;												//đếm số xung
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a24      	ldr	r2, [pc, #144]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e7c:	6013      	str	r3, [r2, #0]
				debug_HAND_STATUS_PUT = handElapsedPulses;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a24      	ldr	r2, [pc, #144]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000e84:	6013      	str	r3, [r2, #0]
				if (handElapsedPulses >= HAND_PUL_RUNUP2)
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000e8e:	db05      	blt.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0xc4>
				{
					handEn = 0;														//kết thúc quá trình điều khiển
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
					handElapsedPulses = 0;											//reset số xung
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
				}
			}
			if(handStatus == HAND_STATUS_WAIT)
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d123      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x114>
			{
				HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, handBackward);	//cấu hình chân handDir để lùi
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eaa:	4816      	ldr	r0, [pc, #88]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000eac:	f001 fcc2 	bl	8002834 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(handPul_GPIO_Port, handPul_Pin);					//tạo xung chân legPul
 8000eb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000eb6:	f001 fcd6 	bl	8002866 <HAL_GPIO_TogglePin>
				trackingHand++;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000ec2:	6013      	str	r3, [r2, #0]
				handElapsedPulses++;												//đếm số xung
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ecc:	6013      	str	r3, [r2, #0]
				debug_HAND_STATUS_WAIT = handElapsedPulses;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ed4:	6013      	str	r3, [r2, #0]
				if (handElapsedPulses >= HAND_PUL_END)
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000ede:	db05      	blt.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x114>
				{
					handEn = 0;														//kết thúc quá trình điều khiển
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
					handElapsedPulses = 0;											//reset số xung
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000015c 	.word	0x2000015c
 8000ef8:	2000028c 	.word	0x2000028c
 8000efc:	20000378 	.word	0x20000378
 8000f00:	20000358 	.word	0x20000358
 8000f04:	40020400 	.word	0x40020400
 8000f08:	20000384 	.word	0x20000384
 8000f0c:	20000108 	.word	0x20000108
 8000f10:	20000308 	.word	0x20000308
 8000f14:	2000010c 	.word	0x2000010c
 8000f18:	2000004c 	.word	0x2000004c

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f000 fdb8 	bl	8001a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f81a 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f000 fab2 	bl	8001490 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f2c:	f000 fa7a 	bl	8001424 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f30:	f000 fa4e 	bl	80013d0 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8000f34:	f000 fa22 	bl	800137c <MX_UART4_Init>
  MX_TIM1_Init();
 8000f38:	f000 f87a 	bl	8001030 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f3c:	f000 f972 	bl	8001224 <MX_TIM8_Init>
  MX_TIM5_Init();
 8000f40:	f000 f922 	bl	8001188 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8000f44:	f7ff fc94 	bl	8000870 <peripheralUART_Init>
  peripheralPWM_Init();
 8000f48:	f7ff fd84 	bl	8000a54 <peripheralPWM_Init>
  handControl_Init();
 8000f4c:	f7ff ff32 	bl	8000db4 <handControl_Init>
  compassReset();
 8000f50:	f7ff fd2c 	bl	80009ac <compassReset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  testPWM();
 8000f54:	f7ff feae 	bl	8000cb4 <testPWM>
 8000f58:	e7fc      	b.n	8000f54 <main+0x38>
	...

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	; 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 ffee 	bl	8004f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b28      	ldr	r3, [pc, #160]	; (8001028 <SystemClock_Config+0xcc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a27      	ldr	r2, [pc, #156]	; (8001028 <SystemClock_Config+0xcc>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b25      	ldr	r3, [pc, #148]	; (8001028 <SystemClock_Config+0xcc>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <SystemClock_Config+0xd0>)
 8000fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <SystemClock_Config+0xd0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fd0:	23a8      	movs	r3, #168	; 0xa8
 8000fd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fc5b 	bl	800289c <HAL_RCC_OscConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fec:	f000 fad4 	bl	8001598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001006:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2105      	movs	r1, #5
 800100e:	4618      	mov	r0, r3
 8001010:	f001 feb4 	bl	8002d7c <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800101a:	f000 fabd 	bl	8001598 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3750      	adds	r7, #80	; 0x50
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b096      	sub	sp, #88	; 0x58
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
 8001060:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2220      	movs	r2, #32
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f003 ff6f 	bl	8004f4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <MX_TIM1_Init+0x150>)
 8001070:	4a44      	ldr	r2, [pc, #272]	; (8001184 <MX_TIM1_Init+0x154>)
 8001072:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8001074:	4b42      	ldr	r3, [pc, #264]	; (8001180 <MX_TIM1_Init+0x150>)
 8001076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800107a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b40      	ldr	r3, [pc, #256]	; (8001180 <MX_TIM1_Init+0x150>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001082:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <MX_TIM1_Init+0x150>)
 8001084:	22ff      	movs	r2, #255	; 0xff
 8001086:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001088:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <MX_TIM1_Init+0x150>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800108e:	4b3c      	ldr	r3, [pc, #240]	; (8001180 <MX_TIM1_Init+0x150>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001094:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <MX_TIM1_Init+0x150>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800109a:	4839      	ldr	r0, [pc, #228]	; (8001180 <MX_TIM1_Init+0x150>)
 800109c:	f002 f860 	bl	8003160 <HAL_TIM_Base_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010a6:	f000 fa77 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010b4:	4619      	mov	r1, r3
 80010b6:	4832      	ldr	r0, [pc, #200]	; (8001180 <MX_TIM1_Init+0x150>)
 80010b8:	f002 fae2 	bl	8003680 <HAL_TIM_ConfigClockSource>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010c2:	f000 fa69 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010c6:	482e      	ldr	r0, [pc, #184]	; (8001180 <MX_TIM1_Init+0x150>)
 80010c8:	f002 f899 	bl	80031fe <HAL_TIM_PWM_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010d2:	f000 fa61 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010e2:	4619      	mov	r1, r3
 80010e4:	4826      	ldr	r0, [pc, #152]	; (8001180 <MX_TIM1_Init+0x150>)
 80010e6:	f002 febb 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010f0:	f000 fa52 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f4:	2360      	movs	r3, #96	; 0x60
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80010fc:	2302      	movs	r3, #2
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	2208      	movs	r2, #8
 8001116:	4619      	mov	r1, r3
 8001118:	4819      	ldr	r0, [pc, #100]	; (8001180 <MX_TIM1_Init+0x150>)
 800111a:	f002 f9eb 	bl	80034f4 <HAL_TIM_PWM_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001124:	f000 fa38 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	220c      	movs	r2, #12
 800112e:	4619      	mov	r1, r3
 8001130:	4813      	ldr	r0, [pc, #76]	; (8001180 <MX_TIM1_Init+0x150>)
 8001132:	f002 f9df 	bl	80034f4 <HAL_TIM_PWM_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800113c:	f000 fa2c 	bl	8001598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <MX_TIM1_Init+0x150>)
 8001162:	f002 fef9 	bl	8003f58 <HAL_TIMEx_ConfigBreakDeadTime>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800116c:	f000 fa14 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <MX_TIM1_Init+0x150>)
 8001172:	f000 fa95 	bl	80016a0 <HAL_TIM_MspPostInit>

}
 8001176:	bf00      	nop
 8001178:	3758      	adds	r7, #88	; 0x58
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200002b0 	.word	0x200002b0
 8001184:	40010000 	.word	0x40010000

08001188 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <MX_TIM5_Init+0x94>)
 80011a6:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <MX_TIM5_Init+0x98>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_TIM5_Init+0x94>)
 80011ac:	f240 3247 	movw	r2, #839	; 0x347
 80011b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_TIM5_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_TIM5_Init+0x94>)
 80011ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011be:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_TIM5_Init+0x94>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_TIM5_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <MX_TIM5_Init+0x94>)
 80011ce:	f001 ffc7 	bl	8003160 <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80011d8:	f000 f9de 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	4619      	mov	r1, r3
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <MX_TIM5_Init+0x94>)
 80011ea:	f002 fa49 	bl	8003680 <HAL_TIM_ConfigClockSource>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80011f4:	f000 f9d0 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_TIM5_Init+0x94>)
 8001206:	f002 fe2b 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001210:	f000 f9c2 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000015c 	.word	0x2000015c
 8001220:	40000c00 	.word	0x40000c00

08001224 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b096      	sub	sp, #88	; 0x58
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	615a      	str	r2, [r3, #20]
 8001254:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2220      	movs	r2, #32
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f003 fe75 	bl	8004f4c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001262:	4b44      	ldr	r3, [pc, #272]	; (8001374 <MX_TIM8_Init+0x150>)
 8001264:	4a44      	ldr	r2, [pc, #272]	; (8001378 <MX_TIM8_Init+0x154>)
 8001266:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1000;
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <MX_TIM8_Init+0x150>)
 800126a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800126e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b40      	ldr	r3, [pc, #256]	; (8001374 <MX_TIM8_Init+0x150>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 8001276:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <MX_TIM8_Init+0x150>)
 8001278:	22ff      	movs	r2, #255	; 0xff
 800127a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <MX_TIM8_Init+0x150>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001282:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <MX_TIM8_Init+0x150>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <MX_TIM8_Init+0x150>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800128e:	4839      	ldr	r0, [pc, #228]	; (8001374 <MX_TIM8_Init+0x150>)
 8001290:	f001 ff66 	bl	8003160 <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800129a:	f000 f97d 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012a8:	4619      	mov	r1, r3
 80012aa:	4832      	ldr	r0, [pc, #200]	; (8001374 <MX_TIM8_Init+0x150>)
 80012ac:	f002 f9e8 	bl	8003680 <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80012b6:	f000 f96f 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012ba:	482e      	ldr	r0, [pc, #184]	; (8001374 <MX_TIM8_Init+0x150>)
 80012bc:	f001 ff9f 	bl	80031fe <HAL_TIM_PWM_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80012c6:	f000 f967 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d6:	4619      	mov	r1, r3
 80012d8:	4826      	ldr	r0, [pc, #152]	; (8001374 <MX_TIM8_Init+0x150>)
 80012da:	f002 fdc1 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80012e4:	f000 f958 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e8:	2360      	movs	r3, #96	; 0x60
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80012f0:	2302      	movs	r3, #2
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f4:	2300      	movs	r3, #0
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	2200      	movs	r2, #0
 800130a:	4619      	mov	r1, r3
 800130c:	4819      	ldr	r0, [pc, #100]	; (8001374 <MX_TIM8_Init+0x150>)
 800130e:	f002 f8f1 	bl	80034f4 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001318:	f000 f93e 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	2204      	movs	r2, #4
 8001322:	4619      	mov	r1, r3
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <MX_TIM8_Init+0x150>)
 8001326:	f002 f8e5 	bl	80034f4 <HAL_TIM_PWM_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001330:	f000 f932 	bl	8001598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM8_Init+0x150>)
 8001356:	f002 fdff 	bl	8003f58 <HAL_TIMEx_ConfigBreakDeadTime>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001360:	f000 f91a 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM8_Init+0x150>)
 8001366:	f000 f99b 	bl	80016a0 <HAL_TIM_MspPostInit>

}
 800136a:	bf00      	nop
 800136c:	3758      	adds	r7, #88	; 0x58
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200000b8 	.word	0x200000b8
 8001378:	40010400 	.word	0x40010400

0800137c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_UART4_Init+0x4c>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_UART4_Init+0x50>)
 8001384:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_UART4_Init+0x4c>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_UART4_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_UART4_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_UART4_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_UART4_Init+0x4c>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_UART4_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_UART4_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_UART4_Init+0x4c>)
 80013b4:	f002 fe36 	bl	8004024 <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80013be:	f000 f8eb 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000318 	.word	0x20000318
 80013cc:	40004c00 	.word	0x40004c00

080013d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <MX_USART1_UART_Init+0x50>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013dc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80013e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_USART1_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_USART1_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_USART1_UART_Init+0x4c>)
 8001408:	f002 fe0c 	bl	8004024 <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001412:	f000 f8c1 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000228 	.word	0x20000228
 8001420:	40011000 	.word	0x40011000

08001424 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_DMA_Init+0x68>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <MX_DMA_Init+0x68>)
 8001434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_DMA_Init+0x68>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_DMA_Init+0x68>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <MX_DMA_Init+0x68>)
 8001450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <MX_DMA_Init+0x68>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	200d      	movs	r0, #13
 8001468:	f000 fc83 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800146c:	200d      	movs	r0, #13
 800146e:	f000 fc9c 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	203a      	movs	r0, #58	; 0x3a
 8001478:	f000 fc7b 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800147c:	203a      	movs	r0, #58	; 0x3a
 800147e:	f000 fc94 	bl	8001daa <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b38      	ldr	r3, [pc, #224]	; (800158c <MX_GPIO_Init+0xfc>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a37      	ldr	r2, [pc, #220]	; (800158c <MX_GPIO_Init+0xfc>)
 80014b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b35      	ldr	r3, [pc, #212]	; (800158c <MX_GPIO_Init+0xfc>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <MX_GPIO_Init+0xfc>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a30      	ldr	r2, [pc, #192]	; (800158c <MX_GPIO_Init+0xfc>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <MX_GPIO_Init+0xfc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <MX_GPIO_Init+0xfc>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a29      	ldr	r2, [pc, #164]	; (800158c <MX_GPIO_Init+0xfc>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b27      	ldr	r3, [pc, #156]	; (800158c <MX_GPIO_Init+0xfc>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <MX_GPIO_Init+0xfc>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a22      	ldr	r2, [pc, #136]	; (800158c <MX_GPIO_Init+0xfc>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_GPIO_Init+0xfc>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_GPIO_Init+0xfc>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a1b      	ldr	r2, [pc, #108]	; (800158c <MX_GPIO_Init+0xfc>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_GPIO_Init+0xfc>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, handPul_Pin|handDir_Pin|handEn_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001538:	4815      	ldr	r0, [pc, #84]	; (8001590 <MX_GPIO_Init+0x100>)
 800153a:	f001 f97b 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, motor1Dir_Pin|motor2Dir_Pin|motor3Dir_Pin|motor4Dir_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	211b      	movs	r1, #27
 8001542:	4814      	ldr	r0, [pc, #80]	; (8001594 <MX_GPIO_Init+0x104>)
 8001544:	f001 f976 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : handPul_Pin handDir_Pin handEn_Pin */
  GPIO_InitStruct.Pin = handPul_Pin|handDir_Pin|handEn_Pin;
 8001548:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <MX_GPIO_Init+0x100>)
 8001562:	f000 ffcd 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor1Dir_Pin motor2Dir_Pin motor3Dir_Pin motor4Dir_Pin */
  GPIO_InitStruct.Pin = motor1Dir_Pin|motor2Dir_Pin|motor3Dir_Pin|motor4Dir_Pin;
 8001566:	231b      	movs	r3, #27
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_GPIO_Init+0x104>)
 800157e:	f000 ffbf 	bl	8002500 <HAL_GPIO_Init>

}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40020400 	.word	0x40020400
 8001594:	40020c00 	.word	0x40020c00

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <HAL_MspInit+0x4c>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_MspInit+0x4c>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a22      	ldr	r2, [pc, #136]	; (8001690 <HAL_TIM_Base_MspInit+0x98>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10e      	bne.n	8001628 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_TIM_Base_MspInit+0x9c>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a20      	ldr	r2, [pc, #128]	; (8001694 <HAL_TIM_Base_MspInit+0x9c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_TIM_Base_MspInit+0x9c>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001626:	e02e      	b.n	8001686 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_TIM_Base_MspInit+0xa0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d116      	bne.n	8001660 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_TIM_Base_MspInit+0x9c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <HAL_TIM_Base_MspInit+0x9c>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_TIM_Base_MspInit+0x9c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2032      	movs	r0, #50	; 0x32
 8001654:	f000 fb8d 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001658:	2032      	movs	r0, #50	; 0x32
 800165a:	f000 fba6 	bl	8001daa <HAL_NVIC_EnableIRQ>
}
 800165e:	e012      	b.n	8001686 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_TIM_Base_MspInit+0xa4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10d      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_TIM_Base_MspInit+0x9c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_TIM_Base_MspInit+0x9c>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_TIM_Base_MspInit+0x9c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40010000 	.word	0x40010000
 8001694:	40023800 	.word	0x40023800
 8001698:	40000c00 	.word	0x40000c00
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a24      	ldr	r2, [pc, #144]	; (8001750 <HAL_TIM_MspPostInit+0xb0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d11f      	bne.n	8001702 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_TIM_MspPostInit+0xb4>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a22      	ldr	r2, [pc, #136]	; (8001754 <HAL_TIM_MspPostInit+0xb4>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_TIM_MspPostInit+0xb4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4817      	ldr	r0, [pc, #92]	; (8001758 <HAL_TIM_MspPostInit+0xb8>)
 80016fc:	f000 ff00 	bl	8002500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001700:	e022      	b.n	8001748 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <HAL_TIM_MspPostInit+0xbc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d11d      	bne.n	8001748 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_TIM_MspPostInit+0xb4>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <HAL_TIM_MspPostInit+0xb4>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_TIM_MspPostInit+0xb4>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001728:	23c0      	movs	r3, #192	; 0xc0
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001738:	2303      	movs	r3, #3
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <HAL_TIM_MspPostInit+0xc0>)
 8001744:	f000 fedc 	bl	8002500 <HAL_GPIO_Init>
}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40010000 	.word	0x40010000
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000
 800175c:	40010400 	.word	0x40010400
 8001760:	40020800 	.word	0x40020800

08001764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a65      	ldr	r2, [pc, #404]	; (8001918 <HAL_UART_MspInit+0x1b4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d164      	bne.n	8001850 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	4b64      	ldr	r3, [pc, #400]	; (800191c <HAL_UART_MspInit+0x1b8>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a63      	ldr	r2, [pc, #396]	; (800191c <HAL_UART_MspInit+0x1b8>)
 8001790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b61      	ldr	r3, [pc, #388]	; (800191c <HAL_UART_MspInit+0x1b8>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_UART_MspInit+0x1b8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a5c      	ldr	r2, [pc, #368]	; (800191c <HAL_UART_MspInit+0x1b8>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b5a      	ldr	r3, [pc, #360]	; (800191c <HAL_UART_MspInit+0x1b8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017d0:	2308      	movs	r3, #8
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4851      	ldr	r0, [pc, #324]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80017dc:	f000 fe90 	bl	8002500 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 80017e2:	4a51      	ldr	r2, [pc, #324]	; (8001928 <HAL_UART_MspInit+0x1c4>)
 80017e4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80017e6:	4b4f      	ldr	r3, [pc, #316]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 80017e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ec:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ee:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f4:	4b4b      	ldr	r3, [pc, #300]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017fa:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 80017fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001800:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001802:	4b48      	ldr	r3, [pc, #288]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001808:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800180e:	4b45      	ldr	r3, [pc, #276]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 8001810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001814:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001816:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800181c:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001822:	4840      	ldr	r0, [pc, #256]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 8001824:	f000 fadc 	bl	8001de0 <HAL_DMA_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800182e:	f7ff feb3 	bl	8001598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a3b      	ldr	r2, [pc, #236]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
 8001838:	4a3a      	ldr	r2, [pc, #232]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	2034      	movs	r0, #52	; 0x34
 8001844:	f000 fa95 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001848:	2034      	movs	r0, #52	; 0x34
 800184a:	f000 faae 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800184e:	e05f      	b.n	8001910 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a35      	ldr	r2, [pc, #212]	; (800192c <HAL_UART_MspInit+0x1c8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d15a      	bne.n	8001910 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_UART_MspInit+0x1b8>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a2e      	ldr	r2, [pc, #184]	; (800191c <HAL_UART_MspInit+0x1b8>)
 8001864:	f043 0310 	orr.w	r3, r3, #16
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_UART_MspInit+0x1b8>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <HAL_UART_MspInit+0x1b8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a27      	ldr	r2, [pc, #156]	; (800191c <HAL_UART_MspInit+0x1b8>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_UART_MspInit+0x1b8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001892:	23c0      	movs	r3, #192	; 0xc0
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a2:	2307      	movs	r3, #7
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	4820      	ldr	r0, [pc, #128]	; (8001930 <HAL_UART_MspInit+0x1cc>)
 80018ae:	f000 fe27 	bl	8002500 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 80018b4:	4a20      	ldr	r2, [pc, #128]	; (8001938 <HAL_UART_MspInit+0x1d4>)
 80018b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 80018ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 80018ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 80018e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018f4:	480f      	ldr	r0, [pc, #60]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 80018f6:	f000 fa73 	bl	8001de0 <HAL_DMA_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8001900:	f7ff fe4a 	bl	8001598 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_UART_MspInit+0x1d0>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001910:	bf00      	nop
 8001912:	3730      	adds	r7, #48	; 0x30
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40004c00 	.word	0x40004c00
 800191c:	40023800 	.word	0x40023800
 8001920:	40020800 	.word	0x40020800
 8001924:	20000050 	.word	0x20000050
 8001928:	40026040 	.word	0x40026040
 800192c:	40011000 	.word	0x40011000
 8001930:	40020400 	.word	0x40020400
 8001934:	200001b0 	.word	0x200001b0
 8001938:	40026440 	.word	0x40026440

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(compassGetDataPeriod > 5)
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <SysTick_Handler+0x2c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b05      	cmp	r3, #5
 8001996:	d905      	bls.n	80019a4 <SysTick_Handler+0x18>
	  {
		  compassGetDataPeriod = 0;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <SysTick_Handler+0x2c>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
		  compassRequest();
 800199e:	f7ff f81b 	bl	80009d8 <compassRequest>
 80019a2:	e005      	b.n	80019b0 <SysTick_Handler+0x24>
	  }
	  else
	  {
		  compassGetDataPeriod++;
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Handler+0x2c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b02      	ldr	r3, [pc, #8]	; (80019b8 <SysTick_Handler+0x2c>)
 80019ae:	701a      	strb	r2, [r3, #0]
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 f8c2 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000218 	.word	0x20000218

080019bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	compassDecode();
 80019c0:	f7ff f81a 	bl	80009f8 <compassDecode>
//	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <DMA1_Stream2_IRQHandler+0x14>)
 80019c6:	f000 fb33 	bl	8002030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000050 	.word	0x20000050

080019d4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <TIM5_IRQHandler+0x10>)
 80019da:	f001 fc83 	bl	80032e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000015c 	.word	0x2000015c

080019e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <UART4_IRQHandler+0x10>)
 80019ee:	f002 fc2b 	bl	8004248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000318 	.word	0x20000318

080019fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	PS2DMA_ProcessingData();
 8001a00:	f7fe ff4c 	bl	800089c <PS2DMA_ProcessingData>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <DMA2_Stream2_IRQHandler+0x14>)
 8001a06:	f000 fb13 	bl	8002030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200001b0 	.word	0x200001b0

08001a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <SystemInit+0x28>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <SystemInit+0x28>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SystemInit+0x28>)
 8001a2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a2e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a46:	e003      	b.n	8001a50 <LoopCopyDataInit>

08001a48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a4e:	3104      	adds	r1, #4

08001a50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a50:	480b      	ldr	r0, [pc, #44]	; (8001a80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a58:	d3f6      	bcc.n	8001a48 <CopyDataInit>
  ldr  r2, =_sbss
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a5c:	e002      	b.n	8001a64 <LoopFillZerobss>

08001a5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a60:	f842 3b04 	str.w	r3, [r2], #4

08001a64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a68:	d3f9      	bcc.n	8001a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a6a:	f7ff ffd3 	bl	8001a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f003 fa49 	bl	8004f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a72:	f7ff fa53 	bl	8000f1c <main>
  bx  lr    
 8001a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a7c:	08004fa4 	.word	0x08004fa4
  ldr  r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a84:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8001a88:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8001a8c:	20000390 	.word	0x20000390

08001a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC_IRQHandler>
	...

08001a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <HAL_Init+0x40>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_Init+0x40>)
 8001aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <HAL_Init+0x40>)
 8001ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f94d 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 f808 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac8:	f7ff fd6e 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_InitTick+0x54>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x58>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f965 	bl	8001dc6 <HAL_SYSTICK_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00e      	b.n	8001b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d80a      	bhi.n	8001b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f000 f92d 	bl	8001d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <HAL_InitTick+0x5c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000014 	.word	0x20000014
 8001b30:	2000001c 	.word	0x2000001c
 8001b34:	20000018 	.word	0x20000018

08001b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_IncTick+0x20>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x24>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <HAL_IncTick+0x24>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	2000001c 	.word	0x2000001c
 8001b5c:	2000038c 	.word	0x2000038c

08001b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return uwTick;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_GetTick+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	2000038c 	.word	0x2000038c

08001b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff ffee 	bl	8001b60 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d005      	beq.n	8001b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_Delay+0x40>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b9e:	bf00      	nop
 8001ba0:	f7ff ffde 	bl	8001b60 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f7      	bhi.n	8001ba0 <HAL_Delay+0x28>
  {
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000001c 	.word	0x2000001c

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	; (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff29 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff3e 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff31 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffa2 	bl	8001d18 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff feb8 	bl	8001b60 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e099      	b.n	8001f30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1c:	e00f      	b.n	8001e3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1e:	f7ff fe9f 	bl	8001b60 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d908      	bls.n	8001e3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e078      	b.n	8001f30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e8      	bne.n	8001e1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <HAL_DMA_Init+0x158>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d107      	bne.n	8001ea8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d117      	bne.n	8001f02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00e      	beq.n	8001f02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fa91 	bl	800240c <DMA_CheckFifoParam>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001efe:	2301      	movs	r3, #1
 8001f00:	e016      	b.n	8001f30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa48 	bl	80023a0 <DMA_CalcBaseAndBitshift>
 8001f10:	4603      	mov	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	223f      	movs	r2, #63	; 0x3f
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	f010803f 	.word	0xf010803f

08001f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_DMA_Start_IT+0x26>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e040      	b.n	8001fe4 <HAL_DMA_Start_IT+0xa8>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d12f      	bne.n	8001fd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f9da 	bl	8002344 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	223f      	movs	r2, #63	; 0x3f
 8001f96:	409a      	lsls	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0216 	orr.w	r2, r2, #22
 8001faa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0208 	orr.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e005      	b.n	8001fe2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d004      	beq.n	800200a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e00c      	b.n	8002024 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2205      	movs	r2, #5
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800203c:	4b92      	ldr	r3, [pc, #584]	; (8002288 <HAL_DMA_IRQHandler+0x258>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a92      	ldr	r2, [pc, #584]	; (800228c <HAL_DMA_IRQHandler+0x25c>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	0a9b      	lsrs	r3, r3, #10
 8002048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2208      	movs	r2, #8
 800205c:	409a      	lsls	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d01a      	beq.n	800209c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0204 	bic.w	r2, r2, #4
 8002082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2208      	movs	r2, #8
 800208a:	409a      	lsls	r2, r3
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	2201      	movs	r2, #1
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d012      	beq.n	80020d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	2201      	movs	r2, #1
 80020c0:	409a      	lsls	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ca:	f043 0202 	orr.w	r2, r3, #2
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2204      	movs	r2, #4
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d012      	beq.n	8002108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00b      	beq.n	8002108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2204      	movs	r2, #4
 80020f6:	409a      	lsls	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f043 0204 	orr.w	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2210      	movs	r2, #16
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d043      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d03c      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	2210      	movs	r2, #16
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d018      	beq.n	8002172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d108      	bne.n	8002160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d024      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
 800215e:	e01f      	b.n	80021a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01b      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
 8002170:	e016      	b.n	80021a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0208 	bic.w	r2, r2, #8
 800218e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	2220      	movs	r2, #32
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 808e 	beq.w	80022ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8086 	beq.w	80022ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	2220      	movs	r2, #32
 80021c8:	409a      	lsls	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	d136      	bne.n	8002248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0216 	bic.w	r2, r2, #22
 80021e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_DMA_IRQHandler+0x1da>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0208 	bic.w	r2, r2, #8
 8002218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	223f      	movs	r2, #63	; 0x3f
 8002220:	409a      	lsls	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223a:	2b00      	cmp	r3, #0
 800223c:	d07d      	beq.n	800233a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4798      	blx	r3
        }
        return;
 8002246:	e078      	b.n	800233a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01c      	beq.n	8002290 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d108      	bne.n	8002276 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	2b00      	cmp	r3, #0
 800226a:	d030      	beq.n	80022ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
 8002274:	e02b      	b.n	80022ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d027      	beq.n	80022ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
 8002286:	e022      	b.n	80022ce <HAL_DMA_IRQHandler+0x29e>
 8002288:	20000014 	.word	0x20000014
 800228c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0210 	bic.w	r2, r2, #16
 80022ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d032      	beq.n	800233c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d022      	beq.n	8002328 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2205      	movs	r2, #5
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3301      	adds	r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	429a      	cmp	r2, r3
 8002304:	d307      	bcc.n	8002316 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f2      	bne.n	80022fa <HAL_DMA_IRQHandler+0x2ca>
 8002314:	e000      	b.n	8002318 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002316:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	4798      	blx	r3
 8002338:	e000      	b.n	800233c <HAL_DMA_IRQHandler+0x30c>
        return;
 800233a:	bf00      	nop
    }
  }
}
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop

08002344 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002360:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b40      	cmp	r3, #64	; 0x40
 8002370:	d108      	bne.n	8002384 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002382:	e007      	b.n	8002394 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	60da      	str	r2, [r3, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	3b10      	subs	r3, #16
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <DMA_CalcBaseAndBitshift+0x64>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ba:	4a13      	ldr	r2, [pc, #76]	; (8002408 <DMA_CalcBaseAndBitshift+0x68>)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d909      	bls.n	80023e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	1d1a      	adds	r2, r3, #4
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	659a      	str	r2, [r3, #88]	; 0x58
 80023e0:	e007      	b.n	80023f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	aaaaaaab 	.word	0xaaaaaaab
 8002408:	08004f8c 	.word	0x08004f8c

0800240c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11f      	bne.n	8002466 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d855      	bhi.n	80024d8 <DMA_CheckFifoParam+0xcc>
 800242c:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <DMA_CheckFifoParam+0x28>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	08002445 	.word	0x08002445
 8002438:	08002457 	.word	0x08002457
 800243c:	08002445 	.word	0x08002445
 8002440:	080024d9 	.word	0x080024d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d045      	beq.n	80024dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002454:	e042      	b.n	80024dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800245e:	d13f      	bne.n	80024e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002464:	e03c      	b.n	80024e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800246e:	d121      	bne.n	80024b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d836      	bhi.n	80024e4 <DMA_CheckFifoParam+0xd8>
 8002476:	a201      	add	r2, pc, #4	; (adr r2, 800247c <DMA_CheckFifoParam+0x70>)
 8002478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247c:	0800248d 	.word	0x0800248d
 8002480:	08002493 	.word	0x08002493
 8002484:	0800248d 	.word	0x0800248d
 8002488:	080024a5 	.word	0x080024a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      break;
 8002490:	e02f      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d024      	beq.n	80024e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a2:	e021      	b.n	80024e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ac:	d11e      	bne.n	80024ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024b2:	e01b      	b.n	80024ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d902      	bls.n	80024c0 <DMA_CheckFifoParam+0xb4>
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d003      	beq.n	80024c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024be:	e018      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e015      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00e      	beq.n	80024f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      break;
 80024d6:	e00b      	b.n	80024f0 <DMA_CheckFifoParam+0xe4>
      break;
 80024d8:	bf00      	nop
 80024da:	e00a      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;
 80024dc:	bf00      	nop
 80024de:	e008      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;
 80024e0:	bf00      	nop
 80024e2:	e006      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;
 80024e4:	bf00      	nop
 80024e6:	e004      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;
 80024e8:	bf00      	nop
 80024ea:	e002      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80024ec:	bf00      	nop
 80024ee:	e000      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;
 80024f0:	bf00      	nop
    }
  } 
  
  return status; 
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	e16b      	b.n	80027f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	429a      	cmp	r2, r3
 8002536:	f040 815a 	bne.w	80027ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d00b      	beq.n	800255a <HAL_GPIO_Init+0x5a>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254e:	2b11      	cmp	r3, #17
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b12      	cmp	r3, #18
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0xfc>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b12      	cmp	r3, #18
 80025fa:	d123      	bne.n	8002644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	08da      	lsrs	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3208      	adds	r2, #8
 8002604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80b4 	beq.w	80027ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b5f      	ldr	r3, [pc, #380]	; (8002808 <HAL_GPIO_Init+0x308>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a5e      	ldr	r2, [pc, #376]	; (8002808 <HAL_GPIO_Init+0x308>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <HAL_GPIO_Init+0x308>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026a2:	4a5a      	ldr	r2, [pc, #360]	; (800280c <HAL_GPIO_Init+0x30c>)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	3302      	adds	r3, #2
 80026aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	220f      	movs	r2, #15
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a51      	ldr	r2, [pc, #324]	; (8002810 <HAL_GPIO_Init+0x310>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d02b      	beq.n	8002726 <HAL_GPIO_Init+0x226>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a50      	ldr	r2, [pc, #320]	; (8002814 <HAL_GPIO_Init+0x314>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d025      	beq.n	8002722 <HAL_GPIO_Init+0x222>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4f      	ldr	r2, [pc, #316]	; (8002818 <HAL_GPIO_Init+0x318>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01f      	beq.n	800271e <HAL_GPIO_Init+0x21e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4e      	ldr	r2, [pc, #312]	; (800281c <HAL_GPIO_Init+0x31c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d019      	beq.n	800271a <HAL_GPIO_Init+0x21a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4d      	ldr	r2, [pc, #308]	; (8002820 <HAL_GPIO_Init+0x320>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_GPIO_Init+0x216>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4c      	ldr	r2, [pc, #304]	; (8002824 <HAL_GPIO_Init+0x324>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00d      	beq.n	8002712 <HAL_GPIO_Init+0x212>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4b      	ldr	r2, [pc, #300]	; (8002828 <HAL_GPIO_Init+0x328>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <HAL_GPIO_Init+0x20e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4a      	ldr	r2, [pc, #296]	; (800282c <HAL_GPIO_Init+0x32c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_GPIO_Init+0x20a>
 8002706:	2307      	movs	r3, #7
 8002708:	e00e      	b.n	8002728 <HAL_GPIO_Init+0x228>
 800270a:	2308      	movs	r3, #8
 800270c:	e00c      	b.n	8002728 <HAL_GPIO_Init+0x228>
 800270e:	2306      	movs	r3, #6
 8002710:	e00a      	b.n	8002728 <HAL_GPIO_Init+0x228>
 8002712:	2305      	movs	r3, #5
 8002714:	e008      	b.n	8002728 <HAL_GPIO_Init+0x228>
 8002716:	2304      	movs	r3, #4
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x228>
 800271a:	2303      	movs	r3, #3
 800271c:	e004      	b.n	8002728 <HAL_GPIO_Init+0x228>
 800271e:	2302      	movs	r3, #2
 8002720:	e002      	b.n	8002728 <HAL_GPIO_Init+0x228>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x228>
 8002726:	2300      	movs	r3, #0
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	f002 0203 	and.w	r2, r2, #3
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	4093      	lsls	r3, r2
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002738:	4934      	ldr	r1, [pc, #208]	; (800280c <HAL_GPIO_Init+0x30c>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002746:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <HAL_GPIO_Init+0x330>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800276a:	4a31      	ldr	r2, [pc, #196]	; (8002830 <HAL_GPIO_Init+0x330>)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002770:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <HAL_GPIO_Init+0x330>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002794:	4a26      	ldr	r2, [pc, #152]	; (8002830 <HAL_GPIO_Init+0x330>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279a:	4b25      	ldr	r3, [pc, #148]	; (8002830 <HAL_GPIO_Init+0x330>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027be:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <HAL_GPIO_Init+0x330>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_GPIO_Init+0x330>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e8:	4a11      	ldr	r2, [pc, #68]	; (8002830 <HAL_GPIO_Init+0x330>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3301      	adds	r3, #1
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	f67f ae90 	bls.w	800251c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027fc:	bf00      	nop
 80027fe:	3724      	adds	r7, #36	; 0x24
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40023800 	.word	0x40023800
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40021400 	.word	0x40021400
 8002828:	40021800 	.word	0x40021800
 800282c:	40021c00 	.word	0x40021c00
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002850:	e003      	b.n	800285a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	401a      	ands	r2, r3
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	429a      	cmp	r2, r3
 800287e:	d104      	bne.n	800288a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	041a      	lsls	r2, r3, #16
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002888:	e002      	b.n	8002890 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e25b      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d075      	beq.n	80029a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ba:	4ba3      	ldr	r3, [pc, #652]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d00c      	beq.n	80028e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c6:	4ba0      	ldr	r3, [pc, #640]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d112      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d2:	4b9d      	ldr	r3, [pc, #628]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028de:	d10b      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	4b99      	ldr	r3, [pc, #612]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d05b      	beq.n	80029a4 <HAL_RCC_OscConfig+0x108>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d157      	bne.n	80029a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e236      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002900:	d106      	bne.n	8002910 <HAL_RCC_OscConfig+0x74>
 8002902:	4b91      	ldr	r3, [pc, #580]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a90      	ldr	r2, [pc, #576]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e01d      	b.n	800294c <HAL_RCC_OscConfig+0xb0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x98>
 800291a:	4b8b      	ldr	r3, [pc, #556]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a8a      	ldr	r2, [pc, #552]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0xb0>
 8002934:	4b84      	ldr	r3, [pc, #528]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a83      	ldr	r2, [pc, #524]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b81      	ldr	r3, [pc, #516]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a80      	ldr	r2, [pc, #512]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff f904 	bl	8001b60 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff f900 	bl	8001b60 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1fb      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0xc0>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff f8f0 	bl	8001b60 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002984:	f7ff f8ec 	bl	8001b60 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e1e7      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002996:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0xe8>
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d063      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029b2:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029be:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d11c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ca:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d116      	bne.n	8002a04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d6:	4b5c      	ldr	r3, [pc, #368]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_RCC_OscConfig+0x152>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e1bb      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4952      	ldr	r1, [pc, #328]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	e03a      	b.n	8002a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a0c:	4b4f      	ldr	r3, [pc, #316]	; (8002b4c <HAL_RCC_OscConfig+0x2b0>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7ff f8a5 	bl	8001b60 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7ff f8a1 	bl	8001b60 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e19c      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2c:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a38:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4940      	ldr	r1, [pc, #256]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]
 8002a4c:	e015      	b.n	8002a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <HAL_RCC_OscConfig+0x2b0>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7ff f884 	bl	8001b60 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5c:	f7ff f880 	bl	8001b60 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e17b      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d030      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d016      	beq.n	8002abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0x2b4>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7ff f864 	bl	8001b60 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9c:	f7ff f860 	bl	8001b60 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e15b      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aae:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x200>
 8002aba:	e015      	b.n	8002ae8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_OscConfig+0x2b4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff f84d 	bl	8001b60 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aca:	f7ff f849 	bl	8001b60 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e144      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a0 	beq.w	8002c36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10f      	bne.n	8002b26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_OscConfig+0x2b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d121      	bne.n	8002b76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_RCC_OscConfig+0x2b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <HAL_RCC_OscConfig+0x2b8>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3e:	f7ff f80f 	bl	8001b60 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	e011      	b.n	8002b6a <HAL_RCC_OscConfig+0x2ce>
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	42470000 	.word	0x42470000
 8002b50:	42470e80 	.word	0x42470e80
 8002b54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b58:	f7ff f802 	bl	8001b60 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e0fd      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b81      	ldr	r3, [pc, #516]	; (8002d70 <HAL_RCC_OscConfig+0x4d4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d106      	bne.n	8002b8c <HAL_RCC_OscConfig+0x2f0>
 8002b7e:	4b7d      	ldr	r3, [pc, #500]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a7c      	ldr	r2, [pc, #496]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8a:	e01c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x32a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d10c      	bne.n	8002bae <HAL_RCC_OscConfig+0x312>
 8002b94:	4b77      	ldr	r3, [pc, #476]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a76      	ldr	r2, [pc, #472]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002b9a:	f043 0304 	orr.w	r3, r3, #4
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	4b74      	ldr	r3, [pc, #464]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a73      	ldr	r2, [pc, #460]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bac:	e00b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x32a>
 8002bae:	4b71      	ldr	r3, [pc, #452]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a70      	ldr	r2, [pc, #448]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bba:	4b6e      	ldr	r3, [pc, #440]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	4a6d      	ldr	r2, [pc, #436]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d015      	beq.n	8002bfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7fe ffc7 	bl	8001b60 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fe ffc3 	bl	8001b60 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0bc      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ee      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x33a>
 8002bf8:	e014      	b.n	8002c24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe ffb1 	bl	8001b60 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe ffad 	bl	8001b60 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0a6      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c18:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ee      	bne.n	8002c02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2a:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a51      	ldr	r2, [pc, #324]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8092 	beq.w	8002d64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c40:	4b4c      	ldr	r3, [pc, #304]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d05c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d141      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c54:	4b48      	ldr	r3, [pc, #288]	; (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7fe ff81 	bl	8001b60 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c62:	f7fe ff7d 	bl	8001b60 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e078      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c74:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f0      	bne.n	8002c62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	019b      	lsls	r3, r3, #6
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	041b      	lsls	r3, r3, #16
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	061b      	lsls	r3, r3, #24
 8002ca4:	4933      	ldr	r1, [pc, #204]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002caa:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe ff56 	bl	8001b60 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe ff52 	bl	8001b60 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e04d      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cca:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
 8002cd6:	e045      	b.n	8002d64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7fe ff3f 	bl	8001b60 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7fe ff3b 	bl	8001b60 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e036      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x44a>
 8002d04:	e02e      	b.n	8002d64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e029      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_RCC_OscConfig+0x4d8>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d11c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d115      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10d      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d106      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40007000 	.word	0x40007000
 8002d74:	40023800 	.word	0x40023800
 8002d78:	42470060 	.word	0x42470060

08002d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0cc      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d90c      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b65      	ldr	r3, [pc, #404]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0b8      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd0:	4b59      	ldr	r3, [pc, #356]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de8:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	494d      	ldr	r1, [pc, #308]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d044      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d119      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e07f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d003      	beq.n	8002e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3a:	4b3f      	ldr	r3, [pc, #252]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e06f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4a:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e067      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f023 0203 	bic.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4934      	ldr	r1, [pc, #208]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fe78 	bl	8001b60 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe fe74 	bl	8001b60 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e04f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 020c 	and.w	r2, r3, #12
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1eb      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d20c      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e032      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4916      	ldr	r1, [pc, #88]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	490e      	ldr	r1, [pc, #56]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f02:	f000 f821 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002f06:	4601      	mov	r1, r0
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	5cd3      	ldrb	r3, [r2, r3]
 8002f16:	fa21 f303 	lsr.w	r3, r1, r3
 8002f1a:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fdd8 	bl	8001ad8 <HAL_InitTick>

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	08004f74 	.word	0x08004f74
 8002f40:	20000014 	.word	0x20000014
 8002f44:	20000018 	.word	0x20000018

08002f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	2300      	movs	r3, #0
 8002f58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f5e:	4b63      	ldr	r3, [pc, #396]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d007      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0x32>
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d008      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x38>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 80b4 	bne.w	80030dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4b5e      	ldr	r3, [pc, #376]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f76:	60bb      	str	r3, [r7, #8]
       break;
 8002f78:	e0b3      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f7a:	4b5e      	ldr	r3, [pc, #376]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002f7c:	60bb      	str	r3, [r7, #8]
      break;
 8002f7e:	e0b0      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f80:	4b5a      	ldr	r3, [pc, #360]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f8a:	4b58      	ldr	r3, [pc, #352]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d04a      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f96:	4b55      	ldr	r3, [pc, #340]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	f04f 0400 	mov.w	r4, #0
 8002fa0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	ea03 0501 	and.w	r5, r3, r1
 8002fac:	ea04 0602 	and.w	r6, r4, r2
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4632      	mov	r2, r6
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	f04f 0400 	mov.w	r4, #0
 8002fbc:	0154      	lsls	r4, r2, #5
 8002fbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fc2:	014b      	lsls	r3, r1, #5
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4622      	mov	r2, r4
 8002fc8:	1b49      	subs	r1, r1, r5
 8002fca:	eb62 0206 	sbc.w	r2, r2, r6
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	f04f 0400 	mov.w	r4, #0
 8002fd6:	0194      	lsls	r4, r2, #6
 8002fd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fdc:	018b      	lsls	r3, r1, #6
 8002fde:	1a5b      	subs	r3, r3, r1
 8002fe0:	eb64 0402 	sbc.w	r4, r4, r2
 8002fe4:	f04f 0100 	mov.w	r1, #0
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	00e2      	lsls	r2, r4, #3
 8002fee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ff2:	00d9      	lsls	r1, r3, #3
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4614      	mov	r4, r2
 8002ff8:	195b      	adds	r3, r3, r5
 8002ffa:	eb44 0406 	adc.w	r4, r4, r6
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	0262      	lsls	r2, r4, #9
 8003008:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800300c:	0259      	lsls	r1, r3, #9
 800300e:	460b      	mov	r3, r1
 8003010:	4614      	mov	r4, r2
 8003012:	4618      	mov	r0, r3
 8003014:	4621      	mov	r1, r4
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f04f 0400 	mov.w	r4, #0
 800301c:	461a      	mov	r2, r3
 800301e:	4623      	mov	r3, r4
 8003020:	f7fd fa8e 	bl	8000540 <__aeabi_uldivmod>
 8003024:	4603      	mov	r3, r0
 8003026:	460c      	mov	r4, r1
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	e049      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302c:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	f04f 0400 	mov.w	r4, #0
 8003036:	f240 11ff 	movw	r1, #511	; 0x1ff
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	ea03 0501 	and.w	r5, r3, r1
 8003042:	ea04 0602 	and.w	r6, r4, r2
 8003046:	4629      	mov	r1, r5
 8003048:	4632      	mov	r2, r6
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	f04f 0400 	mov.w	r4, #0
 8003052:	0154      	lsls	r4, r2, #5
 8003054:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003058:	014b      	lsls	r3, r1, #5
 800305a:	4619      	mov	r1, r3
 800305c:	4622      	mov	r2, r4
 800305e:	1b49      	subs	r1, r1, r5
 8003060:	eb62 0206 	sbc.w	r2, r2, r6
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	f04f 0400 	mov.w	r4, #0
 800306c:	0194      	lsls	r4, r2, #6
 800306e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003072:	018b      	lsls	r3, r1, #6
 8003074:	1a5b      	subs	r3, r3, r1
 8003076:	eb64 0402 	sbc.w	r4, r4, r2
 800307a:	f04f 0100 	mov.w	r1, #0
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	00e2      	lsls	r2, r4, #3
 8003084:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003088:	00d9      	lsls	r1, r3, #3
 800308a:	460b      	mov	r3, r1
 800308c:	4614      	mov	r4, r2
 800308e:	195b      	adds	r3, r3, r5
 8003090:	eb44 0406 	adc.w	r4, r4, r6
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	02a2      	lsls	r2, r4, #10
 800309e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030a2:	0299      	lsls	r1, r3, #10
 80030a4:	460b      	mov	r3, r1
 80030a6:	4614      	mov	r4, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	4621      	mov	r1, r4
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f04f 0400 	mov.w	r4, #0
 80030b2:	461a      	mov	r2, r3
 80030b4:	4623      	mov	r3, r4
 80030b6:	f7fd fa43 	bl	8000540 <__aeabi_uldivmod>
 80030ba:	4603      	mov	r3, r0
 80030bc:	460c      	mov	r4, r1
 80030be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030c0:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	3301      	adds	r3, #1
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	60bb      	str	r3, [r7, #8]
      break;
 80030da:	e002      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030de:	60bb      	str	r3, [r7, #8]
      break;
 80030e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030e2:	68bb      	ldr	r3, [r7, #8]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ec:	40023800 	.word	0x40023800
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	007a1200 	.word	0x007a1200

080030f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCC_GetHCLKFreq+0x14>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000014 	.word	0x20000014

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003114:	f7ff fff0 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003118:	4601      	mov	r1, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0a9b      	lsrs	r3, r3, #10
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4a03      	ldr	r2, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003126:	5cd3      	ldrb	r3, [r2, r3]
 8003128:	fa21 f303 	lsr.w	r3, r1, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	08004f84 	.word	0x08004f84

08003138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800313c:	f7ff ffdc 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003140:	4601      	mov	r1, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0b5b      	lsrs	r3, r3, #13
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4a03      	ldr	r2, [pc, #12]	; (800315c <HAL_RCC_GetPCLK2Freq+0x24>)
 800314e:	5cd3      	ldrb	r3, [r2, r3]
 8003150:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	08004f84 	.word	0x08004f84

08003160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e01d      	b.n	80031ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe fa36 	bl	80015f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f000 fb4e 	bl	8003840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b06      	cmp	r3, #6
 80031de:	d007      	beq.n	80031f0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e01d      	b.n	800324c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f815 	bl	8003254 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3304      	adds	r3, #4
 800323a:	4619      	mov	r1, r3
 800323c:	4610      	mov	r0, r2
 800323e:	f000 faff 	bl	8003840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2201      	movs	r2, #1
 8003278:	6839      	ldr	r1, [r7, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fdca 	bl	8003e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a15      	ldr	r2, [pc, #84]	; (80032dc <HAL_TIM_PWM_Start+0x74>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_TIM_PWM_Start+0x2c>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a14      	ldr	r2, [pc, #80]	; (80032e0 <HAL_TIM_PWM_Start+0x78>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_TIM_PWM_Start+0x30>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_TIM_PWM_Start+0x32>
 8003298:	2300      	movs	r3, #0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d007      	beq.n	80032d0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40010400 	.word	0x40010400

080032e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d122      	bne.n	8003340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b02      	cmp	r3, #2
 8003306:	d11b      	bne.n	8003340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0202 	mvn.w	r2, #2
 8003310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa6b 	bl	8003802 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fa5d 	bl	80037ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fa6e 	bl	8003816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b04      	cmp	r3, #4
 800334c:	d122      	bne.n	8003394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b04      	cmp	r3, #4
 800335a:	d11b      	bne.n	8003394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0204 	mvn.w	r2, #4
 8003364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fa41 	bl	8003802 <HAL_TIM_IC_CaptureCallback>
 8003380:	e005      	b.n	800338e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fa33 	bl	80037ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fa44 	bl	8003816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d122      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d11b      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0208 	mvn.w	r2, #8
 80033b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2204      	movs	r2, #4
 80033be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fa17 	bl	8003802 <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa09 	bl	80037ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fa1a 	bl	8003816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d122      	bne.n	800343c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b10      	cmp	r3, #16
 8003402:	d11b      	bne.n	800343c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0210 	mvn.w	r2, #16
 800340c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2208      	movs	r2, #8
 8003412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f9ed 	bl	8003802 <HAL_TIM_IC_CaptureCallback>
 8003428:	e005      	b.n	8003436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f9df 	bl	80037ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f9f0 	bl	8003816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b01      	cmp	r3, #1
 8003448:	d10e      	bne.n	8003468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d107      	bne.n	8003468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0201 	mvn.w	r2, #1
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd fcb8 	bl	8000dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b80      	cmp	r3, #128	; 0x80
 8003474:	d10e      	bne.n	8003494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b80      	cmp	r3, #128	; 0x80
 8003482:	d107      	bne.n	8003494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fdbe 	bl	8004010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d10e      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d107      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f9b5 	bl	800382a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d10e      	bne.n	80034ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d107      	bne.n	80034ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0220 	mvn.w	r2, #32
 80034e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fd88 	bl	8003ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800350a:	2302      	movs	r3, #2
 800350c:	e0b4      	b.n	8003678 <HAL_TIM_PWM_ConfigChannel+0x184>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b0c      	cmp	r3, #12
 8003522:	f200 809f 	bhi.w	8003664 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	08003561 	.word	0x08003561
 8003530:	08003665 	.word	0x08003665
 8003534:	08003665 	.word	0x08003665
 8003538:	08003665 	.word	0x08003665
 800353c:	080035a1 	.word	0x080035a1
 8003540:	08003665 	.word	0x08003665
 8003544:	08003665 	.word	0x08003665
 8003548:	08003665 	.word	0x08003665
 800354c:	080035e3 	.word	0x080035e3
 8003550:	08003665 	.word	0x08003665
 8003554:	08003665 	.word	0x08003665
 8003558:	08003665 	.word	0x08003665
 800355c:	08003623 	.word	0x08003623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fa0a 	bl	8003980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0208 	orr.w	r2, r2, #8
 800357a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0204 	bic.w	r2, r2, #4
 800358a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6999      	ldr	r1, [r3, #24]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	619a      	str	r2, [r3, #24]
      break;
 800359e:	e062      	b.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fa5a 	bl	8003a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6999      	ldr	r1, [r3, #24]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	021a      	lsls	r2, r3, #8
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	619a      	str	r2, [r3, #24]
      break;
 80035e0:	e041      	b.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 faaf 	bl	8003b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0208 	orr.w	r2, r2, #8
 80035fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0204 	bic.w	r2, r2, #4
 800360c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69d9      	ldr	r1, [r3, #28]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	61da      	str	r2, [r3, #28]
      break;
 8003620:	e021      	b.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fb03 	bl	8003c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69d9      	ldr	r1, [r3, #28]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	021a      	lsls	r2, r3, #8
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	61da      	str	r2, [r3, #28]
      break;
 8003662:	e000      	b.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003664:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_TIM_ConfigClockSource+0x18>
 8003694:	2302      	movs	r3, #2
 8003696:	e0a6      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x166>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	d067      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0x120>
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d80b      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x6c>
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d073      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0x140>
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d802      	bhi.n	80036e2 <HAL_TIM_ConfigClockSource+0x62>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d06f      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80036e0:	e078      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d06c      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0x140>
 80036e6:	2b30      	cmp	r3, #48	; 0x30
 80036e8:	d06a      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80036ea:	e073      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036ec:	2b70      	cmp	r3, #112	; 0x70
 80036ee:	d00d      	beq.n	800370c <HAL_TIM_ConfigClockSource+0x8c>
 80036f0:	2b70      	cmp	r3, #112	; 0x70
 80036f2:	d804      	bhi.n	80036fe <HAL_TIM_ConfigClockSource+0x7e>
 80036f4:	2b50      	cmp	r3, #80	; 0x50
 80036f6:	d033      	beq.n	8003760 <HAL_TIM_ConfigClockSource+0xe0>
 80036f8:	2b60      	cmp	r3, #96	; 0x60
 80036fa:	d041      	beq.n	8003780 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80036fc:	e06a      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	d066      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x152>
 8003704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003708:	d017      	beq.n	800373a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800370a:	e063      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f000 fb5a 	bl	8003dd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800372e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]
      break;
 8003738:	e04c      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6899      	ldr	r1, [r3, #8]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f000 fb43 	bl	8003dd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800375c:	609a      	str	r2, [r3, #8]
      break;
 800375e:	e039      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	461a      	mov	r2, r3
 800376e:	f000 fab7 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2150      	movs	r1, #80	; 0x50
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fb10 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 800377e:	e029      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	461a      	mov	r2, r3
 800378e:	f000 fad6 	bl	8003d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2160      	movs	r1, #96	; 0x60
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fb00 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 800379e:	e019      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	461a      	mov	r2, r3
 80037ae:	f000 fa97 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2140      	movs	r1, #64	; 0x40
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 faf0 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 80037be:	e009      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f000 fae7 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 80037d0:	e000      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80037d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a40      	ldr	r2, [pc, #256]	; (8003954 <TIM_Base_SetConfig+0x114>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <TIM_Base_SetConfig+0x40>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385e:	d00f      	beq.n	8003880 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a3d      	ldr	r2, [pc, #244]	; (8003958 <TIM_Base_SetConfig+0x118>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00b      	beq.n	8003880 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3c      	ldr	r2, [pc, #240]	; (800395c <TIM_Base_SetConfig+0x11c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d007      	beq.n	8003880 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a3b      	ldr	r2, [pc, #236]	; (8003960 <TIM_Base_SetConfig+0x120>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3a      	ldr	r2, [pc, #232]	; (8003964 <TIM_Base_SetConfig+0x124>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d108      	bne.n	8003892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2f      	ldr	r2, [pc, #188]	; (8003954 <TIM_Base_SetConfig+0x114>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02b      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a0:	d027      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2c      	ldr	r2, [pc, #176]	; (8003958 <TIM_Base_SetConfig+0x118>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d023      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a2b      	ldr	r2, [pc, #172]	; (800395c <TIM_Base_SetConfig+0x11c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01f      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2a      	ldr	r2, [pc, #168]	; (8003960 <TIM_Base_SetConfig+0x120>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01b      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a29      	ldr	r2, [pc, #164]	; (8003964 <TIM_Base_SetConfig+0x124>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d017      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a28      	ldr	r2, [pc, #160]	; (8003968 <TIM_Base_SetConfig+0x128>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a27      	ldr	r2, [pc, #156]	; (800396c <TIM_Base_SetConfig+0x12c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00f      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a26      	ldr	r2, [pc, #152]	; (8003970 <TIM_Base_SetConfig+0x130>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a25      	ldr	r2, [pc, #148]	; (8003974 <TIM_Base_SetConfig+0x134>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a24      	ldr	r2, [pc, #144]	; (8003978 <TIM_Base_SetConfig+0x138>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a23      	ldr	r2, [pc, #140]	; (800397c <TIM_Base_SetConfig+0x13c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <TIM_Base_SetConfig+0x114>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_Base_SetConfig+0xf8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <TIM_Base_SetConfig+0x124>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d103      	bne.n	8003940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	615a      	str	r2, [r3, #20]
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40010000 	.word	0x40010000
 8003958:	40000400 	.word	0x40000400
 800395c:	40000800 	.word	0x40000800
 8003960:	40000c00 	.word	0x40000c00
 8003964:	40010400 	.word	0x40010400
 8003968:	40014000 	.word	0x40014000
 800396c:	40014400 	.word	0x40014400
 8003970:	40014800 	.word	0x40014800
 8003974:	40001800 	.word	0x40001800
 8003978:	40001c00 	.word	0x40001c00
 800397c:	40002000 	.word	0x40002000

08003980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f023 0201 	bic.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f023 0302 	bic.w	r3, r3, #2
 80039c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a20      	ldr	r2, [pc, #128]	; (8003a58 <TIM_OC1_SetConfig+0xd8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_OC1_SetConfig+0x64>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <TIM_OC1_SetConfig+0xdc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d10c      	bne.n	80039fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0308 	bic.w	r3, r3, #8
 80039ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <TIM_OC1_SetConfig+0xd8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_OC1_SetConfig+0x8e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <TIM_OC1_SetConfig+0xdc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d111      	bne.n	8003a32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	621a      	str	r2, [r3, #32]
}
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40010400 	.word	0x40010400

08003a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0210 	bic.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0320 	bic.w	r3, r3, #32
 8003aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <TIM_OC2_SetConfig+0xe4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_OC2_SetConfig+0x68>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <TIM_OC2_SetConfig+0xe8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d10d      	bne.n	8003ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <TIM_OC2_SetConfig+0xe4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <TIM_OC2_SetConfig+0x94>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <TIM_OC2_SetConfig+0xe8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d113      	bne.n	8003b1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40010400 	.word	0x40010400

08003b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a21      	ldr	r2, [pc, #132]	; (8003c2c <TIM_OC3_SetConfig+0xe0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <TIM_OC3_SetConfig+0x66>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a20      	ldr	r2, [pc, #128]	; (8003c30 <TIM_OC3_SetConfig+0xe4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10d      	bne.n	8003bce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <TIM_OC3_SetConfig+0xe0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d003      	beq.n	8003bde <TIM_OC3_SetConfig+0x92>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <TIM_OC3_SetConfig+0xe4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d113      	bne.n	8003c06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	621a      	str	r2, [r3, #32]
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40010400 	.word	0x40010400

08003c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	031b      	lsls	r3, r3, #12
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <TIM_OC4_SetConfig+0xa4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_OC4_SetConfig+0x68>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <TIM_OC4_SetConfig+0xa8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d109      	bne.n	8003cb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40010400 	.word	0x40010400

08003ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 030a 	bic.w	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f023 0210 	bic.w	r2, r3, #16
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	031b      	lsls	r3, r3, #12
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f043 0307 	orr.w	r3, r3, #7
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	609a      	str	r2, [r3, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	609a      	str	r2, [r3, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	2201      	movs	r2, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e05a      	b.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d022      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d01d      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1d      	ldr	r2, [pc, #116]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d018      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00e      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a17      	ldr	r2, [pc, #92]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d10c      	bne.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40010400 	.word	0x40010400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40001800 	.word	0x40001800

08003f58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e03d      	b.n	8003ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e03f      	b.n	80040b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd fb8a 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fbcf 	bl	800480c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800407c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800408c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800409c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d130      	bne.n	800413a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_UART_Transmit_IT+0x26>
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e029      	b.n	800413c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Transmit_IT+0x38>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e022      	b.n	800413c <HAL_UART_Transmit_IT+0x7e>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	88fa      	ldrh	r2, [r7, #6]
 800410e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2221      	movs	r2, #33	; 0x21
 800411a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004134:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b20      	cmp	r3, #32
 8004160:	d166      	bne.n	8004230 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_UART_Receive_DMA+0x26>
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e05f      	b.n	8004232 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_UART_Receive_DMA+0x38>
 800417c:	2302      	movs	r3, #2
 800417e:	e058      	b.n	8004232 <HAL_UART_Receive_DMA+0xea>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2222      	movs	r2, #34	; 0x22
 800419e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	4a25      	ldr	r2, [pc, #148]	; (800423c <HAL_UART_Receive_DMA+0xf4>)
 80041a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	4a24      	ldr	r2, [pc, #144]	; (8004240 <HAL_UART_Receive_DMA+0xf8>)
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	4a23      	ldr	r2, [pc, #140]	; (8004244 <HAL_UART_Receive_DMA+0xfc>)
 80041b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041be:	2200      	movs	r2, #0
 80041c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80041c2:	f107 0308 	add.w	r3, r7, #8
 80041c6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3304      	adds	r3, #4
 80041d2:	4619      	mov	r1, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	f7fd feaf 	bl	8001f3c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800420a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800422a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	08004485 	.word	0x08004485
 8004240:	080044ed 	.word	0x080044ed
 8004244:	08004509 	.word	0x08004509

08004248 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10d      	bne.n	800429a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_UART_IRQHandler+0x52>
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fa38 	bl	8004708 <UART_Receive_IT>
      return;
 8004298:	e0d1      	b.n	800443e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80b0 	beq.w	8004402 <HAL_UART_IRQHandler+0x1ba>
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <HAL_UART_IRQHandler+0x70>
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80a5 	beq.w	8004402 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_UART_IRQHandler+0x90>
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	f043 0201 	orr.w	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_UART_IRQHandler+0xb0>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f0:	f043 0202 	orr.w	r2, r3, #2
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_UART_IRQHandler+0xd0>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004310:	f043 0204 	orr.w	r2, r3, #4
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00f      	beq.n	8004342 <HAL_UART_IRQHandler+0xfa>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <HAL_UART_IRQHandler+0xee>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	f043 0208 	orr.w	r2, r3, #8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d078      	beq.n	800443c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <HAL_UART_IRQHandler+0x11c>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f9d2 	bl	8004708 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b40      	cmp	r3, #64	; 0x40
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <HAL_UART_IRQHandler+0x144>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d031      	beq.n	80043f0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f91b 	bl	80045c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d123      	bne.n	80043e8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	4a21      	ldr	r2, [pc, #132]	; (8004444 <HAL_UART_IRQHandler+0x1fc>)
 80043be:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fd fe11 	bl	8001fec <HAL_DMA_Abort_IT>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d016      	beq.n	80043fe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043da:	4610      	mov	r0, r2
 80043dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043de:	e00e      	b.n	80043fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f845 	bl	8004470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e6:	e00a      	b.n	80043fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f841 	bl	8004470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ee:	e006      	b.n	80043fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f83d 	bl	8004470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80043fc:	e01e      	b.n	800443c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fe:	bf00      	nop
    return;
 8004400:	e01c      	b.n	800443c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_UART_IRQHandler+0x1d6>
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f908 	bl	800462c <UART_Transmit_IT>
    return;
 800441c:	e00f      	b.n	800443e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_UART_IRQHandler+0x1f6>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f950 	bl	80046d8 <UART_EndTransmit_IT>
    return;
 8004438:	bf00      	nop
 800443a:	e000      	b.n	800443e <HAL_UART_IRQHandler+0x1f6>
    return;
 800443c:	bf00      	nop
  }
}
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	08004605 	.word	0x08004605

08004448 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11e      	bne.n	80044de <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0201 	bic.w	r2, r2, #1
 80044c4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695a      	ldr	r2, [r3, #20]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff ffb2 	bl	8004448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff ffae 	bl	800445c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004524:	2b80      	cmp	r3, #128	; 0x80
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b21      	cmp	r3, #33	; 0x21
 800453a:	d108      	bne.n	800454e <UART_DMAError+0x46>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2200      	movs	r2, #0
 8004546:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004548:	68b8      	ldr	r0, [r7, #8]
 800454a:	f000 f827 	bl	800459c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b40      	cmp	r3, #64	; 0x40
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b22      	cmp	r3, #34	; 0x22
 800456e:	d108      	bne.n	8004582 <UART_DMAError+0x7a>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2200      	movs	r2, #0
 800457a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800457c:	68b8      	ldr	r0, [r7, #8]
 800457e:	f000 f823 	bl	80045c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	f043 0210 	orr.w	r2, r3, #16
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800458e:	68b8      	ldr	r0, [r7, #8]
 8004590:	f7ff ff6e 	bl	8004470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80045b2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff ff26 	bl	8004470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b21      	cmp	r3, #33	; 0x21
 800463e:	d144      	bne.n	80046ca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004648:	d11a      	bne.n	8004680 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800465e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	621a      	str	r2, [r3, #32]
 8004672:	e00e      	b.n	8004692 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	621a      	str	r2, [r3, #32]
 800467e:	e008      	b.n	8004692 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	1c59      	adds	r1, r3, #1
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6211      	str	r1, [r2, #32]
 800468a:	781a      	ldrb	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29b      	uxth	r3, r3
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	4619      	mov	r1, r3
 80046a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10f      	bne.n	80046c6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e000      	b.n	80046cc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
  }
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fc f8a1 	bl	8000840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b22      	cmp	r3, #34	; 0x22
 800471a:	d171      	bne.n	8004800 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d123      	bne.n	800476e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10e      	bne.n	8004752 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474a:	1c9a      	adds	r2, r3, #2
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	; 0x28
 8004750:	e029      	b.n	80047a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	b29b      	uxth	r3, r3
 800475a:	b2db      	uxtb	r3, r3
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	629a      	str	r2, [r3, #40]	; 0x28
 800476c:	e01b      	b.n	80047a6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6858      	ldr	r0, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	1c59      	adds	r1, r3, #1
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6291      	str	r1, [r2, #40]	; 0x28
 8004786:	b2c2      	uxtb	r2, r0
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	e00c      	b.n	80047a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	b2da      	uxtb	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	1c58      	adds	r0, r3, #1
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	6288      	str	r0, [r1, #40]	; 0x28
 800479e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4619      	mov	r1, r3
 80047b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d120      	bne.n	80047fc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0220 	bic.w	r2, r2, #32
 80047c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff fe28 	bl	8004448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e002      	b.n	8004802 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800484e:	f023 030c 	bic.w	r3, r3, #12
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	68f9      	ldr	r1, [r7, #12]
 8004858:	430b      	orrs	r3, r1
 800485a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487a:	f040 818b 	bne.w	8004b94 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4ac1      	ldr	r2, [pc, #772]	; (8004b88 <UART_SetConfig+0x37c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d005      	beq.n	8004894 <UART_SetConfig+0x88>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4abf      	ldr	r2, [pc, #764]	; (8004b8c <UART_SetConfig+0x380>)
 800488e:	4293      	cmp	r3, r2
 8004890:	f040 80bd 	bne.w	8004a0e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004894:	f7fe fc50 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 8004898:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	461d      	mov	r5, r3
 800489e:	f04f 0600 	mov.w	r6, #0
 80048a2:	46a8      	mov	r8, r5
 80048a4:	46b1      	mov	r9, r6
 80048a6:	eb18 0308 	adds.w	r3, r8, r8
 80048aa:	eb49 0409 	adc.w	r4, r9, r9
 80048ae:	4698      	mov	r8, r3
 80048b0:	46a1      	mov	r9, r4
 80048b2:	eb18 0805 	adds.w	r8, r8, r5
 80048b6:	eb49 0906 	adc.w	r9, r9, r6
 80048ba:	f04f 0100 	mov.w	r1, #0
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048ce:	4688      	mov	r8, r1
 80048d0:	4691      	mov	r9, r2
 80048d2:	eb18 0005 	adds.w	r0, r8, r5
 80048d6:	eb49 0106 	adc.w	r1, r9, r6
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	461d      	mov	r5, r3
 80048e0:	f04f 0600 	mov.w	r6, #0
 80048e4:	196b      	adds	r3, r5, r5
 80048e6:	eb46 0406 	adc.w	r4, r6, r6
 80048ea:	461a      	mov	r2, r3
 80048ec:	4623      	mov	r3, r4
 80048ee:	f7fb fe27 	bl	8000540 <__aeabi_uldivmod>
 80048f2:	4603      	mov	r3, r0
 80048f4:	460c      	mov	r4, r1
 80048f6:	461a      	mov	r2, r3
 80048f8:	4ba5      	ldr	r3, [pc, #660]	; (8004b90 <UART_SetConfig+0x384>)
 80048fa:	fba3 2302 	umull	r2, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	461d      	mov	r5, r3
 8004908:	f04f 0600 	mov.w	r6, #0
 800490c:	46a9      	mov	r9, r5
 800490e:	46b2      	mov	sl, r6
 8004910:	eb19 0309 	adds.w	r3, r9, r9
 8004914:	eb4a 040a 	adc.w	r4, sl, sl
 8004918:	4699      	mov	r9, r3
 800491a:	46a2      	mov	sl, r4
 800491c:	eb19 0905 	adds.w	r9, r9, r5
 8004920:	eb4a 0a06 	adc.w	sl, sl, r6
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004930:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004934:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004938:	4689      	mov	r9, r1
 800493a:	4692      	mov	sl, r2
 800493c:	eb19 0005 	adds.w	r0, r9, r5
 8004940:	eb4a 0106 	adc.w	r1, sl, r6
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	461d      	mov	r5, r3
 800494a:	f04f 0600 	mov.w	r6, #0
 800494e:	196b      	adds	r3, r5, r5
 8004950:	eb46 0406 	adc.w	r4, r6, r6
 8004954:	461a      	mov	r2, r3
 8004956:	4623      	mov	r3, r4
 8004958:	f7fb fdf2 	bl	8000540 <__aeabi_uldivmod>
 800495c:	4603      	mov	r3, r0
 800495e:	460c      	mov	r4, r1
 8004960:	461a      	mov	r2, r3
 8004962:	4b8b      	ldr	r3, [pc, #556]	; (8004b90 <UART_SetConfig+0x384>)
 8004964:	fba3 1302 	umull	r1, r3, r3, r2
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	2164      	movs	r1, #100	; 0x64
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	3332      	adds	r3, #50	; 0x32
 8004976:	4a86      	ldr	r2, [pc, #536]	; (8004b90 <UART_SetConfig+0x384>)
 8004978:	fba2 2303 	umull	r2, r3, r2, r3
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004984:	4498      	add	r8, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	461d      	mov	r5, r3
 800498a:	f04f 0600 	mov.w	r6, #0
 800498e:	46a9      	mov	r9, r5
 8004990:	46b2      	mov	sl, r6
 8004992:	eb19 0309 	adds.w	r3, r9, r9
 8004996:	eb4a 040a 	adc.w	r4, sl, sl
 800499a:	4699      	mov	r9, r3
 800499c:	46a2      	mov	sl, r4
 800499e:	eb19 0905 	adds.w	r9, r9, r5
 80049a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80049a6:	f04f 0100 	mov.w	r1, #0
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049ba:	4689      	mov	r9, r1
 80049bc:	4692      	mov	sl, r2
 80049be:	eb19 0005 	adds.w	r0, r9, r5
 80049c2:	eb4a 0106 	adc.w	r1, sl, r6
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	461d      	mov	r5, r3
 80049cc:	f04f 0600 	mov.w	r6, #0
 80049d0:	196b      	adds	r3, r5, r5
 80049d2:	eb46 0406 	adc.w	r4, r6, r6
 80049d6:	461a      	mov	r2, r3
 80049d8:	4623      	mov	r3, r4
 80049da:	f7fb fdb1 	bl	8000540 <__aeabi_uldivmod>
 80049de:	4603      	mov	r3, r0
 80049e0:	460c      	mov	r4, r1
 80049e2:	461a      	mov	r2, r3
 80049e4:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <UART_SetConfig+0x384>)
 80049e6:	fba3 1302 	umull	r1, r3, r3, r2
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2164      	movs	r1, #100	; 0x64
 80049ee:	fb01 f303 	mul.w	r3, r1, r3
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	3332      	adds	r3, #50	; 0x32
 80049f8:	4a65      	ldr	r2, [pc, #404]	; (8004b90 <UART_SetConfig+0x384>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	f003 0207 	and.w	r2, r3, #7
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4442      	add	r2, r8
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	e26f      	b.n	8004eee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a0e:	f7fe fb7f 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8004a12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	461d      	mov	r5, r3
 8004a18:	f04f 0600 	mov.w	r6, #0
 8004a1c:	46a8      	mov	r8, r5
 8004a1e:	46b1      	mov	r9, r6
 8004a20:	eb18 0308 	adds.w	r3, r8, r8
 8004a24:	eb49 0409 	adc.w	r4, r9, r9
 8004a28:	4698      	mov	r8, r3
 8004a2a:	46a1      	mov	r9, r4
 8004a2c:	eb18 0805 	adds.w	r8, r8, r5
 8004a30:	eb49 0906 	adc.w	r9, r9, r6
 8004a34:	f04f 0100 	mov.w	r1, #0
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a48:	4688      	mov	r8, r1
 8004a4a:	4691      	mov	r9, r2
 8004a4c:	eb18 0005 	adds.w	r0, r8, r5
 8004a50:	eb49 0106 	adc.w	r1, r9, r6
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	461d      	mov	r5, r3
 8004a5a:	f04f 0600 	mov.w	r6, #0
 8004a5e:	196b      	adds	r3, r5, r5
 8004a60:	eb46 0406 	adc.w	r4, r6, r6
 8004a64:	461a      	mov	r2, r3
 8004a66:	4623      	mov	r3, r4
 8004a68:	f7fb fd6a 	bl	8000540 <__aeabi_uldivmod>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b47      	ldr	r3, [pc, #284]	; (8004b90 <UART_SetConfig+0x384>)
 8004a74:	fba3 2302 	umull	r2, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	461d      	mov	r5, r3
 8004a82:	f04f 0600 	mov.w	r6, #0
 8004a86:	46a9      	mov	r9, r5
 8004a88:	46b2      	mov	sl, r6
 8004a8a:	eb19 0309 	adds.w	r3, r9, r9
 8004a8e:	eb4a 040a 	adc.w	r4, sl, sl
 8004a92:	4699      	mov	r9, r3
 8004a94:	46a2      	mov	sl, r4
 8004a96:	eb19 0905 	adds.w	r9, r9, r5
 8004a9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aaa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004aae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ab2:	4689      	mov	r9, r1
 8004ab4:	4692      	mov	sl, r2
 8004ab6:	eb19 0005 	adds.w	r0, r9, r5
 8004aba:	eb4a 0106 	adc.w	r1, sl, r6
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	461d      	mov	r5, r3
 8004ac4:	f04f 0600 	mov.w	r6, #0
 8004ac8:	196b      	adds	r3, r5, r5
 8004aca:	eb46 0406 	adc.w	r4, r6, r6
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4623      	mov	r3, r4
 8004ad2:	f7fb fd35 	bl	8000540 <__aeabi_uldivmod>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	460c      	mov	r4, r1
 8004ada:	461a      	mov	r2, r3
 8004adc:	4b2c      	ldr	r3, [pc, #176]	; (8004b90 <UART_SetConfig+0x384>)
 8004ade:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2164      	movs	r1, #100	; 0x64
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	3332      	adds	r3, #50	; 0x32
 8004af0:	4a27      	ldr	r2, [pc, #156]	; (8004b90 <UART_SetConfig+0x384>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004afe:	4498      	add	r8, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	461d      	mov	r5, r3
 8004b04:	f04f 0600 	mov.w	r6, #0
 8004b08:	46a9      	mov	r9, r5
 8004b0a:	46b2      	mov	sl, r6
 8004b0c:	eb19 0309 	adds.w	r3, r9, r9
 8004b10:	eb4a 040a 	adc.w	r4, sl, sl
 8004b14:	4699      	mov	r9, r3
 8004b16:	46a2      	mov	sl, r4
 8004b18:	eb19 0905 	adds.w	r9, r9, r5
 8004b1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b20:	f04f 0100 	mov.w	r1, #0
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b34:	4689      	mov	r9, r1
 8004b36:	4692      	mov	sl, r2
 8004b38:	eb19 0005 	adds.w	r0, r9, r5
 8004b3c:	eb4a 0106 	adc.w	r1, sl, r6
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	461d      	mov	r5, r3
 8004b46:	f04f 0600 	mov.w	r6, #0
 8004b4a:	196b      	adds	r3, r5, r5
 8004b4c:	eb46 0406 	adc.w	r4, r6, r6
 8004b50:	461a      	mov	r2, r3
 8004b52:	4623      	mov	r3, r4
 8004b54:	f7fb fcf4 	bl	8000540 <__aeabi_uldivmod>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <UART_SetConfig+0x384>)
 8004b60:	fba3 1302 	umull	r1, r3, r3, r2
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	2164      	movs	r1, #100	; 0x64
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	3332      	adds	r3, #50	; 0x32
 8004b72:	4a07      	ldr	r2, [pc, #28]	; (8004b90 <UART_SetConfig+0x384>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	f003 0207 	and.w	r2, r3, #7
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4442      	add	r2, r8
 8004b84:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004b86:	e1b2      	b.n	8004eee <UART_SetConfig+0x6e2>
 8004b88:	40011000 	.word	0x40011000
 8004b8c:	40011400 	.word	0x40011400
 8004b90:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4ad7      	ldr	r2, [pc, #860]	; (8004ef8 <UART_SetConfig+0x6ec>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d005      	beq.n	8004baa <UART_SetConfig+0x39e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4ad6      	ldr	r2, [pc, #856]	; (8004efc <UART_SetConfig+0x6f0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	f040 80d1 	bne.w	8004d4c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004baa:	f7fe fac5 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 8004bae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	469a      	mov	sl, r3
 8004bb4:	f04f 0b00 	mov.w	fp, #0
 8004bb8:	46d0      	mov	r8, sl
 8004bba:	46d9      	mov	r9, fp
 8004bbc:	eb18 0308 	adds.w	r3, r8, r8
 8004bc0:	eb49 0409 	adc.w	r4, r9, r9
 8004bc4:	4698      	mov	r8, r3
 8004bc6:	46a1      	mov	r9, r4
 8004bc8:	eb18 080a 	adds.w	r8, r8, sl
 8004bcc:	eb49 090b 	adc.w	r9, r9, fp
 8004bd0:	f04f 0100 	mov.w	r1, #0
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bdc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004be0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004be4:	4688      	mov	r8, r1
 8004be6:	4691      	mov	r9, r2
 8004be8:	eb1a 0508 	adds.w	r5, sl, r8
 8004bec:	eb4b 0609 	adc.w	r6, fp, r9
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	f04f 0400 	mov.w	r4, #0
 8004c02:	0094      	lsls	r4, r2, #2
 8004c04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c08:	008b      	lsls	r3, r1, #2
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4623      	mov	r3, r4
 8004c0e:	4628      	mov	r0, r5
 8004c10:	4631      	mov	r1, r6
 8004c12:	f7fb fc95 	bl	8000540 <__aeabi_uldivmod>
 8004c16:	4603      	mov	r3, r0
 8004c18:	460c      	mov	r4, r1
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4bb8      	ldr	r3, [pc, #736]	; (8004f00 <UART_SetConfig+0x6f4>)
 8004c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	469b      	mov	fp, r3
 8004c2c:	f04f 0c00 	mov.w	ip, #0
 8004c30:	46d9      	mov	r9, fp
 8004c32:	46e2      	mov	sl, ip
 8004c34:	eb19 0309 	adds.w	r3, r9, r9
 8004c38:	eb4a 040a 	adc.w	r4, sl, sl
 8004c3c:	4699      	mov	r9, r3
 8004c3e:	46a2      	mov	sl, r4
 8004c40:	eb19 090b 	adds.w	r9, r9, fp
 8004c44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c48:	f04f 0100 	mov.w	r1, #0
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c5c:	4689      	mov	r9, r1
 8004c5e:	4692      	mov	sl, r2
 8004c60:	eb1b 0509 	adds.w	r5, fp, r9
 8004c64:	eb4c 060a 	adc.w	r6, ip, sl
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	f04f 0400 	mov.w	r4, #0
 8004c7a:	0094      	lsls	r4, r2, #2
 8004c7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c80:	008b      	lsls	r3, r1, #2
 8004c82:	461a      	mov	r2, r3
 8004c84:	4623      	mov	r3, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	4631      	mov	r1, r6
 8004c8a:	f7fb fc59 	bl	8000540 <__aeabi_uldivmod>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	460c      	mov	r4, r1
 8004c92:	461a      	mov	r2, r3
 8004c94:	4b9a      	ldr	r3, [pc, #616]	; (8004f00 <UART_SetConfig+0x6f4>)
 8004c96:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	2164      	movs	r1, #100	; 0x64
 8004c9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	3332      	adds	r3, #50	; 0x32
 8004ca8:	4a95      	ldr	r2, [pc, #596]	; (8004f00 <UART_SetConfig+0x6f4>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb4:	4498      	add	r8, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	469b      	mov	fp, r3
 8004cba:	f04f 0c00 	mov.w	ip, #0
 8004cbe:	46d9      	mov	r9, fp
 8004cc0:	46e2      	mov	sl, ip
 8004cc2:	eb19 0309 	adds.w	r3, r9, r9
 8004cc6:	eb4a 040a 	adc.w	r4, sl, sl
 8004cca:	4699      	mov	r9, r3
 8004ccc:	46a2      	mov	sl, r4
 8004cce:	eb19 090b 	adds.w	r9, r9, fp
 8004cd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ce6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cea:	4689      	mov	r9, r1
 8004cec:	4692      	mov	sl, r2
 8004cee:	eb1b 0509 	adds.w	r5, fp, r9
 8004cf2:	eb4c 060a 	adc.w	r6, ip, sl
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	f04f 0400 	mov.w	r4, #0
 8004d08:	0094      	lsls	r4, r2, #2
 8004d0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d0e:	008b      	lsls	r3, r1, #2
 8004d10:	461a      	mov	r2, r3
 8004d12:	4623      	mov	r3, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	4631      	mov	r1, r6
 8004d18:	f7fb fc12 	bl	8000540 <__aeabi_uldivmod>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b77      	ldr	r3, [pc, #476]	; (8004f00 <UART_SetConfig+0x6f4>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	; 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	3332      	adds	r3, #50	; 0x32
 8004d36:	4a72      	ldr	r2, [pc, #456]	; (8004f00 <UART_SetConfig+0x6f4>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 020f 	and.w	r2, r3, #15
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4442      	add	r2, r8
 8004d48:	609a      	str	r2, [r3, #8]
 8004d4a:	e0d0      	b.n	8004eee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d4c:	f7fe f9e0 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8004d50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	469a      	mov	sl, r3
 8004d56:	f04f 0b00 	mov.w	fp, #0
 8004d5a:	46d0      	mov	r8, sl
 8004d5c:	46d9      	mov	r9, fp
 8004d5e:	eb18 0308 	adds.w	r3, r8, r8
 8004d62:	eb49 0409 	adc.w	r4, r9, r9
 8004d66:	4698      	mov	r8, r3
 8004d68:	46a1      	mov	r9, r4
 8004d6a:	eb18 080a 	adds.w	r8, r8, sl
 8004d6e:	eb49 090b 	adc.w	r9, r9, fp
 8004d72:	f04f 0100 	mov.w	r1, #0
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d86:	4688      	mov	r8, r1
 8004d88:	4691      	mov	r9, r2
 8004d8a:	eb1a 0508 	adds.w	r5, sl, r8
 8004d8e:	eb4b 0609 	adc.w	r6, fp, r9
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4619      	mov	r1, r3
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	f04f 0400 	mov.w	r4, #0
 8004da4:	0094      	lsls	r4, r2, #2
 8004da6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004daa:	008b      	lsls	r3, r1, #2
 8004dac:	461a      	mov	r2, r3
 8004dae:	4623      	mov	r3, r4
 8004db0:	4628      	mov	r0, r5
 8004db2:	4631      	mov	r1, r6
 8004db4:	f7fb fbc4 	bl	8000540 <__aeabi_uldivmod>
 8004db8:	4603      	mov	r3, r0
 8004dba:	460c      	mov	r4, r1
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4b50      	ldr	r3, [pc, #320]	; (8004f00 <UART_SetConfig+0x6f4>)
 8004dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	469b      	mov	fp, r3
 8004dce:	f04f 0c00 	mov.w	ip, #0
 8004dd2:	46d9      	mov	r9, fp
 8004dd4:	46e2      	mov	sl, ip
 8004dd6:	eb19 0309 	adds.w	r3, r9, r9
 8004dda:	eb4a 040a 	adc.w	r4, sl, sl
 8004dde:	4699      	mov	r9, r3
 8004de0:	46a2      	mov	sl, r4
 8004de2:	eb19 090b 	adds.w	r9, r9, fp
 8004de6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004dea:	f04f 0100 	mov.w	r1, #0
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004df6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dfe:	4689      	mov	r9, r1
 8004e00:	4692      	mov	sl, r2
 8004e02:	eb1b 0509 	adds.w	r5, fp, r9
 8004e06:	eb4c 060a 	adc.w	r6, ip, sl
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	f04f 0400 	mov.w	r4, #0
 8004e1c:	0094      	lsls	r4, r2, #2
 8004e1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e22:	008b      	lsls	r3, r1, #2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4623      	mov	r3, r4
 8004e28:	4628      	mov	r0, r5
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	f7fb fb88 	bl	8000540 <__aeabi_uldivmod>
 8004e30:	4603      	mov	r3, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	461a      	mov	r2, r3
 8004e36:	4b32      	ldr	r3, [pc, #200]	; (8004f00 <UART_SetConfig+0x6f4>)
 8004e38:	fba3 1302 	umull	r1, r3, r3, r2
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	2164      	movs	r1, #100	; 0x64
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	3332      	adds	r3, #50	; 0x32
 8004e4a:	4a2d      	ldr	r2, [pc, #180]	; (8004f00 <UART_SetConfig+0x6f4>)
 8004e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e56:	4498      	add	r8, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	469b      	mov	fp, r3
 8004e5c:	f04f 0c00 	mov.w	ip, #0
 8004e60:	46d9      	mov	r9, fp
 8004e62:	46e2      	mov	sl, ip
 8004e64:	eb19 0309 	adds.w	r3, r9, r9
 8004e68:	eb4a 040a 	adc.w	r4, sl, sl
 8004e6c:	4699      	mov	r9, r3
 8004e6e:	46a2      	mov	sl, r4
 8004e70:	eb19 090b 	adds.w	r9, r9, fp
 8004e74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e78:	f04f 0100 	mov.w	r1, #0
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e8c:	4689      	mov	r9, r1
 8004e8e:	4692      	mov	sl, r2
 8004e90:	eb1b 0509 	adds.w	r5, fp, r9
 8004e94:	eb4c 060a 	adc.w	r6, ip, sl
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	f04f 0400 	mov.w	r4, #0
 8004eaa:	0094      	lsls	r4, r2, #2
 8004eac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004eb0:	008b      	lsls	r3, r1, #2
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4623      	mov	r3, r4
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	4631      	mov	r1, r6
 8004eba:	f7fb fb41 	bl	8000540 <__aeabi_uldivmod>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <UART_SetConfig+0x6f4>)
 8004ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2164      	movs	r1, #100	; 0x64
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	3332      	adds	r3, #50	; 0x32
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <UART_SetConfig+0x6f4>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	f003 020f 	and.w	r2, r3, #15
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4442      	add	r2, r8
 8004eea:	609a      	str	r2, [r3, #8]
}
 8004eec:	e7ff      	b.n	8004eee <UART_SetConfig+0x6e2>
 8004eee:	bf00      	nop
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef8:	40011000 	.word	0x40011000
 8004efc:	40011400 	.word	0x40011400
 8004f00:	51eb851f 	.word	0x51eb851f

08004f04 <__libc_init_array>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	4e0d      	ldr	r6, [pc, #52]	; (8004f3c <__libc_init_array+0x38>)
 8004f08:	4c0d      	ldr	r4, [pc, #52]	; (8004f40 <__libc_init_array+0x3c>)
 8004f0a:	1ba4      	subs	r4, r4, r6
 8004f0c:	10a4      	asrs	r4, r4, #2
 8004f0e:	2500      	movs	r5, #0
 8004f10:	42a5      	cmp	r5, r4
 8004f12:	d109      	bne.n	8004f28 <__libc_init_array+0x24>
 8004f14:	4e0b      	ldr	r6, [pc, #44]	; (8004f44 <__libc_init_array+0x40>)
 8004f16:	4c0c      	ldr	r4, [pc, #48]	; (8004f48 <__libc_init_array+0x44>)
 8004f18:	f000 f820 	bl	8004f5c <_init>
 8004f1c:	1ba4      	subs	r4, r4, r6
 8004f1e:	10a4      	asrs	r4, r4, #2
 8004f20:	2500      	movs	r5, #0
 8004f22:	42a5      	cmp	r5, r4
 8004f24:	d105      	bne.n	8004f32 <__libc_init_array+0x2e>
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f2c:	4798      	blx	r3
 8004f2e:	3501      	adds	r5, #1
 8004f30:	e7ee      	b.n	8004f10 <__libc_init_array+0xc>
 8004f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f36:	4798      	blx	r3
 8004f38:	3501      	adds	r5, #1
 8004f3a:	e7f2      	b.n	8004f22 <__libc_init_array+0x1e>
 8004f3c:	08004f9c 	.word	0x08004f9c
 8004f40:	08004f9c 	.word	0x08004f9c
 8004f44:	08004f9c 	.word	0x08004f9c
 8004f48:	08004fa0 	.word	0x08004fa0

08004f4c <memset>:
 8004f4c:	4402      	add	r2, r0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d100      	bne.n	8004f56 <memset+0xa>
 8004f54:	4770      	bx	lr
 8004f56:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5a:	e7f9      	b.n	8004f50 <memset+0x4>

08004f5c <_init>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr

08004f68 <_fini>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr
