
zmanual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fec  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08006178  08006178  00016178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b8  080063b8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080063b8  080063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063c0  080063c0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063c0  080063c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080063c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000080  08006444  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08006444  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b11c  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000190b  00000000  00000000  0002b1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c10  00000000  00000000  0002cad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0002d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002095a  00000000  00000000  0002e230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085a8  00000000  00000000  0004eb8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9056  00000000  00000000  00057132  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120188  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003800  00000000  00000000  00120204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800615c 	.word	0x0800615c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800615c 	.word	0x0800615c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b972 	b.w	8000dec <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	4688      	mov	r8, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d14b      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b2e:	428a      	cmp	r2, r1
 8000b30:	4615      	mov	r5, r2
 8000b32:	d967      	bls.n	8000c04 <__udivmoddi4+0xe4>
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0720 	rsb	r7, r2, #32
 8000b3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b42:	fa20 f707 	lsr.w	r7, r0, r7
 8000b46:	4095      	lsls	r5, r2
 8000b48:	ea47 0803 	orr.w	r8, r7, r3
 8000b4c:	4094      	lsls	r4, r2
 8000b4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b52:	0c23      	lsrs	r3, r4, #16
 8000b54:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b58:	fa1f fc85 	uxth.w	ip, r5
 8000b5c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b60:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b64:	fb07 f10c 	mul.w	r1, r7, ip
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x60>
 8000b6c:	18eb      	adds	r3, r5, r3
 8000b6e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b72:	f080 811b 	bcs.w	8000dac <__udivmoddi4+0x28c>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 8118 	bls.w	8000dac <__udivmoddi4+0x28c>
 8000b7c:	3f02      	subs	r7, #2
 8000b7e:	442b      	add	r3, r5
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b94:	45a4      	cmp	ip, r4
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x8c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	442c      	add	r4, r5
 8000bac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bb0:	eba4 040c 	sub.w	r4, r4, ip
 8000bb4:	2700      	movs	r7, #0
 8000bb6:	b11e      	cbz	r6, 8000bc0 <__udivmoddi4+0xa0>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc0:	4639      	mov	r1, r7
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xbe>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80eb 	beq.w	8000da6 <__udivmoddi4+0x286>
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	4639      	mov	r1, r7
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f783 	clz	r7, r3
 8000be2:	2f00      	cmp	r7, #0
 8000be4:	d147      	bne.n	8000c76 <__udivmoddi4+0x156>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd0>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80fa 	bhi.w	8000de4 <__udivmoddi4+0x2c4>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa0>
 8000bfe:	e9c6 4800 	strd	r4, r8, [r6]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xe8>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 808f 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c12:	1b49      	subs	r1, r1, r5
 8000c14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c18:	fa1f f885 	uxth.w	r8, r5
 8000c1c:	2701      	movs	r7, #1
 8000c1e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	f200 80cd 	bhi.w	8000ddc <__udivmoddi4+0x2bc>
 8000c42:	4684      	mov	ip, r0
 8000c44:	1a59      	subs	r1, r3, r1
 8000c46:	b2a3      	uxth	r3, r4
 8000c48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c54:	fb08 f800 	mul.w	r8, r8, r0
 8000c58:	45a0      	cmp	r8, r4
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x14c>
 8000c5c:	192c      	adds	r4, r5, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x14a>
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	f200 80b6 	bhi.w	8000dd6 <__udivmoddi4+0x2b6>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	eba4 0408 	sub.w	r4, r4, r8
 8000c70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c74:	e79f      	b.n	8000bb6 <__udivmoddi4+0x96>
 8000c76:	f1c7 0c20 	rsb	ip, r7, #32
 8000c7a:	40bb      	lsls	r3, r7
 8000c7c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c80:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c84:	fa01 f407 	lsl.w	r4, r1, r7
 8000c88:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c8c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c90:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c94:	4325      	orrs	r5, r4
 8000c96:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c9a:	0c2c      	lsrs	r4, r5, #16
 8000c9c:	fb08 3319 	mls	r3, r8, r9, r3
 8000ca0:	fa1f fa8e 	uxth.w	sl, lr
 8000ca4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cac:	429c      	cmp	r4, r3
 8000cae:	fa02 f207 	lsl.w	r2, r2, r7
 8000cb2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	f080 8087 	bcs.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f240 8084 	bls.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cca:	f1a9 0902 	sub.w	r9, r9, #2
 8000cce:	4473      	add	r3, lr
 8000cd0:	1b1b      	subs	r3, r3, r4
 8000cd2:	b2ad      	uxth	r5, r5
 8000cd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cdc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ce0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce4:	45a2      	cmp	sl, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	d26b      	bcs.n	8000dca <__udivmoddi4+0x2aa>
 8000cf2:	45a2      	cmp	sl, r4
 8000cf4:	d969      	bls.n	8000dca <__udivmoddi4+0x2aa>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4474      	add	r4, lr
 8000cfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	eba4 040a 	sub.w	r4, r4, sl
 8000d06:	454c      	cmp	r4, r9
 8000d08:	46c2      	mov	sl, r8
 8000d0a:	464b      	mov	r3, r9
 8000d0c:	d354      	bcc.n	8000db8 <__udivmoddi4+0x298>
 8000d0e:	d051      	beq.n	8000db4 <__udivmoddi4+0x294>
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d069      	beq.n	8000de8 <__udivmoddi4+0x2c8>
 8000d14:	ebb1 050a 	subs.w	r5, r1, sl
 8000d18:	eb64 0403 	sbc.w	r4, r4, r3
 8000d1c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d20:	40fd      	lsrs	r5, r7
 8000d22:	40fc      	lsrs	r4, r7
 8000d24:	ea4c 0505 	orr.w	r5, ip, r5
 8000d28:	e9c6 5400 	strd	r5, r4, [r6]
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f703 	lsr.w	r7, r0, r3
 8000d38:	4095      	lsls	r5, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d46:	4338      	orrs	r0, r7
 8000d48:	0c01      	lsrs	r1, r0, #16
 8000d4a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4e:	fa1f f885 	uxth.w	r8, r5
 8000d52:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb07 f308 	mul.w	r3, r7, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	fa04 f402 	lsl.w	r4, r4, r2
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x256>
 8000d66:	1869      	adds	r1, r5, r1
 8000d68:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d6c:	d22f      	bcs.n	8000dce <__udivmoddi4+0x2ae>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d92d      	bls.n	8000dce <__udivmoddi4+0x2ae>
 8000d72:	3f02      	subs	r7, #2
 8000d74:	4429      	add	r1, r5
 8000d76:	1acb      	subs	r3, r1, r3
 8000d78:	b281      	uxth	r1, r0
 8000d7a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb00 f308 	mul.w	r3, r0, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x27e>
 8000d8e:	1869      	adds	r1, r5, r1
 8000d90:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d94:	d217      	bcs.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d915      	bls.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4429      	add	r1, r5
 8000d9e:	1ac9      	subs	r1, r1, r3
 8000da0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da4:	e73b      	b.n	8000c1e <__udivmoddi4+0xfe>
 8000da6:	4637      	mov	r7, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e709      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000dac:	4607      	mov	r7, r0
 8000dae:	e6e7      	b.n	8000b80 <__udivmoddi4+0x60>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x8c>
 8000db4:	4541      	cmp	r1, r8
 8000db6:	d2ab      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000db8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dbc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	e7a4      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc6:	4660      	mov	r0, ip
 8000dc8:	e7e9      	b.n	8000d9e <__udivmoddi4+0x27e>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	e795      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dce:	4667      	mov	r7, ip
 8000dd0:	e7d1      	b.n	8000d76 <__udivmoddi4+0x256>
 8000dd2:	4681      	mov	r9, r0
 8000dd4:	e77c      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	442c      	add	r4, r5
 8000dda:	e747      	b.n	8000c6c <__udivmoddi4+0x14c>
 8000ddc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de0:	442b      	add	r3, r5
 8000de2:	e72f      	b.n	8000c44 <__udivmoddi4+0x124>
 8000de4:	4638      	mov	r0, r7
 8000de6:	e708      	b.n	8000bfa <__udivmoddi4+0xda>
 8000de8:	4637      	mov	r7, r6
 8000dea:	e6e9      	b.n	8000bc0 <__udivmoddi4+0xa0>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <peripheralUART_Init>:
uint8_t PS2CheckbyteCount = 0, PS2Data[6], PS2DataIndex;
int16_t PS2Button, PS2JoyLeft,PS2JoyRigt;
char* controlData;

void peripheralUART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000df4:	2201      	movs	r2, #1
 8000df6:	4903      	ldr	r1, [pc, #12]	; (8000e04 <peripheralUART_Init+0x14>)
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <peripheralUART_Init+0x18>)
 8000dfa:	f003 f8ff 	bl	8003ffc <HAL_UART_Receive_DMA>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200002c0 	.word	0x200002c0
 8000e08:	20000228 	.word	0x20000228

08000e0c <peripheralPWM_Init>:
uint8_t motor3Dir;
uint8_t motor4Dir;


void peripheralPWM_Init()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&motor1, motor1_channel);
 8000e10:	2100      	movs	r1, #0
 8000e12:	4808      	ldr	r0, [pc, #32]	; (8000e34 <peripheralPWM_Init+0x28>)
 8000e14:	f002 fb5c 	bl	80034d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor2, motor2_channel);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4807      	ldr	r0, [pc, #28]	; (8000e38 <peripheralPWM_Init+0x2c>)
 8000e1c:	f002 fb58 	bl	80034d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor3, motor3_channel);
 8000e20:	2100      	movs	r1, #0
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <peripheralPWM_Init+0x30>)
 8000e24:	f002 fb54 	bl	80034d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor4, motor4_channel);	
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <peripheralPWM_Init+0x34>)
 8000e2c:	f002 fb50 	bl	80034d0 <HAL_TIM_PWM_Start>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200002d0 	.word	0x200002d0
 8000e38:	20000168 	.word	0x20000168
 8000e3c:	200000b4 	.word	0x200000b4
 8000e40:	20000124 	.word	0x20000124

08000e44 <controlMotor1>:

void controlMotor1(int _speed)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db05      	blt.n	8000e5e <controlMotor1+0x1a>
	{
		HAL_GPIO_WritePin(motor1Dir_GPIO_Port, motor1Dir_Pin, CCW);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2108      	movs	r1, #8
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <controlMotor1+0x3c>)
 8000e58:	f001 fe84 	bl	8002b64 <HAL_GPIO_WritePin>
 8000e5c:	e004      	b.n	8000e68 <controlMotor1+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor1Dir_GPIO_Port, motor1Dir_Pin, FCW);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2108      	movs	r1, #8
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <controlMotor1+0x3c>)
 8000e64:	f001 fe7e 	bl	8002b64 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SetCompare(&motor1, TIM_CHANNEL_1, abs(_speed));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e6e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <controlMotor1+0x40>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40020400 	.word	0x40020400
 8000e84:	200002d0 	.word	0x200002d0

08000e88 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db05      	blt.n	8000ea2 <controlMotor2+0x1a>
	{
		HAL_GPIO_WritePin(motor2Dir_GPIO_Port, motor2Dir_Pin, CCW);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2120      	movs	r1, #32
 8000e9a:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <controlMotor2+0x3c>)
 8000e9c:	f001 fe62 	bl	8002b64 <HAL_GPIO_WritePin>
 8000ea0:	e004      	b.n	8000eac <controlMotor2+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor2Dir_GPIO_Port, motor2Dir_Pin, FCW);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <controlMotor2+0x3c>)
 8000ea8:	f001 fe5c 	bl	8002b64 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SetCompare(&motor2, TIM_CHANNEL_1, abs(_speed));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000eb2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <controlMotor2+0x40>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	20000168 	.word	0x20000168

08000ecc <controlMotor3>:
void controlMotor3(int _speed)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db06      	blt.n	8000ee8 <controlMotor3+0x1c>
	{
		HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, CCW);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <controlMotor3+0x40>)
 8000ee2:	f001 fe3f 	bl	8002b64 <HAL_GPIO_WritePin>
 8000ee6:	e005      	b.n	8000ef4 <controlMotor3+0x28>
	}
	else
	{
		HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, FCW);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <controlMotor3+0x40>)
 8000ef0:	f001 fe38 	bl	8002b64 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SetCompare(&motor3, TIM_CHANNEL_1, abs(_speed));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000efa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <controlMotor3+0x44>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40020c00 	.word	0x40020c00
 8000f10:	200000b4 	.word	0x200000b4

08000f14 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db05      	blt.n	8000f2e <controlMotor4+0x1a>
	{
		HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, CCW);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2102      	movs	r1, #2
 8000f26:	480a      	ldr	r0, [pc, #40]	; (8000f50 <controlMotor4+0x3c>)
 8000f28:	f001 fe1c 	bl	8002b64 <HAL_GPIO_WritePin>
 8000f2c:	e004      	b.n	8000f38 <controlMotor4+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, FCW);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2102      	movs	r1, #2
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <controlMotor4+0x3c>)
 8000f34:	f001 fe16 	bl	8002b64 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SetCompare(&motor4, TIM_CHANNEL_1, abs(_speed));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f3e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <controlMotor4+0x40>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40020000 	.word	0x40020000
 8000f54:	20000124 	.word	0x20000124

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 ff76 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f9a0 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 fc28 	bl	80017b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f68:	f000 fc06 	bl	8001778 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f6c:	f000 fbda 	bl	8001724 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f70:	f000 fa02 	bl	8001378 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f74:	f000 fa74 	bl	8001460 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f78:	f000 fae8 	bl	800154c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f7c:	f000 fb5c 	bl	8001638 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8000f80:	f7ff ff36 	bl	8000df0 <peripheralUART_Init>
  peripheralPWM_Init();
 8000f84:	f7ff ff42 	bl	8000e0c <peripheralPWM_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  yawSpeed = 0.25*joyRigtHor;
 8000f88:	4bbb      	ldr	r3, [pc, #748]	; (8001278 <main+0x320>)
 8000f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa6c 	bl	800046c <__aeabi_i2d>
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	4bb8      	ldr	r3, [pc, #736]	; (800127c <main+0x324>)
 8000f9a:	f7ff fad1 	bl	8000540 <__aeabi_dmul>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460c      	mov	r4, r1
 8000fa2:	4ab7      	ldr	r2, [pc, #732]	; (8001280 <main+0x328>)
 8000fa4:	e9c2 3400 	strd	r3, r4, [r2]
	_dir = atan2(joyLeftHor, joyLeftVer);
 8000fa8:	4bb6      	ldr	r3, [pc, #728]	; (8001284 <main+0x32c>)
 8000faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa5c 	bl	800046c <__aeabi_i2d>
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	460d      	mov	r5, r1
 8000fb8:	4bb3      	ldr	r3, [pc, #716]	; (8001288 <main+0x330>)
 8000fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fa54 	bl	800046c <__aeabi_i2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	ec43 2b11 	vmov	d1, r2, r3
 8000fcc:	ec45 4b10 	vmov	d0, r4, r5
 8000fd0:	f003 fd66 	bl	8004aa0 <atan2>
 8000fd4:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd8:	eef0 7a60 	vmov.f32	s15, s1
 8000fdc:	4bab      	ldr	r3, [pc, #684]	; (800128c <main+0x334>)
 8000fde:	ed83 7b00 	vstr	d7, [r3]
//	_roL_pit_speed = sqrt(roLPID*roLPID + pitPID*pitPID);
//	_dir = atan2(pitPID, roLPID);
	_controlSpeed = sqrt(joyLeftHor*joyLeftHor + joyLeftVer*joyLeftVer);
 8000fe2:	4ba8      	ldr	r3, [pc, #672]	; (8001284 <main+0x32c>)
 8000fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4ba6      	ldr	r3, [pc, #664]	; (8001284 <main+0x32c>)
 8000fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff0:	fb03 f202 	mul.w	r2, r3, r2
 8000ff4:	4ba4      	ldr	r3, [pc, #656]	; (8001288 <main+0x330>)
 8000ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4ba2      	ldr	r3, [pc, #648]	; (8001288 <main+0x330>)
 8000ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001002:	fb03 f301 	mul.w	r3, r3, r1
 8001006:	4413      	add	r3, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa2f 	bl	800046c <__aeabi_i2d>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	ec44 3b10 	vmov	d0, r3, r4
 8001016:	f003 fd45 	bl	8004aa4 <sqrt>
 800101a:	eeb0 7a40 	vmov.f32	s14, s0
 800101e:	eef0 7a60 	vmov.f32	s15, s1
 8001022:	4b9b      	ldr	r3, [pc, #620]	; (8001290 <main+0x338>)
 8001024:	ed83 7b00 	vstr	d7, [r3]
//	_motor1Speed = yawSpeed + -(0.5*_controlSpeed *sin(_dir + M_PI/4) + 0);
//	_motor2Speed = yawSpeed + -(0.5*_controlSpeed *cos(_dir + M_PI/4) - 0);
//	_motor3Speed = yawSpeed +   0.5*_controlSpeed *sin(_dir + M_PI/4) + 0;
//	_motor4Speed = yawSpeed +   0.5*_controlSpeed *cos(_dir + M_PI/4) - 0;
	_motor1Speed = yawSpeed + (0.3*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 8001028:	4b99      	ldr	r3, [pc, #612]	; (8001290 <main+0x338>)
 800102a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800102e:	a38c      	add	r3, pc, #560	; (adr r3, 8001260 <main+0x308>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fa84 	bl	8000540 <__aeabi_dmul>
 8001038:	4603      	mov	r3, r0
 800103a:	460c      	mov	r4, r1
 800103c:	461d      	mov	r5, r3
 800103e:	4626      	mov	r6, r4
 8001040:	4b92      	ldr	r3, [pc, #584]	; (800128c <main+0x334>)
 8001042:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001046:	461a      	mov	r2, r3
 8001048:	4623      	mov	r3, r4
 800104a:	a187      	add	r1, pc, #540	; (adr r1, 8001268 <main+0x310>)
 800104c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001050:	f7ff f8be 	bl	80001d0 <__aeabi_dsub>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	ec44 3b17 	vmov	d7, r3, r4
 800105c:	eeb0 0a47 	vmov.f32	s0, s14
 8001060:	eef0 0a67 	vmov.f32	s1, s15
 8001064:	f003 fcd8 	bl	8004a18 <cos>
 8001068:	ec54 3b10 	vmov	r3, r4, d0
 800106c:	461a      	mov	r2, r3
 800106e:	4623      	mov	r3, r4
 8001070:	4628      	mov	r0, r5
 8001072:	4631      	mov	r1, r6
 8001074:	f7ff fa64 	bl	8000540 <__aeabi_dmul>
 8001078:	4603      	mov	r3, r0
 800107a:	460c      	mov	r4, r1
 800107c:	4618      	mov	r0, r3
 800107e:	4621      	mov	r1, r4
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	f7ff f8a4 	bl	80001d4 <__adddf3>
 800108c:	4603      	mov	r3, r0
 800108e:	460c      	mov	r4, r1
 8001090:	4618      	mov	r0, r3
 8001092:	4621      	mov	r1, r4
 8001094:	4b7a      	ldr	r3, [pc, #488]	; (8001280 <main+0x328>)
 8001096:	e9d3 3400 	ldrd	r3, r4, [r3]
 800109a:	461a      	mov	r2, r3
 800109c:	4623      	mov	r3, r4
 800109e:	f7ff f899 	bl	80001d4 <__adddf3>
 80010a2:	4603      	mov	r3, r0
 80010a4:	460c      	mov	r4, r1
 80010a6:	4a7b      	ldr	r2, [pc, #492]	; (8001294 <main+0x33c>)
 80010a8:	e9c2 3400 	strd	r3, r4, [r2]
	_motor2Speed = yawSpeed + (0.3*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 80010ac:	4b78      	ldr	r3, [pc, #480]	; (8001290 <main+0x338>)
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	a36b      	add	r3, pc, #428	; (adr r3, 8001260 <main+0x308>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fa42 	bl	8000540 <__aeabi_dmul>
 80010bc:	4603      	mov	r3, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	4625      	mov	r5, r4
 80010c2:	461c      	mov	r4, r3
 80010c4:	4b71      	ldr	r3, [pc, #452]	; (800128c <main+0x334>)
 80010c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ca:	a367      	add	r3, pc, #412	; (adr r3, 8001268 <main+0x310>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff f880 	bl	80001d4 <__adddf3>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	ec43 2b17 	vmov	d7, r2, r3
 80010dc:	eeb0 0a47 	vmov.f32	s0, s14
 80010e0:	eef0 0a67 	vmov.f32	s1, s15
 80010e4:	f003 fc98 	bl	8004a18 <cos>
 80010e8:	ec53 2b10 	vmov	r2, r3, d0
 80010ec:	4620      	mov	r0, r4
 80010ee:	4629      	mov	r1, r5
 80010f0:	f7ff fa26 	bl	8000540 <__aeabi_dmul>
 80010f4:	4603      	mov	r3, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	4618      	mov	r0, r3
 80010fa:	4621      	mov	r1, r4
 80010fc:	4b60      	ldr	r3, [pc, #384]	; (8001280 <main+0x328>)
 80010fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001102:	461a      	mov	r2, r3
 8001104:	4623      	mov	r3, r4
 8001106:	f7ff f865 	bl	80001d4 <__adddf3>
 800110a:	4603      	mov	r3, r0
 800110c:	460c      	mov	r4, r1
 800110e:	4a62      	ldr	r2, [pc, #392]	; (8001298 <main+0x340>)
 8001110:	e9c2 3400 	strd	r3, r4, [r2]
	_motor3Speed = yawSpeed +   0.3*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 8001114:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <main+0x338>)
 8001116:	e9d3 0100 	ldrd	r0, r1, [r3]
 800111a:	a351      	add	r3, pc, #324	; (adr r3, 8001260 <main+0x308>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff fa0e 	bl	8000540 <__aeabi_dmul>
 8001124:	4603      	mov	r3, r0
 8001126:	460c      	mov	r4, r1
 8001128:	4625      	mov	r5, r4
 800112a:	461c      	mov	r4, r3
 800112c:	4b57      	ldr	r3, [pc, #348]	; (800128c <main+0x334>)
 800112e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001132:	a34f      	add	r3, pc, #316	; (adr r3, 8001270 <main+0x318>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff f84c 	bl	80001d4 <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	ec43 2b17 	vmov	d7, r2, r3
 8001144:	eeb0 0a47 	vmov.f32	s0, s14
 8001148:	eef0 0a67 	vmov.f32	s1, s15
 800114c:	f003 fc64 	bl	8004a18 <cos>
 8001150:	ec53 2b10 	vmov	r2, r3, d0
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff f9f2 	bl	8000540 <__aeabi_dmul>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	4618      	mov	r0, r3
 8001162:	4621      	mov	r1, r4
 8001164:	4b46      	ldr	r3, [pc, #280]	; (8001280 <main+0x328>)
 8001166:	e9d3 3400 	ldrd	r3, r4, [r3]
 800116a:	461a      	mov	r2, r3
 800116c:	4623      	mov	r3, r4
 800116e:	f7ff f831 	bl	80001d4 <__adddf3>
 8001172:	4603      	mov	r3, r0
 8001174:	460c      	mov	r4, r1
 8001176:	4618      	mov	r0, r3
 8001178:	4621      	mov	r1, r4
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	f7ff f827 	bl	80001d4 <__adddf3>
 8001186:	4603      	mov	r3, r0
 8001188:	460c      	mov	r4, r1
 800118a:	4a44      	ldr	r2, [pc, #272]	; (800129c <main+0x344>)
 800118c:	e9c2 3400 	strd	r3, r4, [r2]
	_motor4Speed = yawSpeed +   0.3*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 8001190:	4b3f      	ldr	r3, [pc, #252]	; (8001290 <main+0x338>)
 8001192:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001196:	a332      	add	r3, pc, #200	; (adr r3, 8001260 <main+0x308>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff f9d0 	bl	8000540 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	461d      	mov	r5, r3
 80011a6:	4626      	mov	r6, r4
 80011a8:	4b38      	ldr	r3, [pc, #224]	; (800128c <main+0x334>)
 80011aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4623      	mov	r3, r4
 80011b2:	a12f      	add	r1, pc, #188	; (adr r1, 8001270 <main+0x318>)
 80011b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b8:	f7ff f80a 	bl	80001d0 <__aeabi_dsub>
 80011bc:	4603      	mov	r3, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	ec44 3b17 	vmov	d7, r3, r4
 80011c4:	eeb0 0a47 	vmov.f32	s0, s14
 80011c8:	eef0 0a67 	vmov.f32	s1, s15
 80011cc:	f003 fc24 	bl	8004a18 <cos>
 80011d0:	ec54 3b10 	vmov	r3, r4, d0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4623      	mov	r3, r4
 80011d8:	4628      	mov	r0, r5
 80011da:	4631      	mov	r1, r6
 80011dc:	f7ff f9b0 	bl	8000540 <__aeabi_dmul>
 80011e0:	4603      	mov	r3, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	4618      	mov	r0, r3
 80011e6:	4621      	mov	r1, r4
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <main+0x328>)
 80011ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4623      	mov	r3, r4
 80011f2:	f7fe ffef 	bl	80001d4 <__adddf3>
 80011f6:	4603      	mov	r3, r0
 80011f8:	460c      	mov	r4, r1
 80011fa:	4a29      	ldr	r2, [pc, #164]	; (80012a0 <main+0x348>)
 80011fc:	e9c2 3400 	strd	r3, r4, [r2]

	controlMotor1(_motor1Speed);
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <main+0x33c>)
 8001202:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001206:	4618      	mov	r0, r3
 8001208:	4621      	mov	r1, r4
 800120a:	f7ff fc49 	bl	8000aa0 <__aeabi_d2iz>
 800120e:	4603      	mov	r3, r0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fe17 	bl	8000e44 <controlMotor1>
	controlMotor2(_motor2Speed);
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <main+0x340>)
 8001218:	e9d3 3400 	ldrd	r3, r4, [r3]
 800121c:	4618      	mov	r0, r3
 800121e:	4621      	mov	r1, r4
 8001220:	f7ff fc3e 	bl	8000aa0 <__aeabi_d2iz>
 8001224:	4603      	mov	r3, r0
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fe2e 	bl	8000e88 <controlMotor2>
	controlMotor3(_motor3Speed);
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <main+0x344>)
 800122e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001232:	4618      	mov	r0, r3
 8001234:	4621      	mov	r1, r4
 8001236:	f7ff fc33 	bl	8000aa0 <__aeabi_d2iz>
 800123a:	4603      	mov	r3, r0
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fe45 	bl	8000ecc <controlMotor3>
	controlMotor4(_motor4Speed);
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <main+0x348>)
 8001244:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	f7ff fc28 	bl	8000aa0 <__aeabi_d2iz>
 8001250:	4603      	mov	r3, r0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fe5e 	bl	8000f14 <controlMotor4>
	  yawSpeed = 0.25*joyRigtHor;
 8001258:	e696      	b.n	8000f88 <main+0x30>
 800125a:	bf00      	nop
 800125c:	f3af 8000 	nop.w
 8001260:	33333333 	.word	0x33333333
 8001264:	3fd33333 	.word	0x3fd33333
 8001268:	7f3321d2 	.word	0x7f3321d2
 800126c:	4002d97c 	.word	0x4002d97c
 8001270:	54442d18 	.word	0x54442d18
 8001274:	3fe921fb 	.word	0x3fe921fb
 8001278:	20000100 	.word	0x20000100
 800127c:	3fd00000 	.word	0x3fd00000
 8001280:	20000280 	.word	0x20000280
 8001284:	20000322 	.word	0x20000322
 8001288:	20000324 	.word	0x20000324
 800128c:	20000110 	.word	0x20000110
 8001290:	20000270 	.word	0x20000270
 8001294:	20000220 	.word	0x20000220
 8001298:	200002a8 	.word	0x200002a8
 800129c:	20000318 	.word	0x20000318
 80012a0:	200000f8 	.word	0x200000f8

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b094      	sub	sp, #80	; 0x50
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	2230      	movs	r2, #48	; 0x30
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fba6 	bl	8004a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <SystemClock_Config+0xcc>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a27      	ldr	r2, [pc, #156]	; (8001370 <SystemClock_Config+0xcc>)
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <SystemClock_Config+0xcc>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <SystemClock_Config+0xd0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a21      	ldr	r2, [pc, #132]	; (8001374 <SystemClock_Config+0xd0>)
 80012ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <SystemClock_Config+0xd0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001300:	2302      	movs	r3, #2
 8001302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001304:	2301      	movs	r3, #1
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001308:	2310      	movs	r3, #16
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130c:	2302      	movs	r3, #2
 800130e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001310:	2300      	movs	r3, #0
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001314:	2308      	movs	r3, #8
 8001316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001318:	23a8      	movs	r3, #168	; 0xa8
 800131a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001320:	2304      	movs	r3, #4
 8001322:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	4618      	mov	r0, r3
 800132a:	f001 fc35 	bl	8002b98 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001334:	f000 fabc 	bl	80018b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2302      	movs	r3, #2
 800133e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001344:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2105      	movs	r1, #5
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fe8e 	bl	8003078 <HAL_RCC_ClockConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001362:	f000 faa5 	bl	80018b0 <Error_Handler>
  }
}
 8001366:	bf00      	nop
 8001368:	3750      	adds	r7, #80	; 0x50
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40007000 	.word	0x40007000

08001378 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08e      	sub	sp, #56	; 0x38
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <MX_TIM2_Init+0xe4>)
 80013aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <MX_TIM2_Init+0xe4>)
 80013b2:	2253      	movs	r2, #83	; 0x53
 80013b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <MX_TIM2_Init+0xe4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_TIM2_Init+0xe4>)
 80013be:	22ff      	movs	r2, #255	; 0xff
 80013c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <MX_TIM2_Init+0xe4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <MX_TIM2_Init+0xe4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ce:	4823      	ldr	r0, [pc, #140]	; (800145c <MX_TIM2_Init+0xe4>)
 80013d0:	f002 f81e 	bl	8003410 <HAL_TIM_Base_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80013da:	f000 fa69 	bl	80018b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e8:	4619      	mov	r1, r3
 80013ea:	481c      	ldr	r0, [pc, #112]	; (800145c <MX_TIM2_Init+0xe4>)
 80013ec:	f002 f974 	bl	80036d8 <HAL_TIM_ConfigClockSource>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013f6:	f000 fa5b 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013fa:	4818      	ldr	r0, [pc, #96]	; (800145c <MX_TIM2_Init+0xe4>)
 80013fc:	f002 f833 	bl	8003466 <HAL_TIM_PWM_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001406:	f000 fa53 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	4619      	mov	r1, r3
 8001418:	4810      	ldr	r0, [pc, #64]	; (800145c <MX_TIM2_Init+0xe4>)
 800141a:	f002 fd25 	bl	8003e68 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001424:	f000 fa44 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001428:	2360      	movs	r3, #96	; 0x60
 800142a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001430:	2302      	movs	r3, #2
 8001432:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	4619      	mov	r1, r3
 800143e:	4807      	ldr	r0, [pc, #28]	; (800145c <MX_TIM2_Init+0xe4>)
 8001440:	f002 f884 	bl	800354c <HAL_TIM_PWM_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800144a:	f000 fa31 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <MX_TIM2_Init+0xe4>)
 8001450:	f000 fac0 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 8001454:	bf00      	nop
 8001456:	3738      	adds	r7, #56	; 0x38
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200002d0 	.word	0x200002d0

08001460 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	; 0x38
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001490:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <MX_TIM3_Init+0xe4>)
 8001492:	4a2d      	ldr	r2, [pc, #180]	; (8001548 <MX_TIM3_Init+0xe8>)
 8001494:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001496:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <MX_TIM3_Init+0xe4>)
 8001498:	2253      	movs	r2, #83	; 0x53
 800149a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b29      	ldr	r3, [pc, #164]	; (8001544 <MX_TIM3_Init+0xe4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <MX_TIM3_Init+0xe4>)
 80014a4:	22ff      	movs	r2, #255	; 0xff
 80014a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <MX_TIM3_Init+0xe4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <MX_TIM3_Init+0xe4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014b4:	4823      	ldr	r0, [pc, #140]	; (8001544 <MX_TIM3_Init+0xe4>)
 80014b6:	f001 ffab 	bl	8003410 <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80014c0:	f000 f9f6 	bl	80018b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ce:	4619      	mov	r1, r3
 80014d0:	481c      	ldr	r0, [pc, #112]	; (8001544 <MX_TIM3_Init+0xe4>)
 80014d2:	f002 f901 	bl	80036d8 <HAL_TIM_ConfigClockSource>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80014dc:	f000 f9e8 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014e0:	4818      	ldr	r0, [pc, #96]	; (8001544 <MX_TIM3_Init+0xe4>)
 80014e2:	f001 ffc0 	bl	8003466 <HAL_TIM_PWM_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80014ec:	f000 f9e0 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	4619      	mov	r1, r3
 80014fe:	4811      	ldr	r0, [pc, #68]	; (8001544 <MX_TIM3_Init+0xe4>)
 8001500:	f002 fcb2 	bl	8003e68 <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800150a:	f000 f9d1 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150e:	2360      	movs	r3, #96	; 0x60
 8001510:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001516:	2302      	movs	r3, #2
 8001518:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <MX_TIM3_Init+0xe4>)
 8001526:	f002 f811 	bl	800354c <HAL_TIM_PWM_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001530:	f000 f9be 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <MX_TIM3_Init+0xe4>)
 8001536:	f000 fa4d 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 800153a:	bf00      	nop
 800153c:	3738      	adds	r7, #56	; 0x38
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000168 	.word	0x20000168
 8001548:	40000400 	.word	0x40000400

0800154c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08e      	sub	sp, #56	; 0x38
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	f107 0320 	add.w	r3, r7, #32
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	615a      	str	r2, [r3, #20]
 800157a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800157c:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <MX_TIM4_Init+0xe4>)
 800157e:	4a2d      	ldr	r2, [pc, #180]	; (8001634 <MX_TIM4_Init+0xe8>)
 8001580:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <MX_TIM4_Init+0xe4>)
 8001584:	2253      	movs	r2, #83	; 0x53
 8001586:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <MX_TIM4_Init+0xe4>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <MX_TIM4_Init+0xe4>)
 8001590:	22ff      	movs	r2, #255	; 0xff
 8001592:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <MX_TIM4_Init+0xe4>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b25      	ldr	r3, [pc, #148]	; (8001630 <MX_TIM4_Init+0xe4>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015a0:	4823      	ldr	r0, [pc, #140]	; (8001630 <MX_TIM4_Init+0xe4>)
 80015a2:	f001 ff35 	bl	8003410 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80015ac:	f000 f980 	bl	80018b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ba:	4619      	mov	r1, r3
 80015bc:	481c      	ldr	r0, [pc, #112]	; (8001630 <MX_TIM4_Init+0xe4>)
 80015be:	f002 f88b 	bl	80036d8 <HAL_TIM_ConfigClockSource>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80015c8:	f000 f972 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015cc:	4818      	ldr	r0, [pc, #96]	; (8001630 <MX_TIM4_Init+0xe4>)
 80015ce:	f001 ff4a 	bl	8003466 <HAL_TIM_PWM_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80015d8:	f000 f96a 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	4619      	mov	r1, r3
 80015ea:	4811      	ldr	r0, [pc, #68]	; (8001630 <MX_TIM4_Init+0xe4>)
 80015ec:	f002 fc3c 	bl	8003e68 <HAL_TIMEx_MasterConfigSynchronization>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80015f6:	f000 f95b 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fa:	2360      	movs	r3, #96	; 0x60
 80015fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001602:	2302      	movs	r3, #2
 8001604:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <MX_TIM4_Init+0xe4>)
 8001612:	f001 ff9b 	bl	800354c <HAL_TIM_PWM_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800161c:	f000 f948 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001620:	4803      	ldr	r0, [pc, #12]	; (8001630 <MX_TIM4_Init+0xe4>)
 8001622:	f000 f9d7 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 8001626:	bf00      	nop
 8001628:	3738      	adds	r7, #56	; 0x38
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200000b4 	.word	0x200000b4
 8001634:	40000800 	.word	0x40000800

08001638 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08e      	sub	sp, #56	; 0x38
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	f107 0320 	add.w	r3, r7, #32
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
 8001664:	615a      	str	r2, [r3, #20]
 8001666:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001668:	4b2c      	ldr	r3, [pc, #176]	; (800171c <MX_TIM5_Init+0xe4>)
 800166a:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <MX_TIM5_Init+0xe8>)
 800166c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <MX_TIM5_Init+0xe4>)
 8001670:	2253      	movs	r2, #83	; 0x53
 8001672:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <MX_TIM5_Init+0xe4>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <MX_TIM5_Init+0xe4>)
 800167c:	22ff      	movs	r2, #255	; 0xff
 800167e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <MX_TIM5_Init+0xe4>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <MX_TIM5_Init+0xe4>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800168c:	4823      	ldr	r0, [pc, #140]	; (800171c <MX_TIM5_Init+0xe4>)
 800168e:	f001 febf 	bl	8003410 <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001698:	f000 f90a 	bl	80018b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a6:	4619      	mov	r1, r3
 80016a8:	481c      	ldr	r0, [pc, #112]	; (800171c <MX_TIM5_Init+0xe4>)
 80016aa:	f002 f815 	bl	80036d8 <HAL_TIM_ConfigClockSource>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80016b4:	f000 f8fc 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80016b8:	4818      	ldr	r0, [pc, #96]	; (800171c <MX_TIM5_Init+0xe4>)
 80016ba:	f001 fed4 	bl	8003466 <HAL_TIM_PWM_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80016c4:	f000 f8f4 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	4619      	mov	r1, r3
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <MX_TIM5_Init+0xe4>)
 80016d8:	f002 fbc6 	bl	8003e68 <HAL_TIMEx_MasterConfigSynchronization>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80016e2:	f000 f8e5 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	2360      	movs	r3, #96	; 0x60
 80016e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016ee:	2302      	movs	r3, #2
 80016f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_TIM5_Init+0xe4>)
 80016fe:	f001 ff25 	bl	800354c <HAL_TIM_PWM_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001708:	f000 f8d2 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM5_Init+0xe4>)
 800170e:	f000 f961 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 8001712:	bf00      	nop
 8001714:	3738      	adds	r7, #56	; 0x38
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000124 	.word	0x20000124
 8001720:	40000c00 	.word	0x40000c00

08001724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_USART1_UART_Init+0x50>)
 800172c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 8001730:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_USART1_UART_Init+0x4c>)
 800175c:	f002 fc00 	bl	8003f60 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001766:	f000 f8a3 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000228 	.word	0x20000228
 8001774:	40011000 	.word	0x40011000

08001778 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_DMA_Init+0x3c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <MX_DMA_Init+0x3c>)
 8001788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_DMA_Init+0x3c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	203a      	movs	r0, #58	; 0x3a
 80017a0:	f000 fca1 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017a4:	203a      	movs	r0, #58	; 0x3a
 80017a6:	f000 fcba 	bl	800211e <HAL_NVIC_EnableIRQ>

}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <MX_GPIO_Init+0xe8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a32      	ldr	r2, [pc, #200]	; (80018a0 <MX_GPIO_Init+0xe8>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <MX_GPIO_Init+0xe8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <MX_GPIO_Init+0xe8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a2b      	ldr	r2, [pc, #172]	; (80018a0 <MX_GPIO_Init+0xe8>)
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <MX_GPIO_Init+0xe8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <MX_GPIO_Init+0xe8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <MX_GPIO_Init+0xe8>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_GPIO_Init+0xe8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	2102      	movs	r1, #2
 8001826:	481f      	ldr	r0, [pc, #124]	; (80018a4 <MX_GPIO_Init+0xec>)
 8001828:	f001 f99c 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001832:	481d      	ldr	r0, [pc, #116]	; (80018a8 <MX_GPIO_Init+0xf0>)
 8001834:	f001 f996 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motor1Dir_Pin|motor2Dir_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	2128      	movs	r1, #40	; 0x28
 800183c:	481b      	ldr	r0, [pc, #108]	; (80018ac <MX_GPIO_Init+0xf4>)
 800183e:	f001 f991 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : motor4Dir_Pin */
  GPIO_InitStruct.Pin = motor4Dir_Pin;
 8001842:	2302      	movs	r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(motor4Dir_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4619      	mov	r1, r3
 8001858:	4812      	ldr	r0, [pc, #72]	; (80018a4 <MX_GPIO_Init+0xec>)
 800185a:	f000 ffe9 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : motor3Dir_Pin */
  GPIO_InitStruct.Pin = motor3Dir_Pin;
 800185e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(motor3Dir_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	480c      	ldr	r0, [pc, #48]	; (80018a8 <MX_GPIO_Init+0xf0>)
 8001878:	f000 ffda 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor1Dir_Pin motor2Dir_Pin */
  GPIO_InitStruct.Pin = motor1Dir_Pin|motor2Dir_Pin;
 800187c:	2328      	movs	r3, #40	; 0x28
 800187e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4619      	mov	r1, r3
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <MX_GPIO_Init+0xf4>)
 8001894:	f000 ffcc 	bl	8002830 <HAL_GPIO_Init>

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020c00 	.word	0x40020c00
 80018ac:	40020400 	.word	0x40020400

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <HAL_MspInit+0x4c>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_MspInit+0x4c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001920:	d10e      	bne.n	8001940 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a26      	ldr	r2, [pc, #152]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800193e:	e03a      	b.n	80019b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10e      	bne.n	8001968 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
}
 8001966:	e026      	b.n	80019b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_TIM_Base_MspInit+0xbc>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d10e      	bne.n	8001990 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
}
 800198e:	e012      	b.n	80019b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_TIM_Base_MspInit+0xc0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10d      	bne.n	80019b6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_TIM_Base_MspInit+0xb4>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
}
 80019b6:	bf00      	nop
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40000400 	.word	0x40000400
 80019cc:	40000800 	.word	0x40000800
 80019d0:	40000c00 	.word	0x40000c00

080019d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f4:	d11f      	bne.n	8001a36 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a46      	ldr	r2, [pc, #280]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b44      	ldr	r3, [pc, #272]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = motor1PWM_Pin;
 8001a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a24:	2301      	movs	r3, #1
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor1PWM_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	483b      	ldr	r0, [pc, #236]	; (8001b1c <HAL_TIM_MspPostInit+0x148>)
 8001a30:	f000 fefe 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001a34:	e06b      	b.n	8001b0e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a39      	ldr	r2, [pc, #228]	; (8001b20 <HAL_TIM_MspPostInit+0x14c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d11e      	bne.n	8001a7e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	4a33      	ldr	r2, [pc, #204]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a50:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = motor2PWM_Pin;
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor2PWM_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	482b      	ldr	r0, [pc, #172]	; (8001b24 <HAL_TIM_MspPostInit+0x150>)
 8001a78:	f000 feda 	bl	8002830 <HAL_GPIO_Init>
}
 8001a7c:	e047      	b.n	8001b0e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <HAL_TIM_MspPostInit+0x154>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d11f      	bne.n	8001ac8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	6313      	str	r3, [r2, #48]	; 0x30
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = motor3PWM_Pin;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor3PWM_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	481a      	ldr	r0, [pc, #104]	; (8001b2c <HAL_TIM_MspPostInit+0x158>)
 8001ac2:	f000 feb5 	bl	8002830 <HAL_GPIO_Init>
}
 8001ac6:	e022      	b.n	8001b0e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM5)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a18      	ldr	r2, [pc, #96]	; (8001b30 <HAL_TIM_MspPostInit+0x15c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d11d      	bne.n	8001b0e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_TIM_MspPostInit+0x144>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = motor4PWM_Pin;
 8001aee:	2301      	movs	r3, #1
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001afe:	2302      	movs	r3, #2
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor4PWM_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <HAL_TIM_MspPostInit+0x148>)
 8001b0a:	f000 fe91 	bl	8002830 <HAL_GPIO_Init>
}
 8001b0e:	bf00      	nop
 8001b10:	3730      	adds	r7, #48	; 0x30
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40000800 	.word	0x40000800
 8001b2c:	40020c00 	.word	0x40020c00
 8001b30:	40000c00 	.word	0x40000c00

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a30      	ldr	r2, [pc, #192]	; (8001c14 <HAL_UART_MspInit+0xe0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d15a      	bne.n	8001c0c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <HAL_UART_MspInit+0xe4>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <HAL_UART_MspInit+0xe4>)
 8001b60:	f043 0310 	orr.w	r3, r3, #16
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <HAL_UART_MspInit+0xe4>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <HAL_UART_MspInit+0xe4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_UART_MspInit+0xe4>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_UART_MspInit+0xe4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8e:	23c0      	movs	r3, #192	; 0xc0
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481c      	ldr	r0, [pc, #112]	; (8001c1c <HAL_UART_MspInit+0xe8>)
 8001baa:	f000 fe41 	bl	8002830 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <HAL_UART_MspInit+0xf0>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001bf2:	f000 faaf 	bl	8002154 <HAL_DMA_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001bfc:	f7ff fe58 	bl	80018b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_UART_MspInit+0xec>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40011000 	.word	0x40011000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	200001b8 	.word	0x200001b8
 8001c24:	40026440 	.word	0x40026440

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <MemManage_Handler+0x4>

08001c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7c:	f000 f938 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001c88:	4b40      	ldr	r3, [pc, #256]	; (8001d8c <DMA2_Stream2_IRQHandler+0x108>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d165      	bne.n	8001d5c <DMA2_Stream2_IRQHandler+0xd8>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001c90:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <DMA2_Stream2_IRQHandler+0x10c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	b2d1      	uxtb	r1, r2
 8001c98:	4a3d      	ldr	r2, [pc, #244]	; (8001d90 <DMA2_Stream2_IRQHandler+0x10c>)
 8001c9a:	7011      	strb	r1, [r2, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <DMA2_Stream2_IRQHandler+0x110>)
 8001ca0:	7819      	ldrb	r1, [r3, #0]
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <DMA2_Stream2_IRQHandler+0x114>)
 8001ca4:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <DMA2_Stream2_IRQHandler+0x10c>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d956      	bls.n	8001d5c <DMA2_Stream2_IRQHandler+0xd8>
		{
			PS2DataIndex = 0;
 8001cae:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <DMA2_Stream2_IRQHandler+0x10c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001cb4:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <DMA2_Stream2_IRQHandler+0x108>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001cba:	4b37      	ldr	r3, [pc, #220]	; (8001d98 <DMA2_Stream2_IRQHandler+0x114>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <DMA2_Stream2_IRQHandler+0x114>)
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b21a      	sxth	r2, r3
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <DMA2_Stream2_IRQHandler+0x118>)
 8001cce:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <DMA2_Stream2_IRQHandler+0x114>)
 8001cd2:	789b      	ldrb	r3, [r3, #2]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <DMA2_Stream2_IRQHandler+0x114>)
 8001cda:	78db      	ldrb	r3, [r3, #3]
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <DMA2_Stream2_IRQHandler+0x11c>)
 8001ce4:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <DMA2_Stream2_IRQHandler+0x114>)
 8001ce8:	791b      	ldrb	r3, [r3, #4]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <DMA2_Stream2_IRQHandler+0x114>)
 8001cf0:	795b      	ldrb	r3, [r3, #5]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <DMA2_Stream2_IRQHandler+0x120>)
 8001cfa:	801a      	strh	r2, [r3, #0]
			joyRigtHor = PS2Data[2] - joyRigtMidHor;
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <DMA2_Stream2_IRQHandler+0x114>)
 8001cfe:	789b      	ldrb	r3, [r3, #2]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <DMA2_Stream2_IRQHandler+0x124>)
 8001d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <DMA2_Stream2_IRQHandler+0x128>)
 8001d12:	801a      	strh	r2, [r3, #0]
			joyRigtVer = PS2Data[3] - joyRigtMidVer;
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <DMA2_Stream2_IRQHandler+0x114>)
 8001d16:	78db      	ldrb	r3, [r3, #3]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <DMA2_Stream2_IRQHandler+0x12c>)
 8001d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	b21a      	sxth	r2, r3
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <DMA2_Stream2_IRQHandler+0x130>)
 8001d2a:	801a      	strh	r2, [r3, #0]
			joyLeftHor = PS2Data[4] - joyLeftMidHor;
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <DMA2_Stream2_IRQHandler+0x114>)
 8001d2e:	791b      	ldrb	r3, [r3, #4]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <DMA2_Stream2_IRQHandler+0x134>)
 8001d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <DMA2_Stream2_IRQHandler+0x138>)
 8001d42:	801a      	strh	r2, [r3, #0]
			joyLeftVer = PS2Data[5] - joyLeftMidVer;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <DMA2_Stream2_IRQHandler+0x114>)
 8001d46:	795b      	ldrb	r3, [r3, #5]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <DMA2_Stream2_IRQHandler+0x13c>)
 8001d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <DMA2_Stream2_IRQHandler+0x140>)
 8001d5a:	801a      	strh	r2, [r3, #0]

		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <DMA2_Stream2_IRQHandler+0x110>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2baa      	cmp	r3, #170	; 0xaa
 8001d62:	d106      	bne.n	8001d72 <DMA2_Stream2_IRQHandler+0xee>
		PS2CheckbyteCount++;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <DMA2_Stream2_IRQHandler+0x108>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <DMA2_Stream2_IRQHandler+0x108>)
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e006      	b.n	8001d80 <DMA2_Stream2_IRQHandler+0xfc>
	else
		if(PS2CheckbyteCount != 4)
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <DMA2_Stream2_IRQHandler+0x108>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d002      	beq.n	8001d80 <DMA2_Stream2_IRQHandler+0xfc>
			PS2CheckbyteCount = 0;
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <DMA2_Stream2_IRQHandler+0x108>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d80:	4811      	ldr	r0, [pc, #68]	; (8001dc8 <DMA2_Stream2_IRQHandler+0x144>)
 8001d82:	f000 faed 	bl	8002360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000009c 	.word	0x2000009c
 8001d90:	200001b0 	.word	0x200001b0
 8001d94:	200002c0 	.word	0x200002c0
 8001d98:	20000104 	.word	0x20000104
 8001d9c:	20000278 	.word	0x20000278
 8001da0:	2000028a 	.word	0x2000028a
 8001da4:	20000310 	.word	0x20000310
 8001da8:	20000006 	.word	0x20000006
 8001dac:	20000100 	.word	0x20000100
 8001db0:	20000004 	.word	0x20000004
 8001db4:	200002a0 	.word	0x200002a0
 8001db8:	20000002 	.word	0x20000002
 8001dbc:	20000322 	.word	0x20000322
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000324 	.word	0x20000324
 8001dc8:	200001b8 	.word	0x200001b8

08001dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <SystemInit+0x28>)
 8001dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd6:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <SystemInit+0x28>)
 8001dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SystemInit+0x28>)
 8001de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001de6:	609a      	str	r2, [r3, #8]
#endif
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dfe:	e003      	b.n	8001e08 <LoopCopyDataInit>

08001e00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e06:	3104      	adds	r1, #4

08001e08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e08:	480b      	ldr	r0, [pc, #44]	; (8001e38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e10:	d3f6      	bcc.n	8001e00 <CopyDataInit>
  ldr  r2, =_sbss
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e14:	e002      	b.n	8001e1c <LoopFillZerobss>

08001e16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e18:	f842 3b04 	str.w	r3, [r2], #4

08001e1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e20:	d3f9      	bcc.n	8001e16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e22:	f7ff ffd3 	bl	8001dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e26:	f002 fdc9 	bl	80049bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7ff f895 	bl	8000f58 <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e34:	080063c8 	.word	0x080063c8
  ldr  r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e3c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001e40:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001e44:	2000032c 	.word	0x2000032c

08001e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_Init+0x40>)
 8001e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_Init+0x40>)
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_Init+0x40>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f92b 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fd1e 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f943 	bl	800213a <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 f90b 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	20000010 	.word	0x20000010
 8001eec:	2000000c 	.word	0x2000000c

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000010 	.word	0x20000010
 8001f14:	20000328 	.word	0x20000328

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000328 	.word	0x20000328

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff8e 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff29 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff3e 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff8e 	bl	8002024 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5d 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff31 	bl	8001f94 <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff feda 	bl	8001f18 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e099      	b.n	80022a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002190:	e00f      	b.n	80021b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002192:	f7ff fec1 	bl	8001f18 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b05      	cmp	r3, #5
 800219e:	d908      	bls.n	80021b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2203      	movs	r2, #3
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e078      	b.n	80022a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e8      	bne.n	8002192 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4b38      	ldr	r3, [pc, #224]	; (80022ac <HAL_DMA_Init+0x158>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	2b04      	cmp	r3, #4
 800220a:	d107      	bne.n	800221c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	4313      	orrs	r3, r2
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 0307 	bic.w	r3, r3, #7
 8002232:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	2b04      	cmp	r3, #4
 8002244:	d117      	bne.n	8002276 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fa6f 	bl	800273c <DMA_CheckFifoParam>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2240      	movs	r2, #64	; 0x40
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002272:	2301      	movs	r3, #1
 8002274:	e016      	b.n	80022a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fa26 	bl	80026d0 <DMA_CalcBaseAndBitshift>
 8002284:	4603      	mov	r3, r0
 8002286:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	223f      	movs	r2, #63	; 0x3f
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	f010803f 	.word	0xf010803f

080022b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_DMA_Start_IT+0x26>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e040      	b.n	8002358 <HAL_DMA_Start_IT+0xa8>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d12f      	bne.n	800234a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f9b8 	bl	8002674 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	223f      	movs	r2, #63	; 0x3f
 800230a:	409a      	lsls	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0216 	orr.w	r2, r2, #22
 800231e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0208 	orr.w	r2, r2, #8
 8002336:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e005      	b.n	8002356 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002352:	2302      	movs	r3, #2
 8002354:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002356:	7dfb      	ldrb	r3, [r7, #23]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800236c:	4b92      	ldr	r3, [pc, #584]	; (80025b8 <HAL_DMA_IRQHandler+0x258>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a92      	ldr	r2, [pc, #584]	; (80025bc <HAL_DMA_IRQHandler+0x25c>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0a9b      	lsrs	r3, r3, #10
 8002378:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	2208      	movs	r2, #8
 800238c:	409a      	lsls	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01a      	beq.n	80023cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0204 	bic.w	r2, r2, #4
 80023b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	2208      	movs	r2, #8
 80023ba:	409a      	lsls	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c4:	f043 0201 	orr.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	2201      	movs	r2, #1
 80023d2:	409a      	lsls	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d012      	beq.n	8002402 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	2201      	movs	r2, #1
 80023f0:	409a      	lsls	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f043 0202 	orr.w	r2, r3, #2
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	2204      	movs	r2, #4
 8002408:	409a      	lsls	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d012      	beq.n	8002438 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	2204      	movs	r2, #4
 8002426:	409a      	lsls	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	f043 0204 	orr.w	r2, r3, #4
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	2210      	movs	r2, #16
 800243e:	409a      	lsls	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d043      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d03c      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2210      	movs	r2, #16
 800245c:	409a      	lsls	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d018      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d108      	bne.n	8002490 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d024      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	4798      	blx	r3
 800248e:	e01f      	b.n	80024d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
 80024a0:	e016      	b.n	80024d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0208 	bic.w	r2, r2, #8
 80024be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	2220      	movs	r2, #32
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 808e 	beq.w	80025fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8086 	beq.w	80025fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	2220      	movs	r2, #32
 80024f8:	409a      	lsls	r2, r3
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b05      	cmp	r3, #5
 8002508:	d136      	bne.n	8002578 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0216 	bic.w	r2, r2, #22
 8002518:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002528:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_DMA_IRQHandler+0x1da>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0208 	bic.w	r2, r2, #8
 8002548:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	223f      	movs	r2, #63	; 0x3f
 8002550:	409a      	lsls	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256a:	2b00      	cmp	r3, #0
 800256c:	d07d      	beq.n	800266a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
        }
        return;
 8002576:	e078      	b.n	800266a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01c      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d108      	bne.n	80025a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	2b00      	cmp	r3, #0
 800259a:	d030      	beq.n	80025fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
 80025a4:	e02b      	b.n	80025fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d027      	beq.n	80025fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
 80025b6:	e022      	b.n	80025fe <HAL_DMA_IRQHandler+0x29e>
 80025b8:	20000008 	.word	0x20000008
 80025bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0210 	bic.w	r2, r2, #16
 80025dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	2b00      	cmp	r3, #0
 8002604:	d032      	beq.n	800266c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d022      	beq.n	8002658 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2205      	movs	r2, #5
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3301      	adds	r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	429a      	cmp	r2, r3
 8002634:	d307      	bcc.n	8002646 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f2      	bne.n	800262a <HAL_DMA_IRQHandler+0x2ca>
 8002644:	e000      	b.n	8002648 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002646:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
 8002668:	e000      	b.n	800266c <HAL_DMA_IRQHandler+0x30c>
        return;
 800266a:	bf00      	nop
    }
  }
}
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop

08002674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002690:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b40      	cmp	r3, #64	; 0x40
 80026a0:	d108      	bne.n	80026b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026b2:	e007      	b.n	80026c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3b10      	subs	r3, #16
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <DMA_CalcBaseAndBitshift+0x64>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ea:	4a13      	ldr	r2, [pc, #76]	; (8002738 <DMA_CalcBaseAndBitshift+0x68>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d909      	bls.n	8002712 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	1d1a      	adds	r2, r3, #4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	659a      	str	r2, [r3, #88]	; 0x58
 8002710:	e007      	b.n	8002722 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	aaaaaaab 	.word	0xaaaaaaab
 8002738:	08006190 	.word	0x08006190

0800273c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11f      	bne.n	8002796 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d855      	bhi.n	8002808 <DMA_CheckFifoParam+0xcc>
 800275c:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <DMA_CheckFifoParam+0x28>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	08002775 	.word	0x08002775
 8002768:	08002787 	.word	0x08002787
 800276c:	08002775 	.word	0x08002775
 8002770:	08002809 	.word	0x08002809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d045      	beq.n	800280c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002784:	e042      	b.n	800280c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800278e:	d13f      	bne.n	8002810 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002794:	e03c      	b.n	8002810 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279e:	d121      	bne.n	80027e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d836      	bhi.n	8002814 <DMA_CheckFifoParam+0xd8>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <DMA_CheckFifoParam+0x70>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027bd 	.word	0x080027bd
 80027b0:	080027c3 	.word	0x080027c3
 80027b4:	080027bd 	.word	0x080027bd
 80027b8:	080027d5 	.word	0x080027d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      break;
 80027c0:	e02f      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d024      	beq.n	8002818 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d2:	e021      	b.n	8002818 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027dc:	d11e      	bne.n	800281c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027e2:	e01b      	b.n	800281c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d902      	bls.n	80027f0 <DMA_CheckFifoParam+0xb4>
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d003      	beq.n	80027f6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027ee:	e018      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      break;
 80027f4:	e015      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00e      	beq.n	8002820 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
      break;
 8002806:	e00b      	b.n	8002820 <DMA_CheckFifoParam+0xe4>
      break;
 8002808:	bf00      	nop
 800280a:	e00a      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 800280c:	bf00      	nop
 800280e:	e008      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 8002810:	bf00      	nop
 8002812:	e006      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 8002814:	bf00      	nop
 8002816:	e004      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 8002818:	bf00      	nop
 800281a:	e002      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;   
 800281c:	bf00      	nop
 800281e:	e000      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 8002820:	bf00      	nop
    }
  } 
  
  return status; 
 8002822:	7bfb      	ldrb	r3, [r7, #15]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	; 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	e16b      	b.n	8002b24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800284c:	2201      	movs	r2, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	429a      	cmp	r2, r3
 8002866:	f040 815a 	bne.w	8002b1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d00b      	beq.n	800288a <HAL_GPIO_Init+0x5a>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d007      	beq.n	800288a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800287e:	2b11      	cmp	r3, #17
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b12      	cmp	r3, #18
 8002888:	d130      	bne.n	80028ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0201 	and.w	r2, r3, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0xfc>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b12      	cmp	r3, #18
 800292a:	d123      	bne.n	8002974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	08da      	lsrs	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3208      	adds	r2, #8
 8002934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	220f      	movs	r2, #15
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	08da      	lsrs	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3208      	adds	r2, #8
 800296e:	69b9      	ldr	r1, [r7, #24]
 8002970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0203 	and.w	r2, r3, #3
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80b4 	beq.w	8002b1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <HAL_GPIO_Init+0x308>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	4a5e      	ldr	r2, [pc, #376]	; (8002b38 <HAL_GPIO_Init+0x308>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c4:	6453      	str	r3, [r2, #68]	; 0x44
 80029c6:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <HAL_GPIO_Init+0x308>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029d2:	4a5a      	ldr	r2, [pc, #360]	; (8002b3c <HAL_GPIO_Init+0x30c>)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a51      	ldr	r2, [pc, #324]	; (8002b40 <HAL_GPIO_Init+0x310>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d02b      	beq.n	8002a56 <HAL_GPIO_Init+0x226>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a50      	ldr	r2, [pc, #320]	; (8002b44 <HAL_GPIO_Init+0x314>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d025      	beq.n	8002a52 <HAL_GPIO_Init+0x222>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4f      	ldr	r2, [pc, #316]	; (8002b48 <HAL_GPIO_Init+0x318>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01f      	beq.n	8002a4e <HAL_GPIO_Init+0x21e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <HAL_GPIO_Init+0x31c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d019      	beq.n	8002a4a <HAL_GPIO_Init+0x21a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4d      	ldr	r2, [pc, #308]	; (8002b50 <HAL_GPIO_Init+0x320>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_GPIO_Init+0x216>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4c      	ldr	r2, [pc, #304]	; (8002b54 <HAL_GPIO_Init+0x324>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00d      	beq.n	8002a42 <HAL_GPIO_Init+0x212>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4b      	ldr	r2, [pc, #300]	; (8002b58 <HAL_GPIO_Init+0x328>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <HAL_GPIO_Init+0x20e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4a      	ldr	r2, [pc, #296]	; (8002b5c <HAL_GPIO_Init+0x32c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <HAL_GPIO_Init+0x20a>
 8002a36:	2307      	movs	r3, #7
 8002a38:	e00e      	b.n	8002a58 <HAL_GPIO_Init+0x228>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	e00c      	b.n	8002a58 <HAL_GPIO_Init+0x228>
 8002a3e:	2306      	movs	r3, #6
 8002a40:	e00a      	b.n	8002a58 <HAL_GPIO_Init+0x228>
 8002a42:	2305      	movs	r3, #5
 8002a44:	e008      	b.n	8002a58 <HAL_GPIO_Init+0x228>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x228>
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e004      	b.n	8002a58 <HAL_GPIO_Init+0x228>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_Init+0x228>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_GPIO_Init+0x228>
 8002a56:	2300      	movs	r3, #0
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f002 0203 	and.w	r2, r2, #3
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	4093      	lsls	r3, r2
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a68:	4934      	ldr	r1, [pc, #208]	; (8002b3c <HAL_GPIO_Init+0x30c>)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a76:	4b3a      	ldr	r3, [pc, #232]	; (8002b60 <HAL_GPIO_Init+0x330>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9a:	4a31      	ldr	r2, [pc, #196]	; (8002b60 <HAL_GPIO_Init+0x330>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aa0:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <HAL_GPIO_Init+0x330>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_GPIO_Init+0x330>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aca:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_GPIO_Init+0x330>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aee:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <HAL_GPIO_Init+0x330>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <HAL_GPIO_Init+0x330>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b18:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <HAL_GPIO_Init+0x330>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b0f      	cmp	r3, #15
 8002b28:	f67f ae90 	bls.w	800284c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3724      	adds	r7, #36	; 0x24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40013800 	.word	0x40013800
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40020800 	.word	0x40020800
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40021400 	.word	0x40021400
 8002b58:	40021800 	.word	0x40021800
 8002b5c:	40021c00 	.word	0x40021c00
 8002b60:	40013c00 	.word	0x40013c00

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e25b      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d075      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb6:	4ba3      	ldr	r3, [pc, #652]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d00c      	beq.n	8002bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc2:	4ba0      	ldr	r3, [pc, #640]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d112      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bce:	4b9d      	ldr	r3, [pc, #628]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bda:	d10b      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	4b99      	ldr	r3, [pc, #612]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d05b      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x108>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d157      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e236      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCC_OscConfig+0x74>
 8002bfe:	4b91      	ldr	r3, [pc, #580]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a90      	ldr	r2, [pc, #576]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xb0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002c16:	4b8b      	ldr	r3, [pc, #556]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a8a      	ldr	r2, [pc, #552]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b88      	ldr	r3, [pc, #544]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a87      	ldr	r2, [pc, #540]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xb0>
 8002c30:	4b84      	ldr	r3, [pc, #528]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a83      	ldr	r2, [pc, #524]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b81      	ldr	r3, [pc, #516]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a80      	ldr	r2, [pc, #512]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff f962 	bl	8001f18 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7ff f95e 	bl	8001f18 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1fb      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xc0>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7ff f94e 	bl	8001f18 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c80:	f7ff f94a 	bl	8001f18 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1e7      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	4b6c      	ldr	r3, [pc, #432]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0xe8>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cae:	4b65      	ldr	r3, [pc, #404]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cba:	4b62      	ldr	r3, [pc, #392]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d11c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc6:	4b5f      	ldr	r3, [pc, #380]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	4b5c      	ldr	r3, [pc, #368]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x152>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e1bb      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4952      	ldr	r1, [pc, #328]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e03a      	b.n	8002d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <HAL_RCC_OscConfig+0x2b0>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7ff f903 	bl	8001f18 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d16:	f7ff f8ff 	bl	8001f18 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e19c      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4940      	ldr	r1, [pc, #256]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
 8002d48:	e015      	b.n	8002d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <HAL_RCC_OscConfig+0x2b0>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7ff f8e2 	bl	8001f18 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d58:	f7ff f8de 	bl	8001f18 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e17b      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d030      	beq.n	8002de4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d016      	beq.n	8002db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8a:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <HAL_RCC_OscConfig+0x2b4>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7ff f8c2 	bl	8001f18 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d98:	f7ff f8be 	bl	8001f18 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e15b      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x200>
 8002db6:	e015      	b.n	8002de4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db8:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <HAL_RCC_OscConfig+0x2b4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7ff f8ab 	bl	8001f18 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7ff f8a7 	bl	8001f18 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e144      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80a0 	beq.w	8002f32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_OscConfig+0x2b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d121      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_RCC_OscConfig+0x2b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <HAL_RCC_OscConfig+0x2b8>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3a:	f7ff f86d 	bl	8001f18 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	e011      	b.n	8002e66 <HAL_RCC_OscConfig+0x2ce>
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	42470000 	.word	0x42470000
 8002e4c:	42470e80 	.word	0x42470e80
 8002e50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7ff f860 	bl	8001f18 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0fd      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b81      	ldr	r3, [pc, #516]	; (800306c <HAL_RCC_OscConfig+0x4d4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a7c      	ldr	r2, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	e01c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x32a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x312>
 8002e90:	4b77      	ldr	r3, [pc, #476]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a76      	ldr	r2, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	4b74      	ldr	r3, [pc, #464]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a73      	ldr	r2, [pc, #460]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x32a>
 8002eaa:	4b71      	ldr	r3, [pc, #452]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a70      	ldr	r2, [pc, #448]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	4b6e      	ldr	r3, [pc, #440]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a6d      	ldr	r2, [pc, #436]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d015      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7ff f825 	bl	8001f18 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7ff f821 	bl	8001f18 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0bc      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ee      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x33a>
 8002ef4:	e014      	b.n	8002f20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7ff f80f 	bl	8001f18 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7ff f80b 	bl	8001f18 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0a6      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	4b56      	ldr	r3, [pc, #344]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ee      	bne.n	8002efe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b52      	ldr	r3, [pc, #328]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	4a51      	ldr	r2, [pc, #324]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8092 	beq.w	8003060 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f3c:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d05c      	beq.n	8003002 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d141      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <HAL_RCC_OscConfig+0x4dc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fe ffdf 	bl	8001f18 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe ffdb 	bl	8001f18 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e078      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f70:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	019b      	lsls	r3, r3, #6
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	3b01      	subs	r3, #1
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	4933      	ldr	r1, [pc, #204]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa6:	4b33      	ldr	r3, [pc, #204]	; (8003074 <HAL_RCC_OscConfig+0x4dc>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe ffb4 	bl	8001f18 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe ffb0 	bl	8001f18 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e04d      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
 8002fd2:	e045      	b.n	8003060 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd4:	4b27      	ldr	r3, [pc, #156]	; (8003074 <HAL_RCC_OscConfig+0x4dc>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7fe ff9d 	bl	8001f18 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fe ff99 	bl	8001f18 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e036      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x44a>
 8003000:	e02e      	b.n	8003060 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e029      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	429a      	cmp	r2, r3
 8003020:	d11c      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d115      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003036:	4013      	ands	r3, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800303c:	4293      	cmp	r3, r2
 800303e:	d10d      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d106      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40007000 	.word	0x40007000
 8003070:	40023800 	.word	0x40023800
 8003074:	42470060 	.word	0x42470060

08003078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0cc      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b68      	ldr	r3, [pc, #416]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d90c      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b65      	ldr	r3, [pc, #404]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b63      	ldr	r3, [pc, #396]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0b8      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030cc:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a58      	ldr	r2, [pc, #352]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e4:	4b53      	ldr	r3, [pc, #332]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a52      	ldr	r2, [pc, #328]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f0:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	494d      	ldr	r1, [pc, #308]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d044      	beq.n	8003198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d119      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e07f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d003      	beq.n	8003136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	2b03      	cmp	r3, #3
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	4b3f      	ldr	r3, [pc, #252]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	4b3b      	ldr	r3, [pc, #236]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e067      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003156:	4b37      	ldr	r3, [pc, #220]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4934      	ldr	r1, [pc, #208]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003168:	f7fe fed6 	bl	8001f18 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	e00a      	b.n	8003186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003170:	f7fe fed2 	bl	8001f18 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e04f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 020c 	and.w	r2, r3, #12
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	429a      	cmp	r2, r3
 8003196:	d1eb      	bne.n	8003170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d20c      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e032      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4916      	ldr	r1, [pc, #88]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	490e      	ldr	r1, [pc, #56]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031fe:	f000 f821 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 8003202:	4601      	mov	r1, r0
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	5cd3      	ldrb	r3, [r2, r3]
 8003212:	fa21 f303 	lsr.w	r3, r1, r3
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fe36 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023c00 	.word	0x40023c00
 8003234:	40023800 	.word	0x40023800
 8003238:	08006178 	.word	0x08006178
 800323c:	20000008 	.word	0x20000008
 8003240:	2000000c 	.word	0x2000000c

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	2300      	movs	r3, #0
 8003254:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800325a:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b04      	cmp	r3, #4
 8003264:	d007      	beq.n	8003276 <HAL_RCC_GetSysClockFreq+0x32>
 8003266:	2b08      	cmp	r3, #8
 8003268:	d008      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x38>
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 808d 	bne.w	800338a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003272:	60bb      	str	r3, [r7, #8]
       break;
 8003274:	e08c      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003276:	4b4b      	ldr	r3, [pc, #300]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003278:	60bb      	str	r3, [r7, #8]
      break;
 800327a:	e089      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327c:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003284:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003286:	4b45      	ldr	r3, [pc, #276]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d023      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	4b42      	ldr	r3, [pc, #264]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	f04f 0400 	mov.w	r4, #0
 800329c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	ea03 0501 	and.w	r5, r3, r1
 80032a8:	ea04 0602 	and.w	r6, r4, r2
 80032ac:	4a3d      	ldr	r2, [pc, #244]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032ae:	fb02 f106 	mul.w	r1, r2, r6
 80032b2:	2200      	movs	r2, #0
 80032b4:	fb02 f205 	mul.w	r2, r2, r5
 80032b8:	440a      	add	r2, r1
 80032ba:	493a      	ldr	r1, [pc, #232]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032bc:	fba5 0101 	umull	r0, r1, r5, r1
 80032c0:	1853      	adds	r3, r2, r1
 80032c2:	4619      	mov	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f04f 0400 	mov.w	r4, #0
 80032ca:	461a      	mov	r2, r3
 80032cc:	4623      	mov	r3, r4
 80032ce:	f7fd fc0f 	bl	8000af0 <__aeabi_uldivmod>
 80032d2:	4603      	mov	r3, r0
 80032d4:	460c      	mov	r4, r1
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e049      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	f04f 0400 	mov.w	r4, #0
 80032e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	ea03 0501 	and.w	r5, r3, r1
 80032f0:	ea04 0602 	and.w	r6, r4, r2
 80032f4:	4629      	mov	r1, r5
 80032f6:	4632      	mov	r2, r6
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	f04f 0400 	mov.w	r4, #0
 8003300:	0154      	lsls	r4, r2, #5
 8003302:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003306:	014b      	lsls	r3, r1, #5
 8003308:	4619      	mov	r1, r3
 800330a:	4622      	mov	r2, r4
 800330c:	1b49      	subs	r1, r1, r5
 800330e:	eb62 0206 	sbc.w	r2, r2, r6
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	f04f 0400 	mov.w	r4, #0
 800331a:	0194      	lsls	r4, r2, #6
 800331c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003320:	018b      	lsls	r3, r1, #6
 8003322:	1a5b      	subs	r3, r3, r1
 8003324:	eb64 0402 	sbc.w	r4, r4, r2
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	00e2      	lsls	r2, r4, #3
 8003332:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003336:	00d9      	lsls	r1, r3, #3
 8003338:	460b      	mov	r3, r1
 800333a:	4614      	mov	r4, r2
 800333c:	195b      	adds	r3, r3, r5
 800333e:	eb44 0406 	adc.w	r4, r4, r6
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	02a2      	lsls	r2, r4, #10
 800334c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003350:	0299      	lsls	r1, r3, #10
 8003352:	460b      	mov	r3, r1
 8003354:	4614      	mov	r4, r2
 8003356:	4618      	mov	r0, r3
 8003358:	4621      	mov	r1, r4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f04f 0400 	mov.w	r4, #0
 8003360:	461a      	mov	r2, r3
 8003362:	4623      	mov	r3, r4
 8003364:	f7fd fbc4 	bl	8000af0 <__aeabi_uldivmod>
 8003368:	4603      	mov	r3, r0
 800336a:	460c      	mov	r4, r1
 800336c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_GetSysClockFreq+0x158>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0c1b      	lsrs	r3, r3, #16
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	3301      	adds	r3, #1
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	60bb      	str	r3, [r7, #8]
      break;
 8003388:	e002      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800338c:	60bb      	str	r3, [r7, #8]
      break;
 800338e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003390:	68bb      	ldr	r3, [r7, #8]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	017d7840 	.word	0x017d7840

080033a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000008 	.word	0x20000008

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c8:	4601      	mov	r1, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4a03      	ldr	r2, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	08006188 	.word	0x08006188

080033e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033ec:	f7ff ffdc 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033f0:	4601      	mov	r1, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0b5b      	lsrs	r3, r3, #13
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4a03      	ldr	r2, [pc, #12]	; (800340c <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	08006188 	.word	0x08006188

08003410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e01d      	b.n	800345e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe fa6a 	bl	8001910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3304      	adds	r3, #4
 800344c:	4619      	mov	r1, r3
 800344e:	4610      	mov	r0, r2
 8003450:	f000 f9fa 	bl	8003848 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e01d      	b.n	80034b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f815 	bl	80034bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f000 f9cf 	bl	8003848 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2201      	movs	r2, #1
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fc9a 	bl	8003e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_TIM_PWM_Start+0x74>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <HAL_TIM_PWM_Start+0x2c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a14      	ldr	r2, [pc, #80]	; (8003548 <HAL_TIM_PWM_Start+0x78>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d101      	bne.n	8003500 <HAL_TIM_PWM_Start+0x30>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_TIM_PWM_Start+0x32>
 8003500:	2300      	movs	r3, #0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b06      	cmp	r3, #6
 8003526:	d007      	beq.n	8003538 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40010400 	.word	0x40010400

0800354c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003562:	2302      	movs	r3, #2
 8003564:	e0b4      	b.n	80036d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2202      	movs	r2, #2
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b0c      	cmp	r3, #12
 800357a:	f200 809f 	bhi.w	80036bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800357e:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003584:	080035b9 	.word	0x080035b9
 8003588:	080036bd 	.word	0x080036bd
 800358c:	080036bd 	.word	0x080036bd
 8003590:	080036bd 	.word	0x080036bd
 8003594:	080035f9 	.word	0x080035f9
 8003598:	080036bd 	.word	0x080036bd
 800359c:	080036bd 	.word	0x080036bd
 80035a0:	080036bd 	.word	0x080036bd
 80035a4:	0800363b 	.word	0x0800363b
 80035a8:	080036bd 	.word	0x080036bd
 80035ac:	080036bd 	.word	0x080036bd
 80035b0:	080036bd 	.word	0x080036bd
 80035b4:	0800367b 	.word	0x0800367b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f9e2 	bl	8003988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0208 	orr.w	r2, r2, #8
 80035d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0204 	bic.w	r2, r2, #4
 80035e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6999      	ldr	r1, [r3, #24]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	619a      	str	r2, [r3, #24]
      break;
 80035f6:	e062      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fa32 	bl	8003a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6999      	ldr	r1, [r3, #24]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	021a      	lsls	r2, r3, #8
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	619a      	str	r2, [r3, #24]
      break;
 8003638:	e041      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fa87 	bl	8003b54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0208 	orr.w	r2, r2, #8
 8003654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0204 	bic.w	r2, r2, #4
 8003664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69d9      	ldr	r1, [r3, #28]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	61da      	str	r2, [r3, #28]
      break;
 8003678:	e021      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fadb 	bl	8003c3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69d9      	ldr	r1, [r3, #28]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	021a      	lsls	r2, r3, #8
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	61da      	str	r2, [r3, #28]
      break;
 80036ba:	e000      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80036bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_TIM_ConfigClockSource+0x18>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e0a6      	b.n	800383e <HAL_TIM_ConfigClockSource+0x166>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800370e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003716:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d067      	beq.n	80037f8 <HAL_TIM_ConfigClockSource+0x120>
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d80b      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x6c>
 800372c:	2b10      	cmp	r3, #16
 800372e:	d073      	beq.n	8003818 <HAL_TIM_ConfigClockSource+0x140>
 8003730:	2b10      	cmp	r3, #16
 8003732:	d802      	bhi.n	800373a <HAL_TIM_ConfigClockSource+0x62>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d06f      	beq.n	8003818 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003738:	e078      	b.n	800382c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800373a:	2b20      	cmp	r3, #32
 800373c:	d06c      	beq.n	8003818 <HAL_TIM_ConfigClockSource+0x140>
 800373e:	2b30      	cmp	r3, #48	; 0x30
 8003740:	d06a      	beq.n	8003818 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003742:	e073      	b.n	800382c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003744:	2b70      	cmp	r3, #112	; 0x70
 8003746:	d00d      	beq.n	8003764 <HAL_TIM_ConfigClockSource+0x8c>
 8003748:	2b70      	cmp	r3, #112	; 0x70
 800374a:	d804      	bhi.n	8003756 <HAL_TIM_ConfigClockSource+0x7e>
 800374c:	2b50      	cmp	r3, #80	; 0x50
 800374e:	d033      	beq.n	80037b8 <HAL_TIM_ConfigClockSource+0xe0>
 8003750:	2b60      	cmp	r3, #96	; 0x60
 8003752:	d041      	beq.n	80037d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003754:	e06a      	b.n	800382c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375a:	d066      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x152>
 800375c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003760:	d017      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003762:	e063      	b.n	800382c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6899      	ldr	r1, [r3, #8]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f000 fb32 	bl	8003ddc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003786:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	609a      	str	r2, [r3, #8]
      break;
 8003790:	e04c      	b.n	800382c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f000 fb1b 	bl	8003ddc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b4:	609a      	str	r2, [r3, #8]
      break;
 80037b6:	e039      	b.n	800382c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	461a      	mov	r2, r3
 80037c6:	f000 fa8f 	bl	8003ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2150      	movs	r1, #80	; 0x50
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fae8 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 80037d6:	e029      	b.n	800382c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	461a      	mov	r2, r3
 80037e6:	f000 faae 	bl	8003d46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2160      	movs	r1, #96	; 0x60
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fad8 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 80037f6:	e019      	b.n	800382c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	461a      	mov	r2, r3
 8003806:	f000 fa6f 	bl	8003ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2140      	movs	r1, #64	; 0x40
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fac8 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 8003816:	e009      	b.n	800382c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4619      	mov	r1, r3
 8003822:	4610      	mov	r0, r2
 8003824:	f000 fabf 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 8003828:	e000      	b.n	800382c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800382a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a40      	ldr	r2, [pc, #256]	; (800395c <TIM_Base_SetConfig+0x114>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003866:	d00f      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3d      	ldr	r2, [pc, #244]	; (8003960 <TIM_Base_SetConfig+0x118>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00b      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a3c      	ldr	r2, [pc, #240]	; (8003964 <TIM_Base_SetConfig+0x11c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3b      	ldr	r2, [pc, #236]	; (8003968 <TIM_Base_SetConfig+0x120>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3a      	ldr	r2, [pc, #232]	; (800396c <TIM_Base_SetConfig+0x124>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d108      	bne.n	800389a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2f      	ldr	r2, [pc, #188]	; (800395c <TIM_Base_SetConfig+0x114>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d02b      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a8:	d027      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a2c      	ldr	r2, [pc, #176]	; (8003960 <TIM_Base_SetConfig+0x118>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d023      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2b      	ldr	r2, [pc, #172]	; (8003964 <TIM_Base_SetConfig+0x11c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01f      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a2a      	ldr	r2, [pc, #168]	; (8003968 <TIM_Base_SetConfig+0x120>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01b      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a29      	ldr	r2, [pc, #164]	; (800396c <TIM_Base_SetConfig+0x124>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d017      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a28      	ldr	r2, [pc, #160]	; (8003970 <TIM_Base_SetConfig+0x128>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a27      	ldr	r2, [pc, #156]	; (8003974 <TIM_Base_SetConfig+0x12c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00f      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a26      	ldr	r2, [pc, #152]	; (8003978 <TIM_Base_SetConfig+0x130>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00b      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a25      	ldr	r2, [pc, #148]	; (800397c <TIM_Base_SetConfig+0x134>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a24      	ldr	r2, [pc, #144]	; (8003980 <TIM_Base_SetConfig+0x138>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a23      	ldr	r2, [pc, #140]	; (8003984 <TIM_Base_SetConfig+0x13c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d108      	bne.n	800390c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <TIM_Base_SetConfig+0x114>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d003      	beq.n	8003940 <TIM_Base_SetConfig+0xf8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a0c      	ldr	r2, [pc, #48]	; (800396c <TIM_Base_SetConfig+0x124>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	615a      	str	r2, [r3, #20]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40010000 	.word	0x40010000
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800
 8003968:	40000c00 	.word	0x40000c00
 800396c:	40010400 	.word	0x40010400
 8003970:	40014000 	.word	0x40014000
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800
 800397c:	40001800 	.word	0x40001800
 8003980:	40001c00 	.word	0x40001c00
 8003984:	40002000 	.word	0x40002000

08003988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f023 0201 	bic.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0303 	bic.w	r3, r3, #3
 80039be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f023 0302 	bic.w	r3, r3, #2
 80039d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a20      	ldr	r2, [pc, #128]	; (8003a60 <TIM_OC1_SetConfig+0xd8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_OC1_SetConfig+0x64>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a1f      	ldr	r2, [pc, #124]	; (8003a64 <TIM_OC1_SetConfig+0xdc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10c      	bne.n	8003a06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0308 	bic.w	r3, r3, #8
 80039f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f023 0304 	bic.w	r3, r3, #4
 8003a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <TIM_OC1_SetConfig+0xd8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <TIM_OC1_SetConfig+0x8e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <TIM_OC1_SetConfig+0xdc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d111      	bne.n	8003a3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	621a      	str	r2, [r3, #32]
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40010400 	.word	0x40010400

08003a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0210 	bic.w	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f023 0320 	bic.w	r3, r3, #32
 8003ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a22      	ldr	r2, [pc, #136]	; (8003b4c <TIM_OC2_SetConfig+0xe4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_OC2_SetConfig+0x68>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <TIM_OC2_SetConfig+0xe8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d10d      	bne.n	8003aec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <TIM_OC2_SetConfig+0xe4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_OC2_SetConfig+0x94>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <TIM_OC2_SetConfig+0xe8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d113      	bne.n	8003b24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	621a      	str	r2, [r3, #32]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40010400 	.word	0x40010400

08003b54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a21      	ldr	r2, [pc, #132]	; (8003c34 <TIM_OC3_SetConfig+0xe0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <TIM_OC3_SetConfig+0x66>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a20      	ldr	r2, [pc, #128]	; (8003c38 <TIM_OC3_SetConfig+0xe4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d10d      	bne.n	8003bd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <TIM_OC3_SetConfig+0xe0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d003      	beq.n	8003be6 <TIM_OC3_SetConfig+0x92>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <TIM_OC3_SetConfig+0xe4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d113      	bne.n	8003c0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40010000 	.word	0x40010000
 8003c38:	40010400 	.word	0x40010400

08003c3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	031b      	lsls	r3, r3, #12
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <TIM_OC4_SetConfig+0xa4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d003      	beq.n	8003ca4 <TIM_OC4_SetConfig+0x68>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a11      	ldr	r2, [pc, #68]	; (8003ce4 <TIM_OC4_SetConfig+0xa8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d109      	bne.n	8003cb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	019b      	lsls	r3, r3, #6
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40010400 	.word	0x40010400

08003ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f023 0201 	bic.w	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f023 030a 	bic.w	r3, r3, #10
 8003d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b087      	sub	sp, #28
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 0210 	bic.w	r2, r3, #16
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	031b      	lsls	r3, r3, #12
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f043 0307 	orr.w	r3, r3, #7
 8003dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	609a      	str	r2, [r3, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	021a      	lsls	r2, r3, #8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	609a      	str	r2, [r3, #8]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	2201      	movs	r2, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	401a      	ands	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1a      	ldr	r2, [r3, #32]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e05a      	b.n	8003f36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d022      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ecc:	d01d      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d018      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1b      	ldr	r2, [pc, #108]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1a      	ldr	r2, [pc, #104]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a17      	ldr	r2, [pc, #92]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10c      	bne.n	8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00
 8003f54:	40010400 	.word	0x40010400
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40001800 	.word	0x40001800

08003f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e03f      	b.n	8003ff2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd fdd4 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f987 	bl	80042b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	4613      	mov	r3, r2
 8004008:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b20      	cmp	r3, #32
 8004014:	d166      	bne.n	80040e4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_UART_Receive_DMA+0x26>
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e05f      	b.n	80040e6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_UART_Receive_DMA+0x38>
 8004030:	2302      	movs	r3, #2
 8004032:	e058      	b.n	80040e6 <HAL_UART_Receive_DMA+0xea>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	88fa      	ldrh	r2, [r7, #6]
 8004046:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2222      	movs	r2, #34	; 0x22
 8004052:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <HAL_UART_Receive_DMA+0xf4>)
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004062:	4a24      	ldr	r2, [pc, #144]	; (80040f4 <HAL_UART_Receive_DMA+0xf8>)
 8004064:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	4a23      	ldr	r2, [pc, #140]	; (80040f8 <HAL_UART_Receive_DMA+0xfc>)
 800406c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	2200      	movs	r2, #0
 8004074:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004076:	f107 0308 	add.w	r3, r7, #8
 800407a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3304      	adds	r3, #4
 8004086:	4619      	mov	r1, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	f7fe f90f 	bl	80022b0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040de:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e000      	b.n	80040e6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80040e4:	2302      	movs	r3, #2
  }
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	08004139 	.word	0x08004139
 80040f4:	080041a1 	.word	0x080041a1
 80040f8:	080041bd 	.word	0x080041bd

080040fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d11e      	bne.n	8004192 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004168:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004188:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f7ff ffb2 	bl	80040fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7ff ffae 	bl	8004110 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b21      	cmp	r3, #33	; 0x21
 80041ee:	d108      	bne.n	8004202 <UART_DMAError+0x46>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2200      	movs	r2, #0
 80041fa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80041fc:	68b8      	ldr	r0, [r7, #8]
 80041fe:	f000 f827 	bl	8004250 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b22      	cmp	r3, #34	; 0x22
 8004222:	d108      	bne.n	8004236 <UART_DMAError+0x7a>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004230:	68b8      	ldr	r0, [r7, #8]
 8004232:	f000 f823 	bl	800427c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	f043 0210 	orr.w	r2, r3, #16
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004242:	68b8      	ldr	r0, [r7, #8]
 8004244:	f7ff ff6e 	bl	8004124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004266:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004292:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042fa:	f023 030c 	bic.w	r3, r3, #12
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	68f9      	ldr	r1, [r7, #12]
 8004304:	430b      	orrs	r3, r1
 8004306:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004326:	f040 818b 	bne.w	8004640 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4ac1      	ldr	r2, [pc, #772]	; (8004634 <UART_SetConfig+0x37c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d005      	beq.n	8004340 <UART_SetConfig+0x88>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4abf      	ldr	r2, [pc, #764]	; (8004638 <UART_SetConfig+0x380>)
 800433a:	4293      	cmp	r3, r2
 800433c:	f040 80bd 	bne.w	80044ba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004340:	f7ff f852 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 8004344:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	461d      	mov	r5, r3
 800434a:	f04f 0600 	mov.w	r6, #0
 800434e:	46a8      	mov	r8, r5
 8004350:	46b1      	mov	r9, r6
 8004352:	eb18 0308 	adds.w	r3, r8, r8
 8004356:	eb49 0409 	adc.w	r4, r9, r9
 800435a:	4698      	mov	r8, r3
 800435c:	46a1      	mov	r9, r4
 800435e:	eb18 0805 	adds.w	r8, r8, r5
 8004362:	eb49 0906 	adc.w	r9, r9, r6
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004372:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004376:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800437a:	4688      	mov	r8, r1
 800437c:	4691      	mov	r9, r2
 800437e:	eb18 0005 	adds.w	r0, r8, r5
 8004382:	eb49 0106 	adc.w	r1, r9, r6
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	461d      	mov	r5, r3
 800438c:	f04f 0600 	mov.w	r6, #0
 8004390:	196b      	adds	r3, r5, r5
 8004392:	eb46 0406 	adc.w	r4, r6, r6
 8004396:	461a      	mov	r2, r3
 8004398:	4623      	mov	r3, r4
 800439a:	f7fc fba9 	bl	8000af0 <__aeabi_uldivmod>
 800439e:	4603      	mov	r3, r0
 80043a0:	460c      	mov	r4, r1
 80043a2:	461a      	mov	r2, r3
 80043a4:	4ba5      	ldr	r3, [pc, #660]	; (800463c <UART_SetConfig+0x384>)
 80043a6:	fba3 2302 	umull	r2, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	461d      	mov	r5, r3
 80043b4:	f04f 0600 	mov.w	r6, #0
 80043b8:	46a9      	mov	r9, r5
 80043ba:	46b2      	mov	sl, r6
 80043bc:	eb19 0309 	adds.w	r3, r9, r9
 80043c0:	eb4a 040a 	adc.w	r4, sl, sl
 80043c4:	4699      	mov	r9, r3
 80043c6:	46a2      	mov	sl, r4
 80043c8:	eb19 0905 	adds.w	r9, r9, r5
 80043cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80043d0:	f04f 0100 	mov.w	r1, #0
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043e4:	4689      	mov	r9, r1
 80043e6:	4692      	mov	sl, r2
 80043e8:	eb19 0005 	adds.w	r0, r9, r5
 80043ec:	eb4a 0106 	adc.w	r1, sl, r6
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	461d      	mov	r5, r3
 80043f6:	f04f 0600 	mov.w	r6, #0
 80043fa:	196b      	adds	r3, r5, r5
 80043fc:	eb46 0406 	adc.w	r4, r6, r6
 8004400:	461a      	mov	r2, r3
 8004402:	4623      	mov	r3, r4
 8004404:	f7fc fb74 	bl	8000af0 <__aeabi_uldivmod>
 8004408:	4603      	mov	r3, r0
 800440a:	460c      	mov	r4, r1
 800440c:	461a      	mov	r2, r3
 800440e:	4b8b      	ldr	r3, [pc, #556]	; (800463c <UART_SetConfig+0x384>)
 8004410:	fba3 1302 	umull	r1, r3, r3, r2
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	2164      	movs	r1, #100	; 0x64
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	3332      	adds	r3, #50	; 0x32
 8004422:	4a86      	ldr	r2, [pc, #536]	; (800463c <UART_SetConfig+0x384>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004430:	4498      	add	r8, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	461d      	mov	r5, r3
 8004436:	f04f 0600 	mov.w	r6, #0
 800443a:	46a9      	mov	r9, r5
 800443c:	46b2      	mov	sl, r6
 800443e:	eb19 0309 	adds.w	r3, r9, r9
 8004442:	eb4a 040a 	adc.w	r4, sl, sl
 8004446:	4699      	mov	r9, r3
 8004448:	46a2      	mov	sl, r4
 800444a:	eb19 0905 	adds.w	r9, r9, r5
 800444e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004452:	f04f 0100 	mov.w	r1, #0
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800445e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004462:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004466:	4689      	mov	r9, r1
 8004468:	4692      	mov	sl, r2
 800446a:	eb19 0005 	adds.w	r0, r9, r5
 800446e:	eb4a 0106 	adc.w	r1, sl, r6
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	461d      	mov	r5, r3
 8004478:	f04f 0600 	mov.w	r6, #0
 800447c:	196b      	adds	r3, r5, r5
 800447e:	eb46 0406 	adc.w	r4, r6, r6
 8004482:	461a      	mov	r2, r3
 8004484:	4623      	mov	r3, r4
 8004486:	f7fc fb33 	bl	8000af0 <__aeabi_uldivmod>
 800448a:	4603      	mov	r3, r0
 800448c:	460c      	mov	r4, r1
 800448e:	461a      	mov	r2, r3
 8004490:	4b6a      	ldr	r3, [pc, #424]	; (800463c <UART_SetConfig+0x384>)
 8004492:	fba3 1302 	umull	r1, r3, r3, r2
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2164      	movs	r1, #100	; 0x64
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	3332      	adds	r3, #50	; 0x32
 80044a4:	4a65      	ldr	r2, [pc, #404]	; (800463c <UART_SetConfig+0x384>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	f003 0207 	and.w	r2, r3, #7
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4442      	add	r2, r8
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	e26f      	b.n	800499a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044ba:	f7fe ff81 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80044be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	461d      	mov	r5, r3
 80044c4:	f04f 0600 	mov.w	r6, #0
 80044c8:	46a8      	mov	r8, r5
 80044ca:	46b1      	mov	r9, r6
 80044cc:	eb18 0308 	adds.w	r3, r8, r8
 80044d0:	eb49 0409 	adc.w	r4, r9, r9
 80044d4:	4698      	mov	r8, r3
 80044d6:	46a1      	mov	r9, r4
 80044d8:	eb18 0805 	adds.w	r8, r8, r5
 80044dc:	eb49 0906 	adc.w	r9, r9, r6
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044f4:	4688      	mov	r8, r1
 80044f6:	4691      	mov	r9, r2
 80044f8:	eb18 0005 	adds.w	r0, r8, r5
 80044fc:	eb49 0106 	adc.w	r1, r9, r6
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	461d      	mov	r5, r3
 8004506:	f04f 0600 	mov.w	r6, #0
 800450a:	196b      	adds	r3, r5, r5
 800450c:	eb46 0406 	adc.w	r4, r6, r6
 8004510:	461a      	mov	r2, r3
 8004512:	4623      	mov	r3, r4
 8004514:	f7fc faec 	bl	8000af0 <__aeabi_uldivmod>
 8004518:	4603      	mov	r3, r0
 800451a:	460c      	mov	r4, r1
 800451c:	461a      	mov	r2, r3
 800451e:	4b47      	ldr	r3, [pc, #284]	; (800463c <UART_SetConfig+0x384>)
 8004520:	fba3 2302 	umull	r2, r3, r3, r2
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	461d      	mov	r5, r3
 800452e:	f04f 0600 	mov.w	r6, #0
 8004532:	46a9      	mov	r9, r5
 8004534:	46b2      	mov	sl, r6
 8004536:	eb19 0309 	adds.w	r3, r9, r9
 800453a:	eb4a 040a 	adc.w	r4, sl, sl
 800453e:	4699      	mov	r9, r3
 8004540:	46a2      	mov	sl, r4
 8004542:	eb19 0905 	adds.w	r9, r9, r5
 8004546:	eb4a 0a06 	adc.w	sl, sl, r6
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004556:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800455a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800455e:	4689      	mov	r9, r1
 8004560:	4692      	mov	sl, r2
 8004562:	eb19 0005 	adds.w	r0, r9, r5
 8004566:	eb4a 0106 	adc.w	r1, sl, r6
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	461d      	mov	r5, r3
 8004570:	f04f 0600 	mov.w	r6, #0
 8004574:	196b      	adds	r3, r5, r5
 8004576:	eb46 0406 	adc.w	r4, r6, r6
 800457a:	461a      	mov	r2, r3
 800457c:	4623      	mov	r3, r4
 800457e:	f7fc fab7 	bl	8000af0 <__aeabi_uldivmod>
 8004582:	4603      	mov	r3, r0
 8004584:	460c      	mov	r4, r1
 8004586:	461a      	mov	r2, r3
 8004588:	4b2c      	ldr	r3, [pc, #176]	; (800463c <UART_SetConfig+0x384>)
 800458a:	fba3 1302 	umull	r1, r3, r3, r2
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2164      	movs	r1, #100	; 0x64
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	3332      	adds	r3, #50	; 0x32
 800459c:	4a27      	ldr	r2, [pc, #156]	; (800463c <UART_SetConfig+0x384>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045aa:	4498      	add	r8, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	461d      	mov	r5, r3
 80045b0:	f04f 0600 	mov.w	r6, #0
 80045b4:	46a9      	mov	r9, r5
 80045b6:	46b2      	mov	sl, r6
 80045b8:	eb19 0309 	adds.w	r3, r9, r9
 80045bc:	eb4a 040a 	adc.w	r4, sl, sl
 80045c0:	4699      	mov	r9, r3
 80045c2:	46a2      	mov	sl, r4
 80045c4:	eb19 0905 	adds.w	r9, r9, r5
 80045c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045e0:	4689      	mov	r9, r1
 80045e2:	4692      	mov	sl, r2
 80045e4:	eb19 0005 	adds.w	r0, r9, r5
 80045e8:	eb4a 0106 	adc.w	r1, sl, r6
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	461d      	mov	r5, r3
 80045f2:	f04f 0600 	mov.w	r6, #0
 80045f6:	196b      	adds	r3, r5, r5
 80045f8:	eb46 0406 	adc.w	r4, r6, r6
 80045fc:	461a      	mov	r2, r3
 80045fe:	4623      	mov	r3, r4
 8004600:	f7fc fa76 	bl	8000af0 <__aeabi_uldivmod>
 8004604:	4603      	mov	r3, r0
 8004606:	460c      	mov	r4, r1
 8004608:	461a      	mov	r2, r3
 800460a:	4b0c      	ldr	r3, [pc, #48]	; (800463c <UART_SetConfig+0x384>)
 800460c:	fba3 1302 	umull	r1, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	2164      	movs	r1, #100	; 0x64
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	3332      	adds	r3, #50	; 0x32
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <UART_SetConfig+0x384>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	f003 0207 	and.w	r2, r3, #7
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4442      	add	r2, r8
 8004630:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004632:	e1b2      	b.n	800499a <UART_SetConfig+0x6e2>
 8004634:	40011000 	.word	0x40011000
 8004638:	40011400 	.word	0x40011400
 800463c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4ad7      	ldr	r2, [pc, #860]	; (80049a4 <UART_SetConfig+0x6ec>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d005      	beq.n	8004656 <UART_SetConfig+0x39e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4ad6      	ldr	r2, [pc, #856]	; (80049a8 <UART_SetConfig+0x6f0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	f040 80d1 	bne.w	80047f8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004656:	f7fe fec7 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 800465a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	469a      	mov	sl, r3
 8004660:	f04f 0b00 	mov.w	fp, #0
 8004664:	46d0      	mov	r8, sl
 8004666:	46d9      	mov	r9, fp
 8004668:	eb18 0308 	adds.w	r3, r8, r8
 800466c:	eb49 0409 	adc.w	r4, r9, r9
 8004670:	4698      	mov	r8, r3
 8004672:	46a1      	mov	r9, r4
 8004674:	eb18 080a 	adds.w	r8, r8, sl
 8004678:	eb49 090b 	adc.w	r9, r9, fp
 800467c:	f04f 0100 	mov.w	r1, #0
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004688:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800468c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004690:	4688      	mov	r8, r1
 8004692:	4691      	mov	r9, r2
 8004694:	eb1a 0508 	adds.w	r5, sl, r8
 8004698:	eb4b 0609 	adc.w	r6, fp, r9
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4619      	mov	r1, r3
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	f04f 0400 	mov.w	r4, #0
 80046ae:	0094      	lsls	r4, r2, #2
 80046b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046b4:	008b      	lsls	r3, r1, #2
 80046b6:	461a      	mov	r2, r3
 80046b8:	4623      	mov	r3, r4
 80046ba:	4628      	mov	r0, r5
 80046bc:	4631      	mov	r1, r6
 80046be:	f7fc fa17 	bl	8000af0 <__aeabi_uldivmod>
 80046c2:	4603      	mov	r3, r0
 80046c4:	460c      	mov	r4, r1
 80046c6:	461a      	mov	r2, r3
 80046c8:	4bb8      	ldr	r3, [pc, #736]	; (80049ac <UART_SetConfig+0x6f4>)
 80046ca:	fba3 2302 	umull	r2, r3, r3, r2
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	469b      	mov	fp, r3
 80046d8:	f04f 0c00 	mov.w	ip, #0
 80046dc:	46d9      	mov	r9, fp
 80046de:	46e2      	mov	sl, ip
 80046e0:	eb19 0309 	adds.w	r3, r9, r9
 80046e4:	eb4a 040a 	adc.w	r4, sl, sl
 80046e8:	4699      	mov	r9, r3
 80046ea:	46a2      	mov	sl, r4
 80046ec:	eb19 090b 	adds.w	r9, r9, fp
 80046f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046f4:	f04f 0100 	mov.w	r1, #0
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004700:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004704:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004708:	4689      	mov	r9, r1
 800470a:	4692      	mov	sl, r2
 800470c:	eb1b 0509 	adds.w	r5, fp, r9
 8004710:	eb4c 060a 	adc.w	r6, ip, sl
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4619      	mov	r1, r3
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	f04f 0400 	mov.w	r4, #0
 8004726:	0094      	lsls	r4, r2, #2
 8004728:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800472c:	008b      	lsls	r3, r1, #2
 800472e:	461a      	mov	r2, r3
 8004730:	4623      	mov	r3, r4
 8004732:	4628      	mov	r0, r5
 8004734:	4631      	mov	r1, r6
 8004736:	f7fc f9db 	bl	8000af0 <__aeabi_uldivmod>
 800473a:	4603      	mov	r3, r0
 800473c:	460c      	mov	r4, r1
 800473e:	461a      	mov	r2, r3
 8004740:	4b9a      	ldr	r3, [pc, #616]	; (80049ac <UART_SetConfig+0x6f4>)
 8004742:	fba3 1302 	umull	r1, r3, r3, r2
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2164      	movs	r1, #100	; 0x64
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	3332      	adds	r3, #50	; 0x32
 8004754:	4a95      	ldr	r2, [pc, #596]	; (80049ac <UART_SetConfig+0x6f4>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004760:	4498      	add	r8, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	469b      	mov	fp, r3
 8004766:	f04f 0c00 	mov.w	ip, #0
 800476a:	46d9      	mov	r9, fp
 800476c:	46e2      	mov	sl, ip
 800476e:	eb19 0309 	adds.w	r3, r9, r9
 8004772:	eb4a 040a 	adc.w	r4, sl, sl
 8004776:	4699      	mov	r9, r3
 8004778:	46a2      	mov	sl, r4
 800477a:	eb19 090b 	adds.w	r9, r9, fp
 800477e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004782:	f04f 0100 	mov.w	r1, #0
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800478e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004796:	4689      	mov	r9, r1
 8004798:	4692      	mov	sl, r2
 800479a:	eb1b 0509 	adds.w	r5, fp, r9
 800479e:	eb4c 060a 	adc.w	r6, ip, sl
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4619      	mov	r1, r3
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	f04f 0400 	mov.w	r4, #0
 80047b4:	0094      	lsls	r4, r2, #2
 80047b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047ba:	008b      	lsls	r3, r1, #2
 80047bc:	461a      	mov	r2, r3
 80047be:	4623      	mov	r3, r4
 80047c0:	4628      	mov	r0, r5
 80047c2:	4631      	mov	r1, r6
 80047c4:	f7fc f994 	bl	8000af0 <__aeabi_uldivmod>
 80047c8:	4603      	mov	r3, r0
 80047ca:	460c      	mov	r4, r1
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b77      	ldr	r3, [pc, #476]	; (80049ac <UART_SetConfig+0x6f4>)
 80047d0:	fba3 1302 	umull	r1, r3, r3, r2
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	2164      	movs	r1, #100	; 0x64
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	3332      	adds	r3, #50	; 0x32
 80047e2:	4a72      	ldr	r2, [pc, #456]	; (80049ac <UART_SetConfig+0x6f4>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	f003 020f 	and.w	r2, r3, #15
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4442      	add	r2, r8
 80047f4:	609a      	str	r2, [r3, #8]
 80047f6:	e0d0      	b.n	800499a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047f8:	f7fe fde2 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80047fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	469a      	mov	sl, r3
 8004802:	f04f 0b00 	mov.w	fp, #0
 8004806:	46d0      	mov	r8, sl
 8004808:	46d9      	mov	r9, fp
 800480a:	eb18 0308 	adds.w	r3, r8, r8
 800480e:	eb49 0409 	adc.w	r4, r9, r9
 8004812:	4698      	mov	r8, r3
 8004814:	46a1      	mov	r9, r4
 8004816:	eb18 080a 	adds.w	r8, r8, sl
 800481a:	eb49 090b 	adc.w	r9, r9, fp
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800482a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800482e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004832:	4688      	mov	r8, r1
 8004834:	4691      	mov	r9, r2
 8004836:	eb1a 0508 	adds.w	r5, sl, r8
 800483a:	eb4b 0609 	adc.w	r6, fp, r9
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4619      	mov	r1, r3
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	f04f 0400 	mov.w	r4, #0
 8004850:	0094      	lsls	r4, r2, #2
 8004852:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004856:	008b      	lsls	r3, r1, #2
 8004858:	461a      	mov	r2, r3
 800485a:	4623      	mov	r3, r4
 800485c:	4628      	mov	r0, r5
 800485e:	4631      	mov	r1, r6
 8004860:	f7fc f946 	bl	8000af0 <__aeabi_uldivmod>
 8004864:	4603      	mov	r3, r0
 8004866:	460c      	mov	r4, r1
 8004868:	461a      	mov	r2, r3
 800486a:	4b50      	ldr	r3, [pc, #320]	; (80049ac <UART_SetConfig+0x6f4>)
 800486c:	fba3 2302 	umull	r2, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	469b      	mov	fp, r3
 800487a:	f04f 0c00 	mov.w	ip, #0
 800487e:	46d9      	mov	r9, fp
 8004880:	46e2      	mov	sl, ip
 8004882:	eb19 0309 	adds.w	r3, r9, r9
 8004886:	eb4a 040a 	adc.w	r4, sl, sl
 800488a:	4699      	mov	r9, r3
 800488c:	46a2      	mov	sl, r4
 800488e:	eb19 090b 	adds.w	r9, r9, fp
 8004892:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004896:	f04f 0100 	mov.w	r1, #0
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048aa:	4689      	mov	r9, r1
 80048ac:	4692      	mov	sl, r2
 80048ae:	eb1b 0509 	adds.w	r5, fp, r9
 80048b2:	eb4c 060a 	adc.w	r6, ip, sl
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4619      	mov	r1, r3
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	f04f 0400 	mov.w	r4, #0
 80048c8:	0094      	lsls	r4, r2, #2
 80048ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048ce:	008b      	lsls	r3, r1, #2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	4628      	mov	r0, r5
 80048d6:	4631      	mov	r1, r6
 80048d8:	f7fc f90a 	bl	8000af0 <__aeabi_uldivmod>
 80048dc:	4603      	mov	r3, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	461a      	mov	r2, r3
 80048e2:	4b32      	ldr	r3, [pc, #200]	; (80049ac <UART_SetConfig+0x6f4>)
 80048e4:	fba3 1302 	umull	r1, r3, r3, r2
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	2164      	movs	r1, #100	; 0x64
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	3332      	adds	r3, #50	; 0x32
 80048f6:	4a2d      	ldr	r2, [pc, #180]	; (80049ac <UART_SetConfig+0x6f4>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004902:	4498      	add	r8, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	469b      	mov	fp, r3
 8004908:	f04f 0c00 	mov.w	ip, #0
 800490c:	46d9      	mov	r9, fp
 800490e:	46e2      	mov	sl, ip
 8004910:	eb19 0309 	adds.w	r3, r9, r9
 8004914:	eb4a 040a 	adc.w	r4, sl, sl
 8004918:	4699      	mov	r9, r3
 800491a:	46a2      	mov	sl, r4
 800491c:	eb19 090b 	adds.w	r9, r9, fp
 8004920:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004930:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004934:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004938:	4689      	mov	r9, r1
 800493a:	4692      	mov	sl, r2
 800493c:	eb1b 0509 	adds.w	r5, fp, r9
 8004940:	eb4c 060a 	adc.w	r6, ip, sl
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4619      	mov	r1, r3
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	f04f 0400 	mov.w	r4, #0
 8004956:	0094      	lsls	r4, r2, #2
 8004958:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800495c:	008b      	lsls	r3, r1, #2
 800495e:	461a      	mov	r2, r3
 8004960:	4623      	mov	r3, r4
 8004962:	4628      	mov	r0, r5
 8004964:	4631      	mov	r1, r6
 8004966:	f7fc f8c3 	bl	8000af0 <__aeabi_uldivmod>
 800496a:	4603      	mov	r3, r0
 800496c:	460c      	mov	r4, r1
 800496e:	461a      	mov	r2, r3
 8004970:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <UART_SetConfig+0x6f4>)
 8004972:	fba3 1302 	umull	r1, r3, r3, r2
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2164      	movs	r1, #100	; 0x64
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	3332      	adds	r3, #50	; 0x32
 8004984:	4a09      	ldr	r2, [pc, #36]	; (80049ac <UART_SetConfig+0x6f4>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	f003 020f 	and.w	r2, r3, #15
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4442      	add	r2, r8
 8004996:	609a      	str	r2, [r3, #8]
}
 8004998:	e7ff      	b.n	800499a <UART_SetConfig+0x6e2>
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a4:	40011000 	.word	0x40011000
 80049a8:	40011400 	.word	0x40011400
 80049ac:	51eb851f 	.word	0x51eb851f

080049b0 <__errno>:
 80049b0:	4b01      	ldr	r3, [pc, #4]	; (80049b8 <__errno+0x8>)
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000014 	.word	0x20000014

080049bc <__libc_init_array>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	4e0d      	ldr	r6, [pc, #52]	; (80049f4 <__libc_init_array+0x38>)
 80049c0:	4c0d      	ldr	r4, [pc, #52]	; (80049f8 <__libc_init_array+0x3c>)
 80049c2:	1ba4      	subs	r4, r4, r6
 80049c4:	10a4      	asrs	r4, r4, #2
 80049c6:	2500      	movs	r5, #0
 80049c8:	42a5      	cmp	r5, r4
 80049ca:	d109      	bne.n	80049e0 <__libc_init_array+0x24>
 80049cc:	4e0b      	ldr	r6, [pc, #44]	; (80049fc <__libc_init_array+0x40>)
 80049ce:	4c0c      	ldr	r4, [pc, #48]	; (8004a00 <__libc_init_array+0x44>)
 80049d0:	f001 fbc4 	bl	800615c <_init>
 80049d4:	1ba4      	subs	r4, r4, r6
 80049d6:	10a4      	asrs	r4, r4, #2
 80049d8:	2500      	movs	r5, #0
 80049da:	42a5      	cmp	r5, r4
 80049dc:	d105      	bne.n	80049ea <__libc_init_array+0x2e>
 80049de:	bd70      	pop	{r4, r5, r6, pc}
 80049e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049e4:	4798      	blx	r3
 80049e6:	3501      	adds	r5, #1
 80049e8:	e7ee      	b.n	80049c8 <__libc_init_array+0xc>
 80049ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049ee:	4798      	blx	r3
 80049f0:	3501      	adds	r5, #1
 80049f2:	e7f2      	b.n	80049da <__libc_init_array+0x1e>
 80049f4:	080063c0 	.word	0x080063c0
 80049f8:	080063c0 	.word	0x080063c0
 80049fc:	080063c0 	.word	0x080063c0
 8004a00:	080063c4 	.word	0x080063c4

08004a04 <memset>:
 8004a04:	4402      	add	r2, r0
 8004a06:	4603      	mov	r3, r0
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d100      	bne.n	8004a0e <memset+0xa>
 8004a0c:	4770      	bx	lr
 8004a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a12:	e7f9      	b.n	8004a08 <memset+0x4>
 8004a14:	0000      	movs	r0, r0
	...

08004a18 <cos>:
 8004a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a1a:	ec51 0b10 	vmov	r0, r1, d0
 8004a1e:	4a1e      	ldr	r2, [pc, #120]	; (8004a98 <cos+0x80>)
 8004a20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a24:	4293      	cmp	r3, r2
 8004a26:	dc06      	bgt.n	8004a36 <cos+0x1e>
 8004a28:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004a90 <cos+0x78>
 8004a2c:	f000 fc18 	bl	8005260 <__kernel_cos>
 8004a30:	ec51 0b10 	vmov	r0, r1, d0
 8004a34:	e007      	b.n	8004a46 <cos+0x2e>
 8004a36:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <cos+0x84>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	dd09      	ble.n	8004a50 <cos+0x38>
 8004a3c:	ee10 2a10 	vmov	r2, s0
 8004a40:	460b      	mov	r3, r1
 8004a42:	f7fb fbc5 	bl	80001d0 <__aeabi_dsub>
 8004a46:	ec41 0b10 	vmov	d0, r0, r1
 8004a4a:	b005      	add	sp, #20
 8004a4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a50:	4668      	mov	r0, sp
 8004a52:	f000 f961 	bl	8004d18 <__ieee754_rem_pio2>
 8004a56:	f000 0003 	and.w	r0, r0, #3
 8004a5a:	2801      	cmp	r0, #1
 8004a5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004a60:	ed9d 0b00 	vldr	d0, [sp]
 8004a64:	d007      	beq.n	8004a76 <cos+0x5e>
 8004a66:	2802      	cmp	r0, #2
 8004a68:	d00e      	beq.n	8004a88 <cos+0x70>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	d0de      	beq.n	8004a2c <cos+0x14>
 8004a6e:	2001      	movs	r0, #1
 8004a70:	f000 fffe 	bl	8005a70 <__kernel_sin>
 8004a74:	e7dc      	b.n	8004a30 <cos+0x18>
 8004a76:	f000 fffb 	bl	8005a70 <__kernel_sin>
 8004a7a:	ec53 2b10 	vmov	r2, r3, d0
 8004a7e:	ee10 0a10 	vmov	r0, s0
 8004a82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004a86:	e7de      	b.n	8004a46 <cos+0x2e>
 8004a88:	f000 fbea 	bl	8005260 <__kernel_cos>
 8004a8c:	e7f5      	b.n	8004a7a <cos+0x62>
 8004a8e:	bf00      	nop
	...
 8004a98:	3fe921fb 	.word	0x3fe921fb
 8004a9c:	7fefffff 	.word	0x7fefffff

08004aa0 <atan2>:
 8004aa0:	f000 b85a 	b.w	8004b58 <__ieee754_atan2>

08004aa4 <sqrt>:
 8004aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004aa8:	ed2d 8b02 	vpush	{d8}
 8004aac:	b08b      	sub	sp, #44	; 0x2c
 8004aae:	ec55 4b10 	vmov	r4, r5, d0
 8004ab2:	f000 fb23 	bl	80050fc <__ieee754_sqrt>
 8004ab6:	4b26      	ldr	r3, [pc, #152]	; (8004b50 <sqrt+0xac>)
 8004ab8:	eeb0 8a40 	vmov.f32	s16, s0
 8004abc:	eef0 8a60 	vmov.f32	s17, s1
 8004ac0:	f993 6000 	ldrsb.w	r6, [r3]
 8004ac4:	1c73      	adds	r3, r6, #1
 8004ac6:	d02a      	beq.n	8004b1e <sqrt+0x7a>
 8004ac8:	4622      	mov	r2, r4
 8004aca:	462b      	mov	r3, r5
 8004acc:	4620      	mov	r0, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f7fb ffd0 	bl	8000a74 <__aeabi_dcmpun>
 8004ad4:	4607      	mov	r7, r0
 8004ad6:	bb10      	cbnz	r0, 8004b1e <sqrt+0x7a>
 8004ad8:	f04f 0800 	mov.w	r8, #0
 8004adc:	f04f 0900 	mov.w	r9, #0
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f7fb ff9c 	bl	8000a24 <__aeabi_dcmplt>
 8004aec:	b1b8      	cbz	r0, 8004b1e <sqrt+0x7a>
 8004aee:	2301      	movs	r3, #1
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	4b18      	ldr	r3, [pc, #96]	; (8004b54 <sqrt+0xb0>)
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	9708      	str	r7, [sp, #32]
 8004af8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004afc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004b00:	b9b6      	cbnz	r6, 8004b30 <sqrt+0x8c>
 8004b02:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004b06:	4668      	mov	r0, sp
 8004b08:	f001 fa9e 	bl	8006048 <matherr>
 8004b0c:	b1d0      	cbz	r0, 8004b44 <sqrt+0xa0>
 8004b0e:	9b08      	ldr	r3, [sp, #32]
 8004b10:	b11b      	cbz	r3, 8004b1a <sqrt+0x76>
 8004b12:	f7ff ff4d 	bl	80049b0 <__errno>
 8004b16:	9b08      	ldr	r3, [sp, #32]
 8004b18:	6003      	str	r3, [r0, #0]
 8004b1a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004b1e:	eeb0 0a48 	vmov.f32	s0, s16
 8004b22:	eef0 0a68 	vmov.f32	s1, s17
 8004b26:	b00b      	add	sp, #44	; 0x2c
 8004b28:	ecbd 8b02 	vpop	{d8}
 8004b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	4640      	mov	r0, r8
 8004b36:	4649      	mov	r1, r9
 8004b38:	f7fb fe2c 	bl	8000794 <__aeabi_ddiv>
 8004b3c:	2e02      	cmp	r6, #2
 8004b3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b42:	d1e0      	bne.n	8004b06 <sqrt+0x62>
 8004b44:	f7ff ff34 	bl	80049b0 <__errno>
 8004b48:	2321      	movs	r3, #33	; 0x21
 8004b4a:	6003      	str	r3, [r0, #0]
 8004b4c:	e7df      	b.n	8004b0e <sqrt+0x6a>
 8004b4e:	bf00      	nop
 8004b50:	20000078 	.word	0x20000078
 8004b54:	08006198 	.word	0x08006198

08004b58 <__ieee754_atan2>:
 8004b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b5c:	ec57 6b11 	vmov	r6, r7, d1
 8004b60:	4273      	negs	r3, r6
 8004b62:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8004b66:	4333      	orrs	r3, r6
 8004b68:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8004d10 <__ieee754_atan2+0x1b8>
 8004b6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004b70:	4573      	cmp	r3, lr
 8004b72:	ec51 0b10 	vmov	r0, r1, d0
 8004b76:	ee11 8a10 	vmov	r8, s2
 8004b7a:	d80a      	bhi.n	8004b92 <__ieee754_atan2+0x3a>
 8004b7c:	4244      	negs	r4, r0
 8004b7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b82:	4304      	orrs	r4, r0
 8004b84:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004b88:	4574      	cmp	r4, lr
 8004b8a:	468c      	mov	ip, r1
 8004b8c:	ee10 9a10 	vmov	r9, s0
 8004b90:	d907      	bls.n	8004ba2 <__ieee754_atan2+0x4a>
 8004b92:	4632      	mov	r2, r6
 8004b94:	463b      	mov	r3, r7
 8004b96:	f7fb fb1d 	bl	80001d4 <__adddf3>
 8004b9a:	ec41 0b10 	vmov	d0, r0, r1
 8004b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ba2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8004ba6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004baa:	4334      	orrs	r4, r6
 8004bac:	d103      	bne.n	8004bb6 <__ieee754_atan2+0x5e>
 8004bae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb2:	f001 b819 	b.w	8005be8 <atan>
 8004bb6:	17bc      	asrs	r4, r7, #30
 8004bb8:	f004 0402 	and.w	r4, r4, #2
 8004bbc:	ea53 0909 	orrs.w	r9, r3, r9
 8004bc0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004bc4:	d107      	bne.n	8004bd6 <__ieee754_atan2+0x7e>
 8004bc6:	2c02      	cmp	r4, #2
 8004bc8:	d073      	beq.n	8004cb2 <__ieee754_atan2+0x15a>
 8004bca:	2c03      	cmp	r4, #3
 8004bcc:	d1e5      	bne.n	8004b9a <__ieee754_atan2+0x42>
 8004bce:	a13e      	add	r1, pc, #248	; (adr r1, 8004cc8 <__ieee754_atan2+0x170>)
 8004bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bd4:	e7e1      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004bd6:	ea52 0808 	orrs.w	r8, r2, r8
 8004bda:	d106      	bne.n	8004bea <__ieee754_atan2+0x92>
 8004bdc:	f1bc 0f00 	cmp.w	ip, #0
 8004be0:	da6b      	bge.n	8004cba <__ieee754_atan2+0x162>
 8004be2:	a13b      	add	r1, pc, #236	; (adr r1, 8004cd0 <__ieee754_atan2+0x178>)
 8004be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004be8:	e7d7      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004bea:	4572      	cmp	r2, lr
 8004bec:	d120      	bne.n	8004c30 <__ieee754_atan2+0xd8>
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d111      	bne.n	8004c16 <__ieee754_atan2+0xbe>
 8004bf2:	2c02      	cmp	r4, #2
 8004bf4:	d007      	beq.n	8004c06 <__ieee754_atan2+0xae>
 8004bf6:	2c03      	cmp	r4, #3
 8004bf8:	d009      	beq.n	8004c0e <__ieee754_atan2+0xb6>
 8004bfa:	2c01      	cmp	r4, #1
 8004bfc:	d155      	bne.n	8004caa <__ieee754_atan2+0x152>
 8004bfe:	a136      	add	r1, pc, #216	; (adr r1, 8004cd8 <__ieee754_atan2+0x180>)
 8004c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c04:	e7c9      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004c06:	a136      	add	r1, pc, #216	; (adr r1, 8004ce0 <__ieee754_atan2+0x188>)
 8004c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c0c:	e7c5      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004c0e:	a136      	add	r1, pc, #216	; (adr r1, 8004ce8 <__ieee754_atan2+0x190>)
 8004c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c14:	e7c1      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004c16:	2c02      	cmp	r4, #2
 8004c18:	d04b      	beq.n	8004cb2 <__ieee754_atan2+0x15a>
 8004c1a:	2c03      	cmp	r4, #3
 8004c1c:	d0d7      	beq.n	8004bce <__ieee754_atan2+0x76>
 8004c1e:	2c01      	cmp	r4, #1
 8004c20:	f04f 0000 	mov.w	r0, #0
 8004c24:	d102      	bne.n	8004c2c <__ieee754_atan2+0xd4>
 8004c26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004c2a:	e7b6      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	e7b4      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004c30:	4573      	cmp	r3, lr
 8004c32:	d0d3      	beq.n	8004bdc <__ieee754_atan2+0x84>
 8004c34:	1a9b      	subs	r3, r3, r2
 8004c36:	151b      	asrs	r3, r3, #20
 8004c38:	2b3c      	cmp	r3, #60	; 0x3c
 8004c3a:	dc1e      	bgt.n	8004c7a <__ieee754_atan2+0x122>
 8004c3c:	2f00      	cmp	r7, #0
 8004c3e:	da01      	bge.n	8004c44 <__ieee754_atan2+0xec>
 8004c40:	333c      	adds	r3, #60	; 0x3c
 8004c42:	db1e      	blt.n	8004c82 <__ieee754_atan2+0x12a>
 8004c44:	4632      	mov	r2, r6
 8004c46:	463b      	mov	r3, r7
 8004c48:	f7fb fda4 	bl	8000794 <__aeabi_ddiv>
 8004c4c:	ec41 0b10 	vmov	d0, r0, r1
 8004c50:	f001 f96a 	bl	8005f28 <fabs>
 8004c54:	f000 ffc8 	bl	8005be8 <atan>
 8004c58:	ec51 0b10 	vmov	r0, r1, d0
 8004c5c:	2c01      	cmp	r4, #1
 8004c5e:	d013      	beq.n	8004c88 <__ieee754_atan2+0x130>
 8004c60:	2c02      	cmp	r4, #2
 8004c62:	d015      	beq.n	8004c90 <__ieee754_atan2+0x138>
 8004c64:	2c00      	cmp	r4, #0
 8004c66:	d098      	beq.n	8004b9a <__ieee754_atan2+0x42>
 8004c68:	a321      	add	r3, pc, #132	; (adr r3, 8004cf0 <__ieee754_atan2+0x198>)
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	f7fb faaf 	bl	80001d0 <__aeabi_dsub>
 8004c72:	a321      	add	r3, pc, #132	; (adr r3, 8004cf8 <__ieee754_atan2+0x1a0>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	e014      	b.n	8004ca4 <__ieee754_atan2+0x14c>
 8004c7a:	a121      	add	r1, pc, #132	; (adr r1, 8004d00 <__ieee754_atan2+0x1a8>)
 8004c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c80:	e7ec      	b.n	8004c5c <__ieee754_atan2+0x104>
 8004c82:	2000      	movs	r0, #0
 8004c84:	2100      	movs	r1, #0
 8004c86:	e7e9      	b.n	8004c5c <__ieee754_atan2+0x104>
 8004c88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	e784      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004c90:	a317      	add	r3, pc, #92	; (adr r3, 8004cf0 <__ieee754_atan2+0x198>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fa9b 	bl	80001d0 <__aeabi_dsub>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	a116      	add	r1, pc, #88	; (adr r1, 8004cf8 <__ieee754_atan2+0x1a0>)
 8004ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ca4:	f7fb fa94 	bl	80001d0 <__aeabi_dsub>
 8004ca8:	e777      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004caa:	a117      	add	r1, pc, #92	; (adr r1, 8004d08 <__ieee754_atan2+0x1b0>)
 8004cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cb0:	e773      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004cb2:	a111      	add	r1, pc, #68	; (adr r1, 8004cf8 <__ieee754_atan2+0x1a0>)
 8004cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cb8:	e76f      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004cba:	a111      	add	r1, pc, #68	; (adr r1, 8004d00 <__ieee754_atan2+0x1a8>)
 8004cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cc0:	e76b      	b.n	8004b9a <__ieee754_atan2+0x42>
 8004cc2:	bf00      	nop
 8004cc4:	f3af 8000 	nop.w
 8004cc8:	54442d18 	.word	0x54442d18
 8004ccc:	c00921fb 	.word	0xc00921fb
 8004cd0:	54442d18 	.word	0x54442d18
 8004cd4:	bff921fb 	.word	0xbff921fb
 8004cd8:	54442d18 	.word	0x54442d18
 8004cdc:	bfe921fb 	.word	0xbfe921fb
 8004ce0:	7f3321d2 	.word	0x7f3321d2
 8004ce4:	4002d97c 	.word	0x4002d97c
 8004ce8:	7f3321d2 	.word	0x7f3321d2
 8004cec:	c002d97c 	.word	0xc002d97c
 8004cf0:	33145c07 	.word	0x33145c07
 8004cf4:	3ca1a626 	.word	0x3ca1a626
 8004cf8:	54442d18 	.word	0x54442d18
 8004cfc:	400921fb 	.word	0x400921fb
 8004d00:	54442d18 	.word	0x54442d18
 8004d04:	3ff921fb 	.word	0x3ff921fb
 8004d08:	54442d18 	.word	0x54442d18
 8004d0c:	3fe921fb 	.word	0x3fe921fb
 8004d10:	7ff00000 	.word	0x7ff00000
 8004d14:	00000000 	.word	0x00000000

08004d18 <__ieee754_rem_pio2>:
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	ec57 6b10 	vmov	r6, r7, d0
 8004d20:	4bc3      	ldr	r3, [pc, #780]	; (8005030 <__ieee754_rem_pio2+0x318>)
 8004d22:	b08d      	sub	sp, #52	; 0x34
 8004d24:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004d28:	4598      	cmp	r8, r3
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	9704      	str	r7, [sp, #16]
 8004d2e:	dc07      	bgt.n	8004d40 <__ieee754_rem_pio2+0x28>
 8004d30:	2200      	movs	r2, #0
 8004d32:	2300      	movs	r3, #0
 8004d34:	ed84 0b00 	vstr	d0, [r4]
 8004d38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d3c:	2500      	movs	r5, #0
 8004d3e:	e027      	b.n	8004d90 <__ieee754_rem_pio2+0x78>
 8004d40:	4bbc      	ldr	r3, [pc, #752]	; (8005034 <__ieee754_rem_pio2+0x31c>)
 8004d42:	4598      	cmp	r8, r3
 8004d44:	dc75      	bgt.n	8004e32 <__ieee754_rem_pio2+0x11a>
 8004d46:	9b04      	ldr	r3, [sp, #16]
 8004d48:	4dbb      	ldr	r5, [pc, #748]	; (8005038 <__ieee754_rem_pio2+0x320>)
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	ee10 0a10 	vmov	r0, s0
 8004d50:	a3a9      	add	r3, pc, #676	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x2e0>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	4639      	mov	r1, r7
 8004d58:	dd36      	ble.n	8004dc8 <__ieee754_rem_pio2+0xb0>
 8004d5a:	f7fb fa39 	bl	80001d0 <__aeabi_dsub>
 8004d5e:	45a8      	cmp	r8, r5
 8004d60:	4606      	mov	r6, r0
 8004d62:	460f      	mov	r7, r1
 8004d64:	d018      	beq.n	8004d98 <__ieee754_rem_pio2+0x80>
 8004d66:	a3a6      	add	r3, pc, #664	; (adr r3, 8005000 <__ieee754_rem_pio2+0x2e8>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb fa30 	bl	80001d0 <__aeabi_dsub>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	e9c4 2300 	strd	r2, r3, [r4]
 8004d78:	4630      	mov	r0, r6
 8004d7a:	4639      	mov	r1, r7
 8004d7c:	f7fb fa28 	bl	80001d0 <__aeabi_dsub>
 8004d80:	a39f      	add	r3, pc, #636	; (adr r3, 8005000 <__ieee754_rem_pio2+0x2e8>)
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f7fb fa23 	bl	80001d0 <__aeabi_dsub>
 8004d8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d8e:	2501      	movs	r5, #1
 8004d90:	4628      	mov	r0, r5
 8004d92:	b00d      	add	sp, #52	; 0x34
 8004d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d98:	a39b      	add	r3, pc, #620	; (adr r3, 8005008 <__ieee754_rem_pio2+0x2f0>)
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f7fb fa17 	bl	80001d0 <__aeabi_dsub>
 8004da2:	a39b      	add	r3, pc, #620	; (adr r3, 8005010 <__ieee754_rem_pio2+0x2f8>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	4606      	mov	r6, r0
 8004daa:	460f      	mov	r7, r1
 8004dac:	f7fb fa10 	bl	80001d0 <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	e9c4 2300 	strd	r2, r3, [r4]
 8004db8:	4630      	mov	r0, r6
 8004dba:	4639      	mov	r1, r7
 8004dbc:	f7fb fa08 	bl	80001d0 <__aeabi_dsub>
 8004dc0:	a393      	add	r3, pc, #588	; (adr r3, 8005010 <__ieee754_rem_pio2+0x2f8>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	e7de      	b.n	8004d86 <__ieee754_rem_pio2+0x6e>
 8004dc8:	f7fb fa04 	bl	80001d4 <__adddf3>
 8004dcc:	45a8      	cmp	r8, r5
 8004dce:	4606      	mov	r6, r0
 8004dd0:	460f      	mov	r7, r1
 8004dd2:	d016      	beq.n	8004e02 <__ieee754_rem_pio2+0xea>
 8004dd4:	a38a      	add	r3, pc, #552	; (adr r3, 8005000 <__ieee754_rem_pio2+0x2e8>)
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f7fb f9fb 	bl	80001d4 <__adddf3>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	e9c4 2300 	strd	r2, r3, [r4]
 8004de6:	4630      	mov	r0, r6
 8004de8:	4639      	mov	r1, r7
 8004dea:	f7fb f9f1 	bl	80001d0 <__aeabi_dsub>
 8004dee:	a384      	add	r3, pc, #528	; (adr r3, 8005000 <__ieee754_rem_pio2+0x2e8>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f7fb f9ee 	bl	80001d4 <__adddf3>
 8004df8:	f04f 35ff 	mov.w	r5, #4294967295
 8004dfc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e00:	e7c6      	b.n	8004d90 <__ieee754_rem_pio2+0x78>
 8004e02:	a381      	add	r3, pc, #516	; (adr r3, 8005008 <__ieee754_rem_pio2+0x2f0>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f7fb f9e4 	bl	80001d4 <__adddf3>
 8004e0c:	a380      	add	r3, pc, #512	; (adr r3, 8005010 <__ieee754_rem_pio2+0x2f8>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	4606      	mov	r6, r0
 8004e14:	460f      	mov	r7, r1
 8004e16:	f7fb f9dd 	bl	80001d4 <__adddf3>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	e9c4 2300 	strd	r2, r3, [r4]
 8004e22:	4630      	mov	r0, r6
 8004e24:	4639      	mov	r1, r7
 8004e26:	f7fb f9d3 	bl	80001d0 <__aeabi_dsub>
 8004e2a:	a379      	add	r3, pc, #484	; (adr r3, 8005010 <__ieee754_rem_pio2+0x2f8>)
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	e7e0      	b.n	8004df4 <__ieee754_rem_pio2+0xdc>
 8004e32:	4b82      	ldr	r3, [pc, #520]	; (800503c <__ieee754_rem_pio2+0x324>)
 8004e34:	4598      	cmp	r8, r3
 8004e36:	f300 80d0 	bgt.w	8004fda <__ieee754_rem_pio2+0x2c2>
 8004e3a:	f001 f875 	bl	8005f28 <fabs>
 8004e3e:	ec57 6b10 	vmov	r6, r7, d0
 8004e42:	ee10 0a10 	vmov	r0, s0
 8004e46:	a374      	add	r3, pc, #464	; (adr r3, 8005018 <__ieee754_rem_pio2+0x300>)
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	4639      	mov	r1, r7
 8004e4e:	f7fb fb77 	bl	8000540 <__aeabi_dmul>
 8004e52:	2200      	movs	r2, #0
 8004e54:	4b7a      	ldr	r3, [pc, #488]	; (8005040 <__ieee754_rem_pio2+0x328>)
 8004e56:	f7fb f9bd 	bl	80001d4 <__adddf3>
 8004e5a:	f7fb fe21 	bl	8000aa0 <__aeabi_d2iz>
 8004e5e:	4605      	mov	r5, r0
 8004e60:	f7fb fb04 	bl	800046c <__aeabi_i2d>
 8004e64:	a364      	add	r3, pc, #400	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x2e0>)
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e6e:	f7fb fb67 	bl	8000540 <__aeabi_dmul>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4630      	mov	r0, r6
 8004e78:	4639      	mov	r1, r7
 8004e7a:	f7fb f9a9 	bl	80001d0 <__aeabi_dsub>
 8004e7e:	a360      	add	r3, pc, #384	; (adr r3, 8005000 <__ieee754_rem_pio2+0x2e8>)
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	4682      	mov	sl, r0
 8004e86:	468b      	mov	fp, r1
 8004e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e8c:	f7fb fb58 	bl	8000540 <__aeabi_dmul>
 8004e90:	2d1f      	cmp	r5, #31
 8004e92:	4606      	mov	r6, r0
 8004e94:	460f      	mov	r7, r1
 8004e96:	dc0c      	bgt.n	8004eb2 <__ieee754_rem_pio2+0x19a>
 8004e98:	1e6a      	subs	r2, r5, #1
 8004e9a:	4b6a      	ldr	r3, [pc, #424]	; (8005044 <__ieee754_rem_pio2+0x32c>)
 8004e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea0:	4543      	cmp	r3, r8
 8004ea2:	d006      	beq.n	8004eb2 <__ieee754_rem_pio2+0x19a>
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	4659      	mov	r1, fp
 8004eac:	f7fb f990 	bl	80001d0 <__aeabi_dsub>
 8004eb0:	e00e      	b.n	8004ed0 <__ieee754_rem_pio2+0x1b8>
 8004eb2:	4632      	mov	r2, r6
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	4659      	mov	r1, fp
 8004eba:	f7fb f989 	bl	80001d0 <__aeabi_dsub>
 8004ebe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	9a05      	ldr	r2, [sp, #20]
 8004ec6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	dc02      	bgt.n	8004ed6 <__ieee754_rem_pio2+0x1be>
 8004ed0:	e9c4 0100 	strd	r0, r1, [r4]
 8004ed4:	e039      	b.n	8004f4a <__ieee754_rem_pio2+0x232>
 8004ed6:	a34c      	add	r3, pc, #304	; (adr r3, 8005008 <__ieee754_rem_pio2+0x2f0>)
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ee0:	f7fb fb2e 	bl	8000540 <__aeabi_dmul>
 8004ee4:	4606      	mov	r6, r0
 8004ee6:	460f      	mov	r7, r1
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4650      	mov	r0, sl
 8004eee:	4659      	mov	r1, fp
 8004ef0:	f7fb f96e 	bl	80001d0 <__aeabi_dsub>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4680      	mov	r8, r0
 8004efa:	4689      	mov	r9, r1
 8004efc:	4650      	mov	r0, sl
 8004efe:	4659      	mov	r1, fp
 8004f00:	f7fb f966 	bl	80001d0 <__aeabi_dsub>
 8004f04:	4632      	mov	r2, r6
 8004f06:	463b      	mov	r3, r7
 8004f08:	f7fb f962 	bl	80001d0 <__aeabi_dsub>
 8004f0c:	a340      	add	r3, pc, #256	; (adr r3, 8005010 <__ieee754_rem_pio2+0x2f8>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	4606      	mov	r6, r0
 8004f14:	460f      	mov	r7, r1
 8004f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f1a:	f7fb fb11 	bl	8000540 <__aeabi_dmul>
 8004f1e:	4632      	mov	r2, r6
 8004f20:	463b      	mov	r3, r7
 8004f22:	f7fb f955 	bl	80001d0 <__aeabi_dsub>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	460f      	mov	r7, r1
 8004f2e:	4640      	mov	r0, r8
 8004f30:	4649      	mov	r1, r9
 8004f32:	f7fb f94d 	bl	80001d0 <__aeabi_dsub>
 8004f36:	9a05      	ldr	r2, [sp, #20]
 8004f38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b31      	cmp	r3, #49	; 0x31
 8004f40:	dc20      	bgt.n	8004f84 <__ieee754_rem_pio2+0x26c>
 8004f42:	e9c4 0100 	strd	r0, r1, [r4]
 8004f46:	46c2      	mov	sl, r8
 8004f48:	46cb      	mov	fp, r9
 8004f4a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004f4e:	4650      	mov	r0, sl
 8004f50:	4642      	mov	r2, r8
 8004f52:	464b      	mov	r3, r9
 8004f54:	4659      	mov	r1, fp
 8004f56:	f7fb f93b 	bl	80001d0 <__aeabi_dsub>
 8004f5a:	463b      	mov	r3, r7
 8004f5c:	4632      	mov	r2, r6
 8004f5e:	f7fb f937 	bl	80001d0 <__aeabi_dsub>
 8004f62:	9b04      	ldr	r3, [sp, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f6a:	f6bf af11 	bge.w	8004d90 <__ieee754_rem_pio2+0x78>
 8004f6e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f72:	6063      	str	r3, [r4, #4]
 8004f74:	f8c4 8000 	str.w	r8, [r4]
 8004f78:	60a0      	str	r0, [r4, #8]
 8004f7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f7e:	60e3      	str	r3, [r4, #12]
 8004f80:	426d      	negs	r5, r5
 8004f82:	e705      	b.n	8004d90 <__ieee754_rem_pio2+0x78>
 8004f84:	a326      	add	r3, pc, #152	; (adr r3, 8005020 <__ieee754_rem_pio2+0x308>)
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f8e:	f7fb fad7 	bl	8000540 <__aeabi_dmul>
 8004f92:	4606      	mov	r6, r0
 8004f94:	460f      	mov	r7, r1
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	f7fb f917 	bl	80001d0 <__aeabi_dsub>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4682      	mov	sl, r0
 8004fa8:	468b      	mov	fp, r1
 8004faa:	4640      	mov	r0, r8
 8004fac:	4649      	mov	r1, r9
 8004fae:	f7fb f90f 	bl	80001d0 <__aeabi_dsub>
 8004fb2:	4632      	mov	r2, r6
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	f7fb f90b 	bl	80001d0 <__aeabi_dsub>
 8004fba:	a31b      	add	r3, pc, #108	; (adr r3, 8005028 <__ieee754_rem_pio2+0x310>)
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fc8:	f7fb faba 	bl	8000540 <__aeabi_dmul>
 8004fcc:	4632      	mov	r2, r6
 8004fce:	463b      	mov	r3, r7
 8004fd0:	f7fb f8fe 	bl	80001d0 <__aeabi_dsub>
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	460f      	mov	r7, r1
 8004fd8:	e764      	b.n	8004ea4 <__ieee754_rem_pio2+0x18c>
 8004fda:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <__ieee754_rem_pio2+0x330>)
 8004fdc:	4598      	cmp	r8, r3
 8004fde:	dd35      	ble.n	800504c <__ieee754_rem_pio2+0x334>
 8004fe0:	ee10 2a10 	vmov	r2, s0
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	4639      	mov	r1, r7
 8004fea:	f7fb f8f1 	bl	80001d0 <__aeabi_dsub>
 8004fee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ff2:	e9c4 0100 	strd	r0, r1, [r4]
 8004ff6:	e6a1      	b.n	8004d3c <__ieee754_rem_pio2+0x24>
 8004ff8:	54400000 	.word	0x54400000
 8004ffc:	3ff921fb 	.word	0x3ff921fb
 8005000:	1a626331 	.word	0x1a626331
 8005004:	3dd0b461 	.word	0x3dd0b461
 8005008:	1a600000 	.word	0x1a600000
 800500c:	3dd0b461 	.word	0x3dd0b461
 8005010:	2e037073 	.word	0x2e037073
 8005014:	3ba3198a 	.word	0x3ba3198a
 8005018:	6dc9c883 	.word	0x6dc9c883
 800501c:	3fe45f30 	.word	0x3fe45f30
 8005020:	2e000000 	.word	0x2e000000
 8005024:	3ba3198a 	.word	0x3ba3198a
 8005028:	252049c1 	.word	0x252049c1
 800502c:	397b839a 	.word	0x397b839a
 8005030:	3fe921fb 	.word	0x3fe921fb
 8005034:	4002d97b 	.word	0x4002d97b
 8005038:	3ff921fb 	.word	0x3ff921fb
 800503c:	413921fb 	.word	0x413921fb
 8005040:	3fe00000 	.word	0x3fe00000
 8005044:	080061a0 	.word	0x080061a0
 8005048:	7fefffff 	.word	0x7fefffff
 800504c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005050:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005054:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005058:	4630      	mov	r0, r6
 800505a:	460f      	mov	r7, r1
 800505c:	f7fb fd20 	bl	8000aa0 <__aeabi_d2iz>
 8005060:	f7fb fa04 	bl	800046c <__aeabi_i2d>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4630      	mov	r0, r6
 800506a:	4639      	mov	r1, r7
 800506c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005070:	f7fb f8ae 	bl	80001d0 <__aeabi_dsub>
 8005074:	2200      	movs	r2, #0
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <__ieee754_rem_pio2+0x3dc>)
 8005078:	f7fb fa62 	bl	8000540 <__aeabi_dmul>
 800507c:	460f      	mov	r7, r1
 800507e:	4606      	mov	r6, r0
 8005080:	f7fb fd0e 	bl	8000aa0 <__aeabi_d2iz>
 8005084:	f7fb f9f2 	bl	800046c <__aeabi_i2d>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4630      	mov	r0, r6
 800508e:	4639      	mov	r1, r7
 8005090:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005094:	f7fb f89c 	bl	80001d0 <__aeabi_dsub>
 8005098:	2200      	movs	r2, #0
 800509a:	4b16      	ldr	r3, [pc, #88]	; (80050f4 <__ieee754_rem_pio2+0x3dc>)
 800509c:	f7fb fa50 	bl	8000540 <__aeabi_dmul>
 80050a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050a4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80050a8:	f04f 0803 	mov.w	r8, #3
 80050ac:	2600      	movs	r6, #0
 80050ae:	2700      	movs	r7, #0
 80050b0:	4632      	mov	r2, r6
 80050b2:	463b      	mov	r3, r7
 80050b4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80050b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80050bc:	f7fb fca8 	bl	8000a10 <__aeabi_dcmpeq>
 80050c0:	b9b0      	cbnz	r0, 80050f0 <__ieee754_rem_pio2+0x3d8>
 80050c2:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <__ieee754_rem_pio2+0x3e0>)
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	2302      	movs	r3, #2
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	462a      	mov	r2, r5
 80050cc:	4643      	mov	r3, r8
 80050ce:	4621      	mov	r1, r4
 80050d0:	a806      	add	r0, sp, #24
 80050d2:	f000 f98d 	bl	80053f0 <__kernel_rem_pio2>
 80050d6:	9b04      	ldr	r3, [sp, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	4605      	mov	r5, r0
 80050dc:	f6bf ae58 	bge.w	8004d90 <__ieee754_rem_pio2+0x78>
 80050e0:	6863      	ldr	r3, [r4, #4]
 80050e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050e6:	6063      	str	r3, [r4, #4]
 80050e8:	68e3      	ldr	r3, [r4, #12]
 80050ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050ee:	e746      	b.n	8004f7e <__ieee754_rem_pio2+0x266>
 80050f0:	46d0      	mov	r8, sl
 80050f2:	e7dd      	b.n	80050b0 <__ieee754_rem_pio2+0x398>
 80050f4:	41700000 	.word	0x41700000
 80050f8:	08006220 	.word	0x08006220

080050fc <__ieee754_sqrt>:
 80050fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005100:	4955      	ldr	r1, [pc, #340]	; (8005258 <__ieee754_sqrt+0x15c>)
 8005102:	ec55 4b10 	vmov	r4, r5, d0
 8005106:	43a9      	bics	r1, r5
 8005108:	462b      	mov	r3, r5
 800510a:	462a      	mov	r2, r5
 800510c:	d112      	bne.n	8005134 <__ieee754_sqrt+0x38>
 800510e:	ee10 2a10 	vmov	r2, s0
 8005112:	ee10 0a10 	vmov	r0, s0
 8005116:	4629      	mov	r1, r5
 8005118:	f7fb fa12 	bl	8000540 <__aeabi_dmul>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4620      	mov	r0, r4
 8005122:	4629      	mov	r1, r5
 8005124:	f7fb f856 	bl	80001d4 <__adddf3>
 8005128:	4604      	mov	r4, r0
 800512a:	460d      	mov	r5, r1
 800512c:	ec45 4b10 	vmov	d0, r4, r5
 8005130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005134:	2d00      	cmp	r5, #0
 8005136:	ee10 0a10 	vmov	r0, s0
 800513a:	4621      	mov	r1, r4
 800513c:	dc0f      	bgt.n	800515e <__ieee754_sqrt+0x62>
 800513e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005142:	4330      	orrs	r0, r6
 8005144:	d0f2      	beq.n	800512c <__ieee754_sqrt+0x30>
 8005146:	b155      	cbz	r5, 800515e <__ieee754_sqrt+0x62>
 8005148:	ee10 2a10 	vmov	r2, s0
 800514c:	4620      	mov	r0, r4
 800514e:	4629      	mov	r1, r5
 8005150:	f7fb f83e 	bl	80001d0 <__aeabi_dsub>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	f7fb fb1c 	bl	8000794 <__aeabi_ddiv>
 800515c:	e7e4      	b.n	8005128 <__ieee754_sqrt+0x2c>
 800515e:	151b      	asrs	r3, r3, #20
 8005160:	d073      	beq.n	800524a <__ieee754_sqrt+0x14e>
 8005162:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005166:	07dd      	lsls	r5, r3, #31
 8005168:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800516c:	bf48      	it	mi
 800516e:	0fc8      	lsrmi	r0, r1, #31
 8005170:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005174:	bf44      	itt	mi
 8005176:	0049      	lslmi	r1, r1, #1
 8005178:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800517c:	2500      	movs	r5, #0
 800517e:	1058      	asrs	r0, r3, #1
 8005180:	0fcb      	lsrs	r3, r1, #31
 8005182:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005186:	0049      	lsls	r1, r1, #1
 8005188:	2316      	movs	r3, #22
 800518a:	462c      	mov	r4, r5
 800518c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005190:	19a7      	adds	r7, r4, r6
 8005192:	4297      	cmp	r7, r2
 8005194:	bfde      	ittt	le
 8005196:	19bc      	addle	r4, r7, r6
 8005198:	1bd2      	suble	r2, r2, r7
 800519a:	19ad      	addle	r5, r5, r6
 800519c:	0fcf      	lsrs	r7, r1, #31
 800519e:	3b01      	subs	r3, #1
 80051a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80051a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80051a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80051ac:	d1f0      	bne.n	8005190 <__ieee754_sqrt+0x94>
 80051ae:	f04f 0c20 	mov.w	ip, #32
 80051b2:	469e      	mov	lr, r3
 80051b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80051b8:	42a2      	cmp	r2, r4
 80051ba:	eb06 070e 	add.w	r7, r6, lr
 80051be:	dc02      	bgt.n	80051c6 <__ieee754_sqrt+0xca>
 80051c0:	d112      	bne.n	80051e8 <__ieee754_sqrt+0xec>
 80051c2:	428f      	cmp	r7, r1
 80051c4:	d810      	bhi.n	80051e8 <__ieee754_sqrt+0xec>
 80051c6:	2f00      	cmp	r7, #0
 80051c8:	eb07 0e06 	add.w	lr, r7, r6
 80051cc:	da42      	bge.n	8005254 <__ieee754_sqrt+0x158>
 80051ce:	f1be 0f00 	cmp.w	lr, #0
 80051d2:	db3f      	blt.n	8005254 <__ieee754_sqrt+0x158>
 80051d4:	f104 0801 	add.w	r8, r4, #1
 80051d8:	1b12      	subs	r2, r2, r4
 80051da:	428f      	cmp	r7, r1
 80051dc:	bf88      	it	hi
 80051de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80051e2:	1bc9      	subs	r1, r1, r7
 80051e4:	4433      	add	r3, r6
 80051e6:	4644      	mov	r4, r8
 80051e8:	0052      	lsls	r2, r2, #1
 80051ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80051ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80051f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80051f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80051fa:	d1dd      	bne.n	80051b8 <__ieee754_sqrt+0xbc>
 80051fc:	430a      	orrs	r2, r1
 80051fe:	d006      	beq.n	800520e <__ieee754_sqrt+0x112>
 8005200:	1c5c      	adds	r4, r3, #1
 8005202:	bf13      	iteet	ne
 8005204:	3301      	addne	r3, #1
 8005206:	3501      	addeq	r5, #1
 8005208:	4663      	moveq	r3, ip
 800520a:	f023 0301 	bicne.w	r3, r3, #1
 800520e:	106a      	asrs	r2, r5, #1
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	07e9      	lsls	r1, r5, #31
 8005214:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005218:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800521c:	bf48      	it	mi
 800521e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005222:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005226:	461c      	mov	r4, r3
 8005228:	e780      	b.n	800512c <__ieee754_sqrt+0x30>
 800522a:	0aca      	lsrs	r2, r1, #11
 800522c:	3815      	subs	r0, #21
 800522e:	0549      	lsls	r1, r1, #21
 8005230:	2a00      	cmp	r2, #0
 8005232:	d0fa      	beq.n	800522a <__ieee754_sqrt+0x12e>
 8005234:	02d6      	lsls	r6, r2, #11
 8005236:	d50a      	bpl.n	800524e <__ieee754_sqrt+0x152>
 8005238:	f1c3 0420 	rsb	r4, r3, #32
 800523c:	fa21 f404 	lsr.w	r4, r1, r4
 8005240:	1e5d      	subs	r5, r3, #1
 8005242:	4099      	lsls	r1, r3
 8005244:	4322      	orrs	r2, r4
 8005246:	1b43      	subs	r3, r0, r5
 8005248:	e78b      	b.n	8005162 <__ieee754_sqrt+0x66>
 800524a:	4618      	mov	r0, r3
 800524c:	e7f0      	b.n	8005230 <__ieee754_sqrt+0x134>
 800524e:	0052      	lsls	r2, r2, #1
 8005250:	3301      	adds	r3, #1
 8005252:	e7ef      	b.n	8005234 <__ieee754_sqrt+0x138>
 8005254:	46a0      	mov	r8, r4
 8005256:	e7bf      	b.n	80051d8 <__ieee754_sqrt+0xdc>
 8005258:	7ff00000 	.word	0x7ff00000
 800525c:	00000000 	.word	0x00000000

08005260 <__kernel_cos>:
 8005260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	ec59 8b10 	vmov	r8, r9, d0
 8005268:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800526c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005270:	ed2d 8b02 	vpush	{d8}
 8005274:	eeb0 8a41 	vmov.f32	s16, s2
 8005278:	eef0 8a61 	vmov.f32	s17, s3
 800527c:	da07      	bge.n	800528e <__kernel_cos+0x2e>
 800527e:	ee10 0a10 	vmov	r0, s0
 8005282:	4649      	mov	r1, r9
 8005284:	f7fb fc0c 	bl	8000aa0 <__aeabi_d2iz>
 8005288:	2800      	cmp	r0, #0
 800528a:	f000 8089 	beq.w	80053a0 <__kernel_cos+0x140>
 800528e:	4642      	mov	r2, r8
 8005290:	464b      	mov	r3, r9
 8005292:	4640      	mov	r0, r8
 8005294:	4649      	mov	r1, r9
 8005296:	f7fb f953 	bl	8000540 <__aeabi_dmul>
 800529a:	2200      	movs	r2, #0
 800529c:	4b4e      	ldr	r3, [pc, #312]	; (80053d8 <__kernel_cos+0x178>)
 800529e:	4604      	mov	r4, r0
 80052a0:	460d      	mov	r5, r1
 80052a2:	f7fb f94d 	bl	8000540 <__aeabi_dmul>
 80052a6:	a340      	add	r3, pc, #256	; (adr r3, 80053a8 <__kernel_cos+0x148>)
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	4682      	mov	sl, r0
 80052ae:	468b      	mov	fp, r1
 80052b0:	4620      	mov	r0, r4
 80052b2:	4629      	mov	r1, r5
 80052b4:	f7fb f944 	bl	8000540 <__aeabi_dmul>
 80052b8:	a33d      	add	r3, pc, #244	; (adr r3, 80053b0 <__kernel_cos+0x150>)
 80052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052be:	f7fa ff89 	bl	80001d4 <__adddf3>
 80052c2:	4622      	mov	r2, r4
 80052c4:	462b      	mov	r3, r5
 80052c6:	f7fb f93b 	bl	8000540 <__aeabi_dmul>
 80052ca:	a33b      	add	r3, pc, #236	; (adr r3, 80053b8 <__kernel_cos+0x158>)
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f7fa ff7e 	bl	80001d0 <__aeabi_dsub>
 80052d4:	4622      	mov	r2, r4
 80052d6:	462b      	mov	r3, r5
 80052d8:	f7fb f932 	bl	8000540 <__aeabi_dmul>
 80052dc:	a338      	add	r3, pc, #224	; (adr r3, 80053c0 <__kernel_cos+0x160>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f7fa ff77 	bl	80001d4 <__adddf3>
 80052e6:	4622      	mov	r2, r4
 80052e8:	462b      	mov	r3, r5
 80052ea:	f7fb f929 	bl	8000540 <__aeabi_dmul>
 80052ee:	a336      	add	r3, pc, #216	; (adr r3, 80053c8 <__kernel_cos+0x168>)
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	f7fa ff6c 	bl	80001d0 <__aeabi_dsub>
 80052f8:	4622      	mov	r2, r4
 80052fa:	462b      	mov	r3, r5
 80052fc:	f7fb f920 	bl	8000540 <__aeabi_dmul>
 8005300:	a333      	add	r3, pc, #204	; (adr r3, 80053d0 <__kernel_cos+0x170>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f7fa ff65 	bl	80001d4 <__adddf3>
 800530a:	4622      	mov	r2, r4
 800530c:	462b      	mov	r3, r5
 800530e:	f7fb f917 	bl	8000540 <__aeabi_dmul>
 8005312:	4622      	mov	r2, r4
 8005314:	462b      	mov	r3, r5
 8005316:	f7fb f913 	bl	8000540 <__aeabi_dmul>
 800531a:	ec53 2b18 	vmov	r2, r3, d8
 800531e:	4604      	mov	r4, r0
 8005320:	460d      	mov	r5, r1
 8005322:	4640      	mov	r0, r8
 8005324:	4649      	mov	r1, r9
 8005326:	f7fb f90b 	bl	8000540 <__aeabi_dmul>
 800532a:	460b      	mov	r3, r1
 800532c:	4602      	mov	r2, r0
 800532e:	4629      	mov	r1, r5
 8005330:	4620      	mov	r0, r4
 8005332:	f7fa ff4d 	bl	80001d0 <__aeabi_dsub>
 8005336:	4b29      	ldr	r3, [pc, #164]	; (80053dc <__kernel_cos+0x17c>)
 8005338:	429e      	cmp	r6, r3
 800533a:	4680      	mov	r8, r0
 800533c:	4689      	mov	r9, r1
 800533e:	dc11      	bgt.n	8005364 <__kernel_cos+0x104>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4650      	mov	r0, sl
 8005346:	4659      	mov	r1, fp
 8005348:	f7fa ff42 	bl	80001d0 <__aeabi_dsub>
 800534c:	460b      	mov	r3, r1
 800534e:	4924      	ldr	r1, [pc, #144]	; (80053e0 <__kernel_cos+0x180>)
 8005350:	4602      	mov	r2, r0
 8005352:	2000      	movs	r0, #0
 8005354:	f7fa ff3c 	bl	80001d0 <__aeabi_dsub>
 8005358:	ecbd 8b02 	vpop	{d8}
 800535c:	ec41 0b10 	vmov	d0, r0, r1
 8005360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005364:	4b1f      	ldr	r3, [pc, #124]	; (80053e4 <__kernel_cos+0x184>)
 8005366:	491e      	ldr	r1, [pc, #120]	; (80053e0 <__kernel_cos+0x180>)
 8005368:	429e      	cmp	r6, r3
 800536a:	bfcc      	ite	gt
 800536c:	4d1e      	ldrgt	r5, [pc, #120]	; (80053e8 <__kernel_cos+0x188>)
 800536e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005372:	2400      	movs	r4, #0
 8005374:	4622      	mov	r2, r4
 8005376:	462b      	mov	r3, r5
 8005378:	2000      	movs	r0, #0
 800537a:	f7fa ff29 	bl	80001d0 <__aeabi_dsub>
 800537e:	4622      	mov	r2, r4
 8005380:	4606      	mov	r6, r0
 8005382:	460f      	mov	r7, r1
 8005384:	462b      	mov	r3, r5
 8005386:	4650      	mov	r0, sl
 8005388:	4659      	mov	r1, fp
 800538a:	f7fa ff21 	bl	80001d0 <__aeabi_dsub>
 800538e:	4642      	mov	r2, r8
 8005390:	464b      	mov	r3, r9
 8005392:	f7fa ff1d 	bl	80001d0 <__aeabi_dsub>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4630      	mov	r0, r6
 800539c:	4639      	mov	r1, r7
 800539e:	e7d9      	b.n	8005354 <__kernel_cos+0xf4>
 80053a0:	2000      	movs	r0, #0
 80053a2:	490f      	ldr	r1, [pc, #60]	; (80053e0 <__kernel_cos+0x180>)
 80053a4:	e7d8      	b.n	8005358 <__kernel_cos+0xf8>
 80053a6:	bf00      	nop
 80053a8:	be8838d4 	.word	0xbe8838d4
 80053ac:	bda8fae9 	.word	0xbda8fae9
 80053b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80053b4:	3e21ee9e 	.word	0x3e21ee9e
 80053b8:	809c52ad 	.word	0x809c52ad
 80053bc:	3e927e4f 	.word	0x3e927e4f
 80053c0:	19cb1590 	.word	0x19cb1590
 80053c4:	3efa01a0 	.word	0x3efa01a0
 80053c8:	16c15177 	.word	0x16c15177
 80053cc:	3f56c16c 	.word	0x3f56c16c
 80053d0:	5555554c 	.word	0x5555554c
 80053d4:	3fa55555 	.word	0x3fa55555
 80053d8:	3fe00000 	.word	0x3fe00000
 80053dc:	3fd33332 	.word	0x3fd33332
 80053e0:	3ff00000 	.word	0x3ff00000
 80053e4:	3fe90000 	.word	0x3fe90000
 80053e8:	3fd20000 	.word	0x3fd20000
 80053ec:	00000000 	.word	0x00000000

080053f0 <__kernel_rem_pio2>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	ed2d 8b02 	vpush	{d8}
 80053f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80053fc:	1ed4      	subs	r4, r2, #3
 80053fe:	9308      	str	r3, [sp, #32]
 8005400:	9101      	str	r1, [sp, #4]
 8005402:	4bc5      	ldr	r3, [pc, #788]	; (8005718 <__kernel_rem_pio2+0x328>)
 8005404:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005406:	9009      	str	r0, [sp, #36]	; 0x24
 8005408:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800540c:	9304      	str	r3, [sp, #16]
 800540e:	9b08      	ldr	r3, [sp, #32]
 8005410:	3b01      	subs	r3, #1
 8005412:	9307      	str	r3, [sp, #28]
 8005414:	2318      	movs	r3, #24
 8005416:	fb94 f4f3 	sdiv	r4, r4, r3
 800541a:	f06f 0317 	mvn.w	r3, #23
 800541e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005422:	fb04 3303 	mla	r3, r4, r3, r3
 8005426:	eb03 0a02 	add.w	sl, r3, r2
 800542a:	9b04      	ldr	r3, [sp, #16]
 800542c:	9a07      	ldr	r2, [sp, #28]
 800542e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005708 <__kernel_rem_pio2+0x318>
 8005432:	eb03 0802 	add.w	r8, r3, r2
 8005436:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005438:	1aa7      	subs	r7, r4, r2
 800543a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800543e:	ae22      	add	r6, sp, #136	; 0x88
 8005440:	2500      	movs	r5, #0
 8005442:	4545      	cmp	r5, r8
 8005444:	dd13      	ble.n	800546e <__kernel_rem_pio2+0x7e>
 8005446:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005708 <__kernel_rem_pio2+0x318>
 800544a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800544e:	2600      	movs	r6, #0
 8005450:	9b04      	ldr	r3, [sp, #16]
 8005452:	429e      	cmp	r6, r3
 8005454:	dc32      	bgt.n	80054bc <__kernel_rem_pio2+0xcc>
 8005456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005458:	9302      	str	r3, [sp, #8]
 800545a:	9b08      	ldr	r3, [sp, #32]
 800545c:	199d      	adds	r5, r3, r6
 800545e:	ab22      	add	r3, sp, #136	; 0x88
 8005460:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005464:	9306      	str	r3, [sp, #24]
 8005466:	ec59 8b18 	vmov	r8, r9, d8
 800546a:	2700      	movs	r7, #0
 800546c:	e01f      	b.n	80054ae <__kernel_rem_pio2+0xbe>
 800546e:	42ef      	cmn	r7, r5
 8005470:	d407      	bmi.n	8005482 <__kernel_rem_pio2+0x92>
 8005472:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005476:	f7fa fff9 	bl	800046c <__aeabi_i2d>
 800547a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800547e:	3501      	adds	r5, #1
 8005480:	e7df      	b.n	8005442 <__kernel_rem_pio2+0x52>
 8005482:	ec51 0b18 	vmov	r0, r1, d8
 8005486:	e7f8      	b.n	800547a <__kernel_rem_pio2+0x8a>
 8005488:	9906      	ldr	r1, [sp, #24]
 800548a:	9d02      	ldr	r5, [sp, #8]
 800548c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005490:	9106      	str	r1, [sp, #24]
 8005492:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005496:	9502      	str	r5, [sp, #8]
 8005498:	f7fb f852 	bl	8000540 <__aeabi_dmul>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4640      	mov	r0, r8
 80054a2:	4649      	mov	r1, r9
 80054a4:	f7fa fe96 	bl	80001d4 <__adddf3>
 80054a8:	3701      	adds	r7, #1
 80054aa:	4680      	mov	r8, r0
 80054ac:	4689      	mov	r9, r1
 80054ae:	9b07      	ldr	r3, [sp, #28]
 80054b0:	429f      	cmp	r7, r3
 80054b2:	dde9      	ble.n	8005488 <__kernel_rem_pio2+0x98>
 80054b4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80054b8:	3601      	adds	r6, #1
 80054ba:	e7c9      	b.n	8005450 <__kernel_rem_pio2+0x60>
 80054bc:	9b04      	ldr	r3, [sp, #16]
 80054be:	aa0e      	add	r2, sp, #56	; 0x38
 80054c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80054c4:	930c      	str	r3, [sp, #48]	; 0x30
 80054c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80054c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80054cc:	9c04      	ldr	r4, [sp, #16]
 80054ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80054d0:	ab9a      	add	r3, sp, #616	; 0x268
 80054d2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80054d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054de:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80054e2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80054e6:	ab9a      	add	r3, sp, #616	; 0x268
 80054e8:	445b      	add	r3, fp
 80054ea:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80054ee:	2500      	movs	r5, #0
 80054f0:	1b63      	subs	r3, r4, r5
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	dc78      	bgt.n	80055e8 <__kernel_rem_pio2+0x1f8>
 80054f6:	4650      	mov	r0, sl
 80054f8:	ec49 8b10 	vmov	d0, r8, r9
 80054fc:	f000 fda8 	bl	8006050 <scalbn>
 8005500:	ec57 6b10 	vmov	r6, r7, d0
 8005504:	2200      	movs	r2, #0
 8005506:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800550a:	ee10 0a10 	vmov	r0, s0
 800550e:	4639      	mov	r1, r7
 8005510:	f7fb f816 	bl	8000540 <__aeabi_dmul>
 8005514:	ec41 0b10 	vmov	d0, r0, r1
 8005518:	f000 fd12 	bl	8005f40 <floor>
 800551c:	2200      	movs	r2, #0
 800551e:	ec51 0b10 	vmov	r0, r1, d0
 8005522:	4b7e      	ldr	r3, [pc, #504]	; (800571c <__kernel_rem_pio2+0x32c>)
 8005524:	f7fb f80c 	bl	8000540 <__aeabi_dmul>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4630      	mov	r0, r6
 800552e:	4639      	mov	r1, r7
 8005530:	f7fa fe4e 	bl	80001d0 <__aeabi_dsub>
 8005534:	460f      	mov	r7, r1
 8005536:	4606      	mov	r6, r0
 8005538:	f7fb fab2 	bl	8000aa0 <__aeabi_d2iz>
 800553c:	9006      	str	r0, [sp, #24]
 800553e:	f7fa ff95 	bl	800046c <__aeabi_i2d>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4630      	mov	r0, r6
 8005548:	4639      	mov	r1, r7
 800554a:	f7fa fe41 	bl	80001d0 <__aeabi_dsub>
 800554e:	f1ba 0f00 	cmp.w	sl, #0
 8005552:	4606      	mov	r6, r0
 8005554:	460f      	mov	r7, r1
 8005556:	dd6c      	ble.n	8005632 <__kernel_rem_pio2+0x242>
 8005558:	1e62      	subs	r2, r4, #1
 800555a:	ab0e      	add	r3, sp, #56	; 0x38
 800555c:	f1ca 0118 	rsb	r1, sl, #24
 8005560:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005564:	9d06      	ldr	r5, [sp, #24]
 8005566:	fa40 f301 	asr.w	r3, r0, r1
 800556a:	441d      	add	r5, r3
 800556c:	408b      	lsls	r3, r1
 800556e:	1ac0      	subs	r0, r0, r3
 8005570:	ab0e      	add	r3, sp, #56	; 0x38
 8005572:	9506      	str	r5, [sp, #24]
 8005574:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005578:	f1ca 0317 	rsb	r3, sl, #23
 800557c:	fa40 f303 	asr.w	r3, r0, r3
 8005580:	9302      	str	r3, [sp, #8]
 8005582:	9b02      	ldr	r3, [sp, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	dd62      	ble.n	800564e <__kernel_rem_pio2+0x25e>
 8005588:	9b06      	ldr	r3, [sp, #24]
 800558a:	2200      	movs	r2, #0
 800558c:	3301      	adds	r3, #1
 800558e:	9306      	str	r3, [sp, #24]
 8005590:	4615      	mov	r5, r2
 8005592:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005596:	4294      	cmp	r4, r2
 8005598:	f300 8095 	bgt.w	80056c6 <__kernel_rem_pio2+0x2d6>
 800559c:	f1ba 0f00 	cmp.w	sl, #0
 80055a0:	dd07      	ble.n	80055b2 <__kernel_rem_pio2+0x1c2>
 80055a2:	f1ba 0f01 	cmp.w	sl, #1
 80055a6:	f000 80a2 	beq.w	80056ee <__kernel_rem_pio2+0x2fe>
 80055aa:	f1ba 0f02 	cmp.w	sl, #2
 80055ae:	f000 80c1 	beq.w	8005734 <__kernel_rem_pio2+0x344>
 80055b2:	9b02      	ldr	r3, [sp, #8]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d14a      	bne.n	800564e <__kernel_rem_pio2+0x25e>
 80055b8:	4632      	mov	r2, r6
 80055ba:	463b      	mov	r3, r7
 80055bc:	2000      	movs	r0, #0
 80055be:	4958      	ldr	r1, [pc, #352]	; (8005720 <__kernel_rem_pio2+0x330>)
 80055c0:	f7fa fe06 	bl	80001d0 <__aeabi_dsub>
 80055c4:	4606      	mov	r6, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	d040      	beq.n	800564e <__kernel_rem_pio2+0x25e>
 80055cc:	4650      	mov	r0, sl
 80055ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005710 <__kernel_rem_pio2+0x320>
 80055d2:	f000 fd3d 	bl	8006050 <scalbn>
 80055d6:	4630      	mov	r0, r6
 80055d8:	4639      	mov	r1, r7
 80055da:	ec53 2b10 	vmov	r2, r3, d0
 80055de:	f7fa fdf7 	bl	80001d0 <__aeabi_dsub>
 80055e2:	4606      	mov	r6, r0
 80055e4:	460f      	mov	r7, r1
 80055e6:	e032      	b.n	800564e <__kernel_rem_pio2+0x25e>
 80055e8:	2200      	movs	r2, #0
 80055ea:	4b4e      	ldr	r3, [pc, #312]	; (8005724 <__kernel_rem_pio2+0x334>)
 80055ec:	4640      	mov	r0, r8
 80055ee:	4649      	mov	r1, r9
 80055f0:	f7fa ffa6 	bl	8000540 <__aeabi_dmul>
 80055f4:	f7fb fa54 	bl	8000aa0 <__aeabi_d2iz>
 80055f8:	f7fa ff38 	bl	800046c <__aeabi_i2d>
 80055fc:	2200      	movs	r2, #0
 80055fe:	4b4a      	ldr	r3, [pc, #296]	; (8005728 <__kernel_rem_pio2+0x338>)
 8005600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005604:	f7fa ff9c 	bl	8000540 <__aeabi_dmul>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4640      	mov	r0, r8
 800560e:	4649      	mov	r1, r9
 8005610:	f7fa fdde 	bl	80001d0 <__aeabi_dsub>
 8005614:	f7fb fa44 	bl	8000aa0 <__aeabi_d2iz>
 8005618:	ab0e      	add	r3, sp, #56	; 0x38
 800561a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800561e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005626:	f7fa fdd5 	bl	80001d4 <__adddf3>
 800562a:	3501      	adds	r5, #1
 800562c:	4680      	mov	r8, r0
 800562e:	4689      	mov	r9, r1
 8005630:	e75e      	b.n	80054f0 <__kernel_rem_pio2+0x100>
 8005632:	d105      	bne.n	8005640 <__kernel_rem_pio2+0x250>
 8005634:	1e63      	subs	r3, r4, #1
 8005636:	aa0e      	add	r2, sp, #56	; 0x38
 8005638:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800563c:	15c3      	asrs	r3, r0, #23
 800563e:	e79f      	b.n	8005580 <__kernel_rem_pio2+0x190>
 8005640:	2200      	movs	r2, #0
 8005642:	4b3a      	ldr	r3, [pc, #232]	; (800572c <__kernel_rem_pio2+0x33c>)
 8005644:	f7fb fa02 	bl	8000a4c <__aeabi_dcmpge>
 8005648:	2800      	cmp	r0, #0
 800564a:	d139      	bne.n	80056c0 <__kernel_rem_pio2+0x2d0>
 800564c:	9002      	str	r0, [sp, #8]
 800564e:	2200      	movs	r2, #0
 8005650:	2300      	movs	r3, #0
 8005652:	4630      	mov	r0, r6
 8005654:	4639      	mov	r1, r7
 8005656:	f7fb f9db 	bl	8000a10 <__aeabi_dcmpeq>
 800565a:	2800      	cmp	r0, #0
 800565c:	f000 80c7 	beq.w	80057ee <__kernel_rem_pio2+0x3fe>
 8005660:	1e65      	subs	r5, r4, #1
 8005662:	462b      	mov	r3, r5
 8005664:	2200      	movs	r2, #0
 8005666:	9904      	ldr	r1, [sp, #16]
 8005668:	428b      	cmp	r3, r1
 800566a:	da6a      	bge.n	8005742 <__kernel_rem_pio2+0x352>
 800566c:	2a00      	cmp	r2, #0
 800566e:	f000 8088 	beq.w	8005782 <__kernel_rem_pio2+0x392>
 8005672:	ab0e      	add	r3, sp, #56	; 0x38
 8005674:	f1aa 0a18 	sub.w	sl, sl, #24
 8005678:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 80b4 	beq.w	80057ea <__kernel_rem_pio2+0x3fa>
 8005682:	4650      	mov	r0, sl
 8005684:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005710 <__kernel_rem_pio2+0x320>
 8005688:	f000 fce2 	bl	8006050 <scalbn>
 800568c:	00ec      	lsls	r4, r5, #3
 800568e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005690:	191e      	adds	r6, r3, r4
 8005692:	ec59 8b10 	vmov	r8, r9, d0
 8005696:	f106 0a08 	add.w	sl, r6, #8
 800569a:	462f      	mov	r7, r5
 800569c:	2f00      	cmp	r7, #0
 800569e:	f280 80df 	bge.w	8005860 <__kernel_rem_pio2+0x470>
 80056a2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005708 <__kernel_rem_pio2+0x318>
 80056a6:	f04f 0a00 	mov.w	sl, #0
 80056aa:	eba5 030a 	sub.w	r3, r5, sl
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f2c0 810a 	blt.w	80058c8 <__kernel_rem_pio2+0x4d8>
 80056b4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005730 <__kernel_rem_pio2+0x340>
 80056b8:	ec59 8b18 	vmov	r8, r9, d8
 80056bc:	2700      	movs	r7, #0
 80056be:	e0f5      	b.n	80058ac <__kernel_rem_pio2+0x4bc>
 80056c0:	2302      	movs	r3, #2
 80056c2:	9302      	str	r3, [sp, #8]
 80056c4:	e760      	b.n	8005588 <__kernel_rem_pio2+0x198>
 80056c6:	ab0e      	add	r3, sp, #56	; 0x38
 80056c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056cc:	b94d      	cbnz	r5, 80056e2 <__kernel_rem_pio2+0x2f2>
 80056ce:	b12b      	cbz	r3, 80056dc <__kernel_rem_pio2+0x2ec>
 80056d0:	a80e      	add	r0, sp, #56	; 0x38
 80056d2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80056d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80056da:	2301      	movs	r3, #1
 80056dc:	3201      	adds	r2, #1
 80056de:	461d      	mov	r5, r3
 80056e0:	e759      	b.n	8005596 <__kernel_rem_pio2+0x1a6>
 80056e2:	a80e      	add	r0, sp, #56	; 0x38
 80056e4:	1acb      	subs	r3, r1, r3
 80056e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80056ea:	462b      	mov	r3, r5
 80056ec:	e7f6      	b.n	80056dc <__kernel_rem_pio2+0x2ec>
 80056ee:	1e62      	subs	r2, r4, #1
 80056f0:	ab0e      	add	r3, sp, #56	; 0x38
 80056f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80056fa:	a90e      	add	r1, sp, #56	; 0x38
 80056fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005700:	e757      	b.n	80055b2 <__kernel_rem_pio2+0x1c2>
 8005702:	bf00      	nop
 8005704:	f3af 8000 	nop.w
	...
 8005714:	3ff00000 	.word	0x3ff00000
 8005718:	08006368 	.word	0x08006368
 800571c:	40200000 	.word	0x40200000
 8005720:	3ff00000 	.word	0x3ff00000
 8005724:	3e700000 	.word	0x3e700000
 8005728:	41700000 	.word	0x41700000
 800572c:	3fe00000 	.word	0x3fe00000
 8005730:	08006328 	.word	0x08006328
 8005734:	1e62      	subs	r2, r4, #1
 8005736:	ab0e      	add	r3, sp, #56	; 0x38
 8005738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005740:	e7db      	b.n	80056fa <__kernel_rem_pio2+0x30a>
 8005742:	a90e      	add	r1, sp, #56	; 0x38
 8005744:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005748:	3b01      	subs	r3, #1
 800574a:	430a      	orrs	r2, r1
 800574c:	e78b      	b.n	8005666 <__kernel_rem_pio2+0x276>
 800574e:	3301      	adds	r3, #1
 8005750:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005754:	2900      	cmp	r1, #0
 8005756:	d0fa      	beq.n	800574e <__kernel_rem_pio2+0x35e>
 8005758:	9a08      	ldr	r2, [sp, #32]
 800575a:	4422      	add	r2, r4
 800575c:	00d2      	lsls	r2, r2, #3
 800575e:	a922      	add	r1, sp, #136	; 0x88
 8005760:	18e3      	adds	r3, r4, r3
 8005762:	9206      	str	r2, [sp, #24]
 8005764:	440a      	add	r2, r1
 8005766:	9302      	str	r3, [sp, #8]
 8005768:	f10b 0108 	add.w	r1, fp, #8
 800576c:	f102 0308 	add.w	r3, r2, #8
 8005770:	1c66      	adds	r6, r4, #1
 8005772:	910a      	str	r1, [sp, #40]	; 0x28
 8005774:	2500      	movs	r5, #0
 8005776:	930d      	str	r3, [sp, #52]	; 0x34
 8005778:	9b02      	ldr	r3, [sp, #8]
 800577a:	42b3      	cmp	r3, r6
 800577c:	da04      	bge.n	8005788 <__kernel_rem_pio2+0x398>
 800577e:	461c      	mov	r4, r3
 8005780:	e6a6      	b.n	80054d0 <__kernel_rem_pio2+0xe0>
 8005782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005784:	2301      	movs	r3, #1
 8005786:	e7e3      	b.n	8005750 <__kernel_rem_pio2+0x360>
 8005788:	9b06      	ldr	r3, [sp, #24]
 800578a:	18ef      	adds	r7, r5, r3
 800578c:	ab22      	add	r3, sp, #136	; 0x88
 800578e:	441f      	add	r7, r3
 8005790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005792:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005796:	f7fa fe69 	bl	800046c <__aeabi_i2d>
 800579a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579c:	461c      	mov	r4, r3
 800579e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a0:	e9c7 0100 	strd	r0, r1, [r7]
 80057a4:	eb03 0b05 	add.w	fp, r3, r5
 80057a8:	2700      	movs	r7, #0
 80057aa:	f04f 0800 	mov.w	r8, #0
 80057ae:	f04f 0900 	mov.w	r9, #0
 80057b2:	9b07      	ldr	r3, [sp, #28]
 80057b4:	429f      	cmp	r7, r3
 80057b6:	dd08      	ble.n	80057ca <__kernel_rem_pio2+0x3da>
 80057b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ba:	aa72      	add	r2, sp, #456	; 0x1c8
 80057bc:	18eb      	adds	r3, r5, r3
 80057be:	4413      	add	r3, r2
 80057c0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80057c4:	3601      	adds	r6, #1
 80057c6:	3508      	adds	r5, #8
 80057c8:	e7d6      	b.n	8005778 <__kernel_rem_pio2+0x388>
 80057ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80057ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80057d2:	f7fa feb5 	bl	8000540 <__aeabi_dmul>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	4640      	mov	r0, r8
 80057dc:	4649      	mov	r1, r9
 80057de:	f7fa fcf9 	bl	80001d4 <__adddf3>
 80057e2:	3701      	adds	r7, #1
 80057e4:	4680      	mov	r8, r0
 80057e6:	4689      	mov	r9, r1
 80057e8:	e7e3      	b.n	80057b2 <__kernel_rem_pio2+0x3c2>
 80057ea:	3d01      	subs	r5, #1
 80057ec:	e741      	b.n	8005672 <__kernel_rem_pio2+0x282>
 80057ee:	f1ca 0000 	rsb	r0, sl, #0
 80057f2:	ec47 6b10 	vmov	d0, r6, r7
 80057f6:	f000 fc2b 	bl	8006050 <scalbn>
 80057fa:	ec57 6b10 	vmov	r6, r7, d0
 80057fe:	2200      	movs	r2, #0
 8005800:	4b99      	ldr	r3, [pc, #612]	; (8005a68 <__kernel_rem_pio2+0x678>)
 8005802:	ee10 0a10 	vmov	r0, s0
 8005806:	4639      	mov	r1, r7
 8005808:	f7fb f920 	bl	8000a4c <__aeabi_dcmpge>
 800580c:	b1f8      	cbz	r0, 800584e <__kernel_rem_pio2+0x45e>
 800580e:	2200      	movs	r2, #0
 8005810:	4b96      	ldr	r3, [pc, #600]	; (8005a6c <__kernel_rem_pio2+0x67c>)
 8005812:	4630      	mov	r0, r6
 8005814:	4639      	mov	r1, r7
 8005816:	f7fa fe93 	bl	8000540 <__aeabi_dmul>
 800581a:	f7fb f941 	bl	8000aa0 <__aeabi_d2iz>
 800581e:	4680      	mov	r8, r0
 8005820:	f7fa fe24 	bl	800046c <__aeabi_i2d>
 8005824:	2200      	movs	r2, #0
 8005826:	4b90      	ldr	r3, [pc, #576]	; (8005a68 <__kernel_rem_pio2+0x678>)
 8005828:	f7fa fe8a 	bl	8000540 <__aeabi_dmul>
 800582c:	460b      	mov	r3, r1
 800582e:	4602      	mov	r2, r0
 8005830:	4639      	mov	r1, r7
 8005832:	4630      	mov	r0, r6
 8005834:	f7fa fccc 	bl	80001d0 <__aeabi_dsub>
 8005838:	f7fb f932 	bl	8000aa0 <__aeabi_d2iz>
 800583c:	1c65      	adds	r5, r4, #1
 800583e:	ab0e      	add	r3, sp, #56	; 0x38
 8005840:	f10a 0a18 	add.w	sl, sl, #24
 8005844:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005848:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800584c:	e719      	b.n	8005682 <__kernel_rem_pio2+0x292>
 800584e:	4630      	mov	r0, r6
 8005850:	4639      	mov	r1, r7
 8005852:	f7fb f925 	bl	8000aa0 <__aeabi_d2iz>
 8005856:	ab0e      	add	r3, sp, #56	; 0x38
 8005858:	4625      	mov	r5, r4
 800585a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800585e:	e710      	b.n	8005682 <__kernel_rem_pio2+0x292>
 8005860:	ab0e      	add	r3, sp, #56	; 0x38
 8005862:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005866:	f7fa fe01 	bl	800046c <__aeabi_i2d>
 800586a:	4642      	mov	r2, r8
 800586c:	464b      	mov	r3, r9
 800586e:	f7fa fe67 	bl	8000540 <__aeabi_dmul>
 8005872:	2200      	movs	r2, #0
 8005874:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005878:	4b7c      	ldr	r3, [pc, #496]	; (8005a6c <__kernel_rem_pio2+0x67c>)
 800587a:	4640      	mov	r0, r8
 800587c:	4649      	mov	r1, r9
 800587e:	f7fa fe5f 	bl	8000540 <__aeabi_dmul>
 8005882:	3f01      	subs	r7, #1
 8005884:	4680      	mov	r8, r0
 8005886:	4689      	mov	r9, r1
 8005888:	e708      	b.n	800569c <__kernel_rem_pio2+0x2ac>
 800588a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005896:	f7fa fe53 	bl	8000540 <__aeabi_dmul>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4640      	mov	r0, r8
 80058a0:	4649      	mov	r1, r9
 80058a2:	f7fa fc97 	bl	80001d4 <__adddf3>
 80058a6:	3701      	adds	r7, #1
 80058a8:	4680      	mov	r8, r0
 80058aa:	4689      	mov	r9, r1
 80058ac:	9b04      	ldr	r3, [sp, #16]
 80058ae:	429f      	cmp	r7, r3
 80058b0:	dc01      	bgt.n	80058b6 <__kernel_rem_pio2+0x4c6>
 80058b2:	45ba      	cmp	sl, r7
 80058b4:	dae9      	bge.n	800588a <__kernel_rem_pio2+0x49a>
 80058b6:	ab4a      	add	r3, sp, #296	; 0x128
 80058b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058bc:	e9c3 8900 	strd	r8, r9, [r3]
 80058c0:	f10a 0a01 	add.w	sl, sl, #1
 80058c4:	3e08      	subs	r6, #8
 80058c6:	e6f0      	b.n	80056aa <__kernel_rem_pio2+0x2ba>
 80058c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d85b      	bhi.n	8005986 <__kernel_rem_pio2+0x596>
 80058ce:	e8df f003 	tbb	[pc, r3]
 80058d2:	264a      	.short	0x264a
 80058d4:	0226      	.short	0x0226
 80058d6:	ab9a      	add	r3, sp, #616	; 0x268
 80058d8:	441c      	add	r4, r3
 80058da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80058de:	46a2      	mov	sl, r4
 80058e0:	46ab      	mov	fp, r5
 80058e2:	f1bb 0f00 	cmp.w	fp, #0
 80058e6:	dc6c      	bgt.n	80059c2 <__kernel_rem_pio2+0x5d2>
 80058e8:	46a2      	mov	sl, r4
 80058ea:	46ab      	mov	fp, r5
 80058ec:	f1bb 0f01 	cmp.w	fp, #1
 80058f0:	f300 8086 	bgt.w	8005a00 <__kernel_rem_pio2+0x610>
 80058f4:	2000      	movs	r0, #0
 80058f6:	2100      	movs	r1, #0
 80058f8:	2d01      	cmp	r5, #1
 80058fa:	f300 80a0 	bgt.w	8005a3e <__kernel_rem_pio2+0x64e>
 80058fe:	9b02      	ldr	r3, [sp, #8]
 8005900:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005904:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005908:	2b00      	cmp	r3, #0
 800590a:	f040 809e 	bne.w	8005a4a <__kernel_rem_pio2+0x65a>
 800590e:	9b01      	ldr	r3, [sp, #4]
 8005910:	e9c3 7800 	strd	r7, r8, [r3]
 8005914:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005918:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800591c:	e033      	b.n	8005986 <__kernel_rem_pio2+0x596>
 800591e:	3408      	adds	r4, #8
 8005920:	ab4a      	add	r3, sp, #296	; 0x128
 8005922:	441c      	add	r4, r3
 8005924:	462e      	mov	r6, r5
 8005926:	2000      	movs	r0, #0
 8005928:	2100      	movs	r1, #0
 800592a:	2e00      	cmp	r6, #0
 800592c:	da3a      	bge.n	80059a4 <__kernel_rem_pio2+0x5b4>
 800592e:	9b02      	ldr	r3, [sp, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d03d      	beq.n	80059b0 <__kernel_rem_pio2+0x5c0>
 8005934:	4602      	mov	r2, r0
 8005936:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800593a:	9c01      	ldr	r4, [sp, #4]
 800593c:	e9c4 2300 	strd	r2, r3, [r4]
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005948:	f7fa fc42 	bl	80001d0 <__aeabi_dsub>
 800594c:	ae4c      	add	r6, sp, #304	; 0x130
 800594e:	2401      	movs	r4, #1
 8005950:	42a5      	cmp	r5, r4
 8005952:	da30      	bge.n	80059b6 <__kernel_rem_pio2+0x5c6>
 8005954:	9b02      	ldr	r3, [sp, #8]
 8005956:	b113      	cbz	r3, 800595e <__kernel_rem_pio2+0x56e>
 8005958:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800595c:	4619      	mov	r1, r3
 800595e:	9b01      	ldr	r3, [sp, #4]
 8005960:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005964:	e00f      	b.n	8005986 <__kernel_rem_pio2+0x596>
 8005966:	ab9a      	add	r3, sp, #616	; 0x268
 8005968:	441c      	add	r4, r3
 800596a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800596e:	2000      	movs	r0, #0
 8005970:	2100      	movs	r1, #0
 8005972:	2d00      	cmp	r5, #0
 8005974:	da10      	bge.n	8005998 <__kernel_rem_pio2+0x5a8>
 8005976:	9b02      	ldr	r3, [sp, #8]
 8005978:	b113      	cbz	r3, 8005980 <__kernel_rem_pio2+0x590>
 800597a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800597e:	4619      	mov	r1, r3
 8005980:	9b01      	ldr	r3, [sp, #4]
 8005982:	e9c3 0100 	strd	r0, r1, [r3]
 8005986:	9b06      	ldr	r3, [sp, #24]
 8005988:	f003 0007 	and.w	r0, r3, #7
 800598c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005990:	ecbd 8b02 	vpop	{d8}
 8005994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005998:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800599c:	f7fa fc1a 	bl	80001d4 <__adddf3>
 80059a0:	3d01      	subs	r5, #1
 80059a2:	e7e6      	b.n	8005972 <__kernel_rem_pio2+0x582>
 80059a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80059a8:	f7fa fc14 	bl	80001d4 <__adddf3>
 80059ac:	3e01      	subs	r6, #1
 80059ae:	e7bc      	b.n	800592a <__kernel_rem_pio2+0x53a>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	e7c1      	b.n	800593a <__kernel_rem_pio2+0x54a>
 80059b6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80059ba:	f7fa fc0b 	bl	80001d4 <__adddf3>
 80059be:	3401      	adds	r4, #1
 80059c0:	e7c6      	b.n	8005950 <__kernel_rem_pio2+0x560>
 80059c2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80059c6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80059ca:	4640      	mov	r0, r8
 80059cc:	ec53 2b17 	vmov	r2, r3, d7
 80059d0:	4649      	mov	r1, r9
 80059d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80059d6:	f7fa fbfd 	bl	80001d4 <__adddf3>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4606      	mov	r6, r0
 80059e0:	460f      	mov	r7, r1
 80059e2:	4640      	mov	r0, r8
 80059e4:	4649      	mov	r1, r9
 80059e6:	f7fa fbf3 	bl	80001d0 <__aeabi_dsub>
 80059ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ee:	f7fa fbf1 	bl	80001d4 <__adddf3>
 80059f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059f6:	e9ca 0100 	strd	r0, r1, [sl]
 80059fa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80059fe:	e770      	b.n	80058e2 <__kernel_rem_pio2+0x4f2>
 8005a00:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005a04:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005a08:	4630      	mov	r0, r6
 8005a0a:	ec53 2b17 	vmov	r2, r3, d7
 8005a0e:	4639      	mov	r1, r7
 8005a10:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005a14:	f7fa fbde 	bl	80001d4 <__adddf3>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4680      	mov	r8, r0
 8005a1e:	4689      	mov	r9, r1
 8005a20:	4630      	mov	r0, r6
 8005a22:	4639      	mov	r1, r7
 8005a24:	f7fa fbd4 	bl	80001d0 <__aeabi_dsub>
 8005a28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a2c:	f7fa fbd2 	bl	80001d4 <__adddf3>
 8005a30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a34:	e9ca 0100 	strd	r0, r1, [sl]
 8005a38:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005a3c:	e756      	b.n	80058ec <__kernel_rem_pio2+0x4fc>
 8005a3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005a42:	f7fa fbc7 	bl	80001d4 <__adddf3>
 8005a46:	3d01      	subs	r5, #1
 8005a48:	e756      	b.n	80058f8 <__kernel_rem_pio2+0x508>
 8005a4a:	9b01      	ldr	r3, [sp, #4]
 8005a4c:	9a01      	ldr	r2, [sp, #4]
 8005a4e:	601f      	str	r7, [r3, #0]
 8005a50:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005a54:	605c      	str	r4, [r3, #4]
 8005a56:	609d      	str	r5, [r3, #8]
 8005a58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005a5c:	60d3      	str	r3, [r2, #12]
 8005a5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a62:	6110      	str	r0, [r2, #16]
 8005a64:	6153      	str	r3, [r2, #20]
 8005a66:	e78e      	b.n	8005986 <__kernel_rem_pio2+0x596>
 8005a68:	41700000 	.word	0x41700000
 8005a6c:	3e700000 	.word	0x3e700000

08005a70 <__kernel_sin>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	ec55 4b10 	vmov	r4, r5, d0
 8005a78:	b085      	sub	sp, #20
 8005a7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005a7e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005a82:	ed8d 1b00 	vstr	d1, [sp]
 8005a86:	9002      	str	r0, [sp, #8]
 8005a88:	da06      	bge.n	8005a98 <__kernel_sin+0x28>
 8005a8a:	ee10 0a10 	vmov	r0, s0
 8005a8e:	4629      	mov	r1, r5
 8005a90:	f7fb f806 	bl	8000aa0 <__aeabi_d2iz>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d051      	beq.n	8005b3c <__kernel_sin+0xcc>
 8005a98:	4622      	mov	r2, r4
 8005a9a:	462b      	mov	r3, r5
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	f7fa fd4e 	bl	8000540 <__aeabi_dmul>
 8005aa4:	4682      	mov	sl, r0
 8005aa6:	468b      	mov	fp, r1
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4620      	mov	r0, r4
 8005aae:	4629      	mov	r1, r5
 8005ab0:	f7fa fd46 	bl	8000540 <__aeabi_dmul>
 8005ab4:	a341      	add	r3, pc, #260	; (adr r3, 8005bbc <__kernel_sin+0x14c>)
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	4680      	mov	r8, r0
 8005abc:	4689      	mov	r9, r1
 8005abe:	4650      	mov	r0, sl
 8005ac0:	4659      	mov	r1, fp
 8005ac2:	f7fa fd3d 	bl	8000540 <__aeabi_dmul>
 8005ac6:	a33f      	add	r3, pc, #252	; (adr r3, 8005bc4 <__kernel_sin+0x154>)
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f7fa fb80 	bl	80001d0 <__aeabi_dsub>
 8005ad0:	4652      	mov	r2, sl
 8005ad2:	465b      	mov	r3, fp
 8005ad4:	f7fa fd34 	bl	8000540 <__aeabi_dmul>
 8005ad8:	a33c      	add	r3, pc, #240	; (adr r3, 8005bcc <__kernel_sin+0x15c>)
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	f7fa fb79 	bl	80001d4 <__adddf3>
 8005ae2:	4652      	mov	r2, sl
 8005ae4:	465b      	mov	r3, fp
 8005ae6:	f7fa fd2b 	bl	8000540 <__aeabi_dmul>
 8005aea:	a33a      	add	r3, pc, #232	; (adr r3, 8005bd4 <__kernel_sin+0x164>)
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f7fa fb6e 	bl	80001d0 <__aeabi_dsub>
 8005af4:	4652      	mov	r2, sl
 8005af6:	465b      	mov	r3, fp
 8005af8:	f7fa fd22 	bl	8000540 <__aeabi_dmul>
 8005afc:	a337      	add	r3, pc, #220	; (adr r3, 8005bdc <__kernel_sin+0x16c>)
 8005afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b02:	f7fa fb67 	bl	80001d4 <__adddf3>
 8005b06:	9b02      	ldr	r3, [sp, #8]
 8005b08:	4606      	mov	r6, r0
 8005b0a:	460f      	mov	r7, r1
 8005b0c:	b9db      	cbnz	r3, 8005b46 <__kernel_sin+0xd6>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4650      	mov	r0, sl
 8005b14:	4659      	mov	r1, fp
 8005b16:	f7fa fd13 	bl	8000540 <__aeabi_dmul>
 8005b1a:	a325      	add	r3, pc, #148	; (adr r3, 8005bb0 <__kernel_sin+0x140>)
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	f7fa fb56 	bl	80001d0 <__aeabi_dsub>
 8005b24:	4642      	mov	r2, r8
 8005b26:	464b      	mov	r3, r9
 8005b28:	f7fa fd0a 	bl	8000540 <__aeabi_dmul>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4620      	mov	r0, r4
 8005b32:	4629      	mov	r1, r5
 8005b34:	f7fa fb4e 	bl	80001d4 <__adddf3>
 8005b38:	4604      	mov	r4, r0
 8005b3a:	460d      	mov	r5, r1
 8005b3c:	ec45 4b10 	vmov	d0, r4, r5
 8005b40:	b005      	add	sp, #20
 8005b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b46:	2200      	movs	r2, #0
 8005b48:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <__kernel_sin+0x148>)
 8005b4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b4e:	f7fa fcf7 	bl	8000540 <__aeabi_dmul>
 8005b52:	4632      	mov	r2, r6
 8005b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b58:	463b      	mov	r3, r7
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	f7fa fcef 	bl	8000540 <__aeabi_dmul>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b6a:	f7fa fb31 	bl	80001d0 <__aeabi_dsub>
 8005b6e:	4652      	mov	r2, sl
 8005b70:	465b      	mov	r3, fp
 8005b72:	f7fa fce5 	bl	8000540 <__aeabi_dmul>
 8005b76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b7a:	f7fa fb29 	bl	80001d0 <__aeabi_dsub>
 8005b7e:	a30c      	add	r3, pc, #48	; (adr r3, 8005bb0 <__kernel_sin+0x140>)
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	4606      	mov	r6, r0
 8005b86:	460f      	mov	r7, r1
 8005b88:	4640      	mov	r0, r8
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	f7fa fcd8 	bl	8000540 <__aeabi_dmul>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4630      	mov	r0, r6
 8005b96:	4639      	mov	r1, r7
 8005b98:	f7fa fb1c 	bl	80001d4 <__adddf3>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	f7fa fb14 	bl	80001d0 <__aeabi_dsub>
 8005ba8:	e7c6      	b.n	8005b38 <__kernel_sin+0xc8>
 8005baa:	bf00      	nop
 8005bac:	f3af 8000 	nop.w
 8005bb0:	55555549 	.word	0x55555549
 8005bb4:	3fc55555 	.word	0x3fc55555
 8005bb8:	3fe00000 	.word	0x3fe00000
 8005bbc:	5acfd57c 	.word	0x5acfd57c
 8005bc0:	3de5d93a 	.word	0x3de5d93a
 8005bc4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005bc8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005bcc:	57b1fe7d 	.word	0x57b1fe7d
 8005bd0:	3ec71de3 	.word	0x3ec71de3
 8005bd4:	19c161d5 	.word	0x19c161d5
 8005bd8:	3f2a01a0 	.word	0x3f2a01a0
 8005bdc:	1110f8a6 	.word	0x1110f8a6
 8005be0:	3f811111 	.word	0x3f811111
 8005be4:	00000000 	.word	0x00000000

08005be8 <atan>:
 8005be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	ec55 4b10 	vmov	r4, r5, d0
 8005bf0:	4bc3      	ldr	r3, [pc, #780]	; (8005f00 <atan+0x318>)
 8005bf2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005bf6:	429e      	cmp	r6, r3
 8005bf8:	46ab      	mov	fp, r5
 8005bfa:	dd18      	ble.n	8005c2e <atan+0x46>
 8005bfc:	4bc1      	ldr	r3, [pc, #772]	; (8005f04 <atan+0x31c>)
 8005bfe:	429e      	cmp	r6, r3
 8005c00:	dc01      	bgt.n	8005c06 <atan+0x1e>
 8005c02:	d109      	bne.n	8005c18 <atan+0x30>
 8005c04:	b144      	cbz	r4, 8005c18 <atan+0x30>
 8005c06:	4622      	mov	r2, r4
 8005c08:	462b      	mov	r3, r5
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	f7fa fae1 	bl	80001d4 <__adddf3>
 8005c12:	4604      	mov	r4, r0
 8005c14:	460d      	mov	r5, r1
 8005c16:	e006      	b.n	8005c26 <atan+0x3e>
 8005c18:	f1bb 0f00 	cmp.w	fp, #0
 8005c1c:	f340 8131 	ble.w	8005e82 <atan+0x29a>
 8005c20:	a59b      	add	r5, pc, #620	; (adr r5, 8005e90 <atan+0x2a8>)
 8005c22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005c26:	ec45 4b10 	vmov	d0, r4, r5
 8005c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2e:	4bb6      	ldr	r3, [pc, #728]	; (8005f08 <atan+0x320>)
 8005c30:	429e      	cmp	r6, r3
 8005c32:	dc14      	bgt.n	8005c5e <atan+0x76>
 8005c34:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005c38:	429e      	cmp	r6, r3
 8005c3a:	dc0d      	bgt.n	8005c58 <atan+0x70>
 8005c3c:	a396      	add	r3, pc, #600	; (adr r3, 8005e98 <atan+0x2b0>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	ee10 0a10 	vmov	r0, s0
 8005c46:	4629      	mov	r1, r5
 8005c48:	f7fa fac4 	bl	80001d4 <__adddf3>
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	4baf      	ldr	r3, [pc, #700]	; (8005f0c <atan+0x324>)
 8005c50:	f7fa ff06 	bl	8000a60 <__aeabi_dcmpgt>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1e6      	bne.n	8005c26 <atan+0x3e>
 8005c58:	f04f 3aff 	mov.w	sl, #4294967295
 8005c5c:	e02b      	b.n	8005cb6 <atan+0xce>
 8005c5e:	f000 f963 	bl	8005f28 <fabs>
 8005c62:	4bab      	ldr	r3, [pc, #684]	; (8005f10 <atan+0x328>)
 8005c64:	429e      	cmp	r6, r3
 8005c66:	ec55 4b10 	vmov	r4, r5, d0
 8005c6a:	f300 80bf 	bgt.w	8005dec <atan+0x204>
 8005c6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005c72:	429e      	cmp	r6, r3
 8005c74:	f300 80a0 	bgt.w	8005db8 <atan+0x1d0>
 8005c78:	ee10 2a10 	vmov	r2, s0
 8005c7c:	ee10 0a10 	vmov	r0, s0
 8005c80:	462b      	mov	r3, r5
 8005c82:	4629      	mov	r1, r5
 8005c84:	f7fa faa6 	bl	80001d4 <__adddf3>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	4ba0      	ldr	r3, [pc, #640]	; (8005f0c <atan+0x324>)
 8005c8c:	f7fa faa0 	bl	80001d0 <__aeabi_dsub>
 8005c90:	2200      	movs	r2, #0
 8005c92:	4606      	mov	r6, r0
 8005c94:	460f      	mov	r7, r1
 8005c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	f7fa fa99 	bl	80001d4 <__adddf3>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	4639      	mov	r1, r7
 8005caa:	f7fa fd73 	bl	8000794 <__aeabi_ddiv>
 8005cae:	f04f 0a00 	mov.w	sl, #0
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	460d      	mov	r5, r1
 8005cb6:	4622      	mov	r2, r4
 8005cb8:	462b      	mov	r3, r5
 8005cba:	4620      	mov	r0, r4
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	f7fa fc3f 	bl	8000540 <__aeabi_dmul>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4680      	mov	r8, r0
 8005cc8:	4689      	mov	r9, r1
 8005cca:	f7fa fc39 	bl	8000540 <__aeabi_dmul>
 8005cce:	a374      	add	r3, pc, #464	; (adr r3, 8005ea0 <atan+0x2b8>)
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	460f      	mov	r7, r1
 8005cd8:	f7fa fc32 	bl	8000540 <__aeabi_dmul>
 8005cdc:	a372      	add	r3, pc, #456	; (adr r3, 8005ea8 <atan+0x2c0>)
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	f7fa fa77 	bl	80001d4 <__adddf3>
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	463b      	mov	r3, r7
 8005cea:	f7fa fc29 	bl	8000540 <__aeabi_dmul>
 8005cee:	a370      	add	r3, pc, #448	; (adr r3, 8005eb0 <atan+0x2c8>)
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f7fa fa6e 	bl	80001d4 <__adddf3>
 8005cf8:	4632      	mov	r2, r6
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	f7fa fc20 	bl	8000540 <__aeabi_dmul>
 8005d00:	a36d      	add	r3, pc, #436	; (adr r3, 8005eb8 <atan+0x2d0>)
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f7fa fa65 	bl	80001d4 <__adddf3>
 8005d0a:	4632      	mov	r2, r6
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	f7fa fc17 	bl	8000540 <__aeabi_dmul>
 8005d12:	a36b      	add	r3, pc, #428	; (adr r3, 8005ec0 <atan+0x2d8>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f7fa fa5c 	bl	80001d4 <__adddf3>
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	463b      	mov	r3, r7
 8005d20:	f7fa fc0e 	bl	8000540 <__aeabi_dmul>
 8005d24:	a368      	add	r3, pc, #416	; (adr r3, 8005ec8 <atan+0x2e0>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f7fa fa53 	bl	80001d4 <__adddf3>
 8005d2e:	4642      	mov	r2, r8
 8005d30:	464b      	mov	r3, r9
 8005d32:	f7fa fc05 	bl	8000540 <__aeabi_dmul>
 8005d36:	a366      	add	r3, pc, #408	; (adr r3, 8005ed0 <atan+0x2e8>)
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	4680      	mov	r8, r0
 8005d3e:	4689      	mov	r9, r1
 8005d40:	4630      	mov	r0, r6
 8005d42:	4639      	mov	r1, r7
 8005d44:	f7fa fbfc 	bl	8000540 <__aeabi_dmul>
 8005d48:	a363      	add	r3, pc, #396	; (adr r3, 8005ed8 <atan+0x2f0>)
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f7fa fa3f 	bl	80001d0 <__aeabi_dsub>
 8005d52:	4632      	mov	r2, r6
 8005d54:	463b      	mov	r3, r7
 8005d56:	f7fa fbf3 	bl	8000540 <__aeabi_dmul>
 8005d5a:	a361      	add	r3, pc, #388	; (adr r3, 8005ee0 <atan+0x2f8>)
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f7fa fa36 	bl	80001d0 <__aeabi_dsub>
 8005d64:	4632      	mov	r2, r6
 8005d66:	463b      	mov	r3, r7
 8005d68:	f7fa fbea 	bl	8000540 <__aeabi_dmul>
 8005d6c:	a35e      	add	r3, pc, #376	; (adr r3, 8005ee8 <atan+0x300>)
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	f7fa fa2d 	bl	80001d0 <__aeabi_dsub>
 8005d76:	4632      	mov	r2, r6
 8005d78:	463b      	mov	r3, r7
 8005d7a:	f7fa fbe1 	bl	8000540 <__aeabi_dmul>
 8005d7e:	a35c      	add	r3, pc, #368	; (adr r3, 8005ef0 <atan+0x308>)
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f7fa fa24 	bl	80001d0 <__aeabi_dsub>
 8005d88:	4632      	mov	r2, r6
 8005d8a:	463b      	mov	r3, r7
 8005d8c:	f7fa fbd8 	bl	8000540 <__aeabi_dmul>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4640      	mov	r0, r8
 8005d96:	4649      	mov	r1, r9
 8005d98:	f7fa fa1c 	bl	80001d4 <__adddf3>
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	462b      	mov	r3, r5
 8005da0:	f7fa fbce 	bl	8000540 <__aeabi_dmul>
 8005da4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	d14b      	bne.n	8005e46 <atan+0x25e>
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa fa0d 	bl	80001d0 <__aeabi_dsub>
 8005db6:	e72c      	b.n	8005c12 <atan+0x2a>
 8005db8:	ee10 0a10 	vmov	r0, s0
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	4b53      	ldr	r3, [pc, #332]	; (8005f0c <atan+0x324>)
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	f7fa fa05 	bl	80001d0 <__aeabi_dsub>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	4606      	mov	r6, r0
 8005dca:	460f      	mov	r7, r1
 8005dcc:	4b4f      	ldr	r3, [pc, #316]	; (8005f0c <atan+0x324>)
 8005dce:	4620      	mov	r0, r4
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	f7fa f9ff 	bl	80001d4 <__adddf3>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4630      	mov	r0, r6
 8005ddc:	4639      	mov	r1, r7
 8005dde:	f7fa fcd9 	bl	8000794 <__aeabi_ddiv>
 8005de2:	f04f 0a01 	mov.w	sl, #1
 8005de6:	4604      	mov	r4, r0
 8005de8:	460d      	mov	r5, r1
 8005dea:	e764      	b.n	8005cb6 <atan+0xce>
 8005dec:	4b49      	ldr	r3, [pc, #292]	; (8005f14 <atan+0x32c>)
 8005dee:	429e      	cmp	r6, r3
 8005df0:	dc1d      	bgt.n	8005e2e <atan+0x246>
 8005df2:	ee10 0a10 	vmov	r0, s0
 8005df6:	2200      	movs	r2, #0
 8005df8:	4b47      	ldr	r3, [pc, #284]	; (8005f18 <atan+0x330>)
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	f7fa f9e8 	bl	80001d0 <__aeabi_dsub>
 8005e00:	2200      	movs	r2, #0
 8005e02:	4606      	mov	r6, r0
 8005e04:	460f      	mov	r7, r1
 8005e06:	4b44      	ldr	r3, [pc, #272]	; (8005f18 <atan+0x330>)
 8005e08:	4620      	mov	r0, r4
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	f7fa fb98 	bl	8000540 <__aeabi_dmul>
 8005e10:	2200      	movs	r2, #0
 8005e12:	4b3e      	ldr	r3, [pc, #248]	; (8005f0c <atan+0x324>)
 8005e14:	f7fa f9de 	bl	80001d4 <__adddf3>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	4639      	mov	r1, r7
 8005e20:	f7fa fcb8 	bl	8000794 <__aeabi_ddiv>
 8005e24:	f04f 0a02 	mov.w	sl, #2
 8005e28:	4604      	mov	r4, r0
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	e743      	b.n	8005cb6 <atan+0xce>
 8005e2e:	462b      	mov	r3, r5
 8005e30:	ee10 2a10 	vmov	r2, s0
 8005e34:	2000      	movs	r0, #0
 8005e36:	4939      	ldr	r1, [pc, #228]	; (8005f1c <atan+0x334>)
 8005e38:	f7fa fcac 	bl	8000794 <__aeabi_ddiv>
 8005e3c:	f04f 0a03 	mov.w	sl, #3
 8005e40:	4604      	mov	r4, r0
 8005e42:	460d      	mov	r5, r1
 8005e44:	e737      	b.n	8005cb6 <atan+0xce>
 8005e46:	4b36      	ldr	r3, [pc, #216]	; (8005f20 <atan+0x338>)
 8005e48:	4e36      	ldr	r6, [pc, #216]	; (8005f24 <atan+0x33c>)
 8005e4a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005e4e:	4456      	add	r6, sl
 8005e50:	449a      	add	sl, r3
 8005e52:	e9da 2300 	ldrd	r2, r3, [sl]
 8005e56:	f7fa f9bb 	bl	80001d0 <__aeabi_dsub>
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	462b      	mov	r3, r5
 8005e5e:	f7fa f9b7 	bl	80001d0 <__aeabi_dsub>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005e6a:	f7fa f9b1 	bl	80001d0 <__aeabi_dsub>
 8005e6e:	f1bb 0f00 	cmp.w	fp, #0
 8005e72:	4604      	mov	r4, r0
 8005e74:	460d      	mov	r5, r1
 8005e76:	f6bf aed6 	bge.w	8005c26 <atan+0x3e>
 8005e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e7e:	461d      	mov	r5, r3
 8005e80:	e6d1      	b.n	8005c26 <atan+0x3e>
 8005e82:	a51d      	add	r5, pc, #116	; (adr r5, 8005ef8 <atan+0x310>)
 8005e84:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e88:	e6cd      	b.n	8005c26 <atan+0x3e>
 8005e8a:	bf00      	nop
 8005e8c:	f3af 8000 	nop.w
 8005e90:	54442d18 	.word	0x54442d18
 8005e94:	3ff921fb 	.word	0x3ff921fb
 8005e98:	8800759c 	.word	0x8800759c
 8005e9c:	7e37e43c 	.word	0x7e37e43c
 8005ea0:	e322da11 	.word	0xe322da11
 8005ea4:	3f90ad3a 	.word	0x3f90ad3a
 8005ea8:	24760deb 	.word	0x24760deb
 8005eac:	3fa97b4b 	.word	0x3fa97b4b
 8005eb0:	a0d03d51 	.word	0xa0d03d51
 8005eb4:	3fb10d66 	.word	0x3fb10d66
 8005eb8:	c54c206e 	.word	0xc54c206e
 8005ebc:	3fb745cd 	.word	0x3fb745cd
 8005ec0:	920083ff 	.word	0x920083ff
 8005ec4:	3fc24924 	.word	0x3fc24924
 8005ec8:	5555550d 	.word	0x5555550d
 8005ecc:	3fd55555 	.word	0x3fd55555
 8005ed0:	2c6a6c2f 	.word	0x2c6a6c2f
 8005ed4:	bfa2b444 	.word	0xbfa2b444
 8005ed8:	52defd9a 	.word	0x52defd9a
 8005edc:	3fadde2d 	.word	0x3fadde2d
 8005ee0:	af749a6d 	.word	0xaf749a6d
 8005ee4:	3fb3b0f2 	.word	0x3fb3b0f2
 8005ee8:	fe231671 	.word	0xfe231671
 8005eec:	3fbc71c6 	.word	0x3fbc71c6
 8005ef0:	9998ebc4 	.word	0x9998ebc4
 8005ef4:	3fc99999 	.word	0x3fc99999
 8005ef8:	54442d18 	.word	0x54442d18
 8005efc:	bff921fb 	.word	0xbff921fb
 8005f00:	440fffff 	.word	0x440fffff
 8005f04:	7ff00000 	.word	0x7ff00000
 8005f08:	3fdbffff 	.word	0x3fdbffff
 8005f0c:	3ff00000 	.word	0x3ff00000
 8005f10:	3ff2ffff 	.word	0x3ff2ffff
 8005f14:	40037fff 	.word	0x40037fff
 8005f18:	3ff80000 	.word	0x3ff80000
 8005f1c:	bff00000 	.word	0xbff00000
 8005f20:	08006398 	.word	0x08006398
 8005f24:	08006378 	.word	0x08006378

08005f28 <fabs>:
 8005f28:	ec51 0b10 	vmov	r0, r1, d0
 8005f2c:	ee10 2a10 	vmov	r2, s0
 8005f30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f34:	ec43 2b10 	vmov	d0, r2, r3
 8005f38:	4770      	bx	lr
 8005f3a:	0000      	movs	r0, r0
 8005f3c:	0000      	movs	r0, r0
	...

08005f40 <floor>:
 8005f40:	ec51 0b10 	vmov	r0, r1, d0
 8005f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005f4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005f50:	2e13      	cmp	r6, #19
 8005f52:	460c      	mov	r4, r1
 8005f54:	ee10 5a10 	vmov	r5, s0
 8005f58:	4680      	mov	r8, r0
 8005f5a:	dc34      	bgt.n	8005fc6 <floor+0x86>
 8005f5c:	2e00      	cmp	r6, #0
 8005f5e:	da16      	bge.n	8005f8e <floor+0x4e>
 8005f60:	a335      	add	r3, pc, #212	; (adr r3, 8006038 <floor+0xf8>)
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f7fa f935 	bl	80001d4 <__adddf3>
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f7fa fd77 	bl	8000a60 <__aeabi_dcmpgt>
 8005f72:	b148      	cbz	r0, 8005f88 <floor+0x48>
 8005f74:	2c00      	cmp	r4, #0
 8005f76:	da59      	bge.n	800602c <floor+0xec>
 8005f78:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005f7c:	4a30      	ldr	r2, [pc, #192]	; (8006040 <floor+0x100>)
 8005f7e:	432b      	orrs	r3, r5
 8005f80:	2500      	movs	r5, #0
 8005f82:	42ab      	cmp	r3, r5
 8005f84:	bf18      	it	ne
 8005f86:	4614      	movne	r4, r2
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	e025      	b.n	8005fda <floor+0x9a>
 8005f8e:	4f2d      	ldr	r7, [pc, #180]	; (8006044 <floor+0x104>)
 8005f90:	4137      	asrs	r7, r6
 8005f92:	ea01 0307 	and.w	r3, r1, r7
 8005f96:	4303      	orrs	r3, r0
 8005f98:	d01f      	beq.n	8005fda <floor+0x9a>
 8005f9a:	a327      	add	r3, pc, #156	; (adr r3, 8006038 <floor+0xf8>)
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f7fa f918 	bl	80001d4 <__adddf3>
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f7fa fd5a 	bl	8000a60 <__aeabi_dcmpgt>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d0eb      	beq.n	8005f88 <floor+0x48>
 8005fb0:	2c00      	cmp	r4, #0
 8005fb2:	bfbe      	ittt	lt
 8005fb4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005fb8:	fa43 f606 	asrlt.w	r6, r3, r6
 8005fbc:	19a4      	addlt	r4, r4, r6
 8005fbe:	ea24 0407 	bic.w	r4, r4, r7
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	e7e0      	b.n	8005f88 <floor+0x48>
 8005fc6:	2e33      	cmp	r6, #51	; 0x33
 8005fc8:	dd0b      	ble.n	8005fe2 <floor+0xa2>
 8005fca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005fce:	d104      	bne.n	8005fda <floor+0x9a>
 8005fd0:	ee10 2a10 	vmov	r2, s0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	f7fa f8fd 	bl	80001d4 <__adddf3>
 8005fda:	ec41 0b10 	vmov	d0, r0, r1
 8005fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fe2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fea:	fa23 f707 	lsr.w	r7, r3, r7
 8005fee:	4207      	tst	r7, r0
 8005ff0:	d0f3      	beq.n	8005fda <floor+0x9a>
 8005ff2:	a311      	add	r3, pc, #68	; (adr r3, 8006038 <floor+0xf8>)
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f7fa f8ec 	bl	80001d4 <__adddf3>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2300      	movs	r3, #0
 8006000:	f7fa fd2e 	bl	8000a60 <__aeabi_dcmpgt>
 8006004:	2800      	cmp	r0, #0
 8006006:	d0bf      	beq.n	8005f88 <floor+0x48>
 8006008:	2c00      	cmp	r4, #0
 800600a:	da02      	bge.n	8006012 <floor+0xd2>
 800600c:	2e14      	cmp	r6, #20
 800600e:	d103      	bne.n	8006018 <floor+0xd8>
 8006010:	3401      	adds	r4, #1
 8006012:	ea25 0507 	bic.w	r5, r5, r7
 8006016:	e7b7      	b.n	8005f88 <floor+0x48>
 8006018:	2301      	movs	r3, #1
 800601a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800601e:	fa03 f606 	lsl.w	r6, r3, r6
 8006022:	4435      	add	r5, r6
 8006024:	4545      	cmp	r5, r8
 8006026:	bf38      	it	cc
 8006028:	18e4      	addcc	r4, r4, r3
 800602a:	e7f2      	b.n	8006012 <floor+0xd2>
 800602c:	2500      	movs	r5, #0
 800602e:	462c      	mov	r4, r5
 8006030:	e7aa      	b.n	8005f88 <floor+0x48>
 8006032:	bf00      	nop
 8006034:	f3af 8000 	nop.w
 8006038:	8800759c 	.word	0x8800759c
 800603c:	7e37e43c 	.word	0x7e37e43c
 8006040:	bff00000 	.word	0xbff00000
 8006044:	000fffff 	.word	0x000fffff

08006048 <matherr>:
 8006048:	2000      	movs	r0, #0
 800604a:	4770      	bx	lr
 800604c:	0000      	movs	r0, r0
	...

08006050 <scalbn>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	ec55 4b10 	vmov	r4, r5, d0
 8006056:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800605a:	4606      	mov	r6, r0
 800605c:	462b      	mov	r3, r5
 800605e:	b9aa      	cbnz	r2, 800608c <scalbn+0x3c>
 8006060:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006064:	4323      	orrs	r3, r4
 8006066:	d03b      	beq.n	80060e0 <scalbn+0x90>
 8006068:	4b31      	ldr	r3, [pc, #196]	; (8006130 <scalbn+0xe0>)
 800606a:	4629      	mov	r1, r5
 800606c:	2200      	movs	r2, #0
 800606e:	ee10 0a10 	vmov	r0, s0
 8006072:	f7fa fa65 	bl	8000540 <__aeabi_dmul>
 8006076:	4b2f      	ldr	r3, [pc, #188]	; (8006134 <scalbn+0xe4>)
 8006078:	429e      	cmp	r6, r3
 800607a:	4604      	mov	r4, r0
 800607c:	460d      	mov	r5, r1
 800607e:	da12      	bge.n	80060a6 <scalbn+0x56>
 8006080:	a327      	add	r3, pc, #156	; (adr r3, 8006120 <scalbn+0xd0>)
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f7fa fa5b 	bl	8000540 <__aeabi_dmul>
 800608a:	e009      	b.n	80060a0 <scalbn+0x50>
 800608c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006090:	428a      	cmp	r2, r1
 8006092:	d10c      	bne.n	80060ae <scalbn+0x5e>
 8006094:	ee10 2a10 	vmov	r2, s0
 8006098:	4620      	mov	r0, r4
 800609a:	4629      	mov	r1, r5
 800609c:	f7fa f89a 	bl	80001d4 <__adddf3>
 80060a0:	4604      	mov	r4, r0
 80060a2:	460d      	mov	r5, r1
 80060a4:	e01c      	b.n	80060e0 <scalbn+0x90>
 80060a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80060aa:	460b      	mov	r3, r1
 80060ac:	3a36      	subs	r2, #54	; 0x36
 80060ae:	4432      	add	r2, r6
 80060b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80060b4:	428a      	cmp	r2, r1
 80060b6:	dd0b      	ble.n	80060d0 <scalbn+0x80>
 80060b8:	ec45 4b11 	vmov	d1, r4, r5
 80060bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006128 <scalbn+0xd8>
 80060c0:	f000 f83c 	bl	800613c <copysign>
 80060c4:	a318      	add	r3, pc, #96	; (adr r3, 8006128 <scalbn+0xd8>)
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	ec51 0b10 	vmov	r0, r1, d0
 80060ce:	e7da      	b.n	8006086 <scalbn+0x36>
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	dd08      	ble.n	80060e6 <scalbn+0x96>
 80060d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80060d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80060e0:	ec45 4b10 	vmov	d0, r4, r5
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
 80060e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80060ea:	da0d      	bge.n	8006108 <scalbn+0xb8>
 80060ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80060f0:	429e      	cmp	r6, r3
 80060f2:	ec45 4b11 	vmov	d1, r4, r5
 80060f6:	dce1      	bgt.n	80060bc <scalbn+0x6c>
 80060f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006120 <scalbn+0xd0>
 80060fc:	f000 f81e 	bl	800613c <copysign>
 8006100:	a307      	add	r3, pc, #28	; (adr r3, 8006120 <scalbn+0xd0>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	e7e0      	b.n	80060ca <scalbn+0x7a>
 8006108:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800610c:	3236      	adds	r2, #54	; 0x36
 800610e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006112:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006116:	4620      	mov	r0, r4
 8006118:	4629      	mov	r1, r5
 800611a:	2200      	movs	r2, #0
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <scalbn+0xe8>)
 800611e:	e7b2      	b.n	8006086 <scalbn+0x36>
 8006120:	c2f8f359 	.word	0xc2f8f359
 8006124:	01a56e1f 	.word	0x01a56e1f
 8006128:	8800759c 	.word	0x8800759c
 800612c:	7e37e43c 	.word	0x7e37e43c
 8006130:	43500000 	.word	0x43500000
 8006134:	ffff3cb0 	.word	0xffff3cb0
 8006138:	3c900000 	.word	0x3c900000

0800613c <copysign>:
 800613c:	ec51 0b10 	vmov	r0, r1, d0
 8006140:	ee11 0a90 	vmov	r0, s3
 8006144:	ee10 2a10 	vmov	r2, s0
 8006148:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800614c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006150:	ea41 0300 	orr.w	r3, r1, r0
 8006154:	ec43 2b10 	vmov	d0, r2, r3
 8006158:	4770      	bx	lr
	...

0800615c <_init>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	bf00      	nop
 8006160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006162:	bc08      	pop	{r3}
 8006164:	469e      	mov	lr, r3
 8006166:	4770      	bx	lr

08006168 <_fini>:
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	bf00      	nop
 800616c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616e:	bc08      	pop	{r3}
 8006170:	469e      	mov	lr, r3
 8006172:	4770      	bx	lr
