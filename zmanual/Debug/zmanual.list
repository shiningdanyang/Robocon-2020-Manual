
zmanual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08007680  08007680  00017680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c0  080078c0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078c8  080078c8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078cc  080078cc  000178cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080078d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  200000b8  08007984  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08007984  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be1f  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000193b  00000000  00000000  0002bf03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  0002d840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  0002e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020a23  00000000  00000000  0002f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000889a  00000000  00000000  0004facb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9596  00000000  00000000  00058365  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001218fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a1c  00000000  00000000  00121978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007664 	.word	0x08007664

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	08007664 	.word	0x08007664

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b972 	b.w	8000dec <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	4688      	mov	r8, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d14b      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b2e:	428a      	cmp	r2, r1
 8000b30:	4615      	mov	r5, r2
 8000b32:	d967      	bls.n	8000c04 <__udivmoddi4+0xe4>
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0720 	rsb	r7, r2, #32
 8000b3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b42:	fa20 f707 	lsr.w	r7, r0, r7
 8000b46:	4095      	lsls	r5, r2
 8000b48:	ea47 0803 	orr.w	r8, r7, r3
 8000b4c:	4094      	lsls	r4, r2
 8000b4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b52:	0c23      	lsrs	r3, r4, #16
 8000b54:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b58:	fa1f fc85 	uxth.w	ip, r5
 8000b5c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b60:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b64:	fb07 f10c 	mul.w	r1, r7, ip
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x60>
 8000b6c:	18eb      	adds	r3, r5, r3
 8000b6e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b72:	f080 811b 	bcs.w	8000dac <__udivmoddi4+0x28c>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 8118 	bls.w	8000dac <__udivmoddi4+0x28c>
 8000b7c:	3f02      	subs	r7, #2
 8000b7e:	442b      	add	r3, r5
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b94:	45a4      	cmp	ip, r4
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x8c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	442c      	add	r4, r5
 8000bac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bb0:	eba4 040c 	sub.w	r4, r4, ip
 8000bb4:	2700      	movs	r7, #0
 8000bb6:	b11e      	cbz	r6, 8000bc0 <__udivmoddi4+0xa0>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc0:	4639      	mov	r1, r7
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xbe>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80eb 	beq.w	8000da6 <__udivmoddi4+0x286>
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	4639      	mov	r1, r7
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f783 	clz	r7, r3
 8000be2:	2f00      	cmp	r7, #0
 8000be4:	d147      	bne.n	8000c76 <__udivmoddi4+0x156>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd0>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80fa 	bhi.w	8000de4 <__udivmoddi4+0x2c4>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa0>
 8000bfe:	e9c6 4800 	strd	r4, r8, [r6]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xe8>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 808f 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c12:	1b49      	subs	r1, r1, r5
 8000c14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c18:	fa1f f885 	uxth.w	r8, r5
 8000c1c:	2701      	movs	r7, #1
 8000c1e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	f200 80cd 	bhi.w	8000ddc <__udivmoddi4+0x2bc>
 8000c42:	4684      	mov	ip, r0
 8000c44:	1a59      	subs	r1, r3, r1
 8000c46:	b2a3      	uxth	r3, r4
 8000c48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c54:	fb08 f800 	mul.w	r8, r8, r0
 8000c58:	45a0      	cmp	r8, r4
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x14c>
 8000c5c:	192c      	adds	r4, r5, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x14a>
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	f200 80b6 	bhi.w	8000dd6 <__udivmoddi4+0x2b6>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	eba4 0408 	sub.w	r4, r4, r8
 8000c70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c74:	e79f      	b.n	8000bb6 <__udivmoddi4+0x96>
 8000c76:	f1c7 0c20 	rsb	ip, r7, #32
 8000c7a:	40bb      	lsls	r3, r7
 8000c7c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c80:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c84:	fa01 f407 	lsl.w	r4, r1, r7
 8000c88:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c8c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c90:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c94:	4325      	orrs	r5, r4
 8000c96:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c9a:	0c2c      	lsrs	r4, r5, #16
 8000c9c:	fb08 3319 	mls	r3, r8, r9, r3
 8000ca0:	fa1f fa8e 	uxth.w	sl, lr
 8000ca4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cac:	429c      	cmp	r4, r3
 8000cae:	fa02 f207 	lsl.w	r2, r2, r7
 8000cb2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	f080 8087 	bcs.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f240 8084 	bls.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cca:	f1a9 0902 	sub.w	r9, r9, #2
 8000cce:	4473      	add	r3, lr
 8000cd0:	1b1b      	subs	r3, r3, r4
 8000cd2:	b2ad      	uxth	r5, r5
 8000cd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cdc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ce0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce4:	45a2      	cmp	sl, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	d26b      	bcs.n	8000dca <__udivmoddi4+0x2aa>
 8000cf2:	45a2      	cmp	sl, r4
 8000cf4:	d969      	bls.n	8000dca <__udivmoddi4+0x2aa>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4474      	add	r4, lr
 8000cfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	eba4 040a 	sub.w	r4, r4, sl
 8000d06:	454c      	cmp	r4, r9
 8000d08:	46c2      	mov	sl, r8
 8000d0a:	464b      	mov	r3, r9
 8000d0c:	d354      	bcc.n	8000db8 <__udivmoddi4+0x298>
 8000d0e:	d051      	beq.n	8000db4 <__udivmoddi4+0x294>
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d069      	beq.n	8000de8 <__udivmoddi4+0x2c8>
 8000d14:	ebb1 050a 	subs.w	r5, r1, sl
 8000d18:	eb64 0403 	sbc.w	r4, r4, r3
 8000d1c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d20:	40fd      	lsrs	r5, r7
 8000d22:	40fc      	lsrs	r4, r7
 8000d24:	ea4c 0505 	orr.w	r5, ip, r5
 8000d28:	e9c6 5400 	strd	r5, r4, [r6]
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f703 	lsr.w	r7, r0, r3
 8000d38:	4095      	lsls	r5, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d46:	4338      	orrs	r0, r7
 8000d48:	0c01      	lsrs	r1, r0, #16
 8000d4a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4e:	fa1f f885 	uxth.w	r8, r5
 8000d52:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb07 f308 	mul.w	r3, r7, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	fa04 f402 	lsl.w	r4, r4, r2
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x256>
 8000d66:	1869      	adds	r1, r5, r1
 8000d68:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d6c:	d22f      	bcs.n	8000dce <__udivmoddi4+0x2ae>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d92d      	bls.n	8000dce <__udivmoddi4+0x2ae>
 8000d72:	3f02      	subs	r7, #2
 8000d74:	4429      	add	r1, r5
 8000d76:	1acb      	subs	r3, r1, r3
 8000d78:	b281      	uxth	r1, r0
 8000d7a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb00 f308 	mul.w	r3, r0, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x27e>
 8000d8e:	1869      	adds	r1, r5, r1
 8000d90:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d94:	d217      	bcs.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d915      	bls.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4429      	add	r1, r5
 8000d9e:	1ac9      	subs	r1, r1, r3
 8000da0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da4:	e73b      	b.n	8000c1e <__udivmoddi4+0xfe>
 8000da6:	4637      	mov	r7, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e709      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000dac:	4607      	mov	r7, r0
 8000dae:	e6e7      	b.n	8000b80 <__udivmoddi4+0x60>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x8c>
 8000db4:	4541      	cmp	r1, r8
 8000db6:	d2ab      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000db8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dbc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	e7a4      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc6:	4660      	mov	r0, ip
 8000dc8:	e7e9      	b.n	8000d9e <__udivmoddi4+0x27e>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	e795      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dce:	4667      	mov	r7, ip
 8000dd0:	e7d1      	b.n	8000d76 <__udivmoddi4+0x256>
 8000dd2:	4681      	mov	r9, r0
 8000dd4:	e77c      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	442c      	add	r4, r5
 8000dda:	e747      	b.n	8000c6c <__udivmoddi4+0x14c>
 8000ddc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de0:	442b      	add	r3, r5
 8000de2:	e72f      	b.n	8000c44 <__udivmoddi4+0x124>
 8000de4:	4638      	mov	r0, r7
 8000de6:	e708      	b.n	8000bfa <__udivmoddi4+0xda>
 8000de8:	4637      	mov	r7, r6
 8000dea:	e6e9      	b.n	8000bc0 <__udivmoddi4+0xa0>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <handControl_Init>:
int handElapsedPulses;

uint32_t delayTick001;

void handControl_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&hand);
 8000df4:	4819      	ldr	r0, [pc, #100]	; (8000e5c <handControl_Init+0x6c>)
 8000df6:	f003 f9ba 	bl	800416e <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(handEn_GPIO_Port, handEn_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e00:	4817      	ldr	r0, [pc, #92]	; (8000e60 <handControl_Init+0x70>)
 8000e02:	f002 fd0d 	bl	8003820 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(gripper_GPIO_Port, gripper_Pin, GRIPPER_OPEN);	//mở gripper
 8000e06:	2201      	movs	r2, #1
 8000e08:	2110      	movs	r1, #16
 8000e0a:	4816      	ldr	r0, [pc, #88]	; (8000e64 <handControl_Init+0x74>)
 8000e0c:	f002 fd08 	bl	8003820 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(door_GPIO_Port, door_Pin, DOOR_CLOSE);			//đóng cửa
 8000e10:	2201      	movs	r2, #1
 8000e12:	2120      	movs	r1, #32
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <handControl_Init+0x74>)
 8000e16:	f002 fd03 	bl	8003820 <HAL_GPIO_WritePin>
	  while(HAL_GPIO_ReadPin(switchIn_GPIO_Port, switchIn_Pin) == GPIO_PIN_SET)
 8000e1a:	e00a      	b.n	8000e32 <handControl_Init+0x42>
	  {
		HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, HAND_DIR_IN);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2104      	movs	r1, #4
 8000e20:	4811      	ldr	r0, [pc, #68]	; (8000e68 <handControl_Init+0x78>)
 8000e22:	f002 fcfd 	bl	8003820 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2c:	480f      	ldr	r0, [pc, #60]	; (8000e6c <handControl_Init+0x7c>)
 8000e2e:	f002 fcf7 	bl	8003820 <HAL_GPIO_WritePin>
	  while(HAL_GPIO_ReadPin(switchIn_GPIO_Port, switchIn_Pin) == GPIO_PIN_SET)
 8000e32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e36:	480b      	ldr	r0, [pc, #44]	; (8000e64 <handControl_Init+0x74>)
 8000e38:	f002 fcda 	bl	80037f0 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d0ec      	beq.n	8000e1c <handControl_Init+0x2c>
	  }
	  HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2104      	movs	r1, #4
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <handControl_Init+0x78>)
 8000e48:	f002 fcea 	bl	8003820 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_SET);	//tắt động cơ
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <handControl_Init+0x7c>)
 8000e54:	f002 fce4 	bl	8003820 <HAL_GPIO_WritePin>

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000204 	.word	0x20000204
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40020800 	.word	0x40020800
 8000e68:	40020c00 	.word	0x40020c00
 8000e6c:	40020000 	.word	0x40020000

08000e70 <HAL_TIM_PeriodElapsedCallback>:
	handEn = 1;
	handStatus = _handStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	if(htim->Instance == hand.Instance)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d173      	bne.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0xfc>
	{
		delayTick001++;
 8000e84:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	4a3b      	ldr	r2, [pc, #236]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e8c:	6013      	str	r3, [r2, #0]
		if(handEn == 1)
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d16a      	bne.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0xfc>
		{
			if(handStatus == HAND_STATUS_PUT)
 8000e96:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d131      	bne.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x92>
			{
				if(HAL_GPIO_ReadPin(switchOut_GPIO_Port, switchOut_Pin) == GPIO_PIN_RESET)	//nếu chạm limSwit ngoài
 8000e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea2:	4838      	ldr	r0, [pc, #224]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ea4:	f002 fca4 	bl	80037f0 <HAL_GPIO_ReadPin>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d113      	bne.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x66>
				{
					handEn = 0;
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_SET);	//tắt motor
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eba:	4833      	ldr	r0, [pc, #204]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ebc:	f002 fcb0 	bl	8003820 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(gripper_GPIO_Port, gripper_Pin, GRIPPER_OPEN);	//mở gripper
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	4831      	ldr	r0, [pc, #196]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ec6:	f002 fcab 	bl	8003820 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(door_GPIO_Port, door_Pin, DOOR_OPEN);				//mở cửa
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2120      	movs	r1, #32
 8000ece:	482f      	ldr	r0, [pc, #188]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ed0:	f002 fca6 	bl	8003820 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(door_GPIO_Port, door_Pin, DOOR_OPEN);				//mở cửa
				}
			}
		}
	}
}
 8000ed4:	e04a      	b.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0xfc>
					HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, GPIO_PIN_RESET);	//xoay ra
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2104      	movs	r1, #4
 8000eda:	482d      	ldr	r0, [pc, #180]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000edc:	f002 fca0 	bl	8003820 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_RESET);	//bật motor
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee6:	4828      	ldr	r0, [pc, #160]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ee8:	f002 fc9a 	bl	8003820 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(gripper_GPIO_Port, gripper_Pin, GPIO_PIN_RESET);	//đóng gripper
 8000eec:	2200      	movs	r2, #0
 8000eee:	2110      	movs	r1, #16
 8000ef0:	4826      	ldr	r0, [pc, #152]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ef2:	f002 fc95 	bl	8003820 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(door_GPIO_Port, door_Pin, DOOR_OPEN);				//mở cửa
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2120      	movs	r1, #32
 8000efa:	4824      	ldr	r0, [pc, #144]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000efc:	f002 fc90 	bl	8003820 <HAL_GPIO_WritePin>
}
 8000f00:	e034      	b.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0xfc>
			else if(handStatus == HAND_STATUS_WAIT)
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d130      	bne.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0xfc>
				if(HAL_GPIO_ReadPin(switchIn_GPIO_Port, switchIn_Pin) == GPIO_PIN_RESET)	//nếu chạm limSwit trong
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0e:	481f      	ldr	r0, [pc, #124]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f10:	f002 fc6e 	bl	80037f0 <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d113      	bne.n	8000f42 <HAL_TIM_PeriodElapsedCallback+0xd2>
					handEn = 0;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_SET);	//tắt motor
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	4818      	ldr	r0, [pc, #96]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f28:	f002 fc7a 	bl	8003820 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(gripper_GPIO_Port, gripper_Pin, GRIPPER_OPEN);	//mở gripper
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2110      	movs	r1, #16
 8000f30:	4816      	ldr	r0, [pc, #88]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f32:	f002 fc75 	bl	8003820 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(door_GPIO_Port, door_Pin, DOOR_CLOSE);			//đóng cửa
 8000f36:	2201      	movs	r2, #1
 8000f38:	2120      	movs	r1, #32
 8000f3a:	4814      	ldr	r0, [pc, #80]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f3c:	f002 fc70 	bl	8003820 <HAL_GPIO_WritePin>
}
 8000f40:	e014      	b.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0xfc>
					HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, GPIO_PIN_SET);	//xoay vào
 8000f42:	2201      	movs	r2, #1
 8000f44:	2104      	movs	r1, #4
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f48:	f002 fc6a 	bl	8003820 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_RESET);	//bật motor
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f54:	f002 fc64 	bl	8003820 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(gripper_GPIO_Port, gripper_Pin, GRIPPER_OPEN);	//mở gripper
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f5e:	f002 fc5f 	bl	8003820 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(door_GPIO_Port, door_Pin, DOOR_OPEN);				//mở cửa
 8000f62:	2200      	movs	r2, #0
 8000f64:	2120      	movs	r1, #32
 8000f66:	4809      	ldr	r0, [pc, #36]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f68:	f002 fc5a 	bl	8003820 <HAL_GPIO_WritePin>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000204 	.word	0x20000204
 8000f78:	20000344 	.word	0x20000344
 8000f7c:	20000440 	.word	0x20000440
 8000f80:	20000424 	.word	0x20000424
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020c00 	.word	0x40020c00

08000f94 <HAL_UART_TxCpltCallback>:
void wait4CompassRx(void);
void compassDeInit(void);
void compassInit(void);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_UART_TxCpltCallback+0x28>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d102      	bne.n	8000fae <HAL_UART_TxCpltCallback+0x1a>
	{
		compassTxCplt = 1;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_UART_TxCpltCallback+0x2c>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
	}
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	200003e0 	.word	0x200003e0
 8000fc0:	20000431 	.word	0x20000431

08000fc4 <peripheralUART_Init>:

void peripheralUART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4905      	ldr	r1, [pc, #20]	; (8000fe0 <peripheralUART_Init+0x1c>)
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <peripheralUART_Init+0x20>)
 8000fce:	f004 f897 	bl	8005100 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	4904      	ldr	r1, [pc, #16]	; (8000fe8 <peripheralUART_Init+0x24>)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <peripheralUART_Init+0x28>)
 8000fd8:	f004 f892 	bl	8005100 <HAL_UART_Receive_DMA>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200003c8 	.word	0x200003c8
 8000fe4:	200002e0 	.word	0x200002e0
 8000fe8:	200001cc 	.word	0x200001cc
 8000fec:	200003e0 	.word	0x200003e0

08000ff0 <PS2DMA_ProcessingData>:
	PS2RxCplt = 0;
}

//put in function handles DMA stream global interrupt of brainDMA Rx in stm32f4xx_it.c
void PS2DMA_ProcessingData(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	if(PS2CheckbyteCount == 4 )
 8000ff4:	4b97      	ldr	r3, [pc, #604]	; (8001254 <PS2DMA_ProcessingData+0x264>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	f040 8114 	bne.w	8001226 <PS2DMA_ProcessingData+0x236>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8000ffe:	4b96      	ldr	r3, [pc, #600]	; (8001258 <PS2DMA_ProcessingData+0x268>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	b2d1      	uxtb	r1, r2
 8001006:	4a94      	ldr	r2, [pc, #592]	; (8001258 <PS2DMA_ProcessingData+0x268>)
 8001008:	7011      	strb	r1, [r2, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4b93      	ldr	r3, [pc, #588]	; (800125c <PS2DMA_ProcessingData+0x26c>)
 800100e:	7819      	ldrb	r1, [r3, #0]
 8001010:	4b93      	ldr	r3, [pc, #588]	; (8001260 <PS2DMA_ProcessingData+0x270>)
 8001012:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001014:	4b90      	ldr	r3, [pc, #576]	; (8001258 <PS2DMA_ProcessingData+0x268>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b05      	cmp	r3, #5
 800101a:	f240 8104 	bls.w	8001226 <PS2DMA_ProcessingData+0x236>
		{
			PS2DataIndex = 0;
 800101e:	4b8e      	ldr	r3, [pc, #568]	; (8001258 <PS2DMA_ProcessingData+0x268>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001024:	4b8b      	ldr	r3, [pc, #556]	; (8001254 <PS2DMA_ProcessingData+0x264>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 800102a:	4b8d      	ldr	r3, [pc, #564]	; (8001260 <PS2DMA_ProcessingData+0x270>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	4b8b      	ldr	r3, [pc, #556]	; (8001260 <PS2DMA_ProcessingData+0x270>)
 8001034:	785b      	ldrb	r3, [r3, #1]
 8001036:	b21b      	sxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b21a      	sxth	r2, r3
 800103c:	4b89      	ldr	r3, [pc, #548]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 800103e:	801a      	strh	r2, [r3, #0]
			joyRigtHor = PS2Data[2] - joyRigtMidHor;
 8001040:	4b87      	ldr	r3, [pc, #540]	; (8001260 <PS2DMA_ProcessingData+0x270>)
 8001042:	789b      	ldrb	r3, [r3, #2]
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b88      	ldr	r3, [pc, #544]	; (8001268 <PS2DMA_ProcessingData+0x278>)
 8001048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104c:	b29b      	uxth	r3, r3
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	b29b      	uxth	r3, r3
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b85      	ldr	r3, [pc, #532]	; (800126c <PS2DMA_ProcessingData+0x27c>)
 8001056:	801a      	strh	r2, [r3, #0]
			joyRigtVer = PS2Data[3] - joyRigtMidVer;
 8001058:	4b81      	ldr	r3, [pc, #516]	; (8001260 <PS2DMA_ProcessingData+0x270>)
 800105a:	78db      	ldrb	r3, [r3, #3]
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b84      	ldr	r3, [pc, #528]	; (8001270 <PS2DMA_ProcessingData+0x280>)
 8001060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001064:	b29b      	uxth	r3, r3
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	b29b      	uxth	r3, r3
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b81      	ldr	r3, [pc, #516]	; (8001274 <PS2DMA_ProcessingData+0x284>)
 800106e:	801a      	strh	r2, [r3, #0]
			joyLeftHor = PS2Data[4] - joyLeftMidHor;
 8001070:	4b7b      	ldr	r3, [pc, #492]	; (8001260 <PS2DMA_ProcessingData+0x270>)
 8001072:	791b      	ldrb	r3, [r3, #4]
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b80      	ldr	r3, [pc, #512]	; (8001278 <PS2DMA_ProcessingData+0x288>)
 8001078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107c:	b29b      	uxth	r3, r3
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	b21a      	sxth	r2, r3
 8001084:	4b7d      	ldr	r3, [pc, #500]	; (800127c <PS2DMA_ProcessingData+0x28c>)
 8001086:	801a      	strh	r2, [r3, #0]
			joyLeftVer = PS2Data[5] - joyLeftMidVer;
 8001088:	4b75      	ldr	r3, [pc, #468]	; (8001260 <PS2DMA_ProcessingData+0x270>)
 800108a:	795b      	ldrb	r3, [r3, #5]
 800108c:	b29a      	uxth	r2, r3
 800108e:	4b7c      	ldr	r3, [pc, #496]	; (8001280 <PS2DMA_ProcessingData+0x290>)
 8001090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001094:	b29b      	uxth	r3, r3
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	b21a      	sxth	r2, r3
 800109c:	4b79      	ldr	r3, [pc, #484]	; (8001284 <PS2DMA_ProcessingData+0x294>)
 800109e:	801a      	strh	r2, [r3, #0]
			btn_leftLeft = (PS2Button >> 15) & 1U;
 80010a0:	4b70      	ldr	r3, [pc, #448]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 80010a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a6:	13db      	asrs	r3, r3, #15
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b75      	ldr	r3, [pc, #468]	; (8001288 <PS2DMA_ProcessingData+0x298>)
 80010b4:	701a      	strb	r2, [r3, #0]
			btn_leftDown = (PS2Button >> 14) & 1U;
 80010b6:	4b6b      	ldr	r3, [pc, #428]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	139b      	asrs	r3, r3, #14
 80010be:	b21b      	sxth	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b70      	ldr	r3, [pc, #448]	; (800128c <PS2DMA_ProcessingData+0x29c>)
 80010ca:	701a      	strb	r2, [r3, #0]
			btn_leftRigt = (PS2Button >> 13) & 1U;
 80010cc:	4b65      	ldr	r3, [pc, #404]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 80010ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d2:	135b      	asrs	r3, r3, #13
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b6c      	ldr	r3, [pc, #432]	; (8001290 <PS2DMA_ProcessingData+0x2a0>)
 80010e0:	701a      	strb	r2, [r3, #0]
			btn_leftUp   = (PS2Button >> 12) & 1U;
 80010e2:	4b60      	ldr	r3, [pc, #384]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	131b      	asrs	r3, r3, #12
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b67      	ldr	r3, [pc, #412]	; (8001294 <PS2DMA_ProcessingData+0x2a4>)
 80010f6:	701a      	strb	r2, [r3, #0]
			btn_Sta		 = (PS2Button >> 11) & 1U;
 80010f8:	4b5a      	ldr	r3, [pc, #360]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 80010fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fe:	12db      	asrs	r3, r3, #11
 8001100:	b21b      	sxth	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <PS2DMA_ProcessingData+0x2a8>)
 800110c:	701a      	strb	r2, [r3, #0]
			btn_joyRigt  = (PS2Button >> 10) & 1U;
 800110e:	4b55      	ldr	r3, [pc, #340]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	129b      	asrs	r3, r3, #10
 8001116:	b21b      	sxth	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b5e      	ldr	r3, [pc, #376]	; (800129c <PS2DMA_ProcessingData+0x2ac>)
 8001122:	701a      	strb	r2, [r3, #0]
			btn_joyLeft  = (PS2Button >>  9) & 1U;
 8001124:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 8001126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112a:	125b      	asrs	r3, r3, #9
 800112c:	b21b      	sxth	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b5a      	ldr	r3, [pc, #360]	; (80012a0 <PS2DMA_ProcessingData+0x2b0>)
 8001138:	701a      	strb	r2, [r3, #0]
			btn_Sel  	 = (PS2Button >>  8) & 1U;
 800113a:	4b4a      	ldr	r3, [pc, #296]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 800113c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001140:	121b      	asrs	r3, r3, #8
 8001142:	b21b      	sxth	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b55      	ldr	r3, [pc, #340]	; (80012a4 <PS2DMA_ProcessingData+0x2b4>)
 800114e:	701a      	strb	r2, [r3, #0]
			btn_A  		 = (PS2Button >>  7) & 1U;
 8001150:	4b44      	ldr	r3, [pc, #272]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 8001152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001156:	11db      	asrs	r3, r3, #7
 8001158:	b21b      	sxth	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <PS2DMA_ProcessingData+0x2b8>)
 8001164:	701a      	strb	r2, [r3, #0]
			btn_X  		 = (PS2Button >>  6) & 1U;
 8001166:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	119b      	asrs	r3, r3, #6
 800116e:	b21b      	sxth	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <PS2DMA_ProcessingData+0x2bc>)
 800117a:	701a      	strb	r2, [r3, #0]
			btn_D  		 = (PS2Button >>  5) & 1U;
 800117c:	4b39      	ldr	r3, [pc, #228]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 800117e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001182:	115b      	asrs	r3, r3, #5
 8001184:	b21b      	sxth	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <PS2DMA_ProcessingData+0x2c0>)
 8001190:	701a      	strb	r2, [r3, #0]
			btn_W  		 = (PS2Button >>  4) & 1U;
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	111b      	asrs	r3, r3, #4
 800119a:	b21b      	sxth	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b43      	ldr	r3, [pc, #268]	; (80012b4 <PS2DMA_ProcessingData+0x2c4>)
 80011a6:	701a      	strb	r2, [r3, #0]
			btn_E  		 = (PS2Button >>  3) & 1U;
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 80011aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ae:	10db      	asrs	r3, r3, #3
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <PS2DMA_ProcessingData+0x2c8>)
 80011bc:	701a      	strb	r2, [r3, #0]
			btn_Q  		 = (PS2Button >>  2) & 1U;
 80011be:	4b29      	ldr	r3, [pc, #164]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 80011c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c4:	109b      	asrs	r3, r3, #2
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <PS2DMA_ProcessingData+0x2cc>)
 80011d2:	701a      	strb	r2, [r3, #0]
			btn_C  		 = (PS2Button >>  1) & 1U;
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 80011d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011da:	105b      	asrs	r3, r3, #1
 80011dc:	b21b      	sxth	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <PS2DMA_ProcessingData+0x2d0>)
 80011e8:	701a      	strb	r2, [r3, #0]
			btn_Z  		 = (PS2Button >>  0) & 1U;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <PS2DMA_ProcessingData+0x274>)
 80011ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <PS2DMA_ProcessingData+0x2d4>)
 80011fa:	701a      	strb	r2, [r3, #0]
			if(!btn_Sta)		//nếu nút W được nhấn
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <PS2DMA_ProcessingData+0x2a8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d106      	bne.n	8001212 <PS2DMA_ProcessingData+0x222>
			{
				handEn = 1;
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <PS2DMA_ProcessingData+0x2d8>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]
				handStatus = HAND_STATUS_PUT;
 800120a:	4b30      	ldr	r3, [pc, #192]	; (80012cc <PS2DMA_ProcessingData+0x2dc>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e009      	b.n	8001226 <PS2DMA_ProcessingData+0x236>
			}
			else if(!btn_Sel)	//nếu nút X được nhấn
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <PS2DMA_ProcessingData+0x2b4>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d105      	bne.n	8001226 <PS2DMA_ProcessingData+0x236>
			{
				handEn = 1;
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <PS2DMA_ProcessingData+0x2d8>)
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]
				handStatus = HAND_STATUS_WAIT;
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <PS2DMA_ProcessingData+0x2dc>)
 8001222:	2202      	movs	r2, #2
 8001224:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <PS2DMA_ProcessingData+0x26c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2baa      	cmp	r3, #170	; 0xaa
 800122c:	d106      	bne.n	800123c <PS2DMA_ProcessingData+0x24c>
		PS2CheckbyteCount++;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <PS2DMA_ProcessingData+0x264>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <PS2DMA_ProcessingData+0x264>)
 8001238:	701a      	strb	r2, [r3, #0]
	else
		if(PS2CheckbyteCount != 4)
			PS2CheckbyteCount = 0;
}
 800123a:	e006      	b.n	800124a <PS2DMA_ProcessingData+0x25a>
		if(PS2CheckbyteCount != 4)
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <PS2DMA_ProcessingData+0x264>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b04      	cmp	r3, #4
 8001242:	d002      	beq.n	800124a <PS2DMA_ProcessingData+0x25a>
			PS2CheckbyteCount = 0;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <PS2DMA_ProcessingData+0x264>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	200000d4 	.word	0x200000d4
 8001258:	2000025d 	.word	0x2000025d
 800125c:	200003c8 	.word	0x200003c8
 8001260:	200001c4 	.word	0x200001c4
 8001264:	20000330 	.word	0x20000330
 8001268:	20000006 	.word	0x20000006
 800126c:	200001b8 	.word	0x200001b8
 8001270:	20000004 	.word	0x20000004
 8001274:	20000360 	.word	0x20000360
 8001278:	20000002 	.word	0x20000002
 800127c:	20000434 	.word	0x20000434
 8001280:	20000000 	.word	0x20000000
 8001284:	2000044a 	.word	0x2000044a
 8001288:	200001ac 	.word	0x200001ac
 800128c:	20000349 	.word	0x20000349
 8001290:	20000348 	.word	0x20000348
 8001294:	20000420 	.word	0x20000420
 8001298:	20000362 	.word	0x20000362
 800129c:	200003b5 	.word	0x200003b5
 80012a0:	20000436 	.word	0x20000436
 80012a4:	20000244 	.word	0x20000244
 80012a8:	20000359 	.word	0x20000359
 80012ac:	200000d8 	.word	0x200000d8
 80012b0:	200001ad 	.word	0x200001ad
 80012b4:	20000247 	.word	0x20000247
 80012b8:	200001ae 	.word	0x200001ae
 80012bc:	200003b4 	.word	0x200003b4
 80012c0:	20000448 	.word	0x20000448
 80012c4:	20000430 	.word	0x20000430
 80012c8:	20000440 	.word	0x20000440
 80012cc:	20000424 	.word	0x20000424

080012d0 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <compassReset+0x24>)
 80012d6:	2261      	movs	r2, #97	; 0x61
 80012d8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80012da:	2201      	movs	r2, #1
 80012dc:	4905      	ldr	r1, [pc, #20]	; (80012f4 <compassReset+0x24>)
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <compassReset+0x28>)
 80012e0:	f003 fec9 	bl	8005076 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 80012e4:	f000 f830 	bl	8001348 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <compassReset+0x24>)
 80012ea:	227a      	movs	r2, #122	; 0x7a
 80012ec:	701a      	strb	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008
 80012f8:	200003e0 	.word	0x200003e0

080012fc <compassRequest>:
void compassRequest(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	compassTxPacket[0]='z';
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <compassRequest+0x18>)
 8001302:	227a      	movs	r2, #122	; 0x7a
 8001304:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 8001306:	2201      	movs	r2, #1
 8001308:	4902      	ldr	r1, [pc, #8]	; (8001314 <compassRequest+0x18>)
 800130a:	4803      	ldr	r0, [pc, #12]	; (8001318 <compassRequest+0x1c>)
 800130c:	f003 feb3 	bl	8005076 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000008 	.word	0x20000008
 8001318:	200003e0 	.word	0x200003e0

0800131c <compassDecode>:
//	HAL_UART_Receive(&compass, compassRxPacket, 2, 50);

	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}
void compassDecode(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <compassDecode+0x24>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <compassDecode+0x24>)
 800132a:	785b      	ldrb	r3, [r3, #1]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21a      	sxth	r2, r3
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <compassDecode+0x28>)
 8001334:	801a      	strh	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	200001cc 	.word	0x200001cc
 8001344:	20000248 	.word	0x20000248

08001348 <wait4CompassTx>:
void wait4CompassTx(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 800134c:	e004      	b.n	8001358 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <wait4CompassTx+0x28>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <wait4CompassTx+0x28>)
 8001356:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <wait4CompassTx+0x2c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f6      	beq.n	800134e <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <wait4CompassTx+0x2c>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	20000450 	.word	0x20000450
 8001374:	20000431 	.word	0x20000431

08001378 <peripheralPWM_Init>:
uint8_t motor3Dir;
uint8_t motor4Dir;


void peripheralPWM_Init()
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&motor1, motor1_channel);
 800137c:	2100      	movs	r1, #0
 800137e:	4808      	ldr	r0, [pc, #32]	; (80013a0 <peripheralPWM_Init+0x28>)
 8001380:	f002 ff4e 	bl	8004220 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor2, motor2_channel);
 8001384:	2104      	movs	r1, #4
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <peripheralPWM_Init+0x28>)
 8001388:	f002 ff4a 	bl	8004220 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor3, motor3_channel);
 800138c:	2108      	movs	r1, #8
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <peripheralPWM_Init+0x2c>)
 8001390:	f002 ff46 	bl	8004220 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor4, motor4_channel);	
 8001394:	210c      	movs	r1, #12
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <peripheralPWM_Init+0x2c>)
 8001398:	f002 ff42 	bl	8004220 <HAL_TIM_PWM_Start>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000158 	.word	0x20000158
 80013a4:	20000370 	.word	0x20000370

080013a8 <controlMotor1>:

void controlMotor1(int _speed)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db05      	blt.n	80013c2 <controlMotor1+0x1a>
	{
		HAL_GPIO_WritePin(motor1Dir_GPIO_Port, motor1Dir_Pin, CCW);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2101      	movs	r1, #1
 80013ba:	481b      	ldr	r0, [pc, #108]	; (8001428 <controlMotor1+0x80>)
 80013bc:	f002 fa30 	bl	8003820 <HAL_GPIO_WritePin>
 80013c0:	e004      	b.n	80013cc <controlMotor1+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor1Dir_GPIO_Port, motor1Dir_Pin, FCW);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	4818      	ldr	r0, [pc, #96]	; (8001428 <controlMotor1+0x80>)
 80013c8:	f002 fa2a 	bl	8003820 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	dc05      	bgt.n	80013de <controlMotor1+0x36>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f113 0f03 	cmn.w	r3, #3
 80013d8:	db01      	blt.n	80013de <controlMotor1+0x36>
		_speed = 3;
 80013da:	2303      	movs	r3, #3
 80013dc:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2bfa      	cmp	r3, #250	; 0xfa
 80013e2:	dd01      	ble.n	80013e8 <controlMotor1+0x40>
	{
		_speed = 250;
 80013e4:	23fa      	movs	r3, #250	; 0xfa
 80013e6:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 80013ee:	da02      	bge.n	80013f6 <controlMotor1+0x4e>
	{
		_speed = -250;
 80013f0:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 80013f4:	607b      	str	r3, [r7, #4]
	}
	debugSpeed1 = abs(_speed);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bfb8      	it	lt
 80013fc:	425b      	neglt	r3, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f834 	bl	800046c <__aeabi_i2d>
 8001404:	4603      	mov	r3, r0
 8001406:	460c      	mov	r4, r1
 8001408:	4a08      	ldr	r2, [pc, #32]	; (800142c <controlMotor1+0x84>)
 800140a:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor1, motor1_channel, abs(_speed));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001414:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <controlMotor1+0x88>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bd90      	pop	{r4, r7, pc}
 8001426:	bf00      	nop
 8001428:	40020c00 	.word	0x40020c00
 800142c:	200001e8 	.word	0x200001e8
 8001430:	20000158 	.word	0x20000158

08001434 <controlMotor2>:
void controlMotor2(int _speed)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db05      	blt.n	800144e <controlMotor2+0x1a>
	{
		HAL_GPIO_WritePin(motor2Dir_GPIO_Port, motor2Dir_Pin, CCW);
 8001442:	2201      	movs	r2, #1
 8001444:	2102      	movs	r1, #2
 8001446:	481b      	ldr	r0, [pc, #108]	; (80014b4 <controlMotor2+0x80>)
 8001448:	f002 f9ea 	bl	8003820 <HAL_GPIO_WritePin>
 800144c:	e004      	b.n	8001458 <controlMotor2+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor2Dir_GPIO_Port, motor2Dir_Pin, FCW);
 800144e:	2200      	movs	r2, #0
 8001450:	2102      	movs	r1, #2
 8001452:	4818      	ldr	r0, [pc, #96]	; (80014b4 <controlMotor2+0x80>)
 8001454:	f002 f9e4 	bl	8003820 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b03      	cmp	r3, #3
 800145c:	dc05      	bgt.n	800146a <controlMotor2+0x36>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f113 0f03 	cmn.w	r3, #3
 8001464:	db01      	blt.n	800146a <controlMotor2+0x36>
			_speed = 3;
 8001466:	2303      	movs	r3, #3
 8001468:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2bfa      	cmp	r3, #250	; 0xfa
 800146e:	dd01      	ble.n	8001474 <controlMotor2+0x40>
	{
		_speed = 250;
 8001470:	23fa      	movs	r3, #250	; 0xfa
 8001472:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 800147a:	da02      	bge.n	8001482 <controlMotor2+0x4e>
	{
		_speed = -250;
 800147c:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8001480:	607b      	str	r3, [r7, #4]
	}
	debugSpeed2 = abs(_speed);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	bfb8      	it	lt
 8001488:	425b      	neglt	r3, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ffee 	bl	800046c <__aeabi_i2d>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <controlMotor2+0x84>)
 8001496:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor2, motor2_channel, abs(_speed));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014a0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <controlMotor2+0x88>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	200000e0 	.word	0x200000e0
 80014bc:	20000158 	.word	0x20000158

080014c0 <controlMotor3>:
void controlMotor3(int _speed)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db05      	blt.n	80014da <controlMotor3+0x1a>
	{
		HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, CCW);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2108      	movs	r1, #8
 80014d2:	481b      	ldr	r0, [pc, #108]	; (8001540 <controlMotor3+0x80>)
 80014d4:	f002 f9a4 	bl	8003820 <HAL_GPIO_WritePin>
 80014d8:	e004      	b.n	80014e4 <controlMotor3+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, FCW);
 80014da:	2200      	movs	r2, #0
 80014dc:	2108      	movs	r1, #8
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <controlMotor3+0x80>)
 80014e0:	f002 f99e 	bl	8003820 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	dc05      	bgt.n	80014f6 <controlMotor3+0x36>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f113 0f03 	cmn.w	r3, #3
 80014f0:	db01      	blt.n	80014f6 <controlMotor3+0x36>
				_speed = 3;
 80014f2:	2303      	movs	r3, #3
 80014f4:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2bfa      	cmp	r3, #250	; 0xfa
 80014fa:	dd01      	ble.n	8001500 <controlMotor3+0x40>
	{
		_speed = 250;
 80014fc:	23fa      	movs	r3, #250	; 0xfa
 80014fe:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8001506:	da02      	bge.n	800150e <controlMotor3+0x4e>
	{
		_speed = -250;
 8001508:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 800150c:	607b      	str	r3, [r7, #4]
	}
	debugSpeed3 = abs(_speed);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	bfb8      	it	lt
 8001514:	425b      	neglt	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ffa8 	bl	800046c <__aeabi_i2d>
 800151c:	4603      	mov	r3, r0
 800151e:	460c      	mov	r4, r1
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <controlMotor3+0x84>)
 8001522:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor3, motor3_channel, abs(_speed));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800152c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <controlMotor3+0x88>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	bf00      	nop
 8001540:	40020c00 	.word	0x40020c00
 8001544:	200001d8 	.word	0x200001d8
 8001548:	20000370 	.word	0x20000370

0800154c <controlMotor4>:
void controlMotor4(int _speed)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db05      	blt.n	8001566 <controlMotor4+0x1a>
	{
		HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, CCW);
 800155a:	2201      	movs	r2, #1
 800155c:	2110      	movs	r1, #16
 800155e:	481b      	ldr	r0, [pc, #108]	; (80015cc <controlMotor4+0x80>)
 8001560:	f002 f95e 	bl	8003820 <HAL_GPIO_WritePin>
 8001564:	e004      	b.n	8001570 <controlMotor4+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, FCW);
 8001566:	2200      	movs	r2, #0
 8001568:	2110      	movs	r1, #16
 800156a:	4818      	ldr	r0, [pc, #96]	; (80015cc <controlMotor4+0x80>)
 800156c:	f002 f958 	bl	8003820 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b03      	cmp	r3, #3
 8001574:	dc05      	bgt.n	8001582 <controlMotor4+0x36>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f113 0f03 	cmn.w	r3, #3
 800157c:	db01      	blt.n	8001582 <controlMotor4+0x36>
		_speed = 3;
 800157e:	2303      	movs	r3, #3
 8001580:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2bfa      	cmp	r3, #250	; 0xfa
 8001586:	dd01      	ble.n	800158c <controlMotor4+0x40>
	{
		_speed = 250;
 8001588:	23fa      	movs	r3, #250	; 0xfa
 800158a:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8001592:	da02      	bge.n	800159a <controlMotor4+0x4e>
	{
		_speed = -250;
 8001594:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8001598:	607b      	str	r3, [r7, #4]
	}
	debugSpeed4 = abs(_speed);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	bfb8      	it	lt
 80015a0:	425b      	neglt	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff62 	bl	800046c <__aeabi_i2d>
 80015a8:	4603      	mov	r3, r0
 80015aa:	460c      	mov	r4, r1
 80015ac:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <controlMotor4+0x84>)
 80015ae:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor4, motor4_channel, abs(_speed));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015b8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <controlMotor4+0x88>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	200002c8 	.word	0x200002c8
 80015d4:	20000370 	.word	0x20000370

080015d8 <PIDyaw>:
double yawPID;
#define MAX_YAW_PID 100 // 50// 70 //85
#define MIN_YAW_PID -MAX_YAW_PID//-50//-70

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	yawError = -_yawSetpoint + _yawValue;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b4e      	ldr	r3, [pc, #312]	; (800172c <PIDyaw+0x154>)
 80015f2:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 80015f4:	4b4d      	ldr	r3, [pc, #308]	; (800172c <PIDyaw+0x154>)
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff36 	bl	800046c <__aeabi_i2d>
 8001600:	4603      	mov	r3, r0
 8001602:	460c      	mov	r4, r1
 8001604:	4a4a      	ldr	r2, [pc, #296]	; (8001730 <PIDyaw+0x158>)
 8001606:	e9c2 3400 	strd	r3, r4, [r2]
	yawD = yawError - yawPreError;
 800160a:	4b48      	ldr	r3, [pc, #288]	; (800172c <PIDyaw+0x154>)
 800160c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001610:	461a      	mov	r2, r3
 8001612:	4b48      	ldr	r3, [pc, #288]	; (8001734 <PIDyaw+0x15c>)
 8001614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff26 	bl	800046c <__aeabi_i2d>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	4a44      	ldr	r2, [pc, #272]	; (8001738 <PIDyaw+0x160>)
 8001626:	e9c2 3400 	strd	r3, r4, [r2]
	yawI = yawError + yawI;
 800162a:	4b40      	ldr	r3, [pc, #256]	; (800172c <PIDyaw+0x154>)
 800162c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff1b 	bl	800046c <__aeabi_i2d>
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <PIDyaw+0x164>)
 8001638:	e9d3 3400 	ldrd	r3, r4, [r3]
 800163c:	461a      	mov	r2, r3
 800163e:	4623      	mov	r3, r4
 8001640:	f7fe fdc8 	bl	80001d4 <__adddf3>
 8001644:	4603      	mov	r3, r0
 8001646:	460c      	mov	r4, r1
 8001648:	4a3c      	ldr	r2, [pc, #240]	; (800173c <PIDyaw+0x164>)
 800164a:	e9c2 3400 	strd	r3, r4, [r2]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <PIDyaw+0x168>)
 8001650:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001654:	4b36      	ldr	r3, [pc, #216]	; (8001730 <PIDyaw+0x158>)
 8001656:	e9d3 3400 	ldrd	r3, r4, [r3]
 800165a:	461a      	mov	r2, r3
 800165c:	4623      	mov	r3, r4
 800165e:	f7fe ff6f 	bl	8000540 <__aeabi_dmul>
 8001662:	4603      	mov	r3, r0
 8001664:	460c      	mov	r4, r1
 8001666:	461d      	mov	r5, r3
 8001668:	4626      	mov	r6, r4
 800166a:	4b36      	ldr	r3, [pc, #216]	; (8001744 <PIDyaw+0x16c>)
 800166c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001670:	4b31      	ldr	r3, [pc, #196]	; (8001738 <PIDyaw+0x160>)
 8001672:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001676:	461a      	mov	r2, r3
 8001678:	4623      	mov	r3, r4
 800167a:	f7fe ff61 	bl	8000540 <__aeabi_dmul>
 800167e:	4603      	mov	r3, r0
 8001680:	460c      	mov	r4, r1
 8001682:	461a      	mov	r2, r3
 8001684:	4623      	mov	r3, r4
 8001686:	4628      	mov	r0, r5
 8001688:	4631      	mov	r1, r6
 800168a:	f7fe fda3 	bl	80001d4 <__adddf3>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	461d      	mov	r5, r3
 8001694:	4626      	mov	r6, r4
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <PIDyaw+0x170>)
 8001698:	e9d3 0100 	ldrd	r0, r1, [r3]
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <PIDyaw+0x164>)
 800169e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4623      	mov	r3, r4
 80016a6:	f7fe ff4b 	bl	8000540 <__aeabi_dmul>
 80016aa:	4603      	mov	r3, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	461a      	mov	r2, r3
 80016b0:	4623      	mov	r3, r4
 80016b2:	4628      	mov	r0, r5
 80016b4:	4631      	mov	r1, r6
 80016b6:	f7fe fd8d 	bl	80001d4 <__adddf3>
 80016ba:	4603      	mov	r3, r0
 80016bc:	460c      	mov	r4, r1
 80016be:	4a23      	ldr	r2, [pc, #140]	; (800174c <PIDyaw+0x174>)
 80016c0:	e9c2 3400 	strd	r3, r4, [r2]
	if(yawPID > MAX_YAW_PID)
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <PIDyaw+0x174>)
 80016c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <PIDyaw+0x178>)
 80016d0:	f7ff f9c6 	bl	8000a60 <__aeabi_dcmpgt>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <PIDyaw+0x10e>
	{
		yawPID = MAX_YAW_PID;
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <PIDyaw+0x174>)
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	4c1b      	ldr	r4, [pc, #108]	; (8001750 <PIDyaw+0x178>)
 80016e2:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <PIDyaw+0x174>)
 80016e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <PIDyaw+0x17c>)
 80016f2:	f7ff f997 	bl	8000a24 <__aeabi_dcmplt>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <PIDyaw+0x130>
	{
		yawPID = MIN_YAW_PID;
 80016fc:	4a13      	ldr	r2, [pc, #76]	; (800174c <PIDyaw+0x174>)
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	4c14      	ldr	r4, [pc, #80]	; (8001754 <PIDyaw+0x17c>)
 8001704:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <PIDyaw+0x154>)
 800170a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <PIDyaw+0x15c>)
 8001710:	801a      	strh	r2, [r3, #0]
	return yawPID;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <PIDyaw+0x174>)
 8001714:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001718:	ec44 3b17 	vmov	d7, r3, r4
}
 800171c:	eeb0 0a47 	vmov.f32	s0, s14
 8001720:	eef0 0a67 	vmov.f32	s1, s15
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800172a:	bf00      	nop
 800172c:	20000200 	.word	0x20000200
 8001730:	20000250 	.word	0x20000250
 8001734:	2000019a 	.word	0x2000019a
 8001738:	20000150 	.word	0x20000150
 800173c:	200001f8 	.word	0x200001f8
 8001740:	20000028 	.word	0x20000028
 8001744:	20000030 	.word	0x20000030
 8001748:	20000038 	.word	0x20000038
 800174c:	200003c0 	.word	0x200003c0
 8001750:	40590000 	.word	0x40590000
 8001754:	c0590000 	.word	0xc0590000

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800175e:	f001 f999 	bl	8002a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001762:	f000 fbb5 	bl	8001ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001766:	f000 fe4d 	bl	8002404 <MX_GPIO_Init>
  MX_DMA_Init();
 800176a:	f000 fe15 	bl	8002398 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800176e:	f000 fde9 	bl	8002344 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8001772:	f000 fdbd 	bl	80022f0 <MX_UART4_Init>
  MX_TIM1_Init();
 8001776:	f000 fc15 	bl	8001fa4 <MX_TIM1_Init>
  MX_TIM8_Init();
 800177a:	f000 fd0d 	bl	8002198 <MX_TIM8_Init>
  MX_TIM5_Init();
 800177e:	f000 fcbd 	bl	80020fc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8001782:	f7ff fc1f 	bl	8000fc4 <peripheralUART_Init>
  peripheralPWM_Init();
 8001786:	f7ff fdf7 	bl	8001378 <peripheralPWM_Init>
  handControl_Init();
 800178a:	f7ff fb31 	bl	8000df0 <handControl_Init>
  compassReset();
 800178e:	f7ff fd9f 	bl	80012d0 <compassReset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//							  testPWM();
	if(joyRigtHor == 0)
 8001792:	4bcd      	ldr	r3, [pc, #820]	; (8001ac8 <main+0x370>)
 8001794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f040 81cd 	bne.w	8001b38 <main+0x3e0>
	{

		PIDyaw(compassData, rotateAngle);
 800179e:	4bcb      	ldr	r3, [pc, #812]	; (8001acc <main+0x374>)
 80017a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a4:	461d      	mov	r5, r3
 80017a6:	4bca      	ldr	r3, [pc, #808]	; (8001ad0 <main+0x378>)
 80017a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017ac:	4618      	mov	r0, r3
 80017ae:	4621      	mov	r1, r4
 80017b0:	f7ff f976 	bl	8000aa0 <__aeabi_d2iz>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4619      	mov	r1, r3
 80017b8:	4628      	mov	r0, r5
 80017ba:	f7ff ff0d 	bl	80015d8 <PIDyaw>
		_dir = atan2(joyLeftHor, -joyLeftVer);
 80017be:	4bc5      	ldr	r3, [pc, #788]	; (8001ad4 <main+0x37c>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe51 	bl	800046c <__aeabi_i2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	4bc2      	ldr	r3, [pc, #776]	; (8001ad8 <main+0x380>)
 80017d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d4:	425b      	negs	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fe48 	bl	800046c <__aeabi_i2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	ec43 2b11 	vmov	d1, r2, r3
 80017e4:	ec45 4b10 	vmov	d0, r4, r5
 80017e8:	f004 fbde 	bl	8005fa8 <atan2>
 80017ec:	eeb0 7a40 	vmov.f32	s14, s0
 80017f0:	eef0 7a60 	vmov.f32	s15, s1
 80017f4:	4bb9      	ldr	r3, [pc, #740]	; (8001adc <main+0x384>)
 80017f6:	ed83 7b00 	vstr	d7, [r3]
		_controlSpeed = sqrt(joyLeftHor*joyLeftHor + joyLeftVer*joyLeftVer);
 80017fa:	4bb6      	ldr	r3, [pc, #728]	; (8001ad4 <main+0x37c>)
 80017fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001800:	461a      	mov	r2, r3
 8001802:	4bb4      	ldr	r3, [pc, #720]	; (8001ad4 <main+0x37c>)
 8001804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001808:	fb03 f202 	mul.w	r2, r3, r2
 800180c:	4bb2      	ldr	r3, [pc, #712]	; (8001ad8 <main+0x380>)
 800180e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001812:	4619      	mov	r1, r3
 8001814:	4bb0      	ldr	r3, [pc, #704]	; (8001ad8 <main+0x380>)
 8001816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181a:	fb03 f301 	mul.w	r3, r3, r1
 800181e:	4413      	add	r3, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe23 	bl	800046c <__aeabi_i2d>
 8001826:	4603      	mov	r3, r0
 8001828:	460c      	mov	r4, r1
 800182a:	ec44 3b10 	vmov	d0, r3, r4
 800182e:	f004 fbbd 	bl	8005fac <sqrt>
 8001832:	eeb0 7a40 	vmov.f32	s14, s0
 8001836:	eef0 7a60 	vmov.f32	s15, s1
 800183a:	4ba9      	ldr	r3, [pc, #676]	; (8001ae0 <main+0x388>)
 800183c:	ed83 7b00 	vstr	d7, [r3]
		_motor1Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 8001840:	4ba8      	ldr	r3, [pc, #672]	; (8001ae4 <main+0x38c>)
 8001842:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001846:	4ba8      	ldr	r3, [pc, #672]	; (8001ae8 <main+0x390>)
 8001848:	e9d3 3400 	ldrd	r3, r4, [r3]
 800184c:	461a      	mov	r2, r3
 800184e:	4623      	mov	r3, r4
 8001850:	f7fe fe76 	bl	8000540 <__aeabi_dmul>
 8001854:	4603      	mov	r3, r0
 8001856:	460c      	mov	r4, r1
 8001858:	461d      	mov	r5, r3
 800185a:	4626      	mov	r6, r4
 800185c:	4ba3      	ldr	r3, [pc, #652]	; (8001aec <main+0x394>)
 800185e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001862:	4b9f      	ldr	r3, [pc, #636]	; (8001ae0 <main+0x388>)
 8001864:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001868:	461a      	mov	r2, r3
 800186a:	4623      	mov	r3, r4
 800186c:	f7fe fe68 	bl	8000540 <__aeabi_dmul>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	4698      	mov	r8, r3
 8001876:	46a1      	mov	r9, r4
 8001878:	4b98      	ldr	r3, [pc, #608]	; (8001adc <main+0x384>)
 800187a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800187e:	461a      	mov	r2, r3
 8001880:	4623      	mov	r3, r4
 8001882:	a18d      	add	r1, pc, #564	; (adr r1, 8001ab8 <main+0x360>)
 8001884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001888:	f7fe fca2 	bl	80001d0 <__aeabi_dsub>
 800188c:	4603      	mov	r3, r0
 800188e:	460c      	mov	r4, r1
 8001890:	ec44 3b17 	vmov	d7, r3, r4
 8001894:	eeb0 0a47 	vmov.f32	s0, s14
 8001898:	eef0 0a67 	vmov.f32	s1, s15
 800189c:	f004 fb40 	bl	8005f20 <cos>
 80018a0:	ec54 3b10 	vmov	r3, r4, d0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4623      	mov	r3, r4
 80018a8:	4640      	mov	r0, r8
 80018aa:	4649      	mov	r1, r9
 80018ac:	f7fe fe48 	bl	8000540 <__aeabi_dmul>
 80018b0:	4603      	mov	r3, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	4618      	mov	r0, r3
 80018b6:	4621      	mov	r1, r4
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	f7fe fc88 	bl	80001d4 <__adddf3>
 80018c4:	4603      	mov	r3, r0
 80018c6:	460c      	mov	r4, r1
 80018c8:	461a      	mov	r2, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	4628      	mov	r0, r5
 80018ce:	4631      	mov	r1, r6
 80018d0:	f7fe fc80 	bl	80001d4 <__adddf3>
 80018d4:	4603      	mov	r3, r0
 80018d6:	460c      	mov	r4, r1
 80018d8:	4a85      	ldr	r2, [pc, #532]	; (8001af0 <main+0x398>)
 80018da:	e9c2 3400 	strd	r3, r4, [r2]
		_motor2Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 80018de:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <main+0x38c>)
 80018e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e4:	4b80      	ldr	r3, [pc, #512]	; (8001ae8 <main+0x390>)
 80018e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4623      	mov	r3, r4
 80018ee:	f7fe fe27 	bl	8000540 <__aeabi_dmul>
 80018f2:	4603      	mov	r3, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	461d      	mov	r5, r3
 80018f8:	4626      	mov	r6, r4
 80018fa:	4b7c      	ldr	r3, [pc, #496]	; (8001aec <main+0x394>)
 80018fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001900:	4b77      	ldr	r3, [pc, #476]	; (8001ae0 <main+0x388>)
 8001902:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001906:	461a      	mov	r2, r3
 8001908:	4623      	mov	r3, r4
 800190a:	f7fe fe19 	bl	8000540 <__aeabi_dmul>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	4698      	mov	r8, r3
 8001914:	46a1      	mov	r9, r4
 8001916:	4b71      	ldr	r3, [pc, #452]	; (8001adc <main+0x384>)
 8001918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800191c:	a366      	add	r3, pc, #408	; (adr r3, 8001ab8 <main+0x360>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fc57 	bl	80001d4 <__adddf3>
 8001926:	4603      	mov	r3, r0
 8001928:	460c      	mov	r4, r1
 800192a:	ec44 3b17 	vmov	d7, r3, r4
 800192e:	eeb0 0a47 	vmov.f32	s0, s14
 8001932:	eef0 0a67 	vmov.f32	s1, s15
 8001936:	f004 faf3 	bl	8005f20 <cos>
 800193a:	ec54 3b10 	vmov	r3, r4, d0
 800193e:	461a      	mov	r2, r3
 8001940:	4623      	mov	r3, r4
 8001942:	4640      	mov	r0, r8
 8001944:	4649      	mov	r1, r9
 8001946:	f7fe fdfb 	bl	8000540 <__aeabi_dmul>
 800194a:	4603      	mov	r3, r0
 800194c:	460c      	mov	r4, r1
 800194e:	461a      	mov	r2, r3
 8001950:	4623      	mov	r3, r4
 8001952:	4628      	mov	r0, r5
 8001954:	4631      	mov	r1, r6
 8001956:	f7fe fc3d 	bl	80001d4 <__adddf3>
 800195a:	4603      	mov	r3, r0
 800195c:	460c      	mov	r4, r1
 800195e:	4a65      	ldr	r2, [pc, #404]	; (8001af4 <main+0x39c>)
 8001960:	e9c2 3400 	strd	r3, r4, [r2]
		_motor3Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 8001964:	4b5f      	ldr	r3, [pc, #380]	; (8001ae4 <main+0x38c>)
 8001966:	e9d3 0100 	ldrd	r0, r1, [r3]
 800196a:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <main+0x390>)
 800196c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001970:	461a      	mov	r2, r3
 8001972:	4623      	mov	r3, r4
 8001974:	f7fe fde4 	bl	8000540 <__aeabi_dmul>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	461d      	mov	r5, r3
 800197e:	4626      	mov	r6, r4
 8001980:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <main+0x394>)
 8001982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001986:	4b56      	ldr	r3, [pc, #344]	; (8001ae0 <main+0x388>)
 8001988:	e9d3 3400 	ldrd	r3, r4, [r3]
 800198c:	461a      	mov	r2, r3
 800198e:	4623      	mov	r3, r4
 8001990:	f7fe fdd6 	bl	8000540 <__aeabi_dmul>
 8001994:	4603      	mov	r3, r0
 8001996:	460c      	mov	r4, r1
 8001998:	4698      	mov	r8, r3
 800199a:	46a1      	mov	r9, r4
 800199c:	4b4f      	ldr	r3, [pc, #316]	; (8001adc <main+0x384>)
 800199e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a2:	a347      	add	r3, pc, #284	; (adr r3, 8001ac0 <main+0x368>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fc14 	bl	80001d4 <__adddf3>
 80019ac:	4603      	mov	r3, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	ec44 3b17 	vmov	d7, r3, r4
 80019b4:	eeb0 0a47 	vmov.f32	s0, s14
 80019b8:	eef0 0a67 	vmov.f32	s1, s15
 80019bc:	f004 fab0 	bl	8005f20 <cos>
 80019c0:	ec54 3b10 	vmov	r3, r4, d0
 80019c4:	461a      	mov	r2, r3
 80019c6:	4623      	mov	r3, r4
 80019c8:	4640      	mov	r0, r8
 80019ca:	4649      	mov	r1, r9
 80019cc:	f7fe fdb8 	bl	8000540 <__aeabi_dmul>
 80019d0:	4603      	mov	r3, r0
 80019d2:	460c      	mov	r4, r1
 80019d4:	461a      	mov	r2, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	4628      	mov	r0, r5
 80019da:	4631      	mov	r1, r6
 80019dc:	f7fe fbfa 	bl	80001d4 <__adddf3>
 80019e0:	4603      	mov	r3, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	4618      	mov	r0, r3
 80019e6:	4621      	mov	r1, r4
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	f7fe fbf0 	bl	80001d4 <__adddf3>
 80019f4:	4603      	mov	r3, r0
 80019f6:	460c      	mov	r4, r1
 80019f8:	4a3f      	ldr	r2, [pc, #252]	; (8001af8 <main+0x3a0>)
 80019fa:	e9c2 3400 	strd	r3, r4, [r2]
		_motor4Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 80019fe:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <main+0x38c>)
 8001a00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <main+0x390>)
 8001a06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4623      	mov	r3, r4
 8001a0e:	f7fe fd97 	bl	8000540 <__aeabi_dmul>
 8001a12:	4603      	mov	r3, r0
 8001a14:	460c      	mov	r4, r1
 8001a16:	461d      	mov	r5, r3
 8001a18:	4626      	mov	r6, r4
 8001a1a:	4b34      	ldr	r3, [pc, #208]	; (8001aec <main+0x394>)
 8001a1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <main+0x388>)
 8001a22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a26:	461a      	mov	r2, r3
 8001a28:	4623      	mov	r3, r4
 8001a2a:	f7fe fd89 	bl	8000540 <__aeabi_dmul>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460c      	mov	r4, r1
 8001a32:	4698      	mov	r8, r3
 8001a34:	46a1      	mov	r9, r4
 8001a36:	4b29      	ldr	r3, [pc, #164]	; (8001adc <main+0x384>)
 8001a38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	a11f      	add	r1, pc, #124	; (adr r1, 8001ac0 <main+0x368>)
 8001a42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a46:	f7fe fbc3 	bl	80001d0 <__aeabi_dsub>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	ec44 3b17 	vmov	d7, r3, r4
 8001a52:	eeb0 0a47 	vmov.f32	s0, s14
 8001a56:	eef0 0a67 	vmov.f32	s1, s15
 8001a5a:	f004 fa61 	bl	8005f20 <cos>
 8001a5e:	ec54 3b10 	vmov	r3, r4, d0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4623      	mov	r3, r4
 8001a66:	4640      	mov	r0, r8
 8001a68:	4649      	mov	r1, r9
 8001a6a:	f7fe fd69 	bl	8000540 <__aeabi_dmul>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	460c      	mov	r4, r1
 8001a72:	461a      	mov	r2, r3
 8001a74:	4623      	mov	r3, r4
 8001a76:	4628      	mov	r0, r5
 8001a78:	4631      	mov	r1, r6
 8001a7a:	f7fe fbab 	bl	80001d4 <__adddf3>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	460c      	mov	r4, r1
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <main+0x3a4>)
 8001a84:	e9c2 3400 	strd	r3, r4, [r2]
		controlMotor1(_motor1Speed);
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <main+0x398>)
 8001a8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4621      	mov	r1, r4
 8001a92:	f7ff f805 	bl	8000aa0 <__aeabi_d2iz>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fc85 	bl	80013a8 <controlMotor1>
		controlMotor2(_motor2Speed);
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <main+0x39c>)
 8001aa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	f7fe fffa 	bl	8000aa0 <__aeabi_d2iz>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fcc0 	bl	8001434 <controlMotor2>
 8001ab4:	e024      	b.n	8001b00 <main+0x3a8>
 8001ab6:	bf00      	nop
 8001ab8:	7f3321d2 	.word	0x7f3321d2
 8001abc:	4002d97c 	.word	0x4002d97c
 8001ac0:	54442d18 	.word	0x54442d18
 8001ac4:	3fe921fb 	.word	0x3fe921fb
 8001ac8:	200001b8 	.word	0x200001b8
 8001acc:	20000248 	.word	0x20000248
 8001ad0:	20000438 	.word	0x20000438
 8001ad4:	20000434 	.word	0x20000434
 8001ad8:	2000044a 	.word	0x2000044a
 8001adc:	200001f0 	.word	0x200001f0
 8001ae0:	20000328 	.word	0x20000328
 8001ae4:	200003c0 	.word	0x200003c0
 8001ae8:	20000020 	.word	0x20000020
 8001aec:	20000018 	.word	0x20000018
 8001af0:	200002d8 	.word	0x200002d8
 8001af4:	20000368 	.word	0x20000368
 8001af8:	20000428 	.word	0x20000428
 8001afc:	200001a0 	.word	0x200001a0
		controlMotor3(_motor3Speed);
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <main+0x3d8>)
 8001b02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b06:	4618      	mov	r0, r3
 8001b08:	4621      	mov	r1, r4
 8001b0a:	f7fe ffc9 	bl	8000aa0 <__aeabi_d2iz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fcd5 	bl	80014c0 <controlMotor3>
		controlMotor4(_motor4Speed);
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <main+0x3dc>)
 8001b18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	4621      	mov	r1, r4
 8001b20:	f7fe ffbe 	bl	8000aa0 <__aeabi_d2iz>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fd10 	bl	800154c <controlMotor4>
 8001b2c:	e188      	b.n	8001e40 <main+0x6e8>
 8001b2e:	bf00      	nop
 8001b30:	20000428 	.word	0x20000428
 8001b34:	200001a0 	.word	0x200001a0
	}
	else
	{
		_dir = atan2(joyLeftHor, -joyLeftVer);
 8001b38:	4bd1      	ldr	r3, [pc, #836]	; (8001e80 <main+0x728>)
 8001b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fc94 	bl	800046c <__aeabi_i2d>
 8001b44:	4604      	mov	r4, r0
 8001b46:	460d      	mov	r5, r1
 8001b48:	4bce      	ldr	r3, [pc, #824]	; (8001e84 <main+0x72c>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	425b      	negs	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fc8b 	bl	800046c <__aeabi_i2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	ec43 2b11 	vmov	d1, r2, r3
 8001b5e:	ec45 4b10 	vmov	d0, r4, r5
 8001b62:	f004 fa21 	bl	8005fa8 <atan2>
 8001b66:	eeb0 7a40 	vmov.f32	s14, s0
 8001b6a:	eef0 7a60 	vmov.f32	s15, s1
 8001b6e:	4bc6      	ldr	r3, [pc, #792]	; (8001e88 <main+0x730>)
 8001b70:	ed83 7b00 	vstr	d7, [r3]
		_controlSpeed = sqrt(joyLeftHor*joyLeftHor + joyLeftVer*joyLeftVer);
 8001b74:	4bc2      	ldr	r3, [pc, #776]	; (8001e80 <main+0x728>)
 8001b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4bc0      	ldr	r3, [pc, #768]	; (8001e80 <main+0x728>)
 8001b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b82:	fb03 f202 	mul.w	r2, r3, r2
 8001b86:	4bbf      	ldr	r3, [pc, #764]	; (8001e84 <main+0x72c>)
 8001b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4bbd      	ldr	r3, [pc, #756]	; (8001e84 <main+0x72c>)
 8001b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b94:	fb03 f301 	mul.w	r3, r3, r1
 8001b98:	4413      	add	r3, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fc66 	bl	800046c <__aeabi_i2d>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	ec44 3b10 	vmov	d0, r3, r4
 8001ba8:	f004 fa00 	bl	8005fac <sqrt>
 8001bac:	eeb0 7a40 	vmov.f32	s14, s0
 8001bb0:	eef0 7a60 	vmov.f32	s15, s1
 8001bb4:	4bb5      	ldr	r3, [pc, #724]	; (8001e8c <main+0x734>)
 8001bb6:	ed83 7b00 	vstr	d7, [r3]
		_motor1Speed = joyRigtHor*1.0 + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 8001bba:	4bb5      	ldr	r3, [pc, #724]	; (8001e90 <main+0x738>)
 8001bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fc53 	bl	800046c <__aeabi_i2d>
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	460e      	mov	r6, r1
 8001bca:	4bb2      	ldr	r3, [pc, #712]	; (8001e94 <main+0x73c>)
 8001bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd0:	4bae      	ldr	r3, [pc, #696]	; (8001e8c <main+0x734>)
 8001bd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4623      	mov	r3, r4
 8001bda:	f7fe fcb1 	bl	8000540 <__aeabi_dmul>
 8001bde:	4603      	mov	r3, r0
 8001be0:	460c      	mov	r4, r1
 8001be2:	4698      	mov	r8, r3
 8001be4:	46a1      	mov	r9, r4
 8001be6:	4ba8      	ldr	r3, [pc, #672]	; (8001e88 <main+0x730>)
 8001be8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4623      	mov	r3, r4
 8001bf0:	a19f      	add	r1, pc, #636	; (adr r1, 8001e70 <main+0x718>)
 8001bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bf6:	f7fe faeb 	bl	80001d0 <__aeabi_dsub>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460c      	mov	r4, r1
 8001bfe:	ec44 3b17 	vmov	d7, r3, r4
 8001c02:	eeb0 0a47 	vmov.f32	s0, s14
 8001c06:	eef0 0a67 	vmov.f32	s1, s15
 8001c0a:	f004 f989 	bl	8005f20 <cos>
 8001c0e:	ec54 3b10 	vmov	r3, r4, d0
 8001c12:	461a      	mov	r2, r3
 8001c14:	4623      	mov	r3, r4
 8001c16:	4640      	mov	r0, r8
 8001c18:	4649      	mov	r1, r9
 8001c1a:	f7fe fc91 	bl	8000540 <__aeabi_dmul>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460c      	mov	r4, r1
 8001c22:	4618      	mov	r0, r3
 8001c24:	4621      	mov	r1, r4
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	f7fe fad1 	bl	80001d4 <__adddf3>
 8001c32:	4603      	mov	r3, r0
 8001c34:	460c      	mov	r4, r1
 8001c36:	461a      	mov	r2, r3
 8001c38:	4623      	mov	r3, r4
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	4631      	mov	r1, r6
 8001c3e:	f7fe fac9 	bl	80001d4 <__adddf3>
 8001c42:	4603      	mov	r3, r0
 8001c44:	460c      	mov	r4, r1
 8001c46:	4a94      	ldr	r2, [pc, #592]	; (8001e98 <main+0x740>)
 8001c48:	e9c2 3400 	strd	r3, r4, [r2]
		_motor2Speed = joyRigtHor*1.0 + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 8001c4c:	4b90      	ldr	r3, [pc, #576]	; (8001e90 <main+0x738>)
 8001c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc0a 	bl	800046c <__aeabi_i2d>
 8001c58:	4605      	mov	r5, r0
 8001c5a:	460e      	mov	r6, r1
 8001c5c:	4b8d      	ldr	r3, [pc, #564]	; (8001e94 <main+0x73c>)
 8001c5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c62:	4b8a      	ldr	r3, [pc, #552]	; (8001e8c <main+0x734>)
 8001c64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	f7fe fc68 	bl	8000540 <__aeabi_dmul>
 8001c70:	4603      	mov	r3, r0
 8001c72:	460c      	mov	r4, r1
 8001c74:	4698      	mov	r8, r3
 8001c76:	46a1      	mov	r9, r4
 8001c78:	4b83      	ldr	r3, [pc, #524]	; (8001e88 <main+0x730>)
 8001c7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c7e:	a37c      	add	r3, pc, #496	; (adr r3, 8001e70 <main+0x718>)
 8001c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c84:	f7fe faa6 	bl	80001d4 <__adddf3>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	460c      	mov	r4, r1
 8001c8c:	ec44 3b17 	vmov	d7, r3, r4
 8001c90:	eeb0 0a47 	vmov.f32	s0, s14
 8001c94:	eef0 0a67 	vmov.f32	s1, s15
 8001c98:	f004 f942 	bl	8005f20 <cos>
 8001c9c:	ec54 3b10 	vmov	r3, r4, d0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4623      	mov	r3, r4
 8001ca4:	4640      	mov	r0, r8
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	f7fe fc4a 	bl	8000540 <__aeabi_dmul>
 8001cac:	4603      	mov	r3, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	4631      	mov	r1, r6
 8001cb8:	f7fe fa8c 	bl	80001d4 <__adddf3>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	4a76      	ldr	r2, [pc, #472]	; (8001e9c <main+0x744>)
 8001cc2:	e9c2 3400 	strd	r3, r4, [r2]
		_motor3Speed = joyRigtHor*1.0 +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 8001cc6:	4b72      	ldr	r3, [pc, #456]	; (8001e90 <main+0x738>)
 8001cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fbcd 	bl	800046c <__aeabi_i2d>
 8001cd2:	4605      	mov	r5, r0
 8001cd4:	460e      	mov	r6, r1
 8001cd6:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <main+0x73c>)
 8001cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <main+0x734>)
 8001cde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4623      	mov	r3, r4
 8001ce6:	f7fe fc2b 	bl	8000540 <__aeabi_dmul>
 8001cea:	4603      	mov	r3, r0
 8001cec:	460c      	mov	r4, r1
 8001cee:	4698      	mov	r8, r3
 8001cf0:	46a1      	mov	r9, r4
 8001cf2:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <main+0x730>)
 8001cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf8:	a35f      	add	r3, pc, #380	; (adr r3, 8001e78 <main+0x720>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	f7fe fa69 	bl	80001d4 <__adddf3>
 8001d02:	4603      	mov	r3, r0
 8001d04:	460c      	mov	r4, r1
 8001d06:	ec44 3b17 	vmov	d7, r3, r4
 8001d0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d0e:	eef0 0a67 	vmov.f32	s1, s15
 8001d12:	f004 f905 	bl	8005f20 <cos>
 8001d16:	ec54 3b10 	vmov	r3, r4, d0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4623      	mov	r3, r4
 8001d1e:	4640      	mov	r0, r8
 8001d20:	4649      	mov	r1, r9
 8001d22:	f7fe fc0d 	bl	8000540 <__aeabi_dmul>
 8001d26:	4603      	mov	r3, r0
 8001d28:	460c      	mov	r4, r1
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4623      	mov	r3, r4
 8001d2e:	4628      	mov	r0, r5
 8001d30:	4631      	mov	r1, r6
 8001d32:	f7fe fa4f 	bl	80001d4 <__adddf3>
 8001d36:	4603      	mov	r3, r0
 8001d38:	460c      	mov	r4, r1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	f7fe fa45 	bl	80001d4 <__adddf3>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	4a54      	ldr	r2, [pc, #336]	; (8001ea0 <main+0x748>)
 8001d50:	e9c2 3400 	strd	r3, r4, [r2]
		_motor4Speed = joyRigtHor*1.0 +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 8001d54:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <main+0x738>)
 8001d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fb86 	bl	800046c <__aeabi_i2d>
 8001d60:	4605      	mov	r5, r0
 8001d62:	460e      	mov	r6, r1
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <main+0x73c>)
 8001d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d6a:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <main+0x734>)
 8001d6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4623      	mov	r3, r4
 8001d74:	f7fe fbe4 	bl	8000540 <__aeabi_dmul>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	460c      	mov	r4, r1
 8001d7c:	4698      	mov	r8, r3
 8001d7e:	46a1      	mov	r9, r4
 8001d80:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <main+0x730>)
 8001d82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d86:	461a      	mov	r2, r3
 8001d88:	4623      	mov	r3, r4
 8001d8a:	a13b      	add	r1, pc, #236	; (adr r1, 8001e78 <main+0x720>)
 8001d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d90:	f7fe fa1e 	bl	80001d0 <__aeabi_dsub>
 8001d94:	4603      	mov	r3, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	ec44 3b17 	vmov	d7, r3, r4
 8001d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001da0:	eef0 0a67 	vmov.f32	s1, s15
 8001da4:	f004 f8bc 	bl	8005f20 <cos>
 8001da8:	ec54 3b10 	vmov	r3, r4, d0
 8001dac:	461a      	mov	r2, r3
 8001dae:	4623      	mov	r3, r4
 8001db0:	4640      	mov	r0, r8
 8001db2:	4649      	mov	r1, r9
 8001db4:	f7fe fbc4 	bl	8000540 <__aeabi_dmul>
 8001db8:	4603      	mov	r3, r0
 8001dba:	460c      	mov	r4, r1
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4623      	mov	r3, r4
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	4631      	mov	r1, r6
 8001dc4:	f7fe fa06 	bl	80001d4 <__adddf3>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	460c      	mov	r4, r1
 8001dcc:	4a35      	ldr	r2, [pc, #212]	; (8001ea4 <main+0x74c>)
 8001dce:	e9c2 3400 	strd	r3, r4, [r2]
		controlMotor1(_motor1Speed);
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <main+0x740>)
 8001dd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4621      	mov	r1, r4
 8001ddc:	f7fe fe60 	bl	8000aa0 <__aeabi_d2iz>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fae0 	bl	80013a8 <controlMotor1>
		controlMotor2(_motor2Speed);
 8001de8:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <main+0x744>)
 8001dea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dee:	4618      	mov	r0, r3
 8001df0:	4621      	mov	r1, r4
 8001df2:	f7fe fe55 	bl	8000aa0 <__aeabi_d2iz>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fb1b 	bl	8001434 <controlMotor2>
		controlMotor3(_motor3Speed);
 8001dfe:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <main+0x748>)
 8001e00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e04:	4618      	mov	r0, r3
 8001e06:	4621      	mov	r1, r4
 8001e08:	f7fe fe4a 	bl	8000aa0 <__aeabi_d2iz>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fb56 	bl	80014c0 <controlMotor3>
		controlMotor4(_motor4Speed);
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <main+0x74c>)
 8001e16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	f7fe fe3f 	bl	8000aa0 <__aeabi_d2iz>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fb91 	bl	800154c <controlMotor4>
		rotateAngle = compassData;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <main+0x750>)
 8001e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb1b 	bl	800046c <__aeabi_i2d>
 8001e36:	4603      	mov	r3, r0
 8001e38:	460c      	mov	r4, r1
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <main+0x754>)
 8001e3c:	e9c2 3400 	strd	r3, r4, [r2]
	}
//	  HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, GPIO_PIN_RESET);
	  trackingMotorDir = HAL_GPIO_ReadPin(handDir_GPIO_Port, handDir_Pin);
 8001e40:	2104      	movs	r1, #4
 8001e42:	481b      	ldr	r0, [pc, #108]	; (8001eb0 <main+0x758>)
 8001e44:	f001 fcd4 	bl	80037f0 <HAL_GPIO_ReadPin>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <main+0x75c>)
 8001e4e:	601a      	str	r2, [r3, #0]
	  trackingMotorPul = HAL_GPIO_ReadPin(handPul_GPIO_Port, handPul_Pin);
 8001e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e54:	4818      	ldr	r0, [pc, #96]	; (8001eb8 <main+0x760>)
 8001e56:	f001 fccb 	bl	80037f0 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <main+0x764>)
 8001e60:	601a      	str	r2, [r3, #0]
	  tracking++;
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <main+0x768>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	e02c      	b.n	8001ec4 <main+0x76c>
 8001e6a:	bf00      	nop
 8001e6c:	f3af 8000 	nop.w
 8001e70:	7f3321d2 	.word	0x7f3321d2
 8001e74:	4002d97c 	.word	0x4002d97c
 8001e78:	54442d18 	.word	0x54442d18
 8001e7c:	3fe921fb 	.word	0x3fe921fb
 8001e80:	20000434 	.word	0x20000434
 8001e84:	2000044a 	.word	0x2000044a
 8001e88:	200001f0 	.word	0x200001f0
 8001e8c:	20000328 	.word	0x20000328
 8001e90:	200001b8 	.word	0x200001b8
 8001e94:	20000018 	.word	0x20000018
 8001e98:	200002d8 	.word	0x200002d8
 8001e9c:	20000368 	.word	0x20000368
 8001ea0:	20000428 	.word	0x20000428
 8001ea4:	200001a0 	.word	0x200001a0
 8001ea8:	20000248 	.word	0x20000248
 8001eac:	20000438 	.word	0x20000438
 8001eb0:	40020c00 	.word	0x40020c00
 8001eb4:	200001b0 	.word	0x200001b0
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	200003b0 	.word	0x200003b0
 8001ec0:	2000035c 	.word	0x2000035c
 8001ec4:	4a01      	ldr	r2, [pc, #4]	; (8001ecc <main+0x774>)
 8001ec6:	6013      	str	r3, [r2, #0]
	if(joyRigtHor == 0)
 8001ec8:	e463      	b.n	8001792 <main+0x3a>
 8001eca:	bf00      	nop
 8001ecc:	2000035c 	.word	0x2000035c

08001ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b094      	sub	sp, #80	; 0x50
 8001ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed6:	f107 0320 	add.w	r3, r7, #32
 8001eda:	2230      	movs	r2, #48	; 0x30
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 f816 	bl	8005f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <SystemClock_Config+0xcc>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <SystemClock_Config+0xcc>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6413      	str	r3, [r2, #64]	; 0x40
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <SystemClock_Config+0xcc>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <SystemClock_Config+0xd0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <SystemClock_Config+0xd0>)
 8001f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <SystemClock_Config+0xd0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f36:	2302      	movs	r3, #2
 8001f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f40:	2304      	movs	r3, #4
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f44:	23a8      	movs	r3, #168	; 0xa8
 8001f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 fc7d 	bl	8003854 <HAL_RCC_OscConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f60:	f000 fb1a 	bl	8002598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f64:	230f      	movs	r3, #15
 8001f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2105      	movs	r1, #5
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fed6 	bl	8003d34 <HAL_RCC_ClockConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f8e:	f000 fb03 	bl	8002598 <Error_Handler>
  }
}
 8001f92:	bf00      	nop
 8001f94:	3750      	adds	r7, #80	; 0x50
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40007000 	.word	0x40007000

08001fa4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b096      	sub	sp, #88	; 0x58
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001faa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	615a      	str	r2, [r3, #20]
 8001fd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2220      	movs	r2, #32
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 ff97 	bl	8005f10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fe2:	4b44      	ldr	r3, [pc, #272]	; (80020f4 <MX_TIM1_Init+0x150>)
 8001fe4:	4a44      	ldr	r2, [pc, #272]	; (80020f8 <MX_TIM1_Init+0x154>)
 8001fe6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8001fe8:	4b42      	ldr	r3, [pc, #264]	; (80020f4 <MX_TIM1_Init+0x150>)
 8001fea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <MX_TIM1_Init+0x150>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001ff6:	4b3f      	ldr	r3, [pc, #252]	; (80020f4 <MX_TIM1_Init+0x150>)
 8001ff8:	22ff      	movs	r2, #255	; 0xff
 8001ffa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffc:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <MX_TIM1_Init+0x150>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <MX_TIM1_Init+0x150>)
 8002004:	2200      	movs	r2, #0
 8002006:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <MX_TIM1_Init+0x150>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800200e:	4839      	ldr	r0, [pc, #228]	; (80020f4 <MX_TIM1_Init+0x150>)
 8002010:	f002 f882 	bl	8004118 <HAL_TIM_Base_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800201a:	f000 fabd 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002024:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002028:	4619      	mov	r1, r3
 800202a:	4832      	ldr	r0, [pc, #200]	; (80020f4 <MX_TIM1_Init+0x150>)
 800202c:	f002 fb04 	bl	8004638 <HAL_TIM_ConfigClockSource>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002036:	f000 faaf 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800203a:	482e      	ldr	r0, [pc, #184]	; (80020f4 <MX_TIM1_Init+0x150>)
 800203c:	f002 f8bb 	bl	80041b6 <HAL_TIM_PWM_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002046:	f000 faa7 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002052:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002056:	4619      	mov	r1, r3
 8002058:	4826      	ldr	r0, [pc, #152]	; (80020f4 <MX_TIM1_Init+0x150>)
 800205a:	f002 fedd 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002064:	f000 fa98 	bl	8002598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002068:	2360      	movs	r3, #96	; 0x60
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002070:	2302      	movs	r3, #2
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002074:	2300      	movs	r3, #0
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002088:	2208      	movs	r2, #8
 800208a:	4619      	mov	r1, r3
 800208c:	4819      	ldr	r0, [pc, #100]	; (80020f4 <MX_TIM1_Init+0x150>)
 800208e:	f002 fa0d 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002098:	f000 fa7e 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	220c      	movs	r2, #12
 80020a2:	4619      	mov	r1, r3
 80020a4:	4813      	ldr	r0, [pc, #76]	; (80020f4 <MX_TIM1_Init+0x150>)
 80020a6:	f002 fa01 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80020b0:	f000 fa72 	bl	8002598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <MX_TIM1_Init+0x150>)
 80020d6:	f002 ff1b 	bl	8004f10 <HAL_TIMEx_ConfigBreakDeadTime>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80020e0:	f000 fa5a 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <MX_TIM1_Init+0x150>)
 80020e6:	f000 fadb 	bl	80026a0 <HAL_TIM_MspPostInit>

}
 80020ea:	bf00      	nop
 80020ec:	3758      	adds	r7, #88	; 0x58
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000370 	.word	0x20000370
 80020f8:	40010000 	.word	0x40010000

080020fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	463b      	mov	r3, r7
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <MX_TIM5_Init+0x94>)
 800211a:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <MX_TIM5_Init+0x98>)
 800211c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 800211e:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <MX_TIM5_Init+0x94>)
 8002120:	f240 3247 	movw	r2, #839	; 0x347
 8002124:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <MX_TIM5_Init+0x94>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <MX_TIM5_Init+0x94>)
 800212e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002132:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002134:	4b16      	ldr	r3, [pc, #88]	; (8002190 <MX_TIM5_Init+0x94>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <MX_TIM5_Init+0x94>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002140:	4813      	ldr	r0, [pc, #76]	; (8002190 <MX_TIM5_Init+0x94>)
 8002142:	f001 ffe9 	bl	8004118 <HAL_TIM_Base_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800214c:	f000 fa24 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002156:	f107 0308 	add.w	r3, r7, #8
 800215a:	4619      	mov	r1, r3
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <MX_TIM5_Init+0x94>)
 800215e:	f002 fa6b 	bl	8004638 <HAL_TIM_ConfigClockSource>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002168:	f000 fa16 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002174:	463b      	mov	r3, r7
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_TIM5_Init+0x94>)
 800217a:	f002 fe4d 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002184:	f000 fa08 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000204 	.word	0x20000204
 8002194:	40000c00 	.word	0x40000c00

08002198 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b096      	sub	sp, #88	; 0x58
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	615a      	str	r2, [r3, #20]
 80021c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	2220      	movs	r2, #32
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 fe9d 	bl	8005f10 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021d6:	4b44      	ldr	r3, [pc, #272]	; (80022e8 <MX_TIM8_Init+0x150>)
 80021d8:	4a44      	ldr	r2, [pc, #272]	; (80022ec <MX_TIM8_Init+0x154>)
 80021da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1000;
 80021dc:	4b42      	ldr	r3, [pc, #264]	; (80022e8 <MX_TIM8_Init+0x150>)
 80021de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e4:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <MX_TIM8_Init+0x150>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 80021ea:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <MX_TIM8_Init+0x150>)
 80021ec:	22ff      	movs	r2, #255	; 0xff
 80021ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f0:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <MX_TIM8_Init+0x150>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021f6:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <MX_TIM8_Init+0x150>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fc:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <MX_TIM8_Init+0x150>)
 80021fe:	2200      	movs	r2, #0
 8002200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002202:	4839      	ldr	r0, [pc, #228]	; (80022e8 <MX_TIM8_Init+0x150>)
 8002204:	f001 ff88 	bl	8004118 <HAL_TIM_Base_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800220e:	f000 f9c3 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002216:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002218:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800221c:	4619      	mov	r1, r3
 800221e:	4832      	ldr	r0, [pc, #200]	; (80022e8 <MX_TIM8_Init+0x150>)
 8002220:	f002 fa0a 	bl	8004638 <HAL_TIM_ConfigClockSource>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800222a:	f000 f9b5 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800222e:	482e      	ldr	r0, [pc, #184]	; (80022e8 <MX_TIM8_Init+0x150>)
 8002230:	f001 ffc1 	bl	80041b6 <HAL_TIM_PWM_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800223a:	f000 f9ad 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002246:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800224a:	4619      	mov	r1, r3
 800224c:	4826      	ldr	r0, [pc, #152]	; (80022e8 <MX_TIM8_Init+0x150>)
 800224e:	f002 fde3 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002258:	f000 f99e 	bl	8002598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225c:	2360      	movs	r3, #96	; 0x60
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002264:	2302      	movs	r3, #2
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002268:	2300      	movs	r3, #0
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002270:	2300      	movs	r3, #0
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227c:	2200      	movs	r2, #0
 800227e:	4619      	mov	r1, r3
 8002280:	4819      	ldr	r0, [pc, #100]	; (80022e8 <MX_TIM8_Init+0x150>)
 8002282:	f002 f913 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800228c:	f000 f984 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002294:	2204      	movs	r2, #4
 8002296:	4619      	mov	r1, r3
 8002298:	4813      	ldr	r0, [pc, #76]	; (80022e8 <MX_TIM8_Init+0x150>)
 800229a:	f002 f907 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80022a4:	f000 f978 	bl	8002598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4807      	ldr	r0, [pc, #28]	; (80022e8 <MX_TIM8_Init+0x150>)
 80022ca:	f002 fe21 	bl	8004f10 <HAL_TIMEx_ConfigBreakDeadTime>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80022d4:	f000 f960 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <MX_TIM8_Init+0x150>)
 80022da:	f000 f9e1 	bl	80026a0 <HAL_TIM_MspPostInit>

}
 80022de:	bf00      	nop
 80022e0:	3758      	adds	r7, #88	; 0x58
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000158 	.word	0x20000158
 80022ec:	40010400 	.word	0x40010400

080022f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_UART4_Init+0x4c>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <MX_UART4_Init+0x50>)
 80022f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <MX_UART4_Init+0x4c>)
 80022fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002300:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_UART4_Init+0x4c>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_UART4_Init+0x4c>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_UART4_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_UART4_Init+0x4c>)
 8002316:	220c      	movs	r2, #12
 8002318:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_UART4_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_UART4_Init+0x4c>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_UART4_Init+0x4c>)
 8002328:	f002 fe58 	bl	8004fdc <HAL_UART_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002332:	f000 f931 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200003e0 	.word	0x200003e0
 8002340:	40004c00 	.word	0x40004c00

08002344 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_USART1_UART_Init+0x4c>)
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <MX_USART1_UART_Init+0x50>)
 800234c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <MX_USART1_UART_Init+0x4c>)
 8002350:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002354:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_USART1_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_USART1_UART_Init+0x4c>)
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <MX_USART1_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_USART1_UART_Init+0x4c>)
 800236a:	220c      	movs	r2, #12
 800236c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <MX_USART1_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_USART1_UART_Init+0x4c>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_USART1_UART_Init+0x4c>)
 800237c:	f002 fe2e 	bl	8004fdc <HAL_UART_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002386:	f000 f907 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200002e0 	.word	0x200002e0
 8002394:	40011000 	.word	0x40011000

08002398 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <MX_DMA_Init+0x68>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <MX_DMA_Init+0x68>)
 80023a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <MX_DMA_Init+0x68>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <MX_DMA_Init+0x68>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <MX_DMA_Init+0x68>)
 80023c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <MX_DMA_Init+0x68>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	200d      	movs	r0, #13
 80023dc:	f000 fca7 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80023e0:	200d      	movs	r0, #13
 80023e2:	f000 fcc0 	bl	8002d66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	203a      	movs	r0, #58	; 0x3a
 80023ec:	f000 fc9f 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80023f0:	203a      	movs	r0, #58	; 0x3a
 80023f2:	f000 fcb8 	bl	8002d66 <HAL_NVIC_EnableIRQ>

}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800

08002404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b59      	ldr	r3, [pc, #356]	; (8002584 <MX_GPIO_Init+0x180>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a58      	ldr	r2, [pc, #352]	; (8002584 <MX_GPIO_Init+0x180>)
 8002424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b56      	ldr	r3, [pc, #344]	; (8002584 <MX_GPIO_Init+0x180>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b52      	ldr	r3, [pc, #328]	; (8002584 <MX_GPIO_Init+0x180>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a51      	ldr	r2, [pc, #324]	; (8002584 <MX_GPIO_Init+0x180>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b4f      	ldr	r3, [pc, #316]	; (8002584 <MX_GPIO_Init+0x180>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <MX_GPIO_Init+0x180>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a4a      	ldr	r2, [pc, #296]	; (8002584 <MX_GPIO_Init+0x180>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b48      	ldr	r3, [pc, #288]	; (8002584 <MX_GPIO_Init+0x180>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	4b44      	ldr	r3, [pc, #272]	; (8002584 <MX_GPIO_Init+0x180>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a43      	ldr	r2, [pc, #268]	; (8002584 <MX_GPIO_Init+0x180>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <MX_GPIO_Init+0x180>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <MX_GPIO_Init+0x180>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a3c      	ldr	r2, [pc, #240]	; (8002584 <MX_GPIO_Init+0x180>)
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <MX_GPIO_Init+0x180>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, gripper_Pin|door_Pin, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2130      	movs	r1, #48	; 0x30
 80024aa:	4837      	ldr	r0, [pc, #220]	; (8002588 <MX_GPIO_Init+0x184>)
 80024ac:	f001 f9b8 	bl	8003820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(handEn_GPIO_Port, handEn_Pin, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024b6:	4835      	ldr	r0, [pc, #212]	; (800258c <MX_GPIO_Init+0x188>)
 80024b8:	f001 f9b2 	bl	8003820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_RESET);
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024c2:	4833      	ldr	r0, [pc, #204]	; (8002590 <MX_GPIO_Init+0x18c>)
 80024c4:	f001 f9ac 	bl	8003820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, motor1Dir_Pin|motor2Dir_Pin|handDir_Pin|motor3Dir_Pin 
 80024c8:	2200      	movs	r2, #0
 80024ca:	211f      	movs	r1, #31
 80024cc:	4831      	ldr	r0, [pc, #196]	; (8002594 <MX_GPIO_Init+0x190>)
 80024ce:	f001 f9a7 	bl	8003820 <HAL_GPIO_WritePin>
                          |motor4Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : gripper_Pin door_Pin */
  GPIO_InitStruct.Pin = gripper_Pin|door_Pin;
 80024d2:	2330      	movs	r3, #48	; 0x30
 80024d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d6:	2301      	movs	r3, #1
 80024d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	4827      	ldr	r0, [pc, #156]	; (8002588 <MX_GPIO_Init+0x184>)
 80024ea:	f000 ffe7 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : handEn_Pin */
  GPIO_InitStruct.Pin = handEn_Pin;
 80024ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(handEn_GPIO_Port, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	4821      	ldr	r0, [pc, #132]	; (800258c <MX_GPIO_Init+0x188>)
 8002508:	f000 ffd8 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : handPul_Pin */
  GPIO_InitStruct.Pin = handPul_Pin;
 800250c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002512:	2301      	movs	r3, #1
 8002514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(handPul_GPIO_Port, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	481a      	ldr	r0, [pc, #104]	; (8002590 <MX_GPIO_Init+0x18c>)
 8002526:	f000 ffc9 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : switchIn_Pin */
  GPIO_InitStruct.Pin = switchIn_Pin;
 800252a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002534:	2301      	movs	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(switchIn_GPIO_Port, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4812      	ldr	r0, [pc, #72]	; (8002588 <MX_GPIO_Init+0x184>)
 8002540:	f000 ffbc 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pins : motor1Dir_Pin motor2Dir_Pin handDir_Pin motor3Dir_Pin 
                           motor4Dir_Pin */
  GPIO_InitStruct.Pin = motor1Dir_Pin|motor2Dir_Pin|handDir_Pin|motor3Dir_Pin 
 8002544:	231f      	movs	r3, #31
 8002546:	617b      	str	r3, [r7, #20]
                          |motor4Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002548:	2301      	movs	r3, #1
 800254a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4619      	mov	r1, r3
 800255a:	480e      	ldr	r0, [pc, #56]	; (8002594 <MX_GPIO_Init+0x190>)
 800255c:	f000 ffae 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : switchOut_Pin */
  GPIO_InitStruct.Pin = switchOut_Pin;
 8002560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800256a:	2301      	movs	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(switchOut_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	4805      	ldr	r0, [pc, #20]	; (800258c <MX_GPIO_Init+0x188>)
 8002576:	f000 ffa1 	bl	80034bc <HAL_GPIO_Init>

}
 800257a:	bf00      	nop
 800257c:	3728      	adds	r7, #40	; 0x28
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40020800 	.word	0x40020800
 800258c:	40020400 	.word	0x40020400
 8002590:	40020000 	.word	0x40020000
 8002594:	40020c00 	.word	0x40020c00

08002598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_MspInit+0x4c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <HAL_MspInit+0x4c>)
 80025b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025bc:	6453      	str	r3, [r2, #68]	; 0x44
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_MspInit+0x4c>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_MspInit+0x4c>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <HAL_MspInit+0x4c>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_MspInit+0x4c>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a22      	ldr	r2, [pc, #136]	; (8002690 <HAL_TIM_Base_MspInit+0x98>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10e      	bne.n	8002628 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <HAL_TIM_Base_MspInit+0x9c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4a20      	ldr	r2, [pc, #128]	; (8002694 <HAL_TIM_Base_MspInit+0x9c>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_TIM_Base_MspInit+0x9c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002626:	e02e      	b.n	8002686 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <HAL_TIM_Base_MspInit+0xa0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d116      	bne.n	8002660 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <HAL_TIM_Base_MspInit+0x9c>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_TIM_Base_MspInit+0x9c>)
 800263c:	f043 0308 	orr.w	r3, r3, #8
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_TIM_Base_MspInit+0x9c>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	2032      	movs	r0, #50	; 0x32
 8002654:	f000 fb6b 	bl	8002d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002658:	2032      	movs	r0, #50	; 0x32
 800265a:	f000 fb84 	bl	8002d66 <HAL_NVIC_EnableIRQ>
}
 800265e:	e012      	b.n	8002686 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <HAL_TIM_Base_MspInit+0xa4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10d      	bne.n	8002686 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_TIM_Base_MspInit+0x9c>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a08      	ldr	r2, [pc, #32]	; (8002694 <HAL_TIM_Base_MspInit+0x9c>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_TIM_Base_MspInit+0x9c>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
}
 8002686:	bf00      	nop
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40010000 	.word	0x40010000
 8002694:	40023800 	.word	0x40023800
 8002698:	40000c00 	.word	0x40000c00
 800269c:	40010400 	.word	0x40010400

080026a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a24      	ldr	r2, [pc, #144]	; (8002750 <HAL_TIM_MspPostInit+0xb0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d11f      	bne.n	8002702 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <HAL_TIM_MspPostInit+0xb4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a22      	ldr	r2, [pc, #136]	; (8002754 <HAL_TIM_MspPostInit+0xb4>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_TIM_MspPostInit+0xb4>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026f0:	2301      	movs	r3, #1
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	4817      	ldr	r0, [pc, #92]	; (8002758 <HAL_TIM_MspPostInit+0xb8>)
 80026fc:	f000 fede 	bl	80034bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002700:	e022      	b.n	8002748 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <HAL_TIM_MspPostInit+0xbc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d11d      	bne.n	8002748 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <HAL_TIM_MspPostInit+0xb4>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <HAL_TIM_MspPostInit+0xb4>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6313      	str	r3, [r2, #48]	; 0x30
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_TIM_MspPostInit+0xb4>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002728:	23c0      	movs	r3, #192	; 0xc0
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002738:	2303      	movs	r3, #3
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4619      	mov	r1, r3
 8002742:	4807      	ldr	r0, [pc, #28]	; (8002760 <HAL_TIM_MspPostInit+0xc0>)
 8002744:	f000 feba 	bl	80034bc <HAL_GPIO_Init>
}
 8002748:	bf00      	nop
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40010000 	.word	0x40010000
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000
 800275c:	40010400 	.word	0x40010400
 8002760:	40020800 	.word	0x40020800

08002764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	; 0x30
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 031c 	add.w	r3, r7, #28
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a65      	ldr	r2, [pc, #404]	; (8002918 <HAL_UART_MspInit+0x1b4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d164      	bne.n	8002850 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	4b64      	ldr	r3, [pc, #400]	; (800291c <HAL_UART_MspInit+0x1b8>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a63      	ldr	r2, [pc, #396]	; (800291c <HAL_UART_MspInit+0x1b8>)
 8002790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b61      	ldr	r3, [pc, #388]	; (800291c <HAL_UART_MspInit+0x1b8>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	4b5d      	ldr	r3, [pc, #372]	; (800291c <HAL_UART_MspInit+0x1b8>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a5c      	ldr	r2, [pc, #368]	; (800291c <HAL_UART_MspInit+0x1b8>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b5a      	ldr	r3, [pc, #360]	; (800291c <HAL_UART_MspInit+0x1b8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c8:	2301      	movs	r3, #1
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027d0:	2308      	movs	r3, #8
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	4619      	mov	r1, r3
 80027da:	4851      	ldr	r0, [pc, #324]	; (8002920 <HAL_UART_MspInit+0x1bc>)
 80027dc:	f000 fe6e 	bl	80034bc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80027e0:	4b50      	ldr	r3, [pc, #320]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 80027e2:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_UART_MspInit+0x1c4>)
 80027e4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80027e6:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 80027e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027ec:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ee:	4b4d      	ldr	r3, [pc, #308]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f4:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027fa:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 80027fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002800:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002802:	4b48      	ldr	r3, [pc, #288]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002808:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800280e:	4b45      	ldr	r3, [pc, #276]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 8002810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002814:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002816:	4b43      	ldr	r3, [pc, #268]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 8002818:	2200      	movs	r2, #0
 800281a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800281c:	4b41      	ldr	r3, [pc, #260]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 800281e:	2200      	movs	r2, #0
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002822:	4840      	ldr	r0, [pc, #256]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 8002824:	f000 faba 	bl	8002d9c <HAL_DMA_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800282e:	f7ff feb3 	bl	8002598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a3b      	ldr	r2, [pc, #236]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 8002836:	635a      	str	r2, [r3, #52]	; 0x34
 8002838:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <HAL_UART_MspInit+0x1c0>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	2034      	movs	r0, #52	; 0x34
 8002844:	f000 fa73 	bl	8002d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002848:	2034      	movs	r0, #52	; 0x34
 800284a:	f000 fa8c 	bl	8002d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800284e:	e05f      	b.n	8002910 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a35      	ldr	r2, [pc, #212]	; (800292c <HAL_UART_MspInit+0x1c8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d15a      	bne.n	8002910 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b2f      	ldr	r3, [pc, #188]	; (800291c <HAL_UART_MspInit+0x1b8>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a2e      	ldr	r2, [pc, #184]	; (800291c <HAL_UART_MspInit+0x1b8>)
 8002864:	f043 0310 	orr.w	r3, r3, #16
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <HAL_UART_MspInit+0x1b8>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_UART_MspInit+0x1b8>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a27      	ldr	r2, [pc, #156]	; (800291c <HAL_UART_MspInit+0x1b8>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b25      	ldr	r3, [pc, #148]	; (800291c <HAL_UART_MspInit+0x1b8>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002892:	23c0      	movs	r3, #192	; 0xc0
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028a2:	2307      	movs	r3, #7
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	4619      	mov	r1, r3
 80028ac:	4820      	ldr	r0, [pc, #128]	; (8002930 <HAL_UART_MspInit+0x1cc>)
 80028ae:	f000 fe05 	bl	80034bc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 80028b4:	4a20      	ldr	r2, [pc, #128]	; (8002938 <HAL_UART_MspInit+0x1d4>)
 80028b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80028b8:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 80028ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028c0:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 80028ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d4:	4b17      	ldr	r3, [pc, #92]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 80028e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028f4:	480f      	ldr	r0, [pc, #60]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 80028f6:	f000 fa51 	bl	8002d9c <HAL_DMA_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002900:	f7ff fe4a 	bl	8002598 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 8002908:	635a      	str	r2, [r3, #52]	; 0x34
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <HAL_UART_MspInit+0x1d0>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002910:	bf00      	nop
 8002912:	3730      	adds	r7, #48	; 0x30
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40004c00 	.word	0x40004c00
 800291c:	40023800 	.word	0x40023800
 8002920:	40020800 	.word	0x40020800
 8002924:	200000f0 	.word	0x200000f0
 8002928:	40026040 	.word	0x40026040
 800292c:	40011000 	.word	0x40011000
 8002930:	40020400 	.word	0x40020400
 8002934:	20000264 	.word	0x20000264
 8002938:	40026440 	.word	0x40026440

0800293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <HardFault_Handler+0x4>

08002950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <MemManage_Handler+0x4>

08002956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <BusFault_Handler+0x4>

0800295c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <UsageFault_Handler+0x4>

08002962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(compassGetDataPeriod > 5)
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <SysTick_Handler+0x2c>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d905      	bls.n	80029a4 <SysTick_Handler+0x18>
	  {
		  compassGetDataPeriod = 0;
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <SysTick_Handler+0x2c>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
		  compassRequest();
 800299e:	f7fe fcad 	bl	80012fc <compassRequest>
 80029a2:	e005      	b.n	80029b0 <SysTick_Handler+0x24>
	  }
	  else
	  {
		  compassGetDataPeriod++;
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <SysTick_Handler+0x2c>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	3301      	adds	r3, #1
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	4b02      	ldr	r3, [pc, #8]	; (80029b8 <SysTick_Handler+0x2c>)
 80029ae:	701a      	strb	r2, [r3, #0]
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b0:	f000 f8c2 	bl	8002b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	200002d0 	.word	0x200002d0

080029bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	compassDecode();
 80029c0:	f7fe fcac 	bl	800131c <compassDecode>
//	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <DMA1_Stream2_IRQHandler+0x14>)
 80029c6:	f000 fb11 	bl	8002fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200000f0 	.word	0x200000f0

080029d4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <TIM5_IRQHandler+0x10>)
 80029da:	f001 fc5f 	bl	800429c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000204 	.word	0x20000204

080029e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80029ec:	4802      	ldr	r0, [pc, #8]	; (80029f8 <UART4_IRQHandler+0x10>)
 80029ee:	f002 fc07 	bl	8005200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200003e0 	.word	0x200003e0

080029fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	PS2DMA_ProcessingData();
 8002a00:	f7fe faf6 	bl	8000ff0 <PS2DMA_ProcessingData>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <DMA2_Stream2_IRQHandler+0x14>)
 8002a06:	f000 faf1 	bl	8002fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000264 	.word	0x20000264

08002a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <SystemInit+0x28>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <SystemInit+0x28>)
 8002a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <SystemInit+0x28>)
 8002a2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a2e:	609a      	str	r2, [r3, #8]
#endif
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a46:	e003      	b.n	8002a50 <LoopCopyDataInit>

08002a48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a4e:	3104      	adds	r1, #4

08002a50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a58:	d3f6      	bcc.n	8002a48 <CopyDataInit>
  ldr  r2, =_sbss
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a5c:	e002      	b.n	8002a64 <LoopFillZerobss>

08002a5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a60:	f842 3b04 	str.w	r3, [r2], #4

08002a64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a68:	d3f9      	bcc.n	8002a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a6a:	f7ff ffd3 	bl	8002a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f003 fa2b 	bl	8005ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a72:	f7fe fe71 	bl	8001758 <main>
  bx  lr    
 8002a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a7c:	080078d0 	.word	0x080078d0
  ldr  r0, =_sdata
 8002a80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a84:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8002a88:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8002a8c:	20000458 	.word	0x20000458

08002a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a90:	e7fe      	b.n	8002a90 <ADC_IRQHandler>
	...

08002a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <HAL_Init+0x40>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <HAL_Init+0x40>)
 8002a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_Init+0x40>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <HAL_Init+0x40>)
 8002aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_Init+0x40>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <HAL_Init+0x40>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002abc:	2003      	movs	r0, #3
 8002abe:	f000 f92b 	bl	8002d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f000 f808 	bl	8002ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ac8:	f7ff fd6e 	bl	80025a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023c00 	.word	0x40023c00

08002ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_InitTick+0x54>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_InitTick+0x58>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f943 	bl	8002d82 <HAL_SYSTICK_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00e      	b.n	8002b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b0f      	cmp	r3, #15
 8002b0a:	d80a      	bhi.n	8002b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	f000 f90b 	bl	8002d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b18:	4a06      	ldr	r2, [pc, #24]	; (8002b34 <HAL_InitTick+0x5c>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e000      	b.n	8002b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000040 	.word	0x20000040
 8002b30:	20000048 	.word	0x20000048
 8002b34:	20000044 	.word	0x20000044

08002b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_IncTick+0x20>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_IncTick+0x24>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <HAL_IncTick+0x24>)
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000048 	.word	0x20000048
 8002b5c:	20000454 	.word	0x20000454

08002b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return uwTick;
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_GetTick+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000454 	.word	0x20000454

08002b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002baa:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	f003 0307 	and.w	r3, r3, #7
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db0b      	blt.n	8002c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4907      	ldr	r1, [pc, #28]	; (8002c14 <__NVIC_EnableIRQ+0x38>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000e100 	.word	0xe000e100

08002c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	db0a      	blt.n	8002c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	490c      	ldr	r1, [pc, #48]	; (8002c64 <__NVIC_SetPriority+0x4c>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	0112      	lsls	r2, r2, #4
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c40:	e00a      	b.n	8002c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4908      	ldr	r1, [pc, #32]	; (8002c68 <__NVIC_SetPriority+0x50>)
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	440b      	add	r3, r1
 8002c56:	761a      	strb	r2, [r3, #24]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000e100 	.word	0xe000e100
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f1c3 0307 	rsb	r3, r3, #7
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	bf28      	it	cs
 8002c8a:	2304      	movcs	r3, #4
 8002c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d902      	bls.n	8002c9c <NVIC_EncodePriority+0x30>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3b03      	subs	r3, #3
 8002c9a:	e000      	b.n	8002c9e <NVIC_EncodePriority+0x32>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	401a      	ands	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	4313      	orrs	r3, r2
         );
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce4:	d301      	bcc.n	8002cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00f      	b.n	8002d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <SysTick_Config+0x40>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f7ff ff8e 	bl	8002c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <SysTick_Config+0x40>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <SysTick_Config+0x40>)
 8002d04:	2207      	movs	r2, #7
 8002d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	e000e010 	.word	0xe000e010

08002d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff29 	bl	8002b78 <__NVIC_SetPriorityGrouping>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d40:	f7ff ff3e 	bl	8002bc0 <__NVIC_GetPriorityGrouping>
 8002d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	6978      	ldr	r0, [r7, #20]
 8002d4c:	f7ff ff8e 	bl	8002c6c <NVIC_EncodePriority>
 8002d50:	4602      	mov	r2, r0
 8002d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff5d 	bl	8002c18 <__NVIC_SetPriority>
}
 8002d5e:	bf00      	nop
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff31 	bl	8002bdc <__NVIC_EnableIRQ>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ffa2 	bl	8002cd4 <SysTick_Config>
 8002d90:	4603      	mov	r3, r0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff feda 	bl	8002b60 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e099      	b.n	8002eec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd8:	e00f      	b.n	8002dfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dda:	f7ff fec1 	bl	8002b60 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d908      	bls.n	8002dfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2203      	movs	r2, #3
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e078      	b.n	8002eec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e8      	bne.n	8002dda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <HAL_DMA_Init+0x158>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d107      	bne.n	8002e64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 0307 	bic.w	r3, r3, #7
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d117      	bne.n	8002ebe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00e      	beq.n	8002ebe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fa91 	bl	80033c8 <DMA_CheckFifoParam>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2240      	movs	r2, #64	; 0x40
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e016      	b.n	8002eec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa48 	bl	800335c <DMA_CalcBaseAndBitshift>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	223f      	movs	r2, #63	; 0x3f
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	f010803f 	.word	0xf010803f

08002ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_DMA_Start_IT+0x26>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e040      	b.n	8002fa0 <HAL_DMA_Start_IT+0xa8>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d12f      	bne.n	8002f92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f9da 	bl	8003300 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	223f      	movs	r2, #63	; 0x3f
 8002f52:	409a      	lsls	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0216 	orr.w	r2, r2, #22
 8002f66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0208 	orr.w	r2, r2, #8
 8002f7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e005      	b.n	8002f9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d004      	beq.n	8002fc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e00c      	b.n	8002fe0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2205      	movs	r2, #5
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ff8:	4b92      	ldr	r3, [pc, #584]	; (8003244 <HAL_DMA_IRQHandler+0x258>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a92      	ldr	r2, [pc, #584]	; (8003248 <HAL_DMA_IRQHandler+0x25c>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0a9b      	lsrs	r3, r3, #10
 8003004:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	2208      	movs	r2, #8
 8003018:	409a      	lsls	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01a      	beq.n	8003058 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0204 	bic.w	r2, r2, #4
 800303e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	2208      	movs	r2, #8
 8003046:	409a      	lsls	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	2201      	movs	r2, #1
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d012      	beq.n	800308e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	2201      	movs	r2, #1
 800307c:	409a      	lsls	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	f043 0202 	orr.w	r2, r3, #2
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	2204      	movs	r2, #4
 8003094:	409a      	lsls	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d012      	beq.n	80030c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b0:	2204      	movs	r2, #4
 80030b2:	409a      	lsls	r2, r3
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	f043 0204 	orr.w	r2, r3, #4
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	2210      	movs	r2, #16
 80030ca:	409a      	lsls	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d043      	beq.n	800315c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d03c      	beq.n	800315c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	2210      	movs	r2, #16
 80030e8:	409a      	lsls	r2, r3
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d018      	beq.n	800312e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d108      	bne.n	800311c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d024      	beq.n	800315c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
 800311a:	e01f      	b.n	800315c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01b      	beq.n	800315c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
 800312c:	e016      	b.n	800315c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d107      	bne.n	800314c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0208 	bic.w	r2, r2, #8
 800314a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	2220      	movs	r2, #32
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 808e 	beq.w	800328a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8086 	beq.w	800328a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	2220      	movs	r2, #32
 8003184:	409a      	lsls	r2, r3
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b05      	cmp	r3, #5
 8003194:	d136      	bne.n	8003204 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0216 	bic.w	r2, r2, #22
 80031a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d103      	bne.n	80031c6 <HAL_DMA_IRQHandler+0x1da>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0208 	bic.w	r2, r2, #8
 80031d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	223f      	movs	r2, #63	; 0x3f
 80031dc:	409a      	lsls	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d07d      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
        }
        return;
 8003202:	e078      	b.n	80032f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01c      	beq.n	800324c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d108      	bne.n	8003232 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003224:	2b00      	cmp	r3, #0
 8003226:	d030      	beq.n	800328a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
 8003230:	e02b      	b.n	800328a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d027      	beq.n	800328a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
 8003242:	e022      	b.n	800328a <HAL_DMA_IRQHandler+0x29e>
 8003244:	20000040 	.word	0x20000040
 8003248:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10f      	bne.n	800327a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0210 	bic.w	r2, r2, #16
 8003268:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	2b00      	cmp	r3, #0
 8003290:	d032      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d022      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2205      	movs	r2, #5
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	3301      	adds	r3, #1
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d307      	bcc.n	80032d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f2      	bne.n	80032b6 <HAL_DMA_IRQHandler+0x2ca>
 80032d0:	e000      	b.n	80032d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80032d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
 80032f4:	e000      	b.n	80032f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80032f6:	bf00      	nop
    }
  }
}
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop

08003300 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800331c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d108      	bne.n	8003340 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800333e:	e007      	b.n	8003350 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	3b10      	subs	r3, #16
 800336c:	4a14      	ldr	r2, [pc, #80]	; (80033c0 <DMA_CalcBaseAndBitshift+0x64>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003376:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d909      	bls.n	800339e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003392:	f023 0303 	bic.w	r3, r3, #3
 8003396:	1d1a      	adds	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	659a      	str	r2, [r3, #88]	; 0x58
 800339c:	e007      	b.n	80033ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	aaaaaaab 	.word	0xaaaaaaab
 80033c4:	08007698 	.word	0x08007698

080033c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11f      	bne.n	8003422 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d855      	bhi.n	8003494 <DMA_CheckFifoParam+0xcc>
 80033e8:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <DMA_CheckFifoParam+0x28>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003401 	.word	0x08003401
 80033f4:	08003413 	.word	0x08003413
 80033f8:	08003401 	.word	0x08003401
 80033fc:	08003495 	.word	0x08003495
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d045      	beq.n	8003498 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003410:	e042      	b.n	8003498 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800341a:	d13f      	bne.n	800349c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003420:	e03c      	b.n	800349c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342a:	d121      	bne.n	8003470 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d836      	bhi.n	80034a0 <DMA_CheckFifoParam+0xd8>
 8003432:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <DMA_CheckFifoParam+0x70>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	08003449 	.word	0x08003449
 800343c:	0800344f 	.word	0x0800344f
 8003440:	08003449 	.word	0x08003449
 8003444:	08003461 	.word	0x08003461
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      break;
 800344c:	e02f      	b.n	80034ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d024      	beq.n	80034a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345e:	e021      	b.n	80034a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003468:	d11e      	bne.n	80034a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800346e:	e01b      	b.n	80034a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d902      	bls.n	800347c <DMA_CheckFifoParam+0xb4>
 8003476:	2b03      	cmp	r3, #3
 8003478:	d003      	beq.n	8003482 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800347a:	e018      	b.n	80034ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
      break;
 8003480:	e015      	b.n	80034ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00e      	beq.n	80034ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
      break;
 8003492:	e00b      	b.n	80034ac <DMA_CheckFifoParam+0xe4>
      break;
 8003494:	bf00      	nop
 8003496:	e00a      	b.n	80034ae <DMA_CheckFifoParam+0xe6>
      break;
 8003498:	bf00      	nop
 800349a:	e008      	b.n	80034ae <DMA_CheckFifoParam+0xe6>
      break;
 800349c:	bf00      	nop
 800349e:	e006      	b.n	80034ae <DMA_CheckFifoParam+0xe6>
      break;
 80034a0:	bf00      	nop
 80034a2:	e004      	b.n	80034ae <DMA_CheckFifoParam+0xe6>
      break;
 80034a4:	bf00      	nop
 80034a6:	e002      	b.n	80034ae <DMA_CheckFifoParam+0xe6>
      break;   
 80034a8:	bf00      	nop
 80034aa:	e000      	b.n	80034ae <DMA_CheckFifoParam+0xe6>
      break;
 80034ac:	bf00      	nop
    }
  } 
  
  return status; 
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034bc:	b480      	push	{r7}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	e16b      	b.n	80037b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034d8:	2201      	movs	r2, #1
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	f040 815a 	bne.w	80037aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d00b      	beq.n	8003516 <HAL_GPIO_Init+0x5a>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d007      	beq.n	8003516 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800350a:	2b11      	cmp	r3, #17
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b12      	cmp	r3, #18
 8003514:	d130      	bne.n	8003578 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	2203      	movs	r2, #3
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800354c:	2201      	movs	r2, #1
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 0201 	and.w	r2, r3, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	2203      	movs	r2, #3
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0xfc>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b12      	cmp	r3, #18
 80035b6:	d123      	bne.n	8003600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	08da      	lsrs	r2, r3, #3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3208      	adds	r2, #8
 80035c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	220f      	movs	r2, #15
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	08da      	lsrs	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3208      	adds	r2, #8
 80035fa:	69b9      	ldr	r1, [r7, #24]
 80035fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	2203      	movs	r2, #3
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0203 	and.w	r2, r3, #3
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80b4 	beq.w	80037aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <HAL_GPIO_Init+0x308>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	4a5e      	ldr	r2, [pc, #376]	; (80037c4 <HAL_GPIO_Init+0x308>)
 800364c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003650:	6453      	str	r3, [r2, #68]	; 0x44
 8003652:	4b5c      	ldr	r3, [pc, #368]	; (80037c4 <HAL_GPIO_Init+0x308>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800365e:	4a5a      	ldr	r2, [pc, #360]	; (80037c8 <HAL_GPIO_Init+0x30c>)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3302      	adds	r3, #2
 8003666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a51      	ldr	r2, [pc, #324]	; (80037cc <HAL_GPIO_Init+0x310>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d02b      	beq.n	80036e2 <HAL_GPIO_Init+0x226>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a50      	ldr	r2, [pc, #320]	; (80037d0 <HAL_GPIO_Init+0x314>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d025      	beq.n	80036de <HAL_GPIO_Init+0x222>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4f      	ldr	r2, [pc, #316]	; (80037d4 <HAL_GPIO_Init+0x318>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01f      	beq.n	80036da <HAL_GPIO_Init+0x21e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4e      	ldr	r2, [pc, #312]	; (80037d8 <HAL_GPIO_Init+0x31c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d019      	beq.n	80036d6 <HAL_GPIO_Init+0x21a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4d      	ldr	r2, [pc, #308]	; (80037dc <HAL_GPIO_Init+0x320>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_GPIO_Init+0x216>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4c      	ldr	r2, [pc, #304]	; (80037e0 <HAL_GPIO_Init+0x324>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00d      	beq.n	80036ce <HAL_GPIO_Init+0x212>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4b      	ldr	r2, [pc, #300]	; (80037e4 <HAL_GPIO_Init+0x328>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <HAL_GPIO_Init+0x20e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4a      	ldr	r2, [pc, #296]	; (80037e8 <HAL_GPIO_Init+0x32c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_GPIO_Init+0x20a>
 80036c2:	2307      	movs	r3, #7
 80036c4:	e00e      	b.n	80036e4 <HAL_GPIO_Init+0x228>
 80036c6:	2308      	movs	r3, #8
 80036c8:	e00c      	b.n	80036e4 <HAL_GPIO_Init+0x228>
 80036ca:	2306      	movs	r3, #6
 80036cc:	e00a      	b.n	80036e4 <HAL_GPIO_Init+0x228>
 80036ce:	2305      	movs	r3, #5
 80036d0:	e008      	b.n	80036e4 <HAL_GPIO_Init+0x228>
 80036d2:	2304      	movs	r3, #4
 80036d4:	e006      	b.n	80036e4 <HAL_GPIO_Init+0x228>
 80036d6:	2303      	movs	r3, #3
 80036d8:	e004      	b.n	80036e4 <HAL_GPIO_Init+0x228>
 80036da:	2302      	movs	r3, #2
 80036dc:	e002      	b.n	80036e4 <HAL_GPIO_Init+0x228>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <HAL_GPIO_Init+0x228>
 80036e2:	2300      	movs	r3, #0
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	f002 0203 	and.w	r2, r2, #3
 80036ea:	0092      	lsls	r2, r2, #2
 80036ec:	4093      	lsls	r3, r2
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036f4:	4934      	ldr	r1, [pc, #208]	; (80037c8 <HAL_GPIO_Init+0x30c>)
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	089b      	lsrs	r3, r3, #2
 80036fa:	3302      	adds	r3, #2
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003702:	4b3a      	ldr	r3, [pc, #232]	; (80037ec <HAL_GPIO_Init+0x330>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003726:	4a31      	ldr	r2, [pc, #196]	; (80037ec <HAL_GPIO_Init+0x330>)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800372c:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <HAL_GPIO_Init+0x330>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003750:	4a26      	ldr	r2, [pc, #152]	; (80037ec <HAL_GPIO_Init+0x330>)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003756:	4b25      	ldr	r3, [pc, #148]	; (80037ec <HAL_GPIO_Init+0x330>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800377a:	4a1c      	ldr	r2, [pc, #112]	; (80037ec <HAL_GPIO_Init+0x330>)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <HAL_GPIO_Init+0x330>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037a4:	4a11      	ldr	r2, [pc, #68]	; (80037ec <HAL_GPIO_Init+0x330>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3301      	adds	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2b0f      	cmp	r3, #15
 80037b4:	f67f ae90 	bls.w	80034d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037b8:	bf00      	nop
 80037ba:	3724      	adds	r7, #36	; 0x24
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40013800 	.word	0x40013800
 80037cc:	40020000 	.word	0x40020000
 80037d0:	40020400 	.word	0x40020400
 80037d4:	40020800 	.word	0x40020800
 80037d8:	40020c00 	.word	0x40020c00
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40021400 	.word	0x40021400
 80037e4:	40021800 	.word	0x40021800
 80037e8:	40021c00 	.word	0x40021c00
 80037ec:	40013c00 	.word	0x40013c00

080037f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	e001      	b.n	8003812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
 800382c:	4613      	mov	r3, r2
 800382e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003830:	787b      	ldrb	r3, [r7, #1]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800383c:	e003      	b.n	8003846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800383e:	887b      	ldrh	r3, [r7, #2]
 8003840:	041a      	lsls	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	619a      	str	r2, [r3, #24]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e25b      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d075      	beq.n	800395e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003872:	4ba3      	ldr	r3, [pc, #652]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b04      	cmp	r3, #4
 800387c:	d00c      	beq.n	8003898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387e:	4ba0      	ldr	r3, [pc, #640]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003886:	2b08      	cmp	r3, #8
 8003888:	d112      	bne.n	80038b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800388a:	4b9d      	ldr	r3, [pc, #628]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003896:	d10b      	bne.n	80038b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003898:	4b99      	ldr	r3, [pc, #612]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d05b      	beq.n	800395c <HAL_RCC_OscConfig+0x108>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d157      	bne.n	800395c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e236      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b8:	d106      	bne.n	80038c8 <HAL_RCC_OscConfig+0x74>
 80038ba:	4b91      	ldr	r3, [pc, #580]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a90      	ldr	r2, [pc, #576]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e01d      	b.n	8003904 <HAL_RCC_OscConfig+0xb0>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCC_OscConfig+0x98>
 80038d2:	4b8b      	ldr	r3, [pc, #556]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a8a      	ldr	r2, [pc, #552]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	4b88      	ldr	r3, [pc, #544]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a87      	ldr	r2, [pc, #540]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e00b      	b.n	8003904 <HAL_RCC_OscConfig+0xb0>
 80038ec:	4b84      	ldr	r3, [pc, #528]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a83      	ldr	r2, [pc, #524]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b81      	ldr	r3, [pc, #516]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a80      	ldr	r2, [pc, #512]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7ff f928 	bl	8002b60 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003914:	f7ff f924 	bl	8002b60 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e1fb      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0xc0>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7ff f914 	bl	8002b60 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800393c:	f7ff f910 	bl	8002b60 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	; 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e1e7      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	4b6c      	ldr	r3, [pc, #432]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0xe8>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d063      	beq.n	8003a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800396a:	4b65      	ldr	r3, [pc, #404]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003976:	4b62      	ldr	r3, [pc, #392]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800397e:	2b08      	cmp	r3, #8
 8003980:	d11c      	bne.n	80039bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003982:	4b5f      	ldr	r3, [pc, #380]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d116      	bne.n	80039bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_RCC_OscConfig+0x152>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e1bb      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a6:	4b56      	ldr	r3, [pc, #344]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4952      	ldr	r1, [pc, #328]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ba:	e03a      	b.n	8003a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d020      	beq.n	8003a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c4:	4b4f      	ldr	r3, [pc, #316]	; (8003b04 <HAL_RCC_OscConfig+0x2b0>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7ff f8c9 	bl	8002b60 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d2:	f7ff f8c5 	bl	8002b60 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e19c      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	4b46      	ldr	r3, [pc, #280]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f0:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4940      	ldr	r1, [pc, #256]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]
 8003a04:	e015      	b.n	8003a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a06:	4b3f      	ldr	r3, [pc, #252]	; (8003b04 <HAL_RCC_OscConfig+0x2b0>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7ff f8a8 	bl	8002b60 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a14:	f7ff f8a4 	bl	8002b60 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e17b      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a26:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d030      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d016      	beq.n	8003a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a46:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <HAL_RCC_OscConfig+0x2b4>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4c:	f7ff f888 	bl	8002b60 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a54:	f7ff f884 	bl	8002b60 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e15b      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x200>
 8003a72:	e015      	b.n	8003aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a74:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <HAL_RCC_OscConfig+0x2b4>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7a:	f7ff f871 	bl	8002b60 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a82:	f7ff f86d 	bl	8002b60 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e144      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80a0 	beq.w	8003bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <HAL_RCC_OscConfig+0x2b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d121      	bne.n	8003b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_RCC_OscConfig+0x2b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <HAL_RCC_OscConfig+0x2b8>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af6:	f7ff f833 	bl	8002b60 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	e011      	b.n	8003b22 <HAL_RCC_OscConfig+0x2ce>
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	42470000 	.word	0x42470000
 8003b08:	42470e80 	.word	0x42470e80
 8003b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7ff f826 	bl	8002b60 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0fd      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b22:	4b81      	ldr	r3, [pc, #516]	; (8003d28 <HAL_RCC_OscConfig+0x4d4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d106      	bne.n	8003b44 <HAL_RCC_OscConfig+0x2f0>
 8003b36:	4b7d      	ldr	r3, [pc, #500]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a7c      	ldr	r2, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
 8003b42:	e01c      	b.n	8003b7e <HAL_RCC_OscConfig+0x32a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_OscConfig+0x312>
 8003b4c:	4b77      	ldr	r3, [pc, #476]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a76      	ldr	r2, [pc, #472]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
 8003b58:	4b74      	ldr	r3, [pc, #464]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	4a73      	ldr	r2, [pc, #460]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70
 8003b64:	e00b      	b.n	8003b7e <HAL_RCC_OscConfig+0x32a>
 8003b66:	4b71      	ldr	r3, [pc, #452]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a70      	ldr	r2, [pc, #448]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
 8003b72:	4b6e      	ldr	r3, [pc, #440]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	4a6d      	ldr	r2, [pc, #436]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d015      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b86:	f7fe ffeb 	bl	8002b60 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fe ffe7 	bl	8002b60 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0bc      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ee      	beq.n	8003b8e <HAL_RCC_OscConfig+0x33a>
 8003bb0:	e014      	b.n	8003bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fe ffd5 	bl	8002b60 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fe ffd1 	bl	8002b60 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e0a6      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd0:	4b56      	ldr	r3, [pc, #344]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ee      	bne.n	8003bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b52      	ldr	r3, [pc, #328]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	4a51      	ldr	r2, [pc, #324]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8092 	beq.w	8003d1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bf8:	4b4c      	ldr	r3, [pc, #304]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d05c      	beq.n	8003cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d141      	bne.n	8003c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0c:	4b48      	ldr	r3, [pc, #288]	; (8003d30 <HAL_RCC_OscConfig+0x4dc>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7fe ffa5 	bl	8002b60 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1a:	f7fe ffa1 	bl	8002b60 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e078      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	019b      	lsls	r3, r3, #6
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	3b01      	subs	r3, #1
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	061b      	lsls	r3, r3, #24
 8003c5c:	4933      	ldr	r1, [pc, #204]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c62:	4b33      	ldr	r3, [pc, #204]	; (8003d30 <HAL_RCC_OscConfig+0x4dc>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe ff7a 	bl	8002b60 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fe ff76 	bl	8002b60 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e04d      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c82:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x41c>
 8003c8e:	e045      	b.n	8003d1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c90:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <HAL_RCC_OscConfig+0x4dc>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fe ff63 	bl	8002b60 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9e:	f7fe ff5f 	bl	8002b60 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e036      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb0:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x44a>
 8003cbc:	e02e      	b.n	8003d1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e029      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d11c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d115      	bne.n	8003d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10d      	bne.n	8003d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d106      	bne.n	8003d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	42470060 	.word	0x42470060

08003d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0cc      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d48:	4b68      	ldr	r3, [pc, #416]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d90c      	bls.n	8003d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b65      	ldr	r3, [pc, #404]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b63      	ldr	r3, [pc, #396]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0b8      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d020      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d88:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da0:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a52      	ldr	r2, [pc, #328]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	494d      	ldr	r1, [pc, #308]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d044      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d119      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e07f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df2:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e02:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e067      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e12:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 0203 	bic.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4934      	ldr	r1, [pc, #208]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e24:	f7fe fe9c 	bl	8002b60 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2c:	f7fe fe98 	bl	8002b60 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e04f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 020c 	and.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1eb      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d20c      	bcs.n	8003e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b22      	ldr	r3, [pc, #136]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e032      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4916      	ldr	r1, [pc, #88]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eba:	f000 f821 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003ebe:	4601      	mov	r1, r0
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	5cd3      	ldrb	r3, [r2, r3]
 8003ece:	fa21 f303 	lsr.w	r3, r1, r3
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fdfc 	bl	8002ad8 <HAL_InitTick>

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40023c00 	.word	0x40023c00
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	08007680 	.word	0x08007680
 8003ef8:	20000040 	.word	0x20000040
 8003efc:	20000044 	.word	0x20000044

08003f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f16:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d007      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0x32>
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d008      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x38>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 80b4 	bne.w	8004094 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b5e      	ldr	r3, [pc, #376]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f2e:	60bb      	str	r3, [r7, #8]
       break;
 8003f30:	e0b3      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f32:	4b5e      	ldr	r3, [pc, #376]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f34:	60bb      	str	r3, [r7, #8]
      break;
 8003f36:	e0b0      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f38:	4b5a      	ldr	r3, [pc, #360]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f42:	4b58      	ldr	r3, [pc, #352]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04a      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4e:	4b55      	ldr	r3, [pc, #340]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	099b      	lsrs	r3, r3, #6
 8003f54:	f04f 0400 	mov.w	r4, #0
 8003f58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	ea03 0501 	and.w	r5, r3, r1
 8003f64:	ea04 0602 	and.w	r6, r4, r2
 8003f68:	4629      	mov	r1, r5
 8003f6a:	4632      	mov	r2, r6
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	f04f 0400 	mov.w	r4, #0
 8003f74:	0154      	lsls	r4, r2, #5
 8003f76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f7a:	014b      	lsls	r3, r1, #5
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4622      	mov	r2, r4
 8003f80:	1b49      	subs	r1, r1, r5
 8003f82:	eb62 0206 	sbc.w	r2, r2, r6
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	f04f 0400 	mov.w	r4, #0
 8003f8e:	0194      	lsls	r4, r2, #6
 8003f90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f94:	018b      	lsls	r3, r1, #6
 8003f96:	1a5b      	subs	r3, r3, r1
 8003f98:	eb64 0402 	sbc.w	r4, r4, r2
 8003f9c:	f04f 0100 	mov.w	r1, #0
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	00e2      	lsls	r2, r4, #3
 8003fa6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003faa:	00d9      	lsls	r1, r3, #3
 8003fac:	460b      	mov	r3, r1
 8003fae:	4614      	mov	r4, r2
 8003fb0:	195b      	adds	r3, r3, r5
 8003fb2:	eb44 0406 	adc.w	r4, r4, r6
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	0262      	lsls	r2, r4, #9
 8003fc0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003fc4:	0259      	lsls	r1, r3, #9
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4614      	mov	r4, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	4621      	mov	r1, r4
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f04f 0400 	mov.w	r4, #0
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	f7fc fd8a 	bl	8000af0 <__aeabi_uldivmod>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e049      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe4:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	f04f 0400 	mov.w	r4, #0
 8003fee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	ea03 0501 	and.w	r5, r3, r1
 8003ffa:	ea04 0602 	and.w	r6, r4, r2
 8003ffe:	4629      	mov	r1, r5
 8004000:	4632      	mov	r2, r6
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	f04f 0400 	mov.w	r4, #0
 800400a:	0154      	lsls	r4, r2, #5
 800400c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004010:	014b      	lsls	r3, r1, #5
 8004012:	4619      	mov	r1, r3
 8004014:	4622      	mov	r2, r4
 8004016:	1b49      	subs	r1, r1, r5
 8004018:	eb62 0206 	sbc.w	r2, r2, r6
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	f04f 0400 	mov.w	r4, #0
 8004024:	0194      	lsls	r4, r2, #6
 8004026:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800402a:	018b      	lsls	r3, r1, #6
 800402c:	1a5b      	subs	r3, r3, r1
 800402e:	eb64 0402 	sbc.w	r4, r4, r2
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	00e2      	lsls	r2, r4, #3
 800403c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004040:	00d9      	lsls	r1, r3, #3
 8004042:	460b      	mov	r3, r1
 8004044:	4614      	mov	r4, r2
 8004046:	195b      	adds	r3, r3, r5
 8004048:	eb44 0406 	adc.w	r4, r4, r6
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	02a2      	lsls	r2, r4, #10
 8004056:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800405a:	0299      	lsls	r1, r3, #10
 800405c:	460b      	mov	r3, r1
 800405e:	4614      	mov	r4, r2
 8004060:	4618      	mov	r0, r3
 8004062:	4621      	mov	r1, r4
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f04f 0400 	mov.w	r4, #0
 800406a:	461a      	mov	r2, r3
 800406c:	4623      	mov	r3, r4
 800406e:	f7fc fd3f 	bl	8000af0 <__aeabi_uldivmod>
 8004072:	4603      	mov	r3, r0
 8004074:	460c      	mov	r4, r1
 8004076:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	3301      	adds	r3, #1
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	60bb      	str	r3, [r7, #8]
      break;
 8004092:	e002      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004096:	60bb      	str	r3, [r7, #8]
      break;
 8004098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409a:	68bb      	ldr	r3, [r7, #8]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a4:	40023800 	.word	0x40023800
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	007a1200 	.word	0x007a1200

080040b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000040 	.word	0x20000040

080040c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040cc:	f7ff fff0 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040d0:	4601      	mov	r1, r0
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	0a9b      	lsrs	r3, r3, #10
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4a03      	ldr	r2, [pc, #12]	; (80040ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80040de:	5cd3      	ldrb	r3, [r2, r3]
 80040e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	08007690 	.word	0x08007690

080040f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040f4:	f7ff ffdc 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040f8:	4601      	mov	r1, r0
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	0b5b      	lsrs	r3, r3, #13
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4a03      	ldr	r2, [pc, #12]	; (8004114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004106:	5cd3      	ldrb	r3, [r2, r3]
 8004108:	fa21 f303 	lsr.w	r3, r1, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40023800 	.word	0x40023800
 8004114:	08007690 	.word	0x08007690

08004118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e01d      	b.n	8004166 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fe fa5a 	bl	80025f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4610      	mov	r0, r2
 8004158:	f000 fb4e 	bl	80047f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b06      	cmp	r3, #6
 8004196:	d007      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e01d      	b.n	8004204 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f815 	bl	800420c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2202      	movs	r2, #2
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f000 faff 	bl	80047f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2201      	movs	r2, #1
 8004230:	6839      	ldr	r1, [r7, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fdca 	bl	8004dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <HAL_TIM_PWM_Start+0x74>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIM_PWM_Start+0x2c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <HAL_TIM_PWM_Start+0x78>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_TIM_PWM_Start+0x30>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_TIM_PWM_Start+0x32>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b06      	cmp	r3, #6
 8004276:	d007      	beq.n	8004288 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40010000 	.word	0x40010000
 8004298:	40010400 	.word	0x40010400

0800429c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d122      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d11b      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0202 	mvn.w	r2, #2
 80042c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa6b 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 80042e4:	e005      	b.n	80042f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa5d 	bl	80047a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fa6e 	bl	80047ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b04      	cmp	r3, #4
 8004304:	d122      	bne.n	800434c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d11b      	bne.n	800434c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0204 	mvn.w	r2, #4
 800431c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa41 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fa33 	bl	80047a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fa44 	bl	80047ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b08      	cmp	r3, #8
 8004358:	d122      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d11b      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0208 	mvn.w	r2, #8
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2204      	movs	r2, #4
 8004376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa17 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa09 	bl	80047a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fa1a 	bl	80047ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0210 	mvn.w	r2, #16
 80043c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2208      	movs	r2, #8
 80043ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9ed 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9df 	bl	80047a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f9f0 	bl	80047ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0201 	mvn.w	r2, #1
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc fd28 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b80      	cmp	r3, #128	; 0x80
 800442c:	d10e      	bne.n	800444c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d107      	bne.n	800444c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fdbe 	bl	8004fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004456:	2b40      	cmp	r3, #64	; 0x40
 8004458:	d10e      	bne.n	8004478 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	d107      	bne.n	8004478 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f9b5 	bl	80047e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b20      	cmp	r3, #32
 8004484:	d10e      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b20      	cmp	r3, #32
 8004492:	d107      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0220 	mvn.w	r2, #32
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fd88 	bl	8004fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e0b4      	b.n	8004630 <HAL_TIM_PWM_ConfigChannel+0x184>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2202      	movs	r2, #2
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	f200 809f 	bhi.w	800461c <HAL_TIM_PWM_ConfigChannel+0x170>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	08004519 	.word	0x08004519
 80044e8:	0800461d 	.word	0x0800461d
 80044ec:	0800461d 	.word	0x0800461d
 80044f0:	0800461d 	.word	0x0800461d
 80044f4:	08004559 	.word	0x08004559
 80044f8:	0800461d 	.word	0x0800461d
 80044fc:	0800461d 	.word	0x0800461d
 8004500:	0800461d 	.word	0x0800461d
 8004504:	0800459b 	.word	0x0800459b
 8004508:	0800461d 	.word	0x0800461d
 800450c:	0800461d 	.word	0x0800461d
 8004510:	0800461d 	.word	0x0800461d
 8004514:	080045db 	.word	0x080045db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fa0a 	bl	8004938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0208 	orr.w	r2, r2, #8
 8004532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0204 	bic.w	r2, r2, #4
 8004542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6999      	ldr	r1, [r3, #24]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	619a      	str	r2, [r3, #24]
      break;
 8004556:	e062      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fa5a 	bl	8004a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6999      	ldr	r1, [r3, #24]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	021a      	lsls	r2, r3, #8
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	619a      	str	r2, [r3, #24]
      break;
 8004598:	e041      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 faaf 	bl	8004b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0208 	orr.w	r2, r2, #8
 80045b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0204 	bic.w	r2, r2, #4
 80045c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69d9      	ldr	r1, [r3, #28]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	61da      	str	r2, [r3, #28]
      break;
 80045d8:	e021      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fb03 	bl	8004bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69d9      	ldr	r1, [r3, #28]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	021a      	lsls	r2, r3, #8
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	61da      	str	r2, [r3, #28]
      break;
 800461a:	e000      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800461c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_TIM_ConfigClockSource+0x18>
 800464c:	2302      	movs	r3, #2
 800464e:	e0a6      	b.n	800479e <HAL_TIM_ConfigClockSource+0x166>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800466e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004676:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d067      	beq.n	8004758 <HAL_TIM_ConfigClockSource+0x120>
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d80b      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x6c>
 800468c:	2b10      	cmp	r3, #16
 800468e:	d073      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0x140>
 8004690:	2b10      	cmp	r3, #16
 8004692:	d802      	bhi.n	800469a <HAL_TIM_ConfigClockSource+0x62>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d06f      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004698:	e078      	b.n	800478c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800469a:	2b20      	cmp	r3, #32
 800469c:	d06c      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0x140>
 800469e:	2b30      	cmp	r3, #48	; 0x30
 80046a0:	d06a      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80046a2:	e073      	b.n	800478c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046a4:	2b70      	cmp	r3, #112	; 0x70
 80046a6:	d00d      	beq.n	80046c4 <HAL_TIM_ConfigClockSource+0x8c>
 80046a8:	2b70      	cmp	r3, #112	; 0x70
 80046aa:	d804      	bhi.n	80046b6 <HAL_TIM_ConfigClockSource+0x7e>
 80046ac:	2b50      	cmp	r3, #80	; 0x50
 80046ae:	d033      	beq.n	8004718 <HAL_TIM_ConfigClockSource+0xe0>
 80046b0:	2b60      	cmp	r3, #96	; 0x60
 80046b2:	d041      	beq.n	8004738 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80046b4:	e06a      	b.n	800478c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ba:	d066      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x152>
 80046bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c0:	d017      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80046c2:	e063      	b.n	800478c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	6899      	ldr	r1, [r3, #8]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f000 fb5a 	bl	8004d8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	609a      	str	r2, [r3, #8]
      break;
 80046f0:	e04c      	b.n	800478c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6899      	ldr	r1, [r3, #8]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f000 fb43 	bl	8004d8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004714:	609a      	str	r2, [r3, #8]
      break;
 8004716:	e039      	b.n	800478c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	461a      	mov	r2, r3
 8004726:	f000 fab7 	bl	8004c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2150      	movs	r1, #80	; 0x50
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fb10 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004736:	e029      	b.n	800478c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6859      	ldr	r1, [r3, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	461a      	mov	r2, r3
 8004746:	f000 fad6 	bl	8004cf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2160      	movs	r1, #96	; 0x60
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fb00 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004756:	e019      	b.n	800478c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6859      	ldr	r1, [r3, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	461a      	mov	r2, r3
 8004766:	f000 fa97 	bl	8004c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2140      	movs	r1, #64	; 0x40
 8004770:	4618      	mov	r0, r3
 8004772:	f000 faf0 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004776:	e009      	b.n	800478c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f000 fae7 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004788:	e000      	b.n	800478c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800478a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
	...

080047f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a40      	ldr	r2, [pc, #256]	; (800490c <TIM_Base_SetConfig+0x114>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d00f      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3d      	ldr	r2, [pc, #244]	; (8004910 <TIM_Base_SetConfig+0x118>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00b      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3c      	ldr	r2, [pc, #240]	; (8004914 <TIM_Base_SetConfig+0x11c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3b      	ldr	r2, [pc, #236]	; (8004918 <TIM_Base_SetConfig+0x120>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3a      	ldr	r2, [pc, #232]	; (800491c <TIM_Base_SetConfig+0x124>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d108      	bne.n	800484a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2f      	ldr	r2, [pc, #188]	; (800490c <TIM_Base_SetConfig+0x114>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d02b      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d027      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <TIM_Base_SetConfig+0x118>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d023      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2b      	ldr	r2, [pc, #172]	; (8004914 <TIM_Base_SetConfig+0x11c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01f      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <TIM_Base_SetConfig+0x120>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01b      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a29      	ldr	r2, [pc, #164]	; (800491c <TIM_Base_SetConfig+0x124>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d017      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a28      	ldr	r2, [pc, #160]	; (8004920 <TIM_Base_SetConfig+0x128>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a27      	ldr	r2, [pc, #156]	; (8004924 <TIM_Base_SetConfig+0x12c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00f      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a26      	ldr	r2, [pc, #152]	; (8004928 <TIM_Base_SetConfig+0x130>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00b      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a25      	ldr	r2, [pc, #148]	; (800492c <TIM_Base_SetConfig+0x134>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d007      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a24      	ldr	r2, [pc, #144]	; (8004930 <TIM_Base_SetConfig+0x138>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a23      	ldr	r2, [pc, #140]	; (8004934 <TIM_Base_SetConfig+0x13c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d108      	bne.n	80048bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a0a      	ldr	r2, [pc, #40]	; (800490c <TIM_Base_SetConfig+0x114>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_Base_SetConfig+0xf8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a0c      	ldr	r2, [pc, #48]	; (800491c <TIM_Base_SetConfig+0x124>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d103      	bne.n	80048f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	615a      	str	r2, [r3, #20]
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010000 	.word	0x40010000
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40010400 	.word	0x40010400
 8004920:	40014000 	.word	0x40014000
 8004924:	40014400 	.word	0x40014400
 8004928:	40014800 	.word	0x40014800
 800492c:	40001800 	.word	0x40001800
 8004930:	40001c00 	.word	0x40001c00
 8004934:	40002000 	.word	0x40002000

08004938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 0302 	bic.w	r3, r3, #2
 8004980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <TIM_OC1_SetConfig+0xd8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_OC1_SetConfig+0x64>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <TIM_OC1_SetConfig+0xdc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d10c      	bne.n	80049b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 0308 	bic.w	r3, r3, #8
 80049a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f023 0304 	bic.w	r3, r3, #4
 80049b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <TIM_OC1_SetConfig+0xd8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_OC1_SetConfig+0x8e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <TIM_OC1_SetConfig+0xdc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d111      	bne.n	80049ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	621a      	str	r2, [r3, #32]
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40010400 	.word	0x40010400

08004a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0210 	bic.w	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f023 0320 	bic.w	r3, r3, #32
 8004a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a22      	ldr	r2, [pc, #136]	; (8004afc <TIM_OC2_SetConfig+0xe4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_OC2_SetConfig+0x68>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <TIM_OC2_SetConfig+0xe8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10d      	bne.n	8004a9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a17      	ldr	r2, [pc, #92]	; (8004afc <TIM_OC2_SetConfig+0xe4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_OC2_SetConfig+0x94>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <TIM_OC2_SetConfig+0xe8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d113      	bne.n	8004ad4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40010000 	.word	0x40010000
 8004b00:	40010400 	.word	0x40010400

08004b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a21      	ldr	r2, [pc, #132]	; (8004be4 <TIM_OC3_SetConfig+0xe0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d003      	beq.n	8004b6a <TIM_OC3_SetConfig+0x66>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a20      	ldr	r2, [pc, #128]	; (8004be8 <TIM_OC3_SetConfig+0xe4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d10d      	bne.n	8004b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <TIM_OC3_SetConfig+0xe0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_OC3_SetConfig+0x92>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <TIM_OC3_SetConfig+0xe4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d113      	bne.n	8004bbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	621a      	str	r2, [r3, #32]
}
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40010400 	.word	0x40010400

08004bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	031b      	lsls	r3, r3, #12
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <TIM_OC4_SetConfig+0xa4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <TIM_OC4_SetConfig+0x68>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <TIM_OC4_SetConfig+0xa8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d109      	bne.n	8004c68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	019b      	lsls	r3, r3, #6
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	621a      	str	r2, [r3, #32]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400

08004c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f023 030a 	bic.w	r3, r3, #10
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	621a      	str	r2, [r3, #32]
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b087      	sub	sp, #28
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f023 0210 	bic.w	r2, r3, #16
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	031b      	lsls	r3, r3, #12
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f043 0307 	orr.w	r3, r3, #7
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	021a      	lsls	r2, r3, #8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2201      	movs	r2, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	401a      	ands	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1a      	ldr	r2, [r3, #32]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e05a      	b.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d022      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d01d      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d018      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1b      	ldr	r2, [pc, #108]	; (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1a      	ldr	r2, [pc, #104]	; (8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00e      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d004      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	40000c00 	.word	0x40000c00
 8004f04:	40010400 	.word	0x40010400
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40001800 	.word	0x40001800

08004f10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e03d      	b.n	8004fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e03f      	b.n	800506e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fd fbae 	bl	8002764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	; 0x24
 800500c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800501e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fbcf 	bl	80057c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005076:	b480      	push	{r7}
 8005078:	b085      	sub	sp, #20
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	4613      	mov	r3, r2
 8005082:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b20      	cmp	r3, #32
 800508e:	d130      	bne.n	80050f2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_UART_Transmit_IT+0x26>
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e029      	b.n	80050f4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_UART_Transmit_IT+0x38>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e022      	b.n	80050f4 <HAL_UART_Transmit_IT+0x7e>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	88fa      	ldrh	r2, [r7, #6]
 80050c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	88fa      	ldrh	r2, [r7, #6]
 80050c6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2221      	movs	r2, #33	; 0x21
 80050d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	e000      	b.n	80050f4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80050f2:	2302      	movs	r3, #2
  }
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b20      	cmp	r3, #32
 8005118:	d166      	bne.n	80051e8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_UART_Receive_DMA+0x26>
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e05f      	b.n	80051ea <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_UART_Receive_DMA+0x38>
 8005134:	2302      	movs	r3, #2
 8005136:	e058      	b.n	80051ea <HAL_UART_Receive_DMA+0xea>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	88fa      	ldrh	r2, [r7, #6]
 800514a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2222      	movs	r2, #34	; 0x22
 8005156:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515e:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <HAL_UART_Receive_DMA+0xf4>)
 8005160:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005166:	4a24      	ldr	r2, [pc, #144]	; (80051f8 <HAL_UART_Receive_DMA+0xf8>)
 8005168:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516e:	4a23      	ldr	r2, [pc, #140]	; (80051fc <HAL_UART_Receive_DMA+0xfc>)
 8005170:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005176:	2200      	movs	r2, #0
 8005178:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800517a:	f107 0308 	add.w	r3, r7, #8
 800517e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3304      	adds	r3, #4
 800518a:	4619      	mov	r1, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	f7fd feb1 	bl	8002ef8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005196:	2300      	movs	r3, #0
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e000      	b.n	80051ea <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
  }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	0800543d 	.word	0x0800543d
 80051f8:	080054a5 	.word	0x080054a5
 80051fc:	080054c1 	.word	0x080054c1

08005200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005220:	2300      	movs	r3, #0
 8005222:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10d      	bne.n	8005252 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_UART_IRQHandler+0x52>
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa38 	bl	80056c0 <UART_Receive_IT>
      return;
 8005250:	e0d1      	b.n	80053f6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80b0 	beq.w	80053ba <HAL_UART_IRQHandler+0x1ba>
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d105      	bne.n	8005270 <HAL_UART_IRQHandler+0x70>
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 80a5 	beq.w	80053ba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <HAL_UART_IRQHandler+0x90>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005288:	f043 0201 	orr.w	r2, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_UART_IRQHandler+0xb0>
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a8:	f043 0202 	orr.w	r2, r3, #2
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_UART_IRQHandler+0xd0>
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	f043 0204 	orr.w	r2, r3, #4
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00f      	beq.n	80052fa <HAL_UART_IRQHandler+0xfa>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <HAL_UART_IRQHandler+0xee>
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	f043 0208 	orr.w	r2, r3, #8
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d078      	beq.n	80053f4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <HAL_UART_IRQHandler+0x11c>
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f9d2 	bl	80056c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	bf0c      	ite	eq
 800532a:	2301      	moveq	r3, #1
 800532c:	2300      	movne	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <HAL_UART_IRQHandler+0x144>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d031      	beq.n	80053a8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f91b 	bl	8005580 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d123      	bne.n	80053a0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005366:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536c:	2b00      	cmp	r3, #0
 800536e:	d013      	beq.n	8005398 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	4a21      	ldr	r2, [pc, #132]	; (80053fc <HAL_UART_IRQHandler+0x1fc>)
 8005376:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537c:	4618      	mov	r0, r3
 800537e:	f7fd fe13 	bl	8002fa8 <HAL_DMA_Abort_IT>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d016      	beq.n	80053b6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005392:	4610      	mov	r0, r2
 8005394:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005396:	e00e      	b.n	80053b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f845 	bl	8005428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539e:	e00a      	b.n	80053b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f841 	bl	8005428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a6:	e006      	b.n	80053b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f83d 	bl	8005428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80053b4:	e01e      	b.n	80053f4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b6:	bf00      	nop
    return;
 80053b8:	e01c      	b.n	80053f4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_UART_IRQHandler+0x1d6>
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f908 	bl	80055e4 <UART_Transmit_IT>
    return;
 80053d4:	e00f      	b.n	80053f6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <HAL_UART_IRQHandler+0x1f6>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d005      	beq.n	80053f6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f950 	bl	8005690 <UART_EndTransmit_IT>
    return;
 80053f0:	bf00      	nop
 80053f2:	e000      	b.n	80053f6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80053f4:	bf00      	nop
  }
}
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	080055bd 	.word	0x080055bd

08005400 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11e      	bne.n	8005496 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800546c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0201 	bic.w	r2, r2, #1
 800547c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695a      	ldr	r2, [r3, #20]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800548c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff ffb2 	bl	8005400 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7ff ffae 	bl	8005414 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054dc:	2b80      	cmp	r3, #128	; 0x80
 80054de:	bf0c      	ite	eq
 80054e0:	2301      	moveq	r3, #1
 80054e2:	2300      	movne	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b21      	cmp	r3, #33	; 0x21
 80054f2:	d108      	bne.n	8005506 <UART_DMAError+0x46>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2200      	movs	r2, #0
 80054fe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005500:	68b8      	ldr	r0, [r7, #8]
 8005502:	f000 f827 	bl	8005554 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	bf0c      	ite	eq
 8005514:	2301      	moveq	r3, #1
 8005516:	2300      	movne	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b22      	cmp	r3, #34	; 0x22
 8005526:	d108      	bne.n	800553a <UART_DMAError+0x7a>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2200      	movs	r2, #0
 8005532:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005534:	68b8      	ldr	r0, [r7, #8]
 8005536:	f000 f823 	bl	8005580 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	f043 0210 	orr.w	r2, r3, #16
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005546:	68b8      	ldr	r0, [r7, #8]
 8005548:	f7ff ff6e 	bl	8005428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800556a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005596:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f7ff ff26 	bl	8005428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b21      	cmp	r3, #33	; 0x21
 80055f6:	d144      	bne.n	8005682 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005600:	d11a      	bne.n	8005638 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005616:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d105      	bne.n	800562c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	1c9a      	adds	r2, r3, #2
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	621a      	str	r2, [r3, #32]
 800562a:	e00e      	b.n	800564a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]
 8005636:	e008      	b.n	800564a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	1c59      	adds	r1, r3, #1
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6211      	str	r1, [r2, #32]
 8005642:	781a      	ldrb	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29b      	uxth	r3, r3
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	4619      	mov	r1, r3
 8005658:	84d1      	strh	r1, [r2, #38]	; 0x26
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800566c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800567c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e000      	b.n	8005684 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005682:	2302      	movs	r3, #2
  }
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7fb fc6f 	bl	8000f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b22      	cmp	r3, #34	; 0x22
 80056d2:	d171      	bne.n	80057b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056dc:	d123      	bne.n	8005726 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10e      	bne.n	800570a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	1c9a      	adds	r2, r3, #2
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
 8005708:	e029      	b.n	800575e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	b29b      	uxth	r3, r3
 8005712:	b2db      	uxtb	r3, r3
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
 8005724:	e01b      	b.n	800575e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6858      	ldr	r0, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	1c59      	adds	r1, r3, #1
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6291      	str	r1, [r2, #40]	; 0x28
 800573e:	b2c2      	uxtb	r2, r0
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e00c      	b.n	800575e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005750:	1c58      	adds	r0, r3, #1
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	6288      	str	r0, [r1, #40]	; 0x28
 8005756:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29b      	uxth	r3, r3
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	4619      	mov	r1, r3
 800576c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800576e:	2b00      	cmp	r3, #0
 8005770:	d120      	bne.n	80057b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0220 	bic.w	r2, r2, #32
 8005780:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005790:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0201 	bic.w	r2, r2, #1
 80057a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fe28 	bl	8005400 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e002      	b.n	80057ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	e000      	b.n	80057ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80057b8:	2302      	movs	r3, #2
  }
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005806:	f023 030c 	bic.w	r3, r3, #12
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	68f9      	ldr	r1, [r7, #12]
 8005810:	430b      	orrs	r3, r1
 8005812:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005832:	f040 818b 	bne.w	8005b4c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4ac1      	ldr	r2, [pc, #772]	; (8005b40 <UART_SetConfig+0x37c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d005      	beq.n	800584c <UART_SetConfig+0x88>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4abf      	ldr	r2, [pc, #764]	; (8005b44 <UART_SetConfig+0x380>)
 8005846:	4293      	cmp	r3, r2
 8005848:	f040 80bd 	bne.w	80059c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800584c:	f7fe fc50 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 8005850:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	461d      	mov	r5, r3
 8005856:	f04f 0600 	mov.w	r6, #0
 800585a:	46a8      	mov	r8, r5
 800585c:	46b1      	mov	r9, r6
 800585e:	eb18 0308 	adds.w	r3, r8, r8
 8005862:	eb49 0409 	adc.w	r4, r9, r9
 8005866:	4698      	mov	r8, r3
 8005868:	46a1      	mov	r9, r4
 800586a:	eb18 0805 	adds.w	r8, r8, r5
 800586e:	eb49 0906 	adc.w	r9, r9, r6
 8005872:	f04f 0100 	mov.w	r1, #0
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800587e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005882:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005886:	4688      	mov	r8, r1
 8005888:	4691      	mov	r9, r2
 800588a:	eb18 0005 	adds.w	r0, r8, r5
 800588e:	eb49 0106 	adc.w	r1, r9, r6
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	461d      	mov	r5, r3
 8005898:	f04f 0600 	mov.w	r6, #0
 800589c:	196b      	adds	r3, r5, r5
 800589e:	eb46 0406 	adc.w	r4, r6, r6
 80058a2:	461a      	mov	r2, r3
 80058a4:	4623      	mov	r3, r4
 80058a6:	f7fb f923 	bl	8000af0 <__aeabi_uldivmod>
 80058aa:	4603      	mov	r3, r0
 80058ac:	460c      	mov	r4, r1
 80058ae:	461a      	mov	r2, r3
 80058b0:	4ba5      	ldr	r3, [pc, #660]	; (8005b48 <UART_SetConfig+0x384>)
 80058b2:	fba3 2302 	umull	r2, r3, r3, r2
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	461d      	mov	r5, r3
 80058c0:	f04f 0600 	mov.w	r6, #0
 80058c4:	46a9      	mov	r9, r5
 80058c6:	46b2      	mov	sl, r6
 80058c8:	eb19 0309 	adds.w	r3, r9, r9
 80058cc:	eb4a 040a 	adc.w	r4, sl, sl
 80058d0:	4699      	mov	r9, r3
 80058d2:	46a2      	mov	sl, r4
 80058d4:	eb19 0905 	adds.w	r9, r9, r5
 80058d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80058dc:	f04f 0100 	mov.w	r1, #0
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058f0:	4689      	mov	r9, r1
 80058f2:	4692      	mov	sl, r2
 80058f4:	eb19 0005 	adds.w	r0, r9, r5
 80058f8:	eb4a 0106 	adc.w	r1, sl, r6
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	461d      	mov	r5, r3
 8005902:	f04f 0600 	mov.w	r6, #0
 8005906:	196b      	adds	r3, r5, r5
 8005908:	eb46 0406 	adc.w	r4, r6, r6
 800590c:	461a      	mov	r2, r3
 800590e:	4623      	mov	r3, r4
 8005910:	f7fb f8ee 	bl	8000af0 <__aeabi_uldivmod>
 8005914:	4603      	mov	r3, r0
 8005916:	460c      	mov	r4, r1
 8005918:	461a      	mov	r2, r3
 800591a:	4b8b      	ldr	r3, [pc, #556]	; (8005b48 <UART_SetConfig+0x384>)
 800591c:	fba3 1302 	umull	r1, r3, r3, r2
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	2164      	movs	r1, #100	; 0x64
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	3332      	adds	r3, #50	; 0x32
 800592e:	4a86      	ldr	r2, [pc, #536]	; (8005b48 <UART_SetConfig+0x384>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800593c:	4498      	add	r8, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	461d      	mov	r5, r3
 8005942:	f04f 0600 	mov.w	r6, #0
 8005946:	46a9      	mov	r9, r5
 8005948:	46b2      	mov	sl, r6
 800594a:	eb19 0309 	adds.w	r3, r9, r9
 800594e:	eb4a 040a 	adc.w	r4, sl, sl
 8005952:	4699      	mov	r9, r3
 8005954:	46a2      	mov	sl, r4
 8005956:	eb19 0905 	adds.w	r9, r9, r5
 800595a:	eb4a 0a06 	adc.w	sl, sl, r6
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800596a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800596e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005972:	4689      	mov	r9, r1
 8005974:	4692      	mov	sl, r2
 8005976:	eb19 0005 	adds.w	r0, r9, r5
 800597a:	eb4a 0106 	adc.w	r1, sl, r6
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	461d      	mov	r5, r3
 8005984:	f04f 0600 	mov.w	r6, #0
 8005988:	196b      	adds	r3, r5, r5
 800598a:	eb46 0406 	adc.w	r4, r6, r6
 800598e:	461a      	mov	r2, r3
 8005990:	4623      	mov	r3, r4
 8005992:	f7fb f8ad 	bl	8000af0 <__aeabi_uldivmod>
 8005996:	4603      	mov	r3, r0
 8005998:	460c      	mov	r4, r1
 800599a:	461a      	mov	r2, r3
 800599c:	4b6a      	ldr	r3, [pc, #424]	; (8005b48 <UART_SetConfig+0x384>)
 800599e:	fba3 1302 	umull	r1, r3, r3, r2
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	2164      	movs	r1, #100	; 0x64
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	3332      	adds	r3, #50	; 0x32
 80059b0:	4a65      	ldr	r2, [pc, #404]	; (8005b48 <UART_SetConfig+0x384>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	f003 0207 	and.w	r2, r3, #7
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4442      	add	r2, r8
 80059c2:	609a      	str	r2, [r3, #8]
 80059c4:	e26f      	b.n	8005ea6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059c6:	f7fe fb7f 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 80059ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	461d      	mov	r5, r3
 80059d0:	f04f 0600 	mov.w	r6, #0
 80059d4:	46a8      	mov	r8, r5
 80059d6:	46b1      	mov	r9, r6
 80059d8:	eb18 0308 	adds.w	r3, r8, r8
 80059dc:	eb49 0409 	adc.w	r4, r9, r9
 80059e0:	4698      	mov	r8, r3
 80059e2:	46a1      	mov	r9, r4
 80059e4:	eb18 0805 	adds.w	r8, r8, r5
 80059e8:	eb49 0906 	adc.w	r9, r9, r6
 80059ec:	f04f 0100 	mov.w	r1, #0
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a00:	4688      	mov	r8, r1
 8005a02:	4691      	mov	r9, r2
 8005a04:	eb18 0005 	adds.w	r0, r8, r5
 8005a08:	eb49 0106 	adc.w	r1, r9, r6
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	461d      	mov	r5, r3
 8005a12:	f04f 0600 	mov.w	r6, #0
 8005a16:	196b      	adds	r3, r5, r5
 8005a18:	eb46 0406 	adc.w	r4, r6, r6
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4623      	mov	r3, r4
 8005a20:	f7fb f866 	bl	8000af0 <__aeabi_uldivmod>
 8005a24:	4603      	mov	r3, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4b47      	ldr	r3, [pc, #284]	; (8005b48 <UART_SetConfig+0x384>)
 8005a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	461d      	mov	r5, r3
 8005a3a:	f04f 0600 	mov.w	r6, #0
 8005a3e:	46a9      	mov	r9, r5
 8005a40:	46b2      	mov	sl, r6
 8005a42:	eb19 0309 	adds.w	r3, r9, r9
 8005a46:	eb4a 040a 	adc.w	r4, sl, sl
 8005a4a:	4699      	mov	r9, r3
 8005a4c:	46a2      	mov	sl, r4
 8005a4e:	eb19 0905 	adds.w	r9, r9, r5
 8005a52:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a56:	f04f 0100 	mov.w	r1, #0
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	4692      	mov	sl, r2
 8005a6e:	eb19 0005 	adds.w	r0, r9, r5
 8005a72:	eb4a 0106 	adc.w	r1, sl, r6
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	461d      	mov	r5, r3
 8005a7c:	f04f 0600 	mov.w	r6, #0
 8005a80:	196b      	adds	r3, r5, r5
 8005a82:	eb46 0406 	adc.w	r4, r6, r6
 8005a86:	461a      	mov	r2, r3
 8005a88:	4623      	mov	r3, r4
 8005a8a:	f7fb f831 	bl	8000af0 <__aeabi_uldivmod>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	461a      	mov	r2, r3
 8005a94:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <UART_SetConfig+0x384>)
 8005a96:	fba3 1302 	umull	r1, r3, r3, r2
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	2164      	movs	r1, #100	; 0x64
 8005a9e:	fb01 f303 	mul.w	r3, r1, r3
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	3332      	adds	r3, #50	; 0x32
 8005aa8:	4a27      	ldr	r2, [pc, #156]	; (8005b48 <UART_SetConfig+0x384>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ab6:	4498      	add	r8, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	461d      	mov	r5, r3
 8005abc:	f04f 0600 	mov.w	r6, #0
 8005ac0:	46a9      	mov	r9, r5
 8005ac2:	46b2      	mov	sl, r6
 8005ac4:	eb19 0309 	adds.w	r3, r9, r9
 8005ac8:	eb4a 040a 	adc.w	r4, sl, sl
 8005acc:	4699      	mov	r9, r3
 8005ace:	46a2      	mov	sl, r4
 8005ad0:	eb19 0905 	adds.w	r9, r9, r5
 8005ad4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ad8:	f04f 0100 	mov.w	r1, #0
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ae4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ae8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005aec:	4689      	mov	r9, r1
 8005aee:	4692      	mov	sl, r2
 8005af0:	eb19 0005 	adds.w	r0, r9, r5
 8005af4:	eb4a 0106 	adc.w	r1, sl, r6
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	461d      	mov	r5, r3
 8005afe:	f04f 0600 	mov.w	r6, #0
 8005b02:	196b      	adds	r3, r5, r5
 8005b04:	eb46 0406 	adc.w	r4, r6, r6
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	f7fa fff0 	bl	8000af0 <__aeabi_uldivmod>
 8005b10:	4603      	mov	r3, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	461a      	mov	r2, r3
 8005b16:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <UART_SetConfig+0x384>)
 8005b18:	fba3 1302 	umull	r1, r3, r3, r2
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	2164      	movs	r1, #100	; 0x64
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	3332      	adds	r3, #50	; 0x32
 8005b2a:	4a07      	ldr	r2, [pc, #28]	; (8005b48 <UART_SetConfig+0x384>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	f003 0207 	and.w	r2, r3, #7
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4442      	add	r2, r8
 8005b3c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005b3e:	e1b2      	b.n	8005ea6 <UART_SetConfig+0x6e2>
 8005b40:	40011000 	.word	0x40011000
 8005b44:	40011400 	.word	0x40011400
 8005b48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4ad7      	ldr	r2, [pc, #860]	; (8005eb0 <UART_SetConfig+0x6ec>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d005      	beq.n	8005b62 <UART_SetConfig+0x39e>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4ad6      	ldr	r2, [pc, #856]	; (8005eb4 <UART_SetConfig+0x6f0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	f040 80d1 	bne.w	8005d04 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b62:	f7fe fac5 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 8005b66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	469a      	mov	sl, r3
 8005b6c:	f04f 0b00 	mov.w	fp, #0
 8005b70:	46d0      	mov	r8, sl
 8005b72:	46d9      	mov	r9, fp
 8005b74:	eb18 0308 	adds.w	r3, r8, r8
 8005b78:	eb49 0409 	adc.w	r4, r9, r9
 8005b7c:	4698      	mov	r8, r3
 8005b7e:	46a1      	mov	r9, r4
 8005b80:	eb18 080a 	adds.w	r8, r8, sl
 8005b84:	eb49 090b 	adc.w	r9, r9, fp
 8005b88:	f04f 0100 	mov.w	r1, #0
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b9c:	4688      	mov	r8, r1
 8005b9e:	4691      	mov	r9, r2
 8005ba0:	eb1a 0508 	adds.w	r5, sl, r8
 8005ba4:	eb4b 0609 	adc.w	r6, fp, r9
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	4619      	mov	r1, r3
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	f04f 0400 	mov.w	r4, #0
 8005bba:	0094      	lsls	r4, r2, #2
 8005bbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bc0:	008b      	lsls	r3, r1, #2
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	4631      	mov	r1, r6
 8005bca:	f7fa ff91 	bl	8000af0 <__aeabi_uldivmod>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	4bb8      	ldr	r3, [pc, #736]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	469b      	mov	fp, r3
 8005be4:	f04f 0c00 	mov.w	ip, #0
 8005be8:	46d9      	mov	r9, fp
 8005bea:	46e2      	mov	sl, ip
 8005bec:	eb19 0309 	adds.w	r3, r9, r9
 8005bf0:	eb4a 040a 	adc.w	r4, sl, sl
 8005bf4:	4699      	mov	r9, r3
 8005bf6:	46a2      	mov	sl, r4
 8005bf8:	eb19 090b 	adds.w	r9, r9, fp
 8005bfc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c00:	f04f 0100 	mov.w	r1, #0
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c14:	4689      	mov	r9, r1
 8005c16:	4692      	mov	sl, r2
 8005c18:	eb1b 0509 	adds.w	r5, fp, r9
 8005c1c:	eb4c 060a 	adc.w	r6, ip, sl
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4619      	mov	r1, r3
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	f04f 0400 	mov.w	r4, #0
 8005c32:	0094      	lsls	r4, r2, #2
 8005c34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c38:	008b      	lsls	r3, r1, #2
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	4628      	mov	r0, r5
 8005c40:	4631      	mov	r1, r6
 8005c42:	f7fa ff55 	bl	8000af0 <__aeabi_uldivmod>
 8005c46:	4603      	mov	r3, r0
 8005c48:	460c      	mov	r4, r1
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	4b9a      	ldr	r3, [pc, #616]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	2164      	movs	r1, #100	; 0x64
 8005c56:	fb01 f303 	mul.w	r3, r1, r3
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	3332      	adds	r3, #50	; 0x32
 8005c60:	4a95      	ldr	r2, [pc, #596]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c6c:	4498      	add	r8, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	469b      	mov	fp, r3
 8005c72:	f04f 0c00 	mov.w	ip, #0
 8005c76:	46d9      	mov	r9, fp
 8005c78:	46e2      	mov	sl, ip
 8005c7a:	eb19 0309 	adds.w	r3, r9, r9
 8005c7e:	eb4a 040a 	adc.w	r4, sl, sl
 8005c82:	4699      	mov	r9, r3
 8005c84:	46a2      	mov	sl, r4
 8005c86:	eb19 090b 	adds.w	r9, r9, fp
 8005c8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c8e:	f04f 0100 	mov.w	r1, #0
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ca2:	4689      	mov	r9, r1
 8005ca4:	4692      	mov	sl, r2
 8005ca6:	eb1b 0509 	adds.w	r5, fp, r9
 8005caa:	eb4c 060a 	adc.w	r6, ip, sl
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	f04f 0400 	mov.w	r4, #0
 8005cc0:	0094      	lsls	r4, r2, #2
 8005cc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cc6:	008b      	lsls	r3, r1, #2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4623      	mov	r3, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	4631      	mov	r1, r6
 8005cd0:	f7fa ff0e 	bl	8000af0 <__aeabi_uldivmod>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4b77      	ldr	r3, [pc, #476]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2164      	movs	r1, #100	; 0x64
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	3332      	adds	r3, #50	; 0x32
 8005cee:	4a72      	ldr	r2, [pc, #456]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 020f 	and.w	r2, r3, #15
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4442      	add	r2, r8
 8005d00:	609a      	str	r2, [r3, #8]
 8005d02:	e0d0      	b.n	8005ea6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d04:	f7fe f9e0 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8005d08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	469a      	mov	sl, r3
 8005d0e:	f04f 0b00 	mov.w	fp, #0
 8005d12:	46d0      	mov	r8, sl
 8005d14:	46d9      	mov	r9, fp
 8005d16:	eb18 0308 	adds.w	r3, r8, r8
 8005d1a:	eb49 0409 	adc.w	r4, r9, r9
 8005d1e:	4698      	mov	r8, r3
 8005d20:	46a1      	mov	r9, r4
 8005d22:	eb18 080a 	adds.w	r8, r8, sl
 8005d26:	eb49 090b 	adc.w	r9, r9, fp
 8005d2a:	f04f 0100 	mov.w	r1, #0
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d3e:	4688      	mov	r8, r1
 8005d40:	4691      	mov	r9, r2
 8005d42:	eb1a 0508 	adds.w	r5, sl, r8
 8005d46:	eb4b 0609 	adc.w	r6, fp, r9
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	f04f 0400 	mov.w	r4, #0
 8005d5c:	0094      	lsls	r4, r2, #2
 8005d5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d62:	008b      	lsls	r3, r1, #2
 8005d64:	461a      	mov	r2, r3
 8005d66:	4623      	mov	r3, r4
 8005d68:	4628      	mov	r0, r5
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	f7fa fec0 	bl	8000af0 <__aeabi_uldivmod>
 8005d70:	4603      	mov	r3, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	461a      	mov	r2, r3
 8005d76:	4b50      	ldr	r3, [pc, #320]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005d78:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	469b      	mov	fp, r3
 8005d86:	f04f 0c00 	mov.w	ip, #0
 8005d8a:	46d9      	mov	r9, fp
 8005d8c:	46e2      	mov	sl, ip
 8005d8e:	eb19 0309 	adds.w	r3, r9, r9
 8005d92:	eb4a 040a 	adc.w	r4, sl, sl
 8005d96:	4699      	mov	r9, r3
 8005d98:	46a2      	mov	sl, r4
 8005d9a:	eb19 090b 	adds.w	r9, r9, fp
 8005d9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005da2:	f04f 0100 	mov.w	r1, #0
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db6:	4689      	mov	r9, r1
 8005db8:	4692      	mov	sl, r2
 8005dba:	eb1b 0509 	adds.w	r5, fp, r9
 8005dbe:	eb4c 060a 	adc.w	r6, ip, sl
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	f04f 0400 	mov.w	r4, #0
 8005dd4:	0094      	lsls	r4, r2, #2
 8005dd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dda:	008b      	lsls	r3, r1, #2
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4623      	mov	r3, r4
 8005de0:	4628      	mov	r0, r5
 8005de2:	4631      	mov	r1, r6
 8005de4:	f7fa fe84 	bl	8000af0 <__aeabi_uldivmod>
 8005de8:	4603      	mov	r3, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	461a      	mov	r2, r3
 8005dee:	4b32      	ldr	r3, [pc, #200]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005df0:	fba3 1302 	umull	r1, r3, r3, r2
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	2164      	movs	r1, #100	; 0x64
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	3332      	adds	r3, #50	; 0x32
 8005e02:	4a2d      	ldr	r2, [pc, #180]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e0e:	4498      	add	r8, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	469b      	mov	fp, r3
 8005e14:	f04f 0c00 	mov.w	ip, #0
 8005e18:	46d9      	mov	r9, fp
 8005e1a:	46e2      	mov	sl, ip
 8005e1c:	eb19 0309 	adds.w	r3, r9, r9
 8005e20:	eb4a 040a 	adc.w	r4, sl, sl
 8005e24:	4699      	mov	r9, r3
 8005e26:	46a2      	mov	sl, r4
 8005e28:	eb19 090b 	adds.w	r9, r9, fp
 8005e2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e30:	f04f 0100 	mov.w	r1, #0
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e44:	4689      	mov	r9, r1
 8005e46:	4692      	mov	sl, r2
 8005e48:	eb1b 0509 	adds.w	r5, fp, r9
 8005e4c:	eb4c 060a 	adc.w	r6, ip, sl
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	4619      	mov	r1, r3
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	f04f 0400 	mov.w	r4, #0
 8005e62:	0094      	lsls	r4, r2, #2
 8005e64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e68:	008b      	lsls	r3, r1, #2
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	4623      	mov	r3, r4
 8005e6e:	4628      	mov	r0, r5
 8005e70:	4631      	mov	r1, r6
 8005e72:	f7fa fe3d 	bl	8000af0 <__aeabi_uldivmod>
 8005e76:	4603      	mov	r3, r0
 8005e78:	460c      	mov	r4, r1
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	2164      	movs	r1, #100	; 0x64
 8005e86:	fb01 f303 	mul.w	r3, r1, r3
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	3332      	adds	r3, #50	; 0x32
 8005e90:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005e92:	fba2 2303 	umull	r2, r3, r2, r3
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	f003 020f 	and.w	r2, r3, #15
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4442      	add	r2, r8
 8005ea2:	609a      	str	r2, [r3, #8]
}
 8005ea4:	e7ff      	b.n	8005ea6 <UART_SetConfig+0x6e2>
 8005ea6:	bf00      	nop
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb0:	40011000 	.word	0x40011000
 8005eb4:	40011400 	.word	0x40011400
 8005eb8:	51eb851f 	.word	0x51eb851f

08005ebc <__errno>:
 8005ebc:	4b01      	ldr	r3, [pc, #4]	; (8005ec4 <__errno+0x8>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	2000004c 	.word	0x2000004c

08005ec8 <__libc_init_array>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	4e0d      	ldr	r6, [pc, #52]	; (8005f00 <__libc_init_array+0x38>)
 8005ecc:	4c0d      	ldr	r4, [pc, #52]	; (8005f04 <__libc_init_array+0x3c>)
 8005ece:	1ba4      	subs	r4, r4, r6
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	2500      	movs	r5, #0
 8005ed4:	42a5      	cmp	r5, r4
 8005ed6:	d109      	bne.n	8005eec <__libc_init_array+0x24>
 8005ed8:	4e0b      	ldr	r6, [pc, #44]	; (8005f08 <__libc_init_array+0x40>)
 8005eda:	4c0c      	ldr	r4, [pc, #48]	; (8005f0c <__libc_init_array+0x44>)
 8005edc:	f001 fbc2 	bl	8007664 <_init>
 8005ee0:	1ba4      	subs	r4, r4, r6
 8005ee2:	10a4      	asrs	r4, r4, #2
 8005ee4:	2500      	movs	r5, #0
 8005ee6:	42a5      	cmp	r5, r4
 8005ee8:	d105      	bne.n	8005ef6 <__libc_init_array+0x2e>
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ef0:	4798      	blx	r3
 8005ef2:	3501      	adds	r5, #1
 8005ef4:	e7ee      	b.n	8005ed4 <__libc_init_array+0xc>
 8005ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005efa:	4798      	blx	r3
 8005efc:	3501      	adds	r5, #1
 8005efe:	e7f2      	b.n	8005ee6 <__libc_init_array+0x1e>
 8005f00:	080078c8 	.word	0x080078c8
 8005f04:	080078c8 	.word	0x080078c8
 8005f08:	080078c8 	.word	0x080078c8
 8005f0c:	080078cc 	.word	0x080078cc

08005f10 <memset>:
 8005f10:	4402      	add	r2, r0
 8005f12:	4603      	mov	r3, r0
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d100      	bne.n	8005f1a <memset+0xa>
 8005f18:	4770      	bx	lr
 8005f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f1e:	e7f9      	b.n	8005f14 <memset+0x4>

08005f20 <cos>:
 8005f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f22:	ec51 0b10 	vmov	r0, r1, d0
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <cos+0x80>)
 8005f28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	dc06      	bgt.n	8005f3e <cos+0x1e>
 8005f30:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8005f98 <cos+0x78>
 8005f34:	f000 fc18 	bl	8006768 <__kernel_cos>
 8005f38:	ec51 0b10 	vmov	r0, r1, d0
 8005f3c:	e007      	b.n	8005f4e <cos+0x2e>
 8005f3e:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <cos+0x84>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	dd09      	ble.n	8005f58 <cos+0x38>
 8005f44:	ee10 2a10 	vmov	r2, s0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	f7fa f941 	bl	80001d0 <__aeabi_dsub>
 8005f4e:	ec41 0b10 	vmov	d0, r0, r1
 8005f52:	b005      	add	sp, #20
 8005f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f58:	4668      	mov	r0, sp
 8005f5a:	f000 f961 	bl	8006220 <__ieee754_rem_pio2>
 8005f5e:	f000 0003 	and.w	r0, r0, #3
 8005f62:	2801      	cmp	r0, #1
 8005f64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f68:	ed9d 0b00 	vldr	d0, [sp]
 8005f6c:	d007      	beq.n	8005f7e <cos+0x5e>
 8005f6e:	2802      	cmp	r0, #2
 8005f70:	d00e      	beq.n	8005f90 <cos+0x70>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d0de      	beq.n	8005f34 <cos+0x14>
 8005f76:	2001      	movs	r0, #1
 8005f78:	f000 fffe 	bl	8006f78 <__kernel_sin>
 8005f7c:	e7dc      	b.n	8005f38 <cos+0x18>
 8005f7e:	f000 fffb 	bl	8006f78 <__kernel_sin>
 8005f82:	ec53 2b10 	vmov	r2, r3, d0
 8005f86:	ee10 0a10 	vmov	r0, s0
 8005f8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005f8e:	e7de      	b.n	8005f4e <cos+0x2e>
 8005f90:	f000 fbea 	bl	8006768 <__kernel_cos>
 8005f94:	e7f5      	b.n	8005f82 <cos+0x62>
 8005f96:	bf00      	nop
	...
 8005fa0:	3fe921fb 	.word	0x3fe921fb
 8005fa4:	7fefffff 	.word	0x7fefffff

08005fa8 <atan2>:
 8005fa8:	f000 b85a 	b.w	8006060 <__ieee754_atan2>

08005fac <sqrt>:
 8005fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fb0:	ed2d 8b02 	vpush	{d8}
 8005fb4:	b08b      	sub	sp, #44	; 0x2c
 8005fb6:	ec55 4b10 	vmov	r4, r5, d0
 8005fba:	f000 fb23 	bl	8006604 <__ieee754_sqrt>
 8005fbe:	4b26      	ldr	r3, [pc, #152]	; (8006058 <sqrt+0xac>)
 8005fc0:	eeb0 8a40 	vmov.f32	s16, s0
 8005fc4:	eef0 8a60 	vmov.f32	s17, s1
 8005fc8:	f993 6000 	ldrsb.w	r6, [r3]
 8005fcc:	1c73      	adds	r3, r6, #1
 8005fce:	d02a      	beq.n	8006026 <sqrt+0x7a>
 8005fd0:	4622      	mov	r2, r4
 8005fd2:	462b      	mov	r3, r5
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	f7fa fd4c 	bl	8000a74 <__aeabi_dcmpun>
 8005fdc:	4607      	mov	r7, r0
 8005fde:	bb10      	cbnz	r0, 8006026 <sqrt+0x7a>
 8005fe0:	f04f 0800 	mov.w	r8, #0
 8005fe4:	f04f 0900 	mov.w	r9, #0
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	4620      	mov	r0, r4
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7fa fd18 	bl	8000a24 <__aeabi_dcmplt>
 8005ff4:	b1b8      	cbz	r0, 8006026 <sqrt+0x7a>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	4b18      	ldr	r3, [pc, #96]	; (800605c <sqrt+0xb0>)
 8005ffc:	9301      	str	r3, [sp, #4]
 8005ffe:	9708      	str	r7, [sp, #32]
 8006000:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006004:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006008:	b9b6      	cbnz	r6, 8006038 <sqrt+0x8c>
 800600a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800600e:	4668      	mov	r0, sp
 8006010:	f001 fa9e 	bl	8007550 <matherr>
 8006014:	b1d0      	cbz	r0, 800604c <sqrt+0xa0>
 8006016:	9b08      	ldr	r3, [sp, #32]
 8006018:	b11b      	cbz	r3, 8006022 <sqrt+0x76>
 800601a:	f7ff ff4f 	bl	8005ebc <__errno>
 800601e:	9b08      	ldr	r3, [sp, #32]
 8006020:	6003      	str	r3, [r0, #0]
 8006022:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006026:	eeb0 0a48 	vmov.f32	s0, s16
 800602a:	eef0 0a68 	vmov.f32	s1, s17
 800602e:	b00b      	add	sp, #44	; 0x2c
 8006030:	ecbd 8b02 	vpop	{d8}
 8006034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006038:	4642      	mov	r2, r8
 800603a:	464b      	mov	r3, r9
 800603c:	4640      	mov	r0, r8
 800603e:	4649      	mov	r1, r9
 8006040:	f7fa fba8 	bl	8000794 <__aeabi_ddiv>
 8006044:	2e02      	cmp	r6, #2
 8006046:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800604a:	d1e0      	bne.n	800600e <sqrt+0x62>
 800604c:	f7ff ff36 	bl	8005ebc <__errno>
 8006050:	2321      	movs	r3, #33	; 0x21
 8006052:	6003      	str	r3, [r0, #0]
 8006054:	e7df      	b.n	8006016 <sqrt+0x6a>
 8006056:	bf00      	nop
 8006058:	200000b0 	.word	0x200000b0
 800605c:	080076a0 	.word	0x080076a0

08006060 <__ieee754_atan2>:
 8006060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006064:	ec57 6b11 	vmov	r6, r7, d1
 8006068:	4273      	negs	r3, r6
 800606a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800606e:	4333      	orrs	r3, r6
 8006070:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8006218 <__ieee754_atan2+0x1b8>
 8006074:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006078:	4573      	cmp	r3, lr
 800607a:	ec51 0b10 	vmov	r0, r1, d0
 800607e:	ee11 8a10 	vmov	r8, s2
 8006082:	d80a      	bhi.n	800609a <__ieee754_atan2+0x3a>
 8006084:	4244      	negs	r4, r0
 8006086:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800608a:	4304      	orrs	r4, r0
 800608c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006090:	4574      	cmp	r4, lr
 8006092:	468c      	mov	ip, r1
 8006094:	ee10 9a10 	vmov	r9, s0
 8006098:	d907      	bls.n	80060aa <__ieee754_atan2+0x4a>
 800609a:	4632      	mov	r2, r6
 800609c:	463b      	mov	r3, r7
 800609e:	f7fa f899 	bl	80001d4 <__adddf3>
 80060a2:	ec41 0b10 	vmov	d0, r0, r1
 80060a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80060ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80060b2:	4334      	orrs	r4, r6
 80060b4:	d103      	bne.n	80060be <__ieee754_atan2+0x5e>
 80060b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ba:	f001 b819 	b.w	80070f0 <atan>
 80060be:	17bc      	asrs	r4, r7, #30
 80060c0:	f004 0402 	and.w	r4, r4, #2
 80060c4:	ea53 0909 	orrs.w	r9, r3, r9
 80060c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80060cc:	d107      	bne.n	80060de <__ieee754_atan2+0x7e>
 80060ce:	2c02      	cmp	r4, #2
 80060d0:	d073      	beq.n	80061ba <__ieee754_atan2+0x15a>
 80060d2:	2c03      	cmp	r4, #3
 80060d4:	d1e5      	bne.n	80060a2 <__ieee754_atan2+0x42>
 80060d6:	a13e      	add	r1, pc, #248	; (adr r1, 80061d0 <__ieee754_atan2+0x170>)
 80060d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060dc:	e7e1      	b.n	80060a2 <__ieee754_atan2+0x42>
 80060de:	ea52 0808 	orrs.w	r8, r2, r8
 80060e2:	d106      	bne.n	80060f2 <__ieee754_atan2+0x92>
 80060e4:	f1bc 0f00 	cmp.w	ip, #0
 80060e8:	da6b      	bge.n	80061c2 <__ieee754_atan2+0x162>
 80060ea:	a13b      	add	r1, pc, #236	; (adr r1, 80061d8 <__ieee754_atan2+0x178>)
 80060ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060f0:	e7d7      	b.n	80060a2 <__ieee754_atan2+0x42>
 80060f2:	4572      	cmp	r2, lr
 80060f4:	d120      	bne.n	8006138 <__ieee754_atan2+0xd8>
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d111      	bne.n	800611e <__ieee754_atan2+0xbe>
 80060fa:	2c02      	cmp	r4, #2
 80060fc:	d007      	beq.n	800610e <__ieee754_atan2+0xae>
 80060fe:	2c03      	cmp	r4, #3
 8006100:	d009      	beq.n	8006116 <__ieee754_atan2+0xb6>
 8006102:	2c01      	cmp	r4, #1
 8006104:	d155      	bne.n	80061b2 <__ieee754_atan2+0x152>
 8006106:	a136      	add	r1, pc, #216	; (adr r1, 80061e0 <__ieee754_atan2+0x180>)
 8006108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800610c:	e7c9      	b.n	80060a2 <__ieee754_atan2+0x42>
 800610e:	a136      	add	r1, pc, #216	; (adr r1, 80061e8 <__ieee754_atan2+0x188>)
 8006110:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006114:	e7c5      	b.n	80060a2 <__ieee754_atan2+0x42>
 8006116:	a136      	add	r1, pc, #216	; (adr r1, 80061f0 <__ieee754_atan2+0x190>)
 8006118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800611c:	e7c1      	b.n	80060a2 <__ieee754_atan2+0x42>
 800611e:	2c02      	cmp	r4, #2
 8006120:	d04b      	beq.n	80061ba <__ieee754_atan2+0x15a>
 8006122:	2c03      	cmp	r4, #3
 8006124:	d0d7      	beq.n	80060d6 <__ieee754_atan2+0x76>
 8006126:	2c01      	cmp	r4, #1
 8006128:	f04f 0000 	mov.w	r0, #0
 800612c:	d102      	bne.n	8006134 <__ieee754_atan2+0xd4>
 800612e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006132:	e7b6      	b.n	80060a2 <__ieee754_atan2+0x42>
 8006134:	2100      	movs	r1, #0
 8006136:	e7b4      	b.n	80060a2 <__ieee754_atan2+0x42>
 8006138:	4573      	cmp	r3, lr
 800613a:	d0d3      	beq.n	80060e4 <__ieee754_atan2+0x84>
 800613c:	1a9b      	subs	r3, r3, r2
 800613e:	151b      	asrs	r3, r3, #20
 8006140:	2b3c      	cmp	r3, #60	; 0x3c
 8006142:	dc1e      	bgt.n	8006182 <__ieee754_atan2+0x122>
 8006144:	2f00      	cmp	r7, #0
 8006146:	da01      	bge.n	800614c <__ieee754_atan2+0xec>
 8006148:	333c      	adds	r3, #60	; 0x3c
 800614a:	db1e      	blt.n	800618a <__ieee754_atan2+0x12a>
 800614c:	4632      	mov	r2, r6
 800614e:	463b      	mov	r3, r7
 8006150:	f7fa fb20 	bl	8000794 <__aeabi_ddiv>
 8006154:	ec41 0b10 	vmov	d0, r0, r1
 8006158:	f001 f96a 	bl	8007430 <fabs>
 800615c:	f000 ffc8 	bl	80070f0 <atan>
 8006160:	ec51 0b10 	vmov	r0, r1, d0
 8006164:	2c01      	cmp	r4, #1
 8006166:	d013      	beq.n	8006190 <__ieee754_atan2+0x130>
 8006168:	2c02      	cmp	r4, #2
 800616a:	d015      	beq.n	8006198 <__ieee754_atan2+0x138>
 800616c:	2c00      	cmp	r4, #0
 800616e:	d098      	beq.n	80060a2 <__ieee754_atan2+0x42>
 8006170:	a321      	add	r3, pc, #132	; (adr r3, 80061f8 <__ieee754_atan2+0x198>)
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f7fa f82b 	bl	80001d0 <__aeabi_dsub>
 800617a:	a321      	add	r3, pc, #132	; (adr r3, 8006200 <__ieee754_atan2+0x1a0>)
 800617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006180:	e014      	b.n	80061ac <__ieee754_atan2+0x14c>
 8006182:	a121      	add	r1, pc, #132	; (adr r1, 8006208 <__ieee754_atan2+0x1a8>)
 8006184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006188:	e7ec      	b.n	8006164 <__ieee754_atan2+0x104>
 800618a:	2000      	movs	r0, #0
 800618c:	2100      	movs	r1, #0
 800618e:	e7e9      	b.n	8006164 <__ieee754_atan2+0x104>
 8006190:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006194:	4619      	mov	r1, r3
 8006196:	e784      	b.n	80060a2 <__ieee754_atan2+0x42>
 8006198:	a317      	add	r3, pc, #92	; (adr r3, 80061f8 <__ieee754_atan2+0x198>)
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	f7fa f817 	bl	80001d0 <__aeabi_dsub>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	a116      	add	r1, pc, #88	; (adr r1, 8006200 <__ieee754_atan2+0x1a0>)
 80061a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061ac:	f7fa f810 	bl	80001d0 <__aeabi_dsub>
 80061b0:	e777      	b.n	80060a2 <__ieee754_atan2+0x42>
 80061b2:	a117      	add	r1, pc, #92	; (adr r1, 8006210 <__ieee754_atan2+0x1b0>)
 80061b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061b8:	e773      	b.n	80060a2 <__ieee754_atan2+0x42>
 80061ba:	a111      	add	r1, pc, #68	; (adr r1, 8006200 <__ieee754_atan2+0x1a0>)
 80061bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061c0:	e76f      	b.n	80060a2 <__ieee754_atan2+0x42>
 80061c2:	a111      	add	r1, pc, #68	; (adr r1, 8006208 <__ieee754_atan2+0x1a8>)
 80061c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061c8:	e76b      	b.n	80060a2 <__ieee754_atan2+0x42>
 80061ca:	bf00      	nop
 80061cc:	f3af 8000 	nop.w
 80061d0:	54442d18 	.word	0x54442d18
 80061d4:	c00921fb 	.word	0xc00921fb
 80061d8:	54442d18 	.word	0x54442d18
 80061dc:	bff921fb 	.word	0xbff921fb
 80061e0:	54442d18 	.word	0x54442d18
 80061e4:	bfe921fb 	.word	0xbfe921fb
 80061e8:	7f3321d2 	.word	0x7f3321d2
 80061ec:	4002d97c 	.word	0x4002d97c
 80061f0:	7f3321d2 	.word	0x7f3321d2
 80061f4:	c002d97c 	.word	0xc002d97c
 80061f8:	33145c07 	.word	0x33145c07
 80061fc:	3ca1a626 	.word	0x3ca1a626
 8006200:	54442d18 	.word	0x54442d18
 8006204:	400921fb 	.word	0x400921fb
 8006208:	54442d18 	.word	0x54442d18
 800620c:	3ff921fb 	.word	0x3ff921fb
 8006210:	54442d18 	.word	0x54442d18
 8006214:	3fe921fb 	.word	0x3fe921fb
 8006218:	7ff00000 	.word	0x7ff00000
 800621c:	00000000 	.word	0x00000000

08006220 <__ieee754_rem_pio2>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	ec57 6b10 	vmov	r6, r7, d0
 8006228:	4bc3      	ldr	r3, [pc, #780]	; (8006538 <__ieee754_rem_pio2+0x318>)
 800622a:	b08d      	sub	sp, #52	; 0x34
 800622c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006230:	4598      	cmp	r8, r3
 8006232:	4604      	mov	r4, r0
 8006234:	9704      	str	r7, [sp, #16]
 8006236:	dc07      	bgt.n	8006248 <__ieee754_rem_pio2+0x28>
 8006238:	2200      	movs	r2, #0
 800623a:	2300      	movs	r3, #0
 800623c:	ed84 0b00 	vstr	d0, [r4]
 8006240:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006244:	2500      	movs	r5, #0
 8006246:	e027      	b.n	8006298 <__ieee754_rem_pio2+0x78>
 8006248:	4bbc      	ldr	r3, [pc, #752]	; (800653c <__ieee754_rem_pio2+0x31c>)
 800624a:	4598      	cmp	r8, r3
 800624c:	dc75      	bgt.n	800633a <__ieee754_rem_pio2+0x11a>
 800624e:	9b04      	ldr	r3, [sp, #16]
 8006250:	4dbb      	ldr	r5, [pc, #748]	; (8006540 <__ieee754_rem_pio2+0x320>)
 8006252:	2b00      	cmp	r3, #0
 8006254:	ee10 0a10 	vmov	r0, s0
 8006258:	a3a9      	add	r3, pc, #676	; (adr r3, 8006500 <__ieee754_rem_pio2+0x2e0>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	4639      	mov	r1, r7
 8006260:	dd36      	ble.n	80062d0 <__ieee754_rem_pio2+0xb0>
 8006262:	f7f9 ffb5 	bl	80001d0 <__aeabi_dsub>
 8006266:	45a8      	cmp	r8, r5
 8006268:	4606      	mov	r6, r0
 800626a:	460f      	mov	r7, r1
 800626c:	d018      	beq.n	80062a0 <__ieee754_rem_pio2+0x80>
 800626e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006508 <__ieee754_rem_pio2+0x2e8>)
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f7f9 ffac 	bl	80001d0 <__aeabi_dsub>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	e9c4 2300 	strd	r2, r3, [r4]
 8006280:	4630      	mov	r0, r6
 8006282:	4639      	mov	r1, r7
 8006284:	f7f9 ffa4 	bl	80001d0 <__aeabi_dsub>
 8006288:	a39f      	add	r3, pc, #636	; (adr r3, 8006508 <__ieee754_rem_pio2+0x2e8>)
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f7f9 ff9f 	bl	80001d0 <__aeabi_dsub>
 8006292:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006296:	2501      	movs	r5, #1
 8006298:	4628      	mov	r0, r5
 800629a:	b00d      	add	sp, #52	; 0x34
 800629c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a0:	a39b      	add	r3, pc, #620	; (adr r3, 8006510 <__ieee754_rem_pio2+0x2f0>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f7f9 ff93 	bl	80001d0 <__aeabi_dsub>
 80062aa:	a39b      	add	r3, pc, #620	; (adr r3, 8006518 <__ieee754_rem_pio2+0x2f8>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	4606      	mov	r6, r0
 80062b2:	460f      	mov	r7, r1
 80062b4:	f7f9 ff8c 	bl	80001d0 <__aeabi_dsub>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	e9c4 2300 	strd	r2, r3, [r4]
 80062c0:	4630      	mov	r0, r6
 80062c2:	4639      	mov	r1, r7
 80062c4:	f7f9 ff84 	bl	80001d0 <__aeabi_dsub>
 80062c8:	a393      	add	r3, pc, #588	; (adr r3, 8006518 <__ieee754_rem_pio2+0x2f8>)
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	e7de      	b.n	800628e <__ieee754_rem_pio2+0x6e>
 80062d0:	f7f9 ff80 	bl	80001d4 <__adddf3>
 80062d4:	45a8      	cmp	r8, r5
 80062d6:	4606      	mov	r6, r0
 80062d8:	460f      	mov	r7, r1
 80062da:	d016      	beq.n	800630a <__ieee754_rem_pio2+0xea>
 80062dc:	a38a      	add	r3, pc, #552	; (adr r3, 8006508 <__ieee754_rem_pio2+0x2e8>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7f9 ff77 	bl	80001d4 <__adddf3>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	e9c4 2300 	strd	r2, r3, [r4]
 80062ee:	4630      	mov	r0, r6
 80062f0:	4639      	mov	r1, r7
 80062f2:	f7f9 ff6d 	bl	80001d0 <__aeabi_dsub>
 80062f6:	a384      	add	r3, pc, #528	; (adr r3, 8006508 <__ieee754_rem_pio2+0x2e8>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7f9 ff6a 	bl	80001d4 <__adddf3>
 8006300:	f04f 35ff 	mov.w	r5, #4294967295
 8006304:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006308:	e7c6      	b.n	8006298 <__ieee754_rem_pio2+0x78>
 800630a:	a381      	add	r3, pc, #516	; (adr r3, 8006510 <__ieee754_rem_pio2+0x2f0>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7f9 ff60 	bl	80001d4 <__adddf3>
 8006314:	a380      	add	r3, pc, #512	; (adr r3, 8006518 <__ieee754_rem_pio2+0x2f8>)
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	4606      	mov	r6, r0
 800631c:	460f      	mov	r7, r1
 800631e:	f7f9 ff59 	bl	80001d4 <__adddf3>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	e9c4 2300 	strd	r2, r3, [r4]
 800632a:	4630      	mov	r0, r6
 800632c:	4639      	mov	r1, r7
 800632e:	f7f9 ff4f 	bl	80001d0 <__aeabi_dsub>
 8006332:	a379      	add	r3, pc, #484	; (adr r3, 8006518 <__ieee754_rem_pio2+0x2f8>)
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	e7e0      	b.n	80062fc <__ieee754_rem_pio2+0xdc>
 800633a:	4b82      	ldr	r3, [pc, #520]	; (8006544 <__ieee754_rem_pio2+0x324>)
 800633c:	4598      	cmp	r8, r3
 800633e:	f300 80d0 	bgt.w	80064e2 <__ieee754_rem_pio2+0x2c2>
 8006342:	f001 f875 	bl	8007430 <fabs>
 8006346:	ec57 6b10 	vmov	r6, r7, d0
 800634a:	ee10 0a10 	vmov	r0, s0
 800634e:	a374      	add	r3, pc, #464	; (adr r3, 8006520 <__ieee754_rem_pio2+0x300>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	4639      	mov	r1, r7
 8006356:	f7fa f8f3 	bl	8000540 <__aeabi_dmul>
 800635a:	2200      	movs	r2, #0
 800635c:	4b7a      	ldr	r3, [pc, #488]	; (8006548 <__ieee754_rem_pio2+0x328>)
 800635e:	f7f9 ff39 	bl	80001d4 <__adddf3>
 8006362:	f7fa fb9d 	bl	8000aa0 <__aeabi_d2iz>
 8006366:	4605      	mov	r5, r0
 8006368:	f7fa f880 	bl	800046c <__aeabi_i2d>
 800636c:	a364      	add	r3, pc, #400	; (adr r3, 8006500 <__ieee754_rem_pio2+0x2e0>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006376:	f7fa f8e3 	bl	8000540 <__aeabi_dmul>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4630      	mov	r0, r6
 8006380:	4639      	mov	r1, r7
 8006382:	f7f9 ff25 	bl	80001d0 <__aeabi_dsub>
 8006386:	a360      	add	r3, pc, #384	; (adr r3, 8006508 <__ieee754_rem_pio2+0x2e8>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	4682      	mov	sl, r0
 800638e:	468b      	mov	fp, r1
 8006390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006394:	f7fa f8d4 	bl	8000540 <__aeabi_dmul>
 8006398:	2d1f      	cmp	r5, #31
 800639a:	4606      	mov	r6, r0
 800639c:	460f      	mov	r7, r1
 800639e:	dc0c      	bgt.n	80063ba <__ieee754_rem_pio2+0x19a>
 80063a0:	1e6a      	subs	r2, r5, #1
 80063a2:	4b6a      	ldr	r3, [pc, #424]	; (800654c <__ieee754_rem_pio2+0x32c>)
 80063a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a8:	4543      	cmp	r3, r8
 80063aa:	d006      	beq.n	80063ba <__ieee754_rem_pio2+0x19a>
 80063ac:	4632      	mov	r2, r6
 80063ae:	463b      	mov	r3, r7
 80063b0:	4650      	mov	r0, sl
 80063b2:	4659      	mov	r1, fp
 80063b4:	f7f9 ff0c 	bl	80001d0 <__aeabi_dsub>
 80063b8:	e00e      	b.n	80063d8 <__ieee754_rem_pio2+0x1b8>
 80063ba:	4632      	mov	r2, r6
 80063bc:	463b      	mov	r3, r7
 80063be:	4650      	mov	r0, sl
 80063c0:	4659      	mov	r1, fp
 80063c2:	f7f9 ff05 	bl	80001d0 <__aeabi_dsub>
 80063c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80063ca:	9305      	str	r3, [sp, #20]
 80063cc:	9a05      	ldr	r2, [sp, #20]
 80063ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	dc02      	bgt.n	80063de <__ieee754_rem_pio2+0x1be>
 80063d8:	e9c4 0100 	strd	r0, r1, [r4]
 80063dc:	e039      	b.n	8006452 <__ieee754_rem_pio2+0x232>
 80063de:	a34c      	add	r3, pc, #304	; (adr r3, 8006510 <__ieee754_rem_pio2+0x2f0>)
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063e8:	f7fa f8aa 	bl	8000540 <__aeabi_dmul>
 80063ec:	4606      	mov	r6, r0
 80063ee:	460f      	mov	r7, r1
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4650      	mov	r0, sl
 80063f6:	4659      	mov	r1, fp
 80063f8:	f7f9 feea 	bl	80001d0 <__aeabi_dsub>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4680      	mov	r8, r0
 8006402:	4689      	mov	r9, r1
 8006404:	4650      	mov	r0, sl
 8006406:	4659      	mov	r1, fp
 8006408:	f7f9 fee2 	bl	80001d0 <__aeabi_dsub>
 800640c:	4632      	mov	r2, r6
 800640e:	463b      	mov	r3, r7
 8006410:	f7f9 fede 	bl	80001d0 <__aeabi_dsub>
 8006414:	a340      	add	r3, pc, #256	; (adr r3, 8006518 <__ieee754_rem_pio2+0x2f8>)
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	4606      	mov	r6, r0
 800641c:	460f      	mov	r7, r1
 800641e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006422:	f7fa f88d 	bl	8000540 <__aeabi_dmul>
 8006426:	4632      	mov	r2, r6
 8006428:	463b      	mov	r3, r7
 800642a:	f7f9 fed1 	bl	80001d0 <__aeabi_dsub>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4606      	mov	r6, r0
 8006434:	460f      	mov	r7, r1
 8006436:	4640      	mov	r0, r8
 8006438:	4649      	mov	r1, r9
 800643a:	f7f9 fec9 	bl	80001d0 <__aeabi_dsub>
 800643e:	9a05      	ldr	r2, [sp, #20]
 8006440:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b31      	cmp	r3, #49	; 0x31
 8006448:	dc20      	bgt.n	800648c <__ieee754_rem_pio2+0x26c>
 800644a:	e9c4 0100 	strd	r0, r1, [r4]
 800644e:	46c2      	mov	sl, r8
 8006450:	46cb      	mov	fp, r9
 8006452:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006456:	4650      	mov	r0, sl
 8006458:	4642      	mov	r2, r8
 800645a:	464b      	mov	r3, r9
 800645c:	4659      	mov	r1, fp
 800645e:	f7f9 feb7 	bl	80001d0 <__aeabi_dsub>
 8006462:	463b      	mov	r3, r7
 8006464:	4632      	mov	r2, r6
 8006466:	f7f9 feb3 	bl	80001d0 <__aeabi_dsub>
 800646a:	9b04      	ldr	r3, [sp, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006472:	f6bf af11 	bge.w	8006298 <__ieee754_rem_pio2+0x78>
 8006476:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800647a:	6063      	str	r3, [r4, #4]
 800647c:	f8c4 8000 	str.w	r8, [r4]
 8006480:	60a0      	str	r0, [r4, #8]
 8006482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006486:	60e3      	str	r3, [r4, #12]
 8006488:	426d      	negs	r5, r5
 800648a:	e705      	b.n	8006298 <__ieee754_rem_pio2+0x78>
 800648c:	a326      	add	r3, pc, #152	; (adr r3, 8006528 <__ieee754_rem_pio2+0x308>)
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006496:	f7fa f853 	bl	8000540 <__aeabi_dmul>
 800649a:	4606      	mov	r6, r0
 800649c:	460f      	mov	r7, r1
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4640      	mov	r0, r8
 80064a4:	4649      	mov	r1, r9
 80064a6:	f7f9 fe93 	bl	80001d0 <__aeabi_dsub>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4682      	mov	sl, r0
 80064b0:	468b      	mov	fp, r1
 80064b2:	4640      	mov	r0, r8
 80064b4:	4649      	mov	r1, r9
 80064b6:	f7f9 fe8b 	bl	80001d0 <__aeabi_dsub>
 80064ba:	4632      	mov	r2, r6
 80064bc:	463b      	mov	r3, r7
 80064be:	f7f9 fe87 	bl	80001d0 <__aeabi_dsub>
 80064c2:	a31b      	add	r3, pc, #108	; (adr r3, 8006530 <__ieee754_rem_pio2+0x310>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	4606      	mov	r6, r0
 80064ca:	460f      	mov	r7, r1
 80064cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d0:	f7fa f836 	bl	8000540 <__aeabi_dmul>
 80064d4:	4632      	mov	r2, r6
 80064d6:	463b      	mov	r3, r7
 80064d8:	f7f9 fe7a 	bl	80001d0 <__aeabi_dsub>
 80064dc:	4606      	mov	r6, r0
 80064de:	460f      	mov	r7, r1
 80064e0:	e764      	b.n	80063ac <__ieee754_rem_pio2+0x18c>
 80064e2:	4b1b      	ldr	r3, [pc, #108]	; (8006550 <__ieee754_rem_pio2+0x330>)
 80064e4:	4598      	cmp	r8, r3
 80064e6:	dd35      	ble.n	8006554 <__ieee754_rem_pio2+0x334>
 80064e8:	ee10 2a10 	vmov	r2, s0
 80064ec:	463b      	mov	r3, r7
 80064ee:	4630      	mov	r0, r6
 80064f0:	4639      	mov	r1, r7
 80064f2:	f7f9 fe6d 	bl	80001d0 <__aeabi_dsub>
 80064f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80064fa:	e9c4 0100 	strd	r0, r1, [r4]
 80064fe:	e6a1      	b.n	8006244 <__ieee754_rem_pio2+0x24>
 8006500:	54400000 	.word	0x54400000
 8006504:	3ff921fb 	.word	0x3ff921fb
 8006508:	1a626331 	.word	0x1a626331
 800650c:	3dd0b461 	.word	0x3dd0b461
 8006510:	1a600000 	.word	0x1a600000
 8006514:	3dd0b461 	.word	0x3dd0b461
 8006518:	2e037073 	.word	0x2e037073
 800651c:	3ba3198a 	.word	0x3ba3198a
 8006520:	6dc9c883 	.word	0x6dc9c883
 8006524:	3fe45f30 	.word	0x3fe45f30
 8006528:	2e000000 	.word	0x2e000000
 800652c:	3ba3198a 	.word	0x3ba3198a
 8006530:	252049c1 	.word	0x252049c1
 8006534:	397b839a 	.word	0x397b839a
 8006538:	3fe921fb 	.word	0x3fe921fb
 800653c:	4002d97b 	.word	0x4002d97b
 8006540:	3ff921fb 	.word	0x3ff921fb
 8006544:	413921fb 	.word	0x413921fb
 8006548:	3fe00000 	.word	0x3fe00000
 800654c:	080076a8 	.word	0x080076a8
 8006550:	7fefffff 	.word	0x7fefffff
 8006554:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006558:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800655c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006560:	4630      	mov	r0, r6
 8006562:	460f      	mov	r7, r1
 8006564:	f7fa fa9c 	bl	8000aa0 <__aeabi_d2iz>
 8006568:	f7f9 ff80 	bl	800046c <__aeabi_i2d>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4630      	mov	r0, r6
 8006572:	4639      	mov	r1, r7
 8006574:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006578:	f7f9 fe2a 	bl	80001d0 <__aeabi_dsub>
 800657c:	2200      	movs	r2, #0
 800657e:	4b1f      	ldr	r3, [pc, #124]	; (80065fc <__ieee754_rem_pio2+0x3dc>)
 8006580:	f7f9 ffde 	bl	8000540 <__aeabi_dmul>
 8006584:	460f      	mov	r7, r1
 8006586:	4606      	mov	r6, r0
 8006588:	f7fa fa8a 	bl	8000aa0 <__aeabi_d2iz>
 800658c:	f7f9 ff6e 	bl	800046c <__aeabi_i2d>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800659c:	f7f9 fe18 	bl	80001d0 <__aeabi_dsub>
 80065a0:	2200      	movs	r2, #0
 80065a2:	4b16      	ldr	r3, [pc, #88]	; (80065fc <__ieee754_rem_pio2+0x3dc>)
 80065a4:	f7f9 ffcc 	bl	8000540 <__aeabi_dmul>
 80065a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065ac:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80065b0:	f04f 0803 	mov.w	r8, #3
 80065b4:	2600      	movs	r6, #0
 80065b6:	2700      	movs	r7, #0
 80065b8:	4632      	mov	r2, r6
 80065ba:	463b      	mov	r3, r7
 80065bc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80065c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80065c4:	f7fa fa24 	bl	8000a10 <__aeabi_dcmpeq>
 80065c8:	b9b0      	cbnz	r0, 80065f8 <__ieee754_rem_pio2+0x3d8>
 80065ca:	4b0d      	ldr	r3, [pc, #52]	; (8006600 <__ieee754_rem_pio2+0x3e0>)
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	2302      	movs	r3, #2
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	462a      	mov	r2, r5
 80065d4:	4643      	mov	r3, r8
 80065d6:	4621      	mov	r1, r4
 80065d8:	a806      	add	r0, sp, #24
 80065da:	f000 f98d 	bl	80068f8 <__kernel_rem_pio2>
 80065de:	9b04      	ldr	r3, [sp, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	4605      	mov	r5, r0
 80065e4:	f6bf ae58 	bge.w	8006298 <__ieee754_rem_pio2+0x78>
 80065e8:	6863      	ldr	r3, [r4, #4]
 80065ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80065ee:	6063      	str	r3, [r4, #4]
 80065f0:	68e3      	ldr	r3, [r4, #12]
 80065f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80065f6:	e746      	b.n	8006486 <__ieee754_rem_pio2+0x266>
 80065f8:	46d0      	mov	r8, sl
 80065fa:	e7dd      	b.n	80065b8 <__ieee754_rem_pio2+0x398>
 80065fc:	41700000 	.word	0x41700000
 8006600:	08007728 	.word	0x08007728

08006604 <__ieee754_sqrt>:
 8006604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006608:	4955      	ldr	r1, [pc, #340]	; (8006760 <__ieee754_sqrt+0x15c>)
 800660a:	ec55 4b10 	vmov	r4, r5, d0
 800660e:	43a9      	bics	r1, r5
 8006610:	462b      	mov	r3, r5
 8006612:	462a      	mov	r2, r5
 8006614:	d112      	bne.n	800663c <__ieee754_sqrt+0x38>
 8006616:	ee10 2a10 	vmov	r2, s0
 800661a:	ee10 0a10 	vmov	r0, s0
 800661e:	4629      	mov	r1, r5
 8006620:	f7f9 ff8e 	bl	8000540 <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4620      	mov	r0, r4
 800662a:	4629      	mov	r1, r5
 800662c:	f7f9 fdd2 	bl	80001d4 <__adddf3>
 8006630:	4604      	mov	r4, r0
 8006632:	460d      	mov	r5, r1
 8006634:	ec45 4b10 	vmov	d0, r4, r5
 8006638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800663c:	2d00      	cmp	r5, #0
 800663e:	ee10 0a10 	vmov	r0, s0
 8006642:	4621      	mov	r1, r4
 8006644:	dc0f      	bgt.n	8006666 <__ieee754_sqrt+0x62>
 8006646:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800664a:	4330      	orrs	r0, r6
 800664c:	d0f2      	beq.n	8006634 <__ieee754_sqrt+0x30>
 800664e:	b155      	cbz	r5, 8006666 <__ieee754_sqrt+0x62>
 8006650:	ee10 2a10 	vmov	r2, s0
 8006654:	4620      	mov	r0, r4
 8006656:	4629      	mov	r1, r5
 8006658:	f7f9 fdba 	bl	80001d0 <__aeabi_dsub>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	f7fa f898 	bl	8000794 <__aeabi_ddiv>
 8006664:	e7e4      	b.n	8006630 <__ieee754_sqrt+0x2c>
 8006666:	151b      	asrs	r3, r3, #20
 8006668:	d073      	beq.n	8006752 <__ieee754_sqrt+0x14e>
 800666a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800666e:	07dd      	lsls	r5, r3, #31
 8006670:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006674:	bf48      	it	mi
 8006676:	0fc8      	lsrmi	r0, r1, #31
 8006678:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800667c:	bf44      	itt	mi
 800667e:	0049      	lslmi	r1, r1, #1
 8006680:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006684:	2500      	movs	r5, #0
 8006686:	1058      	asrs	r0, r3, #1
 8006688:	0fcb      	lsrs	r3, r1, #31
 800668a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800668e:	0049      	lsls	r1, r1, #1
 8006690:	2316      	movs	r3, #22
 8006692:	462c      	mov	r4, r5
 8006694:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006698:	19a7      	adds	r7, r4, r6
 800669a:	4297      	cmp	r7, r2
 800669c:	bfde      	ittt	le
 800669e:	19bc      	addle	r4, r7, r6
 80066a0:	1bd2      	suble	r2, r2, r7
 80066a2:	19ad      	addle	r5, r5, r6
 80066a4:	0fcf      	lsrs	r7, r1, #31
 80066a6:	3b01      	subs	r3, #1
 80066a8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80066ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80066b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80066b4:	d1f0      	bne.n	8006698 <__ieee754_sqrt+0x94>
 80066b6:	f04f 0c20 	mov.w	ip, #32
 80066ba:	469e      	mov	lr, r3
 80066bc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80066c0:	42a2      	cmp	r2, r4
 80066c2:	eb06 070e 	add.w	r7, r6, lr
 80066c6:	dc02      	bgt.n	80066ce <__ieee754_sqrt+0xca>
 80066c8:	d112      	bne.n	80066f0 <__ieee754_sqrt+0xec>
 80066ca:	428f      	cmp	r7, r1
 80066cc:	d810      	bhi.n	80066f0 <__ieee754_sqrt+0xec>
 80066ce:	2f00      	cmp	r7, #0
 80066d0:	eb07 0e06 	add.w	lr, r7, r6
 80066d4:	da42      	bge.n	800675c <__ieee754_sqrt+0x158>
 80066d6:	f1be 0f00 	cmp.w	lr, #0
 80066da:	db3f      	blt.n	800675c <__ieee754_sqrt+0x158>
 80066dc:	f104 0801 	add.w	r8, r4, #1
 80066e0:	1b12      	subs	r2, r2, r4
 80066e2:	428f      	cmp	r7, r1
 80066e4:	bf88      	it	hi
 80066e6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80066ea:	1bc9      	subs	r1, r1, r7
 80066ec:	4433      	add	r3, r6
 80066ee:	4644      	mov	r4, r8
 80066f0:	0052      	lsls	r2, r2, #1
 80066f2:	f1bc 0c01 	subs.w	ip, ip, #1
 80066f6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80066fa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80066fe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006702:	d1dd      	bne.n	80066c0 <__ieee754_sqrt+0xbc>
 8006704:	430a      	orrs	r2, r1
 8006706:	d006      	beq.n	8006716 <__ieee754_sqrt+0x112>
 8006708:	1c5c      	adds	r4, r3, #1
 800670a:	bf13      	iteet	ne
 800670c:	3301      	addne	r3, #1
 800670e:	3501      	addeq	r5, #1
 8006710:	4663      	moveq	r3, ip
 8006712:	f023 0301 	bicne.w	r3, r3, #1
 8006716:	106a      	asrs	r2, r5, #1
 8006718:	085b      	lsrs	r3, r3, #1
 800671a:	07e9      	lsls	r1, r5, #31
 800671c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006720:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006724:	bf48      	it	mi
 8006726:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800672a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800672e:	461c      	mov	r4, r3
 8006730:	e780      	b.n	8006634 <__ieee754_sqrt+0x30>
 8006732:	0aca      	lsrs	r2, r1, #11
 8006734:	3815      	subs	r0, #21
 8006736:	0549      	lsls	r1, r1, #21
 8006738:	2a00      	cmp	r2, #0
 800673a:	d0fa      	beq.n	8006732 <__ieee754_sqrt+0x12e>
 800673c:	02d6      	lsls	r6, r2, #11
 800673e:	d50a      	bpl.n	8006756 <__ieee754_sqrt+0x152>
 8006740:	f1c3 0420 	rsb	r4, r3, #32
 8006744:	fa21 f404 	lsr.w	r4, r1, r4
 8006748:	1e5d      	subs	r5, r3, #1
 800674a:	4099      	lsls	r1, r3
 800674c:	4322      	orrs	r2, r4
 800674e:	1b43      	subs	r3, r0, r5
 8006750:	e78b      	b.n	800666a <__ieee754_sqrt+0x66>
 8006752:	4618      	mov	r0, r3
 8006754:	e7f0      	b.n	8006738 <__ieee754_sqrt+0x134>
 8006756:	0052      	lsls	r2, r2, #1
 8006758:	3301      	adds	r3, #1
 800675a:	e7ef      	b.n	800673c <__ieee754_sqrt+0x138>
 800675c:	46a0      	mov	r8, r4
 800675e:	e7bf      	b.n	80066e0 <__ieee754_sqrt+0xdc>
 8006760:	7ff00000 	.word	0x7ff00000
 8006764:	00000000 	.word	0x00000000

08006768 <__kernel_cos>:
 8006768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676c:	ec59 8b10 	vmov	r8, r9, d0
 8006770:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006774:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006778:	ed2d 8b02 	vpush	{d8}
 800677c:	eeb0 8a41 	vmov.f32	s16, s2
 8006780:	eef0 8a61 	vmov.f32	s17, s3
 8006784:	da07      	bge.n	8006796 <__kernel_cos+0x2e>
 8006786:	ee10 0a10 	vmov	r0, s0
 800678a:	4649      	mov	r1, r9
 800678c:	f7fa f988 	bl	8000aa0 <__aeabi_d2iz>
 8006790:	2800      	cmp	r0, #0
 8006792:	f000 8089 	beq.w	80068a8 <__kernel_cos+0x140>
 8006796:	4642      	mov	r2, r8
 8006798:	464b      	mov	r3, r9
 800679a:	4640      	mov	r0, r8
 800679c:	4649      	mov	r1, r9
 800679e:	f7f9 fecf 	bl	8000540 <__aeabi_dmul>
 80067a2:	2200      	movs	r2, #0
 80067a4:	4b4e      	ldr	r3, [pc, #312]	; (80068e0 <__kernel_cos+0x178>)
 80067a6:	4604      	mov	r4, r0
 80067a8:	460d      	mov	r5, r1
 80067aa:	f7f9 fec9 	bl	8000540 <__aeabi_dmul>
 80067ae:	a340      	add	r3, pc, #256	; (adr r3, 80068b0 <__kernel_cos+0x148>)
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	4682      	mov	sl, r0
 80067b6:	468b      	mov	fp, r1
 80067b8:	4620      	mov	r0, r4
 80067ba:	4629      	mov	r1, r5
 80067bc:	f7f9 fec0 	bl	8000540 <__aeabi_dmul>
 80067c0:	a33d      	add	r3, pc, #244	; (adr r3, 80068b8 <__kernel_cos+0x150>)
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f7f9 fd05 	bl	80001d4 <__adddf3>
 80067ca:	4622      	mov	r2, r4
 80067cc:	462b      	mov	r3, r5
 80067ce:	f7f9 feb7 	bl	8000540 <__aeabi_dmul>
 80067d2:	a33b      	add	r3, pc, #236	; (adr r3, 80068c0 <__kernel_cos+0x158>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f7f9 fcfa 	bl	80001d0 <__aeabi_dsub>
 80067dc:	4622      	mov	r2, r4
 80067de:	462b      	mov	r3, r5
 80067e0:	f7f9 feae 	bl	8000540 <__aeabi_dmul>
 80067e4:	a338      	add	r3, pc, #224	; (adr r3, 80068c8 <__kernel_cos+0x160>)
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	f7f9 fcf3 	bl	80001d4 <__adddf3>
 80067ee:	4622      	mov	r2, r4
 80067f0:	462b      	mov	r3, r5
 80067f2:	f7f9 fea5 	bl	8000540 <__aeabi_dmul>
 80067f6:	a336      	add	r3, pc, #216	; (adr r3, 80068d0 <__kernel_cos+0x168>)
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	f7f9 fce8 	bl	80001d0 <__aeabi_dsub>
 8006800:	4622      	mov	r2, r4
 8006802:	462b      	mov	r3, r5
 8006804:	f7f9 fe9c 	bl	8000540 <__aeabi_dmul>
 8006808:	a333      	add	r3, pc, #204	; (adr r3, 80068d8 <__kernel_cos+0x170>)
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	f7f9 fce1 	bl	80001d4 <__adddf3>
 8006812:	4622      	mov	r2, r4
 8006814:	462b      	mov	r3, r5
 8006816:	f7f9 fe93 	bl	8000540 <__aeabi_dmul>
 800681a:	4622      	mov	r2, r4
 800681c:	462b      	mov	r3, r5
 800681e:	f7f9 fe8f 	bl	8000540 <__aeabi_dmul>
 8006822:	ec53 2b18 	vmov	r2, r3, d8
 8006826:	4604      	mov	r4, r0
 8006828:	460d      	mov	r5, r1
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7f9 fe87 	bl	8000540 <__aeabi_dmul>
 8006832:	460b      	mov	r3, r1
 8006834:	4602      	mov	r2, r0
 8006836:	4629      	mov	r1, r5
 8006838:	4620      	mov	r0, r4
 800683a:	f7f9 fcc9 	bl	80001d0 <__aeabi_dsub>
 800683e:	4b29      	ldr	r3, [pc, #164]	; (80068e4 <__kernel_cos+0x17c>)
 8006840:	429e      	cmp	r6, r3
 8006842:	4680      	mov	r8, r0
 8006844:	4689      	mov	r9, r1
 8006846:	dc11      	bgt.n	800686c <__kernel_cos+0x104>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4650      	mov	r0, sl
 800684e:	4659      	mov	r1, fp
 8006850:	f7f9 fcbe 	bl	80001d0 <__aeabi_dsub>
 8006854:	460b      	mov	r3, r1
 8006856:	4924      	ldr	r1, [pc, #144]	; (80068e8 <__kernel_cos+0x180>)
 8006858:	4602      	mov	r2, r0
 800685a:	2000      	movs	r0, #0
 800685c:	f7f9 fcb8 	bl	80001d0 <__aeabi_dsub>
 8006860:	ecbd 8b02 	vpop	{d8}
 8006864:	ec41 0b10 	vmov	d0, r0, r1
 8006868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686c:	4b1f      	ldr	r3, [pc, #124]	; (80068ec <__kernel_cos+0x184>)
 800686e:	491e      	ldr	r1, [pc, #120]	; (80068e8 <__kernel_cos+0x180>)
 8006870:	429e      	cmp	r6, r3
 8006872:	bfcc      	ite	gt
 8006874:	4d1e      	ldrgt	r5, [pc, #120]	; (80068f0 <__kernel_cos+0x188>)
 8006876:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800687a:	2400      	movs	r4, #0
 800687c:	4622      	mov	r2, r4
 800687e:	462b      	mov	r3, r5
 8006880:	2000      	movs	r0, #0
 8006882:	f7f9 fca5 	bl	80001d0 <__aeabi_dsub>
 8006886:	4622      	mov	r2, r4
 8006888:	4606      	mov	r6, r0
 800688a:	460f      	mov	r7, r1
 800688c:	462b      	mov	r3, r5
 800688e:	4650      	mov	r0, sl
 8006890:	4659      	mov	r1, fp
 8006892:	f7f9 fc9d 	bl	80001d0 <__aeabi_dsub>
 8006896:	4642      	mov	r2, r8
 8006898:	464b      	mov	r3, r9
 800689a:	f7f9 fc99 	bl	80001d0 <__aeabi_dsub>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4630      	mov	r0, r6
 80068a4:	4639      	mov	r1, r7
 80068a6:	e7d9      	b.n	800685c <__kernel_cos+0xf4>
 80068a8:	2000      	movs	r0, #0
 80068aa:	490f      	ldr	r1, [pc, #60]	; (80068e8 <__kernel_cos+0x180>)
 80068ac:	e7d8      	b.n	8006860 <__kernel_cos+0xf8>
 80068ae:	bf00      	nop
 80068b0:	be8838d4 	.word	0xbe8838d4
 80068b4:	bda8fae9 	.word	0xbda8fae9
 80068b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80068bc:	3e21ee9e 	.word	0x3e21ee9e
 80068c0:	809c52ad 	.word	0x809c52ad
 80068c4:	3e927e4f 	.word	0x3e927e4f
 80068c8:	19cb1590 	.word	0x19cb1590
 80068cc:	3efa01a0 	.word	0x3efa01a0
 80068d0:	16c15177 	.word	0x16c15177
 80068d4:	3f56c16c 	.word	0x3f56c16c
 80068d8:	5555554c 	.word	0x5555554c
 80068dc:	3fa55555 	.word	0x3fa55555
 80068e0:	3fe00000 	.word	0x3fe00000
 80068e4:	3fd33332 	.word	0x3fd33332
 80068e8:	3ff00000 	.word	0x3ff00000
 80068ec:	3fe90000 	.word	0x3fe90000
 80068f0:	3fd20000 	.word	0x3fd20000
 80068f4:	00000000 	.word	0x00000000

080068f8 <__kernel_rem_pio2>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	ed2d 8b02 	vpush	{d8}
 8006900:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006904:	1ed4      	subs	r4, r2, #3
 8006906:	9308      	str	r3, [sp, #32]
 8006908:	9101      	str	r1, [sp, #4]
 800690a:	4bc5      	ldr	r3, [pc, #788]	; (8006c20 <__kernel_rem_pio2+0x328>)
 800690c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800690e:	9009      	str	r0, [sp, #36]	; 0x24
 8006910:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006914:	9304      	str	r3, [sp, #16]
 8006916:	9b08      	ldr	r3, [sp, #32]
 8006918:	3b01      	subs	r3, #1
 800691a:	9307      	str	r3, [sp, #28]
 800691c:	2318      	movs	r3, #24
 800691e:	fb94 f4f3 	sdiv	r4, r4, r3
 8006922:	f06f 0317 	mvn.w	r3, #23
 8006926:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800692a:	fb04 3303 	mla	r3, r4, r3, r3
 800692e:	eb03 0a02 	add.w	sl, r3, r2
 8006932:	9b04      	ldr	r3, [sp, #16]
 8006934:	9a07      	ldr	r2, [sp, #28]
 8006936:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006c10 <__kernel_rem_pio2+0x318>
 800693a:	eb03 0802 	add.w	r8, r3, r2
 800693e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006940:	1aa7      	subs	r7, r4, r2
 8006942:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006946:	ae22      	add	r6, sp, #136	; 0x88
 8006948:	2500      	movs	r5, #0
 800694a:	4545      	cmp	r5, r8
 800694c:	dd13      	ble.n	8006976 <__kernel_rem_pio2+0x7e>
 800694e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006c10 <__kernel_rem_pio2+0x318>
 8006952:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006956:	2600      	movs	r6, #0
 8006958:	9b04      	ldr	r3, [sp, #16]
 800695a:	429e      	cmp	r6, r3
 800695c:	dc32      	bgt.n	80069c4 <__kernel_rem_pio2+0xcc>
 800695e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006960:	9302      	str	r3, [sp, #8]
 8006962:	9b08      	ldr	r3, [sp, #32]
 8006964:	199d      	adds	r5, r3, r6
 8006966:	ab22      	add	r3, sp, #136	; 0x88
 8006968:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800696c:	9306      	str	r3, [sp, #24]
 800696e:	ec59 8b18 	vmov	r8, r9, d8
 8006972:	2700      	movs	r7, #0
 8006974:	e01f      	b.n	80069b6 <__kernel_rem_pio2+0xbe>
 8006976:	42ef      	cmn	r7, r5
 8006978:	d407      	bmi.n	800698a <__kernel_rem_pio2+0x92>
 800697a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800697e:	f7f9 fd75 	bl	800046c <__aeabi_i2d>
 8006982:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006986:	3501      	adds	r5, #1
 8006988:	e7df      	b.n	800694a <__kernel_rem_pio2+0x52>
 800698a:	ec51 0b18 	vmov	r0, r1, d8
 800698e:	e7f8      	b.n	8006982 <__kernel_rem_pio2+0x8a>
 8006990:	9906      	ldr	r1, [sp, #24]
 8006992:	9d02      	ldr	r5, [sp, #8]
 8006994:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006998:	9106      	str	r1, [sp, #24]
 800699a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800699e:	9502      	str	r5, [sp, #8]
 80069a0:	f7f9 fdce 	bl	8000540 <__aeabi_dmul>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4640      	mov	r0, r8
 80069aa:	4649      	mov	r1, r9
 80069ac:	f7f9 fc12 	bl	80001d4 <__adddf3>
 80069b0:	3701      	adds	r7, #1
 80069b2:	4680      	mov	r8, r0
 80069b4:	4689      	mov	r9, r1
 80069b6:	9b07      	ldr	r3, [sp, #28]
 80069b8:	429f      	cmp	r7, r3
 80069ba:	dde9      	ble.n	8006990 <__kernel_rem_pio2+0x98>
 80069bc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80069c0:	3601      	adds	r6, #1
 80069c2:	e7c9      	b.n	8006958 <__kernel_rem_pio2+0x60>
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	aa0e      	add	r2, sp, #56	; 0x38
 80069c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069cc:	930c      	str	r3, [sp, #48]	; 0x30
 80069ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80069d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80069d4:	9c04      	ldr	r4, [sp, #16]
 80069d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80069d8:	ab9a      	add	r3, sp, #616	; 0x268
 80069da:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80069de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069e6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80069ea:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80069ee:	ab9a      	add	r3, sp, #616	; 0x268
 80069f0:	445b      	add	r3, fp
 80069f2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80069f6:	2500      	movs	r5, #0
 80069f8:	1b63      	subs	r3, r4, r5
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	dc78      	bgt.n	8006af0 <__kernel_rem_pio2+0x1f8>
 80069fe:	4650      	mov	r0, sl
 8006a00:	ec49 8b10 	vmov	d0, r8, r9
 8006a04:	f000 fda8 	bl	8007558 <scalbn>
 8006a08:	ec57 6b10 	vmov	r6, r7, d0
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006a12:	ee10 0a10 	vmov	r0, s0
 8006a16:	4639      	mov	r1, r7
 8006a18:	f7f9 fd92 	bl	8000540 <__aeabi_dmul>
 8006a1c:	ec41 0b10 	vmov	d0, r0, r1
 8006a20:	f000 fd12 	bl	8007448 <floor>
 8006a24:	2200      	movs	r2, #0
 8006a26:	ec51 0b10 	vmov	r0, r1, d0
 8006a2a:	4b7e      	ldr	r3, [pc, #504]	; (8006c24 <__kernel_rem_pio2+0x32c>)
 8006a2c:	f7f9 fd88 	bl	8000540 <__aeabi_dmul>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4630      	mov	r0, r6
 8006a36:	4639      	mov	r1, r7
 8006a38:	f7f9 fbca 	bl	80001d0 <__aeabi_dsub>
 8006a3c:	460f      	mov	r7, r1
 8006a3e:	4606      	mov	r6, r0
 8006a40:	f7fa f82e 	bl	8000aa0 <__aeabi_d2iz>
 8006a44:	9006      	str	r0, [sp, #24]
 8006a46:	f7f9 fd11 	bl	800046c <__aeabi_i2d>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4630      	mov	r0, r6
 8006a50:	4639      	mov	r1, r7
 8006a52:	f7f9 fbbd 	bl	80001d0 <__aeabi_dsub>
 8006a56:	f1ba 0f00 	cmp.w	sl, #0
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	460f      	mov	r7, r1
 8006a5e:	dd6c      	ble.n	8006b3a <__kernel_rem_pio2+0x242>
 8006a60:	1e62      	subs	r2, r4, #1
 8006a62:	ab0e      	add	r3, sp, #56	; 0x38
 8006a64:	f1ca 0118 	rsb	r1, sl, #24
 8006a68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006a6c:	9d06      	ldr	r5, [sp, #24]
 8006a6e:	fa40 f301 	asr.w	r3, r0, r1
 8006a72:	441d      	add	r5, r3
 8006a74:	408b      	lsls	r3, r1
 8006a76:	1ac0      	subs	r0, r0, r3
 8006a78:	ab0e      	add	r3, sp, #56	; 0x38
 8006a7a:	9506      	str	r5, [sp, #24]
 8006a7c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006a80:	f1ca 0317 	rsb	r3, sl, #23
 8006a84:	fa40 f303 	asr.w	r3, r0, r3
 8006a88:	9302      	str	r3, [sp, #8]
 8006a8a:	9b02      	ldr	r3, [sp, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	dd62      	ble.n	8006b56 <__kernel_rem_pio2+0x25e>
 8006a90:	9b06      	ldr	r3, [sp, #24]
 8006a92:	2200      	movs	r2, #0
 8006a94:	3301      	adds	r3, #1
 8006a96:	9306      	str	r3, [sp, #24]
 8006a98:	4615      	mov	r5, r2
 8006a9a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006a9e:	4294      	cmp	r4, r2
 8006aa0:	f300 8095 	bgt.w	8006bce <__kernel_rem_pio2+0x2d6>
 8006aa4:	f1ba 0f00 	cmp.w	sl, #0
 8006aa8:	dd07      	ble.n	8006aba <__kernel_rem_pio2+0x1c2>
 8006aaa:	f1ba 0f01 	cmp.w	sl, #1
 8006aae:	f000 80a2 	beq.w	8006bf6 <__kernel_rem_pio2+0x2fe>
 8006ab2:	f1ba 0f02 	cmp.w	sl, #2
 8006ab6:	f000 80c1 	beq.w	8006c3c <__kernel_rem_pio2+0x344>
 8006aba:	9b02      	ldr	r3, [sp, #8]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d14a      	bne.n	8006b56 <__kernel_rem_pio2+0x25e>
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	4958      	ldr	r1, [pc, #352]	; (8006c28 <__kernel_rem_pio2+0x330>)
 8006ac8:	f7f9 fb82 	bl	80001d0 <__aeabi_dsub>
 8006acc:	4606      	mov	r6, r0
 8006ace:	460f      	mov	r7, r1
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	d040      	beq.n	8006b56 <__kernel_rem_pio2+0x25e>
 8006ad4:	4650      	mov	r0, sl
 8006ad6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006c18 <__kernel_rem_pio2+0x320>
 8006ada:	f000 fd3d 	bl	8007558 <scalbn>
 8006ade:	4630      	mov	r0, r6
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	ec53 2b10 	vmov	r2, r3, d0
 8006ae6:	f7f9 fb73 	bl	80001d0 <__aeabi_dsub>
 8006aea:	4606      	mov	r6, r0
 8006aec:	460f      	mov	r7, r1
 8006aee:	e032      	b.n	8006b56 <__kernel_rem_pio2+0x25e>
 8006af0:	2200      	movs	r2, #0
 8006af2:	4b4e      	ldr	r3, [pc, #312]	; (8006c2c <__kernel_rem_pio2+0x334>)
 8006af4:	4640      	mov	r0, r8
 8006af6:	4649      	mov	r1, r9
 8006af8:	f7f9 fd22 	bl	8000540 <__aeabi_dmul>
 8006afc:	f7f9 ffd0 	bl	8000aa0 <__aeabi_d2iz>
 8006b00:	f7f9 fcb4 	bl	800046c <__aeabi_i2d>
 8006b04:	2200      	movs	r2, #0
 8006b06:	4b4a      	ldr	r3, [pc, #296]	; (8006c30 <__kernel_rem_pio2+0x338>)
 8006b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b0c:	f7f9 fd18 	bl	8000540 <__aeabi_dmul>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4640      	mov	r0, r8
 8006b16:	4649      	mov	r1, r9
 8006b18:	f7f9 fb5a 	bl	80001d0 <__aeabi_dsub>
 8006b1c:	f7f9 ffc0 	bl	8000aa0 <__aeabi_d2iz>
 8006b20:	ab0e      	add	r3, sp, #56	; 0x38
 8006b22:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006b26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006b2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b2e:	f7f9 fb51 	bl	80001d4 <__adddf3>
 8006b32:	3501      	adds	r5, #1
 8006b34:	4680      	mov	r8, r0
 8006b36:	4689      	mov	r9, r1
 8006b38:	e75e      	b.n	80069f8 <__kernel_rem_pio2+0x100>
 8006b3a:	d105      	bne.n	8006b48 <__kernel_rem_pio2+0x250>
 8006b3c:	1e63      	subs	r3, r4, #1
 8006b3e:	aa0e      	add	r2, sp, #56	; 0x38
 8006b40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006b44:	15c3      	asrs	r3, r0, #23
 8006b46:	e79f      	b.n	8006a88 <__kernel_rem_pio2+0x190>
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4b3a      	ldr	r3, [pc, #232]	; (8006c34 <__kernel_rem_pio2+0x33c>)
 8006b4c:	f7f9 ff7e 	bl	8000a4c <__aeabi_dcmpge>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d139      	bne.n	8006bc8 <__kernel_rem_pio2+0x2d0>
 8006b54:	9002      	str	r0, [sp, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	2300      	movs	r3, #0
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	4639      	mov	r1, r7
 8006b5e:	f7f9 ff57 	bl	8000a10 <__aeabi_dcmpeq>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	f000 80c7 	beq.w	8006cf6 <__kernel_rem_pio2+0x3fe>
 8006b68:	1e65      	subs	r5, r4, #1
 8006b6a:	462b      	mov	r3, r5
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	9904      	ldr	r1, [sp, #16]
 8006b70:	428b      	cmp	r3, r1
 8006b72:	da6a      	bge.n	8006c4a <__kernel_rem_pio2+0x352>
 8006b74:	2a00      	cmp	r2, #0
 8006b76:	f000 8088 	beq.w	8006c8a <__kernel_rem_pio2+0x392>
 8006b7a:	ab0e      	add	r3, sp, #56	; 0x38
 8006b7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006b80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 80b4 	beq.w	8006cf2 <__kernel_rem_pio2+0x3fa>
 8006b8a:	4650      	mov	r0, sl
 8006b8c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006c18 <__kernel_rem_pio2+0x320>
 8006b90:	f000 fce2 	bl	8007558 <scalbn>
 8006b94:	00ec      	lsls	r4, r5, #3
 8006b96:	ab72      	add	r3, sp, #456	; 0x1c8
 8006b98:	191e      	adds	r6, r3, r4
 8006b9a:	ec59 8b10 	vmov	r8, r9, d0
 8006b9e:	f106 0a08 	add.w	sl, r6, #8
 8006ba2:	462f      	mov	r7, r5
 8006ba4:	2f00      	cmp	r7, #0
 8006ba6:	f280 80df 	bge.w	8006d68 <__kernel_rem_pio2+0x470>
 8006baa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006c10 <__kernel_rem_pio2+0x318>
 8006bae:	f04f 0a00 	mov.w	sl, #0
 8006bb2:	eba5 030a 	sub.w	r3, r5, sl
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f2c0 810a 	blt.w	8006dd0 <__kernel_rem_pio2+0x4d8>
 8006bbc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006c38 <__kernel_rem_pio2+0x340>
 8006bc0:	ec59 8b18 	vmov	r8, r9, d8
 8006bc4:	2700      	movs	r7, #0
 8006bc6:	e0f5      	b.n	8006db4 <__kernel_rem_pio2+0x4bc>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	9302      	str	r3, [sp, #8]
 8006bcc:	e760      	b.n	8006a90 <__kernel_rem_pio2+0x198>
 8006bce:	ab0e      	add	r3, sp, #56	; 0x38
 8006bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd4:	b94d      	cbnz	r5, 8006bea <__kernel_rem_pio2+0x2f2>
 8006bd6:	b12b      	cbz	r3, 8006be4 <__kernel_rem_pio2+0x2ec>
 8006bd8:	a80e      	add	r0, sp, #56	; 0x38
 8006bda:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006bde:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006be2:	2301      	movs	r3, #1
 8006be4:	3201      	adds	r2, #1
 8006be6:	461d      	mov	r5, r3
 8006be8:	e759      	b.n	8006a9e <__kernel_rem_pio2+0x1a6>
 8006bea:	a80e      	add	r0, sp, #56	; 0x38
 8006bec:	1acb      	subs	r3, r1, r3
 8006bee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006bf2:	462b      	mov	r3, r5
 8006bf4:	e7f6      	b.n	8006be4 <__kernel_rem_pio2+0x2ec>
 8006bf6:	1e62      	subs	r2, r4, #1
 8006bf8:	ab0e      	add	r3, sp, #56	; 0x38
 8006bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006c02:	a90e      	add	r1, sp, #56	; 0x38
 8006c04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006c08:	e757      	b.n	8006aba <__kernel_rem_pio2+0x1c2>
 8006c0a:	bf00      	nop
 8006c0c:	f3af 8000 	nop.w
	...
 8006c1c:	3ff00000 	.word	0x3ff00000
 8006c20:	08007870 	.word	0x08007870
 8006c24:	40200000 	.word	0x40200000
 8006c28:	3ff00000 	.word	0x3ff00000
 8006c2c:	3e700000 	.word	0x3e700000
 8006c30:	41700000 	.word	0x41700000
 8006c34:	3fe00000 	.word	0x3fe00000
 8006c38:	08007830 	.word	0x08007830
 8006c3c:	1e62      	subs	r2, r4, #1
 8006c3e:	ab0e      	add	r3, sp, #56	; 0x38
 8006c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006c48:	e7db      	b.n	8006c02 <__kernel_rem_pio2+0x30a>
 8006c4a:	a90e      	add	r1, sp, #56	; 0x38
 8006c4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	430a      	orrs	r2, r1
 8006c54:	e78b      	b.n	8006b6e <__kernel_rem_pio2+0x276>
 8006c56:	3301      	adds	r3, #1
 8006c58:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	d0fa      	beq.n	8006c56 <__kernel_rem_pio2+0x35e>
 8006c60:	9a08      	ldr	r2, [sp, #32]
 8006c62:	4422      	add	r2, r4
 8006c64:	00d2      	lsls	r2, r2, #3
 8006c66:	a922      	add	r1, sp, #136	; 0x88
 8006c68:	18e3      	adds	r3, r4, r3
 8006c6a:	9206      	str	r2, [sp, #24]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	9302      	str	r3, [sp, #8]
 8006c70:	f10b 0108 	add.w	r1, fp, #8
 8006c74:	f102 0308 	add.w	r3, r2, #8
 8006c78:	1c66      	adds	r6, r4, #1
 8006c7a:	910a      	str	r1, [sp, #40]	; 0x28
 8006c7c:	2500      	movs	r5, #0
 8006c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8006c80:	9b02      	ldr	r3, [sp, #8]
 8006c82:	42b3      	cmp	r3, r6
 8006c84:	da04      	bge.n	8006c90 <__kernel_rem_pio2+0x398>
 8006c86:	461c      	mov	r4, r3
 8006c88:	e6a6      	b.n	80069d8 <__kernel_rem_pio2+0xe0>
 8006c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e7e3      	b.n	8006c58 <__kernel_rem_pio2+0x360>
 8006c90:	9b06      	ldr	r3, [sp, #24]
 8006c92:	18ef      	adds	r7, r5, r3
 8006c94:	ab22      	add	r3, sp, #136	; 0x88
 8006c96:	441f      	add	r7, r3
 8006c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c9e:	f7f9 fbe5 	bl	800046c <__aeabi_i2d>
 8006ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca4:	461c      	mov	r4, r3
 8006ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca8:	e9c7 0100 	strd	r0, r1, [r7]
 8006cac:	eb03 0b05 	add.w	fp, r3, r5
 8006cb0:	2700      	movs	r7, #0
 8006cb2:	f04f 0800 	mov.w	r8, #0
 8006cb6:	f04f 0900 	mov.w	r9, #0
 8006cba:	9b07      	ldr	r3, [sp, #28]
 8006cbc:	429f      	cmp	r7, r3
 8006cbe:	dd08      	ble.n	8006cd2 <__kernel_rem_pio2+0x3da>
 8006cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc2:	aa72      	add	r2, sp, #456	; 0x1c8
 8006cc4:	18eb      	adds	r3, r5, r3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8006ccc:	3601      	adds	r6, #1
 8006cce:	3508      	adds	r5, #8
 8006cd0:	e7d6      	b.n	8006c80 <__kernel_rem_pio2+0x388>
 8006cd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006cd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006cda:	f7f9 fc31 	bl	8000540 <__aeabi_dmul>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	f7f9 fa75 	bl	80001d4 <__adddf3>
 8006cea:	3701      	adds	r7, #1
 8006cec:	4680      	mov	r8, r0
 8006cee:	4689      	mov	r9, r1
 8006cf0:	e7e3      	b.n	8006cba <__kernel_rem_pio2+0x3c2>
 8006cf2:	3d01      	subs	r5, #1
 8006cf4:	e741      	b.n	8006b7a <__kernel_rem_pio2+0x282>
 8006cf6:	f1ca 0000 	rsb	r0, sl, #0
 8006cfa:	ec47 6b10 	vmov	d0, r6, r7
 8006cfe:	f000 fc2b 	bl	8007558 <scalbn>
 8006d02:	ec57 6b10 	vmov	r6, r7, d0
 8006d06:	2200      	movs	r2, #0
 8006d08:	4b99      	ldr	r3, [pc, #612]	; (8006f70 <__kernel_rem_pio2+0x678>)
 8006d0a:	ee10 0a10 	vmov	r0, s0
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 fe9c 	bl	8000a4c <__aeabi_dcmpge>
 8006d14:	b1f8      	cbz	r0, 8006d56 <__kernel_rem_pio2+0x45e>
 8006d16:	2200      	movs	r2, #0
 8006d18:	4b96      	ldr	r3, [pc, #600]	; (8006f74 <__kernel_rem_pio2+0x67c>)
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	4639      	mov	r1, r7
 8006d1e:	f7f9 fc0f 	bl	8000540 <__aeabi_dmul>
 8006d22:	f7f9 febd 	bl	8000aa0 <__aeabi_d2iz>
 8006d26:	4680      	mov	r8, r0
 8006d28:	f7f9 fba0 	bl	800046c <__aeabi_i2d>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	4b90      	ldr	r3, [pc, #576]	; (8006f70 <__kernel_rem_pio2+0x678>)
 8006d30:	f7f9 fc06 	bl	8000540 <__aeabi_dmul>
 8006d34:	460b      	mov	r3, r1
 8006d36:	4602      	mov	r2, r0
 8006d38:	4639      	mov	r1, r7
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f7f9 fa48 	bl	80001d0 <__aeabi_dsub>
 8006d40:	f7f9 feae 	bl	8000aa0 <__aeabi_d2iz>
 8006d44:	1c65      	adds	r5, r4, #1
 8006d46:	ab0e      	add	r3, sp, #56	; 0x38
 8006d48:	f10a 0a18 	add.w	sl, sl, #24
 8006d4c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006d50:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006d54:	e719      	b.n	8006b8a <__kernel_rem_pio2+0x292>
 8006d56:	4630      	mov	r0, r6
 8006d58:	4639      	mov	r1, r7
 8006d5a:	f7f9 fea1 	bl	8000aa0 <__aeabi_d2iz>
 8006d5e:	ab0e      	add	r3, sp, #56	; 0x38
 8006d60:	4625      	mov	r5, r4
 8006d62:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006d66:	e710      	b.n	8006b8a <__kernel_rem_pio2+0x292>
 8006d68:	ab0e      	add	r3, sp, #56	; 0x38
 8006d6a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006d6e:	f7f9 fb7d 	bl	800046c <__aeabi_i2d>
 8006d72:	4642      	mov	r2, r8
 8006d74:	464b      	mov	r3, r9
 8006d76:	f7f9 fbe3 	bl	8000540 <__aeabi_dmul>
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006d80:	4b7c      	ldr	r3, [pc, #496]	; (8006f74 <__kernel_rem_pio2+0x67c>)
 8006d82:	4640      	mov	r0, r8
 8006d84:	4649      	mov	r1, r9
 8006d86:	f7f9 fbdb 	bl	8000540 <__aeabi_dmul>
 8006d8a:	3f01      	subs	r7, #1
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	4689      	mov	r9, r1
 8006d90:	e708      	b.n	8006ba4 <__kernel_rem_pio2+0x2ac>
 8006d92:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006d9e:	f7f9 fbcf 	bl	8000540 <__aeabi_dmul>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4640      	mov	r0, r8
 8006da8:	4649      	mov	r1, r9
 8006daa:	f7f9 fa13 	bl	80001d4 <__adddf3>
 8006dae:	3701      	adds	r7, #1
 8006db0:	4680      	mov	r8, r0
 8006db2:	4689      	mov	r9, r1
 8006db4:	9b04      	ldr	r3, [sp, #16]
 8006db6:	429f      	cmp	r7, r3
 8006db8:	dc01      	bgt.n	8006dbe <__kernel_rem_pio2+0x4c6>
 8006dba:	45ba      	cmp	sl, r7
 8006dbc:	dae9      	bge.n	8006d92 <__kernel_rem_pio2+0x49a>
 8006dbe:	ab4a      	add	r3, sp, #296	; 0x128
 8006dc0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006dc4:	e9c3 8900 	strd	r8, r9, [r3]
 8006dc8:	f10a 0a01 	add.w	sl, sl, #1
 8006dcc:	3e08      	subs	r6, #8
 8006dce:	e6f0      	b.n	8006bb2 <__kernel_rem_pio2+0x2ba>
 8006dd0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d85b      	bhi.n	8006e8e <__kernel_rem_pio2+0x596>
 8006dd6:	e8df f003 	tbb	[pc, r3]
 8006dda:	264a      	.short	0x264a
 8006ddc:	0226      	.short	0x0226
 8006dde:	ab9a      	add	r3, sp, #616	; 0x268
 8006de0:	441c      	add	r4, r3
 8006de2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006de6:	46a2      	mov	sl, r4
 8006de8:	46ab      	mov	fp, r5
 8006dea:	f1bb 0f00 	cmp.w	fp, #0
 8006dee:	dc6c      	bgt.n	8006eca <__kernel_rem_pio2+0x5d2>
 8006df0:	46a2      	mov	sl, r4
 8006df2:	46ab      	mov	fp, r5
 8006df4:	f1bb 0f01 	cmp.w	fp, #1
 8006df8:	f300 8086 	bgt.w	8006f08 <__kernel_rem_pio2+0x610>
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	2100      	movs	r1, #0
 8006e00:	2d01      	cmp	r5, #1
 8006e02:	f300 80a0 	bgt.w	8006f46 <__kernel_rem_pio2+0x64e>
 8006e06:	9b02      	ldr	r3, [sp, #8]
 8006e08:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006e0c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 809e 	bne.w	8006f52 <__kernel_rem_pio2+0x65a>
 8006e16:	9b01      	ldr	r3, [sp, #4]
 8006e18:	e9c3 7800 	strd	r7, r8, [r3]
 8006e1c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006e20:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006e24:	e033      	b.n	8006e8e <__kernel_rem_pio2+0x596>
 8006e26:	3408      	adds	r4, #8
 8006e28:	ab4a      	add	r3, sp, #296	; 0x128
 8006e2a:	441c      	add	r4, r3
 8006e2c:	462e      	mov	r6, r5
 8006e2e:	2000      	movs	r0, #0
 8006e30:	2100      	movs	r1, #0
 8006e32:	2e00      	cmp	r6, #0
 8006e34:	da3a      	bge.n	8006eac <__kernel_rem_pio2+0x5b4>
 8006e36:	9b02      	ldr	r3, [sp, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d03d      	beq.n	8006eb8 <__kernel_rem_pio2+0x5c0>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e42:	9c01      	ldr	r4, [sp, #4]
 8006e44:	e9c4 2300 	strd	r2, r3, [r4]
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006e50:	f7f9 f9be 	bl	80001d0 <__aeabi_dsub>
 8006e54:	ae4c      	add	r6, sp, #304	; 0x130
 8006e56:	2401      	movs	r4, #1
 8006e58:	42a5      	cmp	r5, r4
 8006e5a:	da30      	bge.n	8006ebe <__kernel_rem_pio2+0x5c6>
 8006e5c:	9b02      	ldr	r3, [sp, #8]
 8006e5e:	b113      	cbz	r3, 8006e66 <__kernel_rem_pio2+0x56e>
 8006e60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e64:	4619      	mov	r1, r3
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006e6c:	e00f      	b.n	8006e8e <__kernel_rem_pio2+0x596>
 8006e6e:	ab9a      	add	r3, sp, #616	; 0x268
 8006e70:	441c      	add	r4, r3
 8006e72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006e76:	2000      	movs	r0, #0
 8006e78:	2100      	movs	r1, #0
 8006e7a:	2d00      	cmp	r5, #0
 8006e7c:	da10      	bge.n	8006ea0 <__kernel_rem_pio2+0x5a8>
 8006e7e:	9b02      	ldr	r3, [sp, #8]
 8006e80:	b113      	cbz	r3, 8006e88 <__kernel_rem_pio2+0x590>
 8006e82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e86:	4619      	mov	r1, r3
 8006e88:	9b01      	ldr	r3, [sp, #4]
 8006e8a:	e9c3 0100 	strd	r0, r1, [r3]
 8006e8e:	9b06      	ldr	r3, [sp, #24]
 8006e90:	f003 0007 	and.w	r0, r3, #7
 8006e94:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006e98:	ecbd 8b02 	vpop	{d8}
 8006e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006ea4:	f7f9 f996 	bl	80001d4 <__adddf3>
 8006ea8:	3d01      	subs	r5, #1
 8006eaa:	e7e6      	b.n	8006e7a <__kernel_rem_pio2+0x582>
 8006eac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006eb0:	f7f9 f990 	bl	80001d4 <__adddf3>
 8006eb4:	3e01      	subs	r6, #1
 8006eb6:	e7bc      	b.n	8006e32 <__kernel_rem_pio2+0x53a>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	e7c1      	b.n	8006e42 <__kernel_rem_pio2+0x54a>
 8006ebe:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006ec2:	f7f9 f987 	bl	80001d4 <__adddf3>
 8006ec6:	3401      	adds	r4, #1
 8006ec8:	e7c6      	b.n	8006e58 <__kernel_rem_pio2+0x560>
 8006eca:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8006ece:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	ec53 2b17 	vmov	r2, r3, d7
 8006ed8:	4649      	mov	r1, r9
 8006eda:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006ede:	f7f9 f979 	bl	80001d4 <__adddf3>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	460f      	mov	r7, r1
 8006eea:	4640      	mov	r0, r8
 8006eec:	4649      	mov	r1, r9
 8006eee:	f7f9 f96f 	bl	80001d0 <__aeabi_dsub>
 8006ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ef6:	f7f9 f96d 	bl	80001d4 <__adddf3>
 8006efa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006efe:	e9ca 0100 	strd	r0, r1, [sl]
 8006f02:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006f06:	e770      	b.n	8006dea <__kernel_rem_pio2+0x4f2>
 8006f08:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006f0c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006f10:	4630      	mov	r0, r6
 8006f12:	ec53 2b17 	vmov	r2, r3, d7
 8006f16:	4639      	mov	r1, r7
 8006f18:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f1c:	f7f9 f95a 	bl	80001d4 <__adddf3>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4680      	mov	r8, r0
 8006f26:	4689      	mov	r9, r1
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 f950 	bl	80001d0 <__aeabi_dsub>
 8006f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f34:	f7f9 f94e 	bl	80001d4 <__adddf3>
 8006f38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f3c:	e9ca 0100 	strd	r0, r1, [sl]
 8006f40:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006f44:	e756      	b.n	8006df4 <__kernel_rem_pio2+0x4fc>
 8006f46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006f4a:	f7f9 f943 	bl	80001d4 <__adddf3>
 8006f4e:	3d01      	subs	r5, #1
 8006f50:	e756      	b.n	8006e00 <__kernel_rem_pio2+0x508>
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	9a01      	ldr	r2, [sp, #4]
 8006f56:	601f      	str	r7, [r3, #0]
 8006f58:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006f5c:	605c      	str	r4, [r3, #4]
 8006f5e:	609d      	str	r5, [r3, #8]
 8006f60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006f64:	60d3      	str	r3, [r2, #12]
 8006f66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f6a:	6110      	str	r0, [r2, #16]
 8006f6c:	6153      	str	r3, [r2, #20]
 8006f6e:	e78e      	b.n	8006e8e <__kernel_rem_pio2+0x596>
 8006f70:	41700000 	.word	0x41700000
 8006f74:	3e700000 	.word	0x3e700000

08006f78 <__kernel_sin>:
 8006f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7c:	ec55 4b10 	vmov	r4, r5, d0
 8006f80:	b085      	sub	sp, #20
 8006f82:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f86:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006f8a:	ed8d 1b00 	vstr	d1, [sp]
 8006f8e:	9002      	str	r0, [sp, #8]
 8006f90:	da06      	bge.n	8006fa0 <__kernel_sin+0x28>
 8006f92:	ee10 0a10 	vmov	r0, s0
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7f9 fd82 	bl	8000aa0 <__aeabi_d2iz>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d051      	beq.n	8007044 <__kernel_sin+0xcc>
 8006fa0:	4622      	mov	r2, r4
 8006fa2:	462b      	mov	r3, r5
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f7f9 faca 	bl	8000540 <__aeabi_dmul>
 8006fac:	4682      	mov	sl, r0
 8006fae:	468b      	mov	fp, r1
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f7f9 fac2 	bl	8000540 <__aeabi_dmul>
 8006fbc:	a341      	add	r3, pc, #260	; (adr r3, 80070c4 <__kernel_sin+0x14c>)
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	4689      	mov	r9, r1
 8006fc6:	4650      	mov	r0, sl
 8006fc8:	4659      	mov	r1, fp
 8006fca:	f7f9 fab9 	bl	8000540 <__aeabi_dmul>
 8006fce:	a33f      	add	r3, pc, #252	; (adr r3, 80070cc <__kernel_sin+0x154>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	f7f9 f8fc 	bl	80001d0 <__aeabi_dsub>
 8006fd8:	4652      	mov	r2, sl
 8006fda:	465b      	mov	r3, fp
 8006fdc:	f7f9 fab0 	bl	8000540 <__aeabi_dmul>
 8006fe0:	a33c      	add	r3, pc, #240	; (adr r3, 80070d4 <__kernel_sin+0x15c>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	f7f9 f8f5 	bl	80001d4 <__adddf3>
 8006fea:	4652      	mov	r2, sl
 8006fec:	465b      	mov	r3, fp
 8006fee:	f7f9 faa7 	bl	8000540 <__aeabi_dmul>
 8006ff2:	a33a      	add	r3, pc, #232	; (adr r3, 80070dc <__kernel_sin+0x164>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f7f9 f8ea 	bl	80001d0 <__aeabi_dsub>
 8006ffc:	4652      	mov	r2, sl
 8006ffe:	465b      	mov	r3, fp
 8007000:	f7f9 fa9e 	bl	8000540 <__aeabi_dmul>
 8007004:	a337      	add	r3, pc, #220	; (adr r3, 80070e4 <__kernel_sin+0x16c>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	f7f9 f8e3 	bl	80001d4 <__adddf3>
 800700e:	9b02      	ldr	r3, [sp, #8]
 8007010:	4606      	mov	r6, r0
 8007012:	460f      	mov	r7, r1
 8007014:	b9db      	cbnz	r3, 800704e <__kernel_sin+0xd6>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	4650      	mov	r0, sl
 800701c:	4659      	mov	r1, fp
 800701e:	f7f9 fa8f 	bl	8000540 <__aeabi_dmul>
 8007022:	a325      	add	r3, pc, #148	; (adr r3, 80070b8 <__kernel_sin+0x140>)
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f7f9 f8d2 	bl	80001d0 <__aeabi_dsub>
 800702c:	4642      	mov	r2, r8
 800702e:	464b      	mov	r3, r9
 8007030:	f7f9 fa86 	bl	8000540 <__aeabi_dmul>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4620      	mov	r0, r4
 800703a:	4629      	mov	r1, r5
 800703c:	f7f9 f8ca 	bl	80001d4 <__adddf3>
 8007040:	4604      	mov	r4, r0
 8007042:	460d      	mov	r5, r1
 8007044:	ec45 4b10 	vmov	d0, r4, r5
 8007048:	b005      	add	sp, #20
 800704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704e:	2200      	movs	r2, #0
 8007050:	4b1b      	ldr	r3, [pc, #108]	; (80070c0 <__kernel_sin+0x148>)
 8007052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007056:	f7f9 fa73 	bl	8000540 <__aeabi_dmul>
 800705a:	4632      	mov	r2, r6
 800705c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007060:	463b      	mov	r3, r7
 8007062:	4640      	mov	r0, r8
 8007064:	4649      	mov	r1, r9
 8007066:	f7f9 fa6b 	bl	8000540 <__aeabi_dmul>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007072:	f7f9 f8ad 	bl	80001d0 <__aeabi_dsub>
 8007076:	4652      	mov	r2, sl
 8007078:	465b      	mov	r3, fp
 800707a:	f7f9 fa61 	bl	8000540 <__aeabi_dmul>
 800707e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007082:	f7f9 f8a5 	bl	80001d0 <__aeabi_dsub>
 8007086:	a30c      	add	r3, pc, #48	; (adr r3, 80070b8 <__kernel_sin+0x140>)
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	4606      	mov	r6, r0
 800708e:	460f      	mov	r7, r1
 8007090:	4640      	mov	r0, r8
 8007092:	4649      	mov	r1, r9
 8007094:	f7f9 fa54 	bl	8000540 <__aeabi_dmul>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4630      	mov	r0, r6
 800709e:	4639      	mov	r1, r7
 80070a0:	f7f9 f898 	bl	80001d4 <__adddf3>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4620      	mov	r0, r4
 80070aa:	4629      	mov	r1, r5
 80070ac:	f7f9 f890 	bl	80001d0 <__aeabi_dsub>
 80070b0:	e7c6      	b.n	8007040 <__kernel_sin+0xc8>
 80070b2:	bf00      	nop
 80070b4:	f3af 8000 	nop.w
 80070b8:	55555549 	.word	0x55555549
 80070bc:	3fc55555 	.word	0x3fc55555
 80070c0:	3fe00000 	.word	0x3fe00000
 80070c4:	5acfd57c 	.word	0x5acfd57c
 80070c8:	3de5d93a 	.word	0x3de5d93a
 80070cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80070d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80070d4:	57b1fe7d 	.word	0x57b1fe7d
 80070d8:	3ec71de3 	.word	0x3ec71de3
 80070dc:	19c161d5 	.word	0x19c161d5
 80070e0:	3f2a01a0 	.word	0x3f2a01a0
 80070e4:	1110f8a6 	.word	0x1110f8a6
 80070e8:	3f811111 	.word	0x3f811111
 80070ec:	00000000 	.word	0x00000000

080070f0 <atan>:
 80070f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	ec55 4b10 	vmov	r4, r5, d0
 80070f8:	4bc3      	ldr	r3, [pc, #780]	; (8007408 <atan+0x318>)
 80070fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80070fe:	429e      	cmp	r6, r3
 8007100:	46ab      	mov	fp, r5
 8007102:	dd18      	ble.n	8007136 <atan+0x46>
 8007104:	4bc1      	ldr	r3, [pc, #772]	; (800740c <atan+0x31c>)
 8007106:	429e      	cmp	r6, r3
 8007108:	dc01      	bgt.n	800710e <atan+0x1e>
 800710a:	d109      	bne.n	8007120 <atan+0x30>
 800710c:	b144      	cbz	r4, 8007120 <atan+0x30>
 800710e:	4622      	mov	r2, r4
 8007110:	462b      	mov	r3, r5
 8007112:	4620      	mov	r0, r4
 8007114:	4629      	mov	r1, r5
 8007116:	f7f9 f85d 	bl	80001d4 <__adddf3>
 800711a:	4604      	mov	r4, r0
 800711c:	460d      	mov	r5, r1
 800711e:	e006      	b.n	800712e <atan+0x3e>
 8007120:	f1bb 0f00 	cmp.w	fp, #0
 8007124:	f340 8131 	ble.w	800738a <atan+0x29a>
 8007128:	a59b      	add	r5, pc, #620	; (adr r5, 8007398 <atan+0x2a8>)
 800712a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800712e:	ec45 4b10 	vmov	d0, r4, r5
 8007132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007136:	4bb6      	ldr	r3, [pc, #728]	; (8007410 <atan+0x320>)
 8007138:	429e      	cmp	r6, r3
 800713a:	dc14      	bgt.n	8007166 <atan+0x76>
 800713c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007140:	429e      	cmp	r6, r3
 8007142:	dc0d      	bgt.n	8007160 <atan+0x70>
 8007144:	a396      	add	r3, pc, #600	; (adr r3, 80073a0 <atan+0x2b0>)
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	ee10 0a10 	vmov	r0, s0
 800714e:	4629      	mov	r1, r5
 8007150:	f7f9 f840 	bl	80001d4 <__adddf3>
 8007154:	2200      	movs	r2, #0
 8007156:	4baf      	ldr	r3, [pc, #700]	; (8007414 <atan+0x324>)
 8007158:	f7f9 fc82 	bl	8000a60 <__aeabi_dcmpgt>
 800715c:	2800      	cmp	r0, #0
 800715e:	d1e6      	bne.n	800712e <atan+0x3e>
 8007160:	f04f 3aff 	mov.w	sl, #4294967295
 8007164:	e02b      	b.n	80071be <atan+0xce>
 8007166:	f000 f963 	bl	8007430 <fabs>
 800716a:	4bab      	ldr	r3, [pc, #684]	; (8007418 <atan+0x328>)
 800716c:	429e      	cmp	r6, r3
 800716e:	ec55 4b10 	vmov	r4, r5, d0
 8007172:	f300 80bf 	bgt.w	80072f4 <atan+0x204>
 8007176:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800717a:	429e      	cmp	r6, r3
 800717c:	f300 80a0 	bgt.w	80072c0 <atan+0x1d0>
 8007180:	ee10 2a10 	vmov	r2, s0
 8007184:	ee10 0a10 	vmov	r0, s0
 8007188:	462b      	mov	r3, r5
 800718a:	4629      	mov	r1, r5
 800718c:	f7f9 f822 	bl	80001d4 <__adddf3>
 8007190:	2200      	movs	r2, #0
 8007192:	4ba0      	ldr	r3, [pc, #640]	; (8007414 <atan+0x324>)
 8007194:	f7f9 f81c 	bl	80001d0 <__aeabi_dsub>
 8007198:	2200      	movs	r2, #0
 800719a:	4606      	mov	r6, r0
 800719c:	460f      	mov	r7, r1
 800719e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071a2:	4620      	mov	r0, r4
 80071a4:	4629      	mov	r1, r5
 80071a6:	f7f9 f815 	bl	80001d4 <__adddf3>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4630      	mov	r0, r6
 80071b0:	4639      	mov	r1, r7
 80071b2:	f7f9 faef 	bl	8000794 <__aeabi_ddiv>
 80071b6:	f04f 0a00 	mov.w	sl, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	460d      	mov	r5, r1
 80071be:	4622      	mov	r2, r4
 80071c0:	462b      	mov	r3, r5
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	f7f9 f9bb 	bl	8000540 <__aeabi_dmul>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4680      	mov	r8, r0
 80071d0:	4689      	mov	r9, r1
 80071d2:	f7f9 f9b5 	bl	8000540 <__aeabi_dmul>
 80071d6:	a374      	add	r3, pc, #464	; (adr r3, 80073a8 <atan+0x2b8>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	4606      	mov	r6, r0
 80071de:	460f      	mov	r7, r1
 80071e0:	f7f9 f9ae 	bl	8000540 <__aeabi_dmul>
 80071e4:	a372      	add	r3, pc, #456	; (adr r3, 80073b0 <atan+0x2c0>)
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	f7f8 fff3 	bl	80001d4 <__adddf3>
 80071ee:	4632      	mov	r2, r6
 80071f0:	463b      	mov	r3, r7
 80071f2:	f7f9 f9a5 	bl	8000540 <__aeabi_dmul>
 80071f6:	a370      	add	r3, pc, #448	; (adr r3, 80073b8 <atan+0x2c8>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	f7f8 ffea 	bl	80001d4 <__adddf3>
 8007200:	4632      	mov	r2, r6
 8007202:	463b      	mov	r3, r7
 8007204:	f7f9 f99c 	bl	8000540 <__aeabi_dmul>
 8007208:	a36d      	add	r3, pc, #436	; (adr r3, 80073c0 <atan+0x2d0>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f7f8 ffe1 	bl	80001d4 <__adddf3>
 8007212:	4632      	mov	r2, r6
 8007214:	463b      	mov	r3, r7
 8007216:	f7f9 f993 	bl	8000540 <__aeabi_dmul>
 800721a:	a36b      	add	r3, pc, #428	; (adr r3, 80073c8 <atan+0x2d8>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f7f8 ffd8 	bl	80001d4 <__adddf3>
 8007224:	4632      	mov	r2, r6
 8007226:	463b      	mov	r3, r7
 8007228:	f7f9 f98a 	bl	8000540 <__aeabi_dmul>
 800722c:	a368      	add	r3, pc, #416	; (adr r3, 80073d0 <atan+0x2e0>)
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	f7f8 ffcf 	bl	80001d4 <__adddf3>
 8007236:	4642      	mov	r2, r8
 8007238:	464b      	mov	r3, r9
 800723a:	f7f9 f981 	bl	8000540 <__aeabi_dmul>
 800723e:	a366      	add	r3, pc, #408	; (adr r3, 80073d8 <atan+0x2e8>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	4680      	mov	r8, r0
 8007246:	4689      	mov	r9, r1
 8007248:	4630      	mov	r0, r6
 800724a:	4639      	mov	r1, r7
 800724c:	f7f9 f978 	bl	8000540 <__aeabi_dmul>
 8007250:	a363      	add	r3, pc, #396	; (adr r3, 80073e0 <atan+0x2f0>)
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	f7f8 ffbb 	bl	80001d0 <__aeabi_dsub>
 800725a:	4632      	mov	r2, r6
 800725c:	463b      	mov	r3, r7
 800725e:	f7f9 f96f 	bl	8000540 <__aeabi_dmul>
 8007262:	a361      	add	r3, pc, #388	; (adr r3, 80073e8 <atan+0x2f8>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f7f8 ffb2 	bl	80001d0 <__aeabi_dsub>
 800726c:	4632      	mov	r2, r6
 800726e:	463b      	mov	r3, r7
 8007270:	f7f9 f966 	bl	8000540 <__aeabi_dmul>
 8007274:	a35e      	add	r3, pc, #376	; (adr r3, 80073f0 <atan+0x300>)
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	f7f8 ffa9 	bl	80001d0 <__aeabi_dsub>
 800727e:	4632      	mov	r2, r6
 8007280:	463b      	mov	r3, r7
 8007282:	f7f9 f95d 	bl	8000540 <__aeabi_dmul>
 8007286:	a35c      	add	r3, pc, #368	; (adr r3, 80073f8 <atan+0x308>)
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f7f8 ffa0 	bl	80001d0 <__aeabi_dsub>
 8007290:	4632      	mov	r2, r6
 8007292:	463b      	mov	r3, r7
 8007294:	f7f9 f954 	bl	8000540 <__aeabi_dmul>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4640      	mov	r0, r8
 800729e:	4649      	mov	r1, r9
 80072a0:	f7f8 ff98 	bl	80001d4 <__adddf3>
 80072a4:	4622      	mov	r2, r4
 80072a6:	462b      	mov	r3, r5
 80072a8:	f7f9 f94a 	bl	8000540 <__aeabi_dmul>
 80072ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	d14b      	bne.n	800734e <atan+0x25e>
 80072b6:	4620      	mov	r0, r4
 80072b8:	4629      	mov	r1, r5
 80072ba:	f7f8 ff89 	bl	80001d0 <__aeabi_dsub>
 80072be:	e72c      	b.n	800711a <atan+0x2a>
 80072c0:	ee10 0a10 	vmov	r0, s0
 80072c4:	2200      	movs	r2, #0
 80072c6:	4b53      	ldr	r3, [pc, #332]	; (8007414 <atan+0x324>)
 80072c8:	4629      	mov	r1, r5
 80072ca:	f7f8 ff81 	bl	80001d0 <__aeabi_dsub>
 80072ce:	2200      	movs	r2, #0
 80072d0:	4606      	mov	r6, r0
 80072d2:	460f      	mov	r7, r1
 80072d4:	4b4f      	ldr	r3, [pc, #316]	; (8007414 <atan+0x324>)
 80072d6:	4620      	mov	r0, r4
 80072d8:	4629      	mov	r1, r5
 80072da:	f7f8 ff7b 	bl	80001d4 <__adddf3>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4630      	mov	r0, r6
 80072e4:	4639      	mov	r1, r7
 80072e6:	f7f9 fa55 	bl	8000794 <__aeabi_ddiv>
 80072ea:	f04f 0a01 	mov.w	sl, #1
 80072ee:	4604      	mov	r4, r0
 80072f0:	460d      	mov	r5, r1
 80072f2:	e764      	b.n	80071be <atan+0xce>
 80072f4:	4b49      	ldr	r3, [pc, #292]	; (800741c <atan+0x32c>)
 80072f6:	429e      	cmp	r6, r3
 80072f8:	dc1d      	bgt.n	8007336 <atan+0x246>
 80072fa:	ee10 0a10 	vmov	r0, s0
 80072fe:	2200      	movs	r2, #0
 8007300:	4b47      	ldr	r3, [pc, #284]	; (8007420 <atan+0x330>)
 8007302:	4629      	mov	r1, r5
 8007304:	f7f8 ff64 	bl	80001d0 <__aeabi_dsub>
 8007308:	2200      	movs	r2, #0
 800730a:	4606      	mov	r6, r0
 800730c:	460f      	mov	r7, r1
 800730e:	4b44      	ldr	r3, [pc, #272]	; (8007420 <atan+0x330>)
 8007310:	4620      	mov	r0, r4
 8007312:	4629      	mov	r1, r5
 8007314:	f7f9 f914 	bl	8000540 <__aeabi_dmul>
 8007318:	2200      	movs	r2, #0
 800731a:	4b3e      	ldr	r3, [pc, #248]	; (8007414 <atan+0x324>)
 800731c:	f7f8 ff5a 	bl	80001d4 <__adddf3>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4630      	mov	r0, r6
 8007326:	4639      	mov	r1, r7
 8007328:	f7f9 fa34 	bl	8000794 <__aeabi_ddiv>
 800732c:	f04f 0a02 	mov.w	sl, #2
 8007330:	4604      	mov	r4, r0
 8007332:	460d      	mov	r5, r1
 8007334:	e743      	b.n	80071be <atan+0xce>
 8007336:	462b      	mov	r3, r5
 8007338:	ee10 2a10 	vmov	r2, s0
 800733c:	2000      	movs	r0, #0
 800733e:	4939      	ldr	r1, [pc, #228]	; (8007424 <atan+0x334>)
 8007340:	f7f9 fa28 	bl	8000794 <__aeabi_ddiv>
 8007344:	f04f 0a03 	mov.w	sl, #3
 8007348:	4604      	mov	r4, r0
 800734a:	460d      	mov	r5, r1
 800734c:	e737      	b.n	80071be <atan+0xce>
 800734e:	4b36      	ldr	r3, [pc, #216]	; (8007428 <atan+0x338>)
 8007350:	4e36      	ldr	r6, [pc, #216]	; (800742c <atan+0x33c>)
 8007352:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007356:	4456      	add	r6, sl
 8007358:	449a      	add	sl, r3
 800735a:	e9da 2300 	ldrd	r2, r3, [sl]
 800735e:	f7f8 ff37 	bl	80001d0 <__aeabi_dsub>
 8007362:	4622      	mov	r2, r4
 8007364:	462b      	mov	r3, r5
 8007366:	f7f8 ff33 	bl	80001d0 <__aeabi_dsub>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007372:	f7f8 ff2d 	bl	80001d0 <__aeabi_dsub>
 8007376:	f1bb 0f00 	cmp.w	fp, #0
 800737a:	4604      	mov	r4, r0
 800737c:	460d      	mov	r5, r1
 800737e:	f6bf aed6 	bge.w	800712e <atan+0x3e>
 8007382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007386:	461d      	mov	r5, r3
 8007388:	e6d1      	b.n	800712e <atan+0x3e>
 800738a:	a51d      	add	r5, pc, #116	; (adr r5, 8007400 <atan+0x310>)
 800738c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007390:	e6cd      	b.n	800712e <atan+0x3e>
 8007392:	bf00      	nop
 8007394:	f3af 8000 	nop.w
 8007398:	54442d18 	.word	0x54442d18
 800739c:	3ff921fb 	.word	0x3ff921fb
 80073a0:	8800759c 	.word	0x8800759c
 80073a4:	7e37e43c 	.word	0x7e37e43c
 80073a8:	e322da11 	.word	0xe322da11
 80073ac:	3f90ad3a 	.word	0x3f90ad3a
 80073b0:	24760deb 	.word	0x24760deb
 80073b4:	3fa97b4b 	.word	0x3fa97b4b
 80073b8:	a0d03d51 	.word	0xa0d03d51
 80073bc:	3fb10d66 	.word	0x3fb10d66
 80073c0:	c54c206e 	.word	0xc54c206e
 80073c4:	3fb745cd 	.word	0x3fb745cd
 80073c8:	920083ff 	.word	0x920083ff
 80073cc:	3fc24924 	.word	0x3fc24924
 80073d0:	5555550d 	.word	0x5555550d
 80073d4:	3fd55555 	.word	0x3fd55555
 80073d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80073dc:	bfa2b444 	.word	0xbfa2b444
 80073e0:	52defd9a 	.word	0x52defd9a
 80073e4:	3fadde2d 	.word	0x3fadde2d
 80073e8:	af749a6d 	.word	0xaf749a6d
 80073ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80073f0:	fe231671 	.word	0xfe231671
 80073f4:	3fbc71c6 	.word	0x3fbc71c6
 80073f8:	9998ebc4 	.word	0x9998ebc4
 80073fc:	3fc99999 	.word	0x3fc99999
 8007400:	54442d18 	.word	0x54442d18
 8007404:	bff921fb 	.word	0xbff921fb
 8007408:	440fffff 	.word	0x440fffff
 800740c:	7ff00000 	.word	0x7ff00000
 8007410:	3fdbffff 	.word	0x3fdbffff
 8007414:	3ff00000 	.word	0x3ff00000
 8007418:	3ff2ffff 	.word	0x3ff2ffff
 800741c:	40037fff 	.word	0x40037fff
 8007420:	3ff80000 	.word	0x3ff80000
 8007424:	bff00000 	.word	0xbff00000
 8007428:	080078a0 	.word	0x080078a0
 800742c:	08007880 	.word	0x08007880

08007430 <fabs>:
 8007430:	ec51 0b10 	vmov	r0, r1, d0
 8007434:	ee10 2a10 	vmov	r2, s0
 8007438:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800743c:	ec43 2b10 	vmov	d0, r2, r3
 8007440:	4770      	bx	lr
 8007442:	0000      	movs	r0, r0
 8007444:	0000      	movs	r0, r0
	...

08007448 <floor>:
 8007448:	ec51 0b10 	vmov	r0, r1, d0
 800744c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007450:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007454:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007458:	2e13      	cmp	r6, #19
 800745a:	460c      	mov	r4, r1
 800745c:	ee10 5a10 	vmov	r5, s0
 8007460:	4680      	mov	r8, r0
 8007462:	dc34      	bgt.n	80074ce <floor+0x86>
 8007464:	2e00      	cmp	r6, #0
 8007466:	da16      	bge.n	8007496 <floor+0x4e>
 8007468:	a335      	add	r3, pc, #212	; (adr r3, 8007540 <floor+0xf8>)
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	f7f8 feb1 	bl	80001d4 <__adddf3>
 8007472:	2200      	movs	r2, #0
 8007474:	2300      	movs	r3, #0
 8007476:	f7f9 faf3 	bl	8000a60 <__aeabi_dcmpgt>
 800747a:	b148      	cbz	r0, 8007490 <floor+0x48>
 800747c:	2c00      	cmp	r4, #0
 800747e:	da59      	bge.n	8007534 <floor+0xec>
 8007480:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007484:	4a30      	ldr	r2, [pc, #192]	; (8007548 <floor+0x100>)
 8007486:	432b      	orrs	r3, r5
 8007488:	2500      	movs	r5, #0
 800748a:	42ab      	cmp	r3, r5
 800748c:	bf18      	it	ne
 800748e:	4614      	movne	r4, r2
 8007490:	4621      	mov	r1, r4
 8007492:	4628      	mov	r0, r5
 8007494:	e025      	b.n	80074e2 <floor+0x9a>
 8007496:	4f2d      	ldr	r7, [pc, #180]	; (800754c <floor+0x104>)
 8007498:	4137      	asrs	r7, r6
 800749a:	ea01 0307 	and.w	r3, r1, r7
 800749e:	4303      	orrs	r3, r0
 80074a0:	d01f      	beq.n	80074e2 <floor+0x9a>
 80074a2:	a327      	add	r3, pc, #156	; (adr r3, 8007540 <floor+0xf8>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f8 fe94 	bl	80001d4 <__adddf3>
 80074ac:	2200      	movs	r2, #0
 80074ae:	2300      	movs	r3, #0
 80074b0:	f7f9 fad6 	bl	8000a60 <__aeabi_dcmpgt>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d0eb      	beq.n	8007490 <floor+0x48>
 80074b8:	2c00      	cmp	r4, #0
 80074ba:	bfbe      	ittt	lt
 80074bc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80074c0:	fa43 f606 	asrlt.w	r6, r3, r6
 80074c4:	19a4      	addlt	r4, r4, r6
 80074c6:	ea24 0407 	bic.w	r4, r4, r7
 80074ca:	2500      	movs	r5, #0
 80074cc:	e7e0      	b.n	8007490 <floor+0x48>
 80074ce:	2e33      	cmp	r6, #51	; 0x33
 80074d0:	dd0b      	ble.n	80074ea <floor+0xa2>
 80074d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80074d6:	d104      	bne.n	80074e2 <floor+0x9a>
 80074d8:	ee10 2a10 	vmov	r2, s0
 80074dc:	460b      	mov	r3, r1
 80074de:	f7f8 fe79 	bl	80001d4 <__adddf3>
 80074e2:	ec41 0b10 	vmov	d0, r0, r1
 80074e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80074ee:	f04f 33ff 	mov.w	r3, #4294967295
 80074f2:	fa23 f707 	lsr.w	r7, r3, r7
 80074f6:	4207      	tst	r7, r0
 80074f8:	d0f3      	beq.n	80074e2 <floor+0x9a>
 80074fa:	a311      	add	r3, pc, #68	; (adr r3, 8007540 <floor+0xf8>)
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	f7f8 fe68 	bl	80001d4 <__adddf3>
 8007504:	2200      	movs	r2, #0
 8007506:	2300      	movs	r3, #0
 8007508:	f7f9 faaa 	bl	8000a60 <__aeabi_dcmpgt>
 800750c:	2800      	cmp	r0, #0
 800750e:	d0bf      	beq.n	8007490 <floor+0x48>
 8007510:	2c00      	cmp	r4, #0
 8007512:	da02      	bge.n	800751a <floor+0xd2>
 8007514:	2e14      	cmp	r6, #20
 8007516:	d103      	bne.n	8007520 <floor+0xd8>
 8007518:	3401      	adds	r4, #1
 800751a:	ea25 0507 	bic.w	r5, r5, r7
 800751e:	e7b7      	b.n	8007490 <floor+0x48>
 8007520:	2301      	movs	r3, #1
 8007522:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007526:	fa03 f606 	lsl.w	r6, r3, r6
 800752a:	4435      	add	r5, r6
 800752c:	4545      	cmp	r5, r8
 800752e:	bf38      	it	cc
 8007530:	18e4      	addcc	r4, r4, r3
 8007532:	e7f2      	b.n	800751a <floor+0xd2>
 8007534:	2500      	movs	r5, #0
 8007536:	462c      	mov	r4, r5
 8007538:	e7aa      	b.n	8007490 <floor+0x48>
 800753a:	bf00      	nop
 800753c:	f3af 8000 	nop.w
 8007540:	8800759c 	.word	0x8800759c
 8007544:	7e37e43c 	.word	0x7e37e43c
 8007548:	bff00000 	.word	0xbff00000
 800754c:	000fffff 	.word	0x000fffff

08007550 <matherr>:
 8007550:	2000      	movs	r0, #0
 8007552:	4770      	bx	lr
 8007554:	0000      	movs	r0, r0
	...

08007558 <scalbn>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	ec55 4b10 	vmov	r4, r5, d0
 800755e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007562:	4606      	mov	r6, r0
 8007564:	462b      	mov	r3, r5
 8007566:	b9aa      	cbnz	r2, 8007594 <scalbn+0x3c>
 8007568:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800756c:	4323      	orrs	r3, r4
 800756e:	d03b      	beq.n	80075e8 <scalbn+0x90>
 8007570:	4b31      	ldr	r3, [pc, #196]	; (8007638 <scalbn+0xe0>)
 8007572:	4629      	mov	r1, r5
 8007574:	2200      	movs	r2, #0
 8007576:	ee10 0a10 	vmov	r0, s0
 800757a:	f7f8 ffe1 	bl	8000540 <__aeabi_dmul>
 800757e:	4b2f      	ldr	r3, [pc, #188]	; (800763c <scalbn+0xe4>)
 8007580:	429e      	cmp	r6, r3
 8007582:	4604      	mov	r4, r0
 8007584:	460d      	mov	r5, r1
 8007586:	da12      	bge.n	80075ae <scalbn+0x56>
 8007588:	a327      	add	r3, pc, #156	; (adr r3, 8007628 <scalbn+0xd0>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	f7f8 ffd7 	bl	8000540 <__aeabi_dmul>
 8007592:	e009      	b.n	80075a8 <scalbn+0x50>
 8007594:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007598:	428a      	cmp	r2, r1
 800759a:	d10c      	bne.n	80075b6 <scalbn+0x5e>
 800759c:	ee10 2a10 	vmov	r2, s0
 80075a0:	4620      	mov	r0, r4
 80075a2:	4629      	mov	r1, r5
 80075a4:	f7f8 fe16 	bl	80001d4 <__adddf3>
 80075a8:	4604      	mov	r4, r0
 80075aa:	460d      	mov	r5, r1
 80075ac:	e01c      	b.n	80075e8 <scalbn+0x90>
 80075ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075b2:	460b      	mov	r3, r1
 80075b4:	3a36      	subs	r2, #54	; 0x36
 80075b6:	4432      	add	r2, r6
 80075b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80075bc:	428a      	cmp	r2, r1
 80075be:	dd0b      	ble.n	80075d8 <scalbn+0x80>
 80075c0:	ec45 4b11 	vmov	d1, r4, r5
 80075c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007630 <scalbn+0xd8>
 80075c8:	f000 f83c 	bl	8007644 <copysign>
 80075cc:	a318      	add	r3, pc, #96	; (adr r3, 8007630 <scalbn+0xd8>)
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	ec51 0b10 	vmov	r0, r1, d0
 80075d6:	e7da      	b.n	800758e <scalbn+0x36>
 80075d8:	2a00      	cmp	r2, #0
 80075da:	dd08      	ble.n	80075ee <scalbn+0x96>
 80075dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075e8:	ec45 4b10 	vmov	d0, r4, r5
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
 80075ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80075f2:	da0d      	bge.n	8007610 <scalbn+0xb8>
 80075f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80075f8:	429e      	cmp	r6, r3
 80075fa:	ec45 4b11 	vmov	d1, r4, r5
 80075fe:	dce1      	bgt.n	80075c4 <scalbn+0x6c>
 8007600:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007628 <scalbn+0xd0>
 8007604:	f000 f81e 	bl	8007644 <copysign>
 8007608:	a307      	add	r3, pc, #28	; (adr r3, 8007628 <scalbn+0xd0>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	e7e0      	b.n	80075d2 <scalbn+0x7a>
 8007610:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007614:	3236      	adds	r2, #54	; 0x36
 8007616:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800761a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800761e:	4620      	mov	r0, r4
 8007620:	4629      	mov	r1, r5
 8007622:	2200      	movs	r2, #0
 8007624:	4b06      	ldr	r3, [pc, #24]	; (8007640 <scalbn+0xe8>)
 8007626:	e7b2      	b.n	800758e <scalbn+0x36>
 8007628:	c2f8f359 	.word	0xc2f8f359
 800762c:	01a56e1f 	.word	0x01a56e1f
 8007630:	8800759c 	.word	0x8800759c
 8007634:	7e37e43c 	.word	0x7e37e43c
 8007638:	43500000 	.word	0x43500000
 800763c:	ffff3cb0 	.word	0xffff3cb0
 8007640:	3c900000 	.word	0x3c900000

08007644 <copysign>:
 8007644:	ec51 0b10 	vmov	r0, r1, d0
 8007648:	ee11 0a90 	vmov	r0, s3
 800764c:	ee10 2a10 	vmov	r2, s0
 8007650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007654:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007658:	ea41 0300 	orr.w	r3, r1, r0
 800765c:	ec43 2b10 	vmov	d0, r2, r3
 8007660:	4770      	bx	lr
	...

08007664 <_init>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr

08007670 <_fini>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	bf00      	nop
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr
