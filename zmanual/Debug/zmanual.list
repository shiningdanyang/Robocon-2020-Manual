
zmanual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007744  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080078d0  080078d0  000178d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b10  08007b10  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007b10  08007b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b18  08007b18  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b1c  08007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08007b20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  200000b8  08007bd4  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08007bd4  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf26  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000193b  00000000  00000000  0002c00a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  0002d948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  0002e5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020a29  00000000  00000000  0002f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000088fb  00000000  00000000  0004fc09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9611  00000000  00000000  00058504  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121b15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a6c  00000000  00000000  00121b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080078b4 	.word	0x080078b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	080078b4 	.word	0x080078b4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b972 	b.w	8000dec <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	4688      	mov	r8, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d14b      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b2e:	428a      	cmp	r2, r1
 8000b30:	4615      	mov	r5, r2
 8000b32:	d967      	bls.n	8000c04 <__udivmoddi4+0xe4>
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0720 	rsb	r7, r2, #32
 8000b3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b42:	fa20 f707 	lsr.w	r7, r0, r7
 8000b46:	4095      	lsls	r5, r2
 8000b48:	ea47 0803 	orr.w	r8, r7, r3
 8000b4c:	4094      	lsls	r4, r2
 8000b4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b52:	0c23      	lsrs	r3, r4, #16
 8000b54:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b58:	fa1f fc85 	uxth.w	ip, r5
 8000b5c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b60:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b64:	fb07 f10c 	mul.w	r1, r7, ip
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x60>
 8000b6c:	18eb      	adds	r3, r5, r3
 8000b6e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b72:	f080 811b 	bcs.w	8000dac <__udivmoddi4+0x28c>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 8118 	bls.w	8000dac <__udivmoddi4+0x28c>
 8000b7c:	3f02      	subs	r7, #2
 8000b7e:	442b      	add	r3, r5
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b94:	45a4      	cmp	ip, r4
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x8c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	442c      	add	r4, r5
 8000bac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bb0:	eba4 040c 	sub.w	r4, r4, ip
 8000bb4:	2700      	movs	r7, #0
 8000bb6:	b11e      	cbz	r6, 8000bc0 <__udivmoddi4+0xa0>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc0:	4639      	mov	r1, r7
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xbe>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80eb 	beq.w	8000da6 <__udivmoddi4+0x286>
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	4639      	mov	r1, r7
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f783 	clz	r7, r3
 8000be2:	2f00      	cmp	r7, #0
 8000be4:	d147      	bne.n	8000c76 <__udivmoddi4+0x156>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd0>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80fa 	bhi.w	8000de4 <__udivmoddi4+0x2c4>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa0>
 8000bfe:	e9c6 4800 	strd	r4, r8, [r6]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xe8>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 808f 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c12:	1b49      	subs	r1, r1, r5
 8000c14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c18:	fa1f f885 	uxth.w	r8, r5
 8000c1c:	2701      	movs	r7, #1
 8000c1e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	f200 80cd 	bhi.w	8000ddc <__udivmoddi4+0x2bc>
 8000c42:	4684      	mov	ip, r0
 8000c44:	1a59      	subs	r1, r3, r1
 8000c46:	b2a3      	uxth	r3, r4
 8000c48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c54:	fb08 f800 	mul.w	r8, r8, r0
 8000c58:	45a0      	cmp	r8, r4
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x14c>
 8000c5c:	192c      	adds	r4, r5, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x14a>
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	f200 80b6 	bhi.w	8000dd6 <__udivmoddi4+0x2b6>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	eba4 0408 	sub.w	r4, r4, r8
 8000c70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c74:	e79f      	b.n	8000bb6 <__udivmoddi4+0x96>
 8000c76:	f1c7 0c20 	rsb	ip, r7, #32
 8000c7a:	40bb      	lsls	r3, r7
 8000c7c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c80:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c84:	fa01 f407 	lsl.w	r4, r1, r7
 8000c88:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c8c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c90:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c94:	4325      	orrs	r5, r4
 8000c96:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c9a:	0c2c      	lsrs	r4, r5, #16
 8000c9c:	fb08 3319 	mls	r3, r8, r9, r3
 8000ca0:	fa1f fa8e 	uxth.w	sl, lr
 8000ca4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cac:	429c      	cmp	r4, r3
 8000cae:	fa02 f207 	lsl.w	r2, r2, r7
 8000cb2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	f080 8087 	bcs.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f240 8084 	bls.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cca:	f1a9 0902 	sub.w	r9, r9, #2
 8000cce:	4473      	add	r3, lr
 8000cd0:	1b1b      	subs	r3, r3, r4
 8000cd2:	b2ad      	uxth	r5, r5
 8000cd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cdc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ce0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce4:	45a2      	cmp	sl, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	d26b      	bcs.n	8000dca <__udivmoddi4+0x2aa>
 8000cf2:	45a2      	cmp	sl, r4
 8000cf4:	d969      	bls.n	8000dca <__udivmoddi4+0x2aa>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4474      	add	r4, lr
 8000cfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	eba4 040a 	sub.w	r4, r4, sl
 8000d06:	454c      	cmp	r4, r9
 8000d08:	46c2      	mov	sl, r8
 8000d0a:	464b      	mov	r3, r9
 8000d0c:	d354      	bcc.n	8000db8 <__udivmoddi4+0x298>
 8000d0e:	d051      	beq.n	8000db4 <__udivmoddi4+0x294>
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d069      	beq.n	8000de8 <__udivmoddi4+0x2c8>
 8000d14:	ebb1 050a 	subs.w	r5, r1, sl
 8000d18:	eb64 0403 	sbc.w	r4, r4, r3
 8000d1c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d20:	40fd      	lsrs	r5, r7
 8000d22:	40fc      	lsrs	r4, r7
 8000d24:	ea4c 0505 	orr.w	r5, ip, r5
 8000d28:	e9c6 5400 	strd	r5, r4, [r6]
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f703 	lsr.w	r7, r0, r3
 8000d38:	4095      	lsls	r5, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d46:	4338      	orrs	r0, r7
 8000d48:	0c01      	lsrs	r1, r0, #16
 8000d4a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4e:	fa1f f885 	uxth.w	r8, r5
 8000d52:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb07 f308 	mul.w	r3, r7, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	fa04 f402 	lsl.w	r4, r4, r2
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x256>
 8000d66:	1869      	adds	r1, r5, r1
 8000d68:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d6c:	d22f      	bcs.n	8000dce <__udivmoddi4+0x2ae>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d92d      	bls.n	8000dce <__udivmoddi4+0x2ae>
 8000d72:	3f02      	subs	r7, #2
 8000d74:	4429      	add	r1, r5
 8000d76:	1acb      	subs	r3, r1, r3
 8000d78:	b281      	uxth	r1, r0
 8000d7a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb00 f308 	mul.w	r3, r0, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x27e>
 8000d8e:	1869      	adds	r1, r5, r1
 8000d90:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d94:	d217      	bcs.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d915      	bls.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4429      	add	r1, r5
 8000d9e:	1ac9      	subs	r1, r1, r3
 8000da0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da4:	e73b      	b.n	8000c1e <__udivmoddi4+0xfe>
 8000da6:	4637      	mov	r7, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e709      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000dac:	4607      	mov	r7, r0
 8000dae:	e6e7      	b.n	8000b80 <__udivmoddi4+0x60>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x8c>
 8000db4:	4541      	cmp	r1, r8
 8000db6:	d2ab      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000db8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dbc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	e7a4      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc6:	4660      	mov	r0, ip
 8000dc8:	e7e9      	b.n	8000d9e <__udivmoddi4+0x27e>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	e795      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dce:	4667      	mov	r7, ip
 8000dd0:	e7d1      	b.n	8000d76 <__udivmoddi4+0x256>
 8000dd2:	4681      	mov	r9, r0
 8000dd4:	e77c      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	442c      	add	r4, r5
 8000dda:	e747      	b.n	8000c6c <__udivmoddi4+0x14c>
 8000ddc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de0:	442b      	add	r3, r5
 8000de2:	e72f      	b.n	8000c44 <__udivmoddi4+0x124>
 8000de4:	4638      	mov	r0, r7
 8000de6:	e708      	b.n	8000bfa <__udivmoddi4+0xda>
 8000de8:	4637      	mov	r7, r6
 8000dea:	e6e9      	b.n	8000bc0 <__udivmoddi4+0xa0>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <handControl_Init>:
int handElapsedPulses;

uint32_t delayTick001;

void handControl_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&hand);
 8000df4:	4822      	ldr	r0, [pc, #136]	; (8000e80 <handControl_Init+0x90>)
 8000df6:	f003 fae2 	bl	80043be <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(handEn_GPIO_Port, handEn_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e00:	4820      	ldr	r0, [pc, #128]	; (8000e84 <handControl_Init+0x94>)
 8000e02:	f002 fe1b 	bl	8003a3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(gripper_GPIO_Port, gripper_Pin, GRIPPER_OPEN);	//mở gripper
 8000e06:	2201      	movs	r2, #1
 8000e08:	2110      	movs	r1, #16
 8000e0a:	481f      	ldr	r0, [pc, #124]	; (8000e88 <handControl_Init+0x98>)
 8000e0c:	f002 fe16 	bl	8003a3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(door_GPIO_Port, door_Pin, DOOR_CLOSE);			//đóng cửa
 8000e10:	2201      	movs	r2, #1
 8000e12:	2120      	movs	r1, #32
 8000e14:	481c      	ldr	r0, [pc, #112]	; (8000e88 <handControl_Init+0x98>)
 8000e16:	f002 fe11 	bl	8003a3c <HAL_GPIO_WritePin>
	  while(HAL_GPIO_ReadPin(switchIn_GPIO_Port, switchIn_Pin) == GPIO_PIN_SET)
 8000e1a:	e01c      	b.n	8000e56 <handControl_Init+0x66>
	  {
		HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, HAND_DIR_IN);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2104      	movs	r1, #4
 8000e20:	481a      	ldr	r0, [pc, #104]	; (8000e8c <handControl_Init+0x9c>)
 8000e22:	f002 fe0b 	bl	8003a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2c:	4818      	ldr	r0, [pc, #96]	; (8000e90 <handControl_Init+0xa0>)
 8000e2e:	f002 fe05 	bl	8003a3c <HAL_GPIO_WritePin>
		trackingSwitchIn = HAL_GPIO_ReadPin(switchIn_GPIO_Port, switchIn_Pin);
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	4813      	ldr	r0, [pc, #76]	; (8000e84 <handControl_Init+0x94>)
 8000e38:	f002 fde8 	bl	8003a0c <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <handControl_Init+0xa4>)
 8000e42:	601a      	str	r2, [r3, #0]
			  trackingSwitchOut = HAL_GPIO_ReadPin(switchOut_GPIO_Port, switchOut_Pin);
 8000e44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e48:	480f      	ldr	r0, [pc, #60]	; (8000e88 <handControl_Init+0x98>)
 8000e4a:	f002 fddf 	bl	8003a0c <HAL_GPIO_ReadPin>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <handControl_Init+0xa8>)
 8000e54:	601a      	str	r2, [r3, #0]
	  while(HAL_GPIO_ReadPin(switchIn_GPIO_Port, switchIn_Pin) == GPIO_PIN_SET)
 8000e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5a:	480a      	ldr	r0, [pc, #40]	; (8000e84 <handControl_Init+0x94>)
 8000e5c:	f002 fdd6 	bl	8003a0c <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d0da      	beq.n	8000e1c <handControl_Init+0x2c>
	  }
	  HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4808      	ldr	r0, [pc, #32]	; (8000e8c <handControl_Init+0x9c>)
 8000e6c:	f002 fde6 	bl	8003a3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_SET);	//tắt động cơ
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <handControl_Init+0xa0>)
 8000e78:	f002 fde0 	bl	8003a3c <HAL_GPIO_WritePin>

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000020c 	.word	0x2000020c
 8000e84:	40020400 	.word	0x40020400
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	40020c00 	.word	0x40020c00
 8000e90:	40020000 	.word	0x40020000
 8000e94:	200001c8 	.word	0x200001c8
 8000e98:	20000260 	.word	0x20000260

08000e9c <HAL_TIM_PeriodElapsedCallback>:
	handEn = 1;
	handStatus = _handStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == hand.Instance)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d14b      	bne.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		delayTick001++;
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000eb8:	6013      	str	r3, [r2, #0]
		if(handEn == 1)
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d142      	bne.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			if(handStatus == HAND_STATUS_PUT)
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d11d      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x6a>
			{
				if(HAL_GPIO_ReadPin(switchOut_GPIO_Port, switchOut_Pin) == GPIO_PIN_RESET)	//nếu chạm limSwit ngoài
 8000eca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ece:	4824      	ldr	r0, [pc, #144]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ed0:	f002 fd9c 	bl	8003a0c <HAL_GPIO_ReadPin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d109      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x52>
				{
					handEn = 0;
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_SET);	//tắt motor
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee6:	481f      	ldr	r0, [pc, #124]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000ee8:	f002 fda8 	bl	8003a3c <HAL_GPIO_WritePin>
//					HAL_GPIO_WritePin(door_GPIO_Port, door_Pin, DOOR_OPEN);				//mở cửa
				}
			}
		}
	}
}
 8000eec:	e02c      	b.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xac>
					HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, GPIO_PIN_RESET);	//xoay ra
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	481d      	ldr	r0, [pc, #116]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000ef4:	f002 fda2 	bl	8003a3c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_RESET);	//bật motor
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efe:	4819      	ldr	r0, [pc, #100]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f00:	f002 fd9c 	bl	8003a3c <HAL_GPIO_WritePin>
}
 8000f04:	e020      	b.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xac>
			else if(handStatus == HAND_STATUS_WAIT)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d11c      	bne.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xac>
				if(HAL_GPIO_ReadPin(switchIn_GPIO_Port, switchIn_Pin) == GPIO_PIN_RESET)	//nếu chạm limSwit trong
 8000f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f12:	4816      	ldr	r0, [pc, #88]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000f14:	f002 fd7a 	bl	8003a0c <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d109      	bne.n	8000f32 <HAL_TIM_PeriodElapsedCallback+0x96>
					handEn = 0;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_SET);	//tắt motor
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2a:	480e      	ldr	r0, [pc, #56]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f2c:	f002 fd86 	bl	8003a3c <HAL_GPIO_WritePin>
}
 8000f30:	e00a      	b.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0xac>
					HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, GPIO_PIN_SET);	//xoay vào
 8000f32:	2201      	movs	r2, #1
 8000f34:	2104      	movs	r1, #4
 8000f36:	480c      	ldr	r0, [pc, #48]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f38:	f002 fd80 	bl	8003a3c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_RESET);	//bật motor
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f44:	f002 fd7a 	bl	8003a3c <HAL_GPIO_WritePin>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000020c 	.word	0x2000020c
 8000f54:	200003ac 	.word	0x200003ac
 8000f58:	200004f0 	.word	0x200004f0
 8000f5c:	2000048c 	.word	0x2000048c
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	40020400 	.word	0x40020400

08000f70 <HAL_UART_TxCpltCallback>:
#define semiAuto huart2
uint8_t semiAutoTxPacket[2] = "DA";


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_UART_TxCpltCallback+0x28>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d102      	bne.n	8000f8a <HAL_UART_TxCpltCallback+0x1a>
	{
		compassTxCplt = 1;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_UART_TxCpltCallback+0x2c>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000448 	.word	0x20000448
 8000f9c:	20000499 	.word	0x20000499

08000fa0 <peripheralUART_Init>:

void peripheralUART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4905      	ldr	r1, [pc, #20]	; (8000fbc <peripheralUART_Init+0x1c>)
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <peripheralUART_Init+0x20>)
 8000faa:	f004 f9d1 	bl	8005350 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4904      	ldr	r1, [pc, #16]	; (8000fc4 <peripheralUART_Init+0x24>)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <peripheralUART_Init+0x28>)
 8000fb4:	f004 f9cc 	bl	8005350 <HAL_UART_Receive_DMA>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000430 	.word	0x20000430
 8000fc0:	20000348 	.word	0x20000348
 8000fc4:	200001d4 	.word	0x200001d4
 8000fc8:	20000448 	.word	0x20000448

08000fcc <PS2DMA_ProcessingData>:
	PS2RxCplt = 0;
}

//put in function handles DMA stream global interrupt of brainDMA Rx in stm32f4xx_it.c
void PS2DMA_ProcessingData(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	if(PS2CheckbyteCount == 4 )
 8000fd0:	4b99      	ldr	r3, [pc, #612]	; (8001238 <PS2DMA_ProcessingData+0x26c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	f040 8197 	bne.w	8001308 <PS2DMA_ProcessingData+0x33c>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8000fda:	4b98      	ldr	r3, [pc, #608]	; (800123c <PS2DMA_ProcessingData+0x270>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	b2d1      	uxtb	r1, r2
 8000fe2:	4a96      	ldr	r2, [pc, #600]	; (800123c <PS2DMA_ProcessingData+0x270>)
 8000fe4:	7011      	strb	r1, [r2, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b95      	ldr	r3, [pc, #596]	; (8001240 <PS2DMA_ProcessingData+0x274>)
 8000fea:	7819      	ldrb	r1, [r3, #0]
 8000fec:	4b95      	ldr	r3, [pc, #596]	; (8001244 <PS2DMA_ProcessingData+0x278>)
 8000fee:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8000ff0:	4b92      	ldr	r3, [pc, #584]	; (800123c <PS2DMA_ProcessingData+0x270>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b05      	cmp	r3, #5
 8000ff6:	f240 8187 	bls.w	8001308 <PS2DMA_ProcessingData+0x33c>
		{
			PS2DataIndex = 0;
 8000ffa:	4b90      	ldr	r3, [pc, #576]	; (800123c <PS2DMA_ProcessingData+0x270>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001000:	4b8d      	ldr	r3, [pc, #564]	; (8001238 <PS2DMA_ProcessingData+0x26c>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001006:	4b8f      	ldr	r3, [pc, #572]	; (8001244 <PS2DMA_ProcessingData+0x278>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b8d      	ldr	r3, [pc, #564]	; (8001244 <PS2DMA_ProcessingData+0x278>)
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	4b8b      	ldr	r3, [pc, #556]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 800101a:	801a      	strh	r2, [r3, #0]
			joyRigtHor = PS2Data[2] - joyRigtMidHor;
 800101c:	4b89      	ldr	r3, [pc, #548]	; (8001244 <PS2DMA_ProcessingData+0x278>)
 800101e:	789b      	ldrb	r3, [r3, #2]
 8001020:	b29a      	uxth	r2, r3
 8001022:	4b8a      	ldr	r3, [pc, #552]	; (800124c <PS2DMA_ProcessingData+0x280>)
 8001024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001028:	b29b      	uxth	r3, r3
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b87      	ldr	r3, [pc, #540]	; (8001250 <PS2DMA_ProcessingData+0x284>)
 8001032:	801a      	strh	r2, [r3, #0]
			joyRigtVer = PS2Data[3] - joyRigtMidVer;
 8001034:	4b83      	ldr	r3, [pc, #524]	; (8001244 <PS2DMA_ProcessingData+0x278>)
 8001036:	78db      	ldrb	r3, [r3, #3]
 8001038:	b29a      	uxth	r2, r3
 800103a:	4b86      	ldr	r3, [pc, #536]	; (8001254 <PS2DMA_ProcessingData+0x288>)
 800103c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001040:	b29b      	uxth	r3, r3
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	b29b      	uxth	r3, r3
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b83      	ldr	r3, [pc, #524]	; (8001258 <PS2DMA_ProcessingData+0x28c>)
 800104a:	801a      	strh	r2, [r3, #0]
			joyLeftHor = PS2Data[4] - joyLeftMidHor;
 800104c:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <PS2DMA_ProcessingData+0x278>)
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	b29a      	uxth	r2, r3
 8001052:	4b82      	ldr	r3, [pc, #520]	; (800125c <PS2DMA_ProcessingData+0x290>)
 8001054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001058:	b29b      	uxth	r3, r3
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	b29b      	uxth	r3, r3
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b7f      	ldr	r3, [pc, #508]	; (8001260 <PS2DMA_ProcessingData+0x294>)
 8001062:	801a      	strh	r2, [r3, #0]
			joyLeftVer = PS2Data[5] - joyLeftMidVer;
 8001064:	4b77      	ldr	r3, [pc, #476]	; (8001244 <PS2DMA_ProcessingData+0x278>)
 8001066:	795b      	ldrb	r3, [r3, #5]
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b7e      	ldr	r3, [pc, #504]	; (8001264 <PS2DMA_ProcessingData+0x298>)
 800106c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001070:	b29b      	uxth	r3, r3
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	b29b      	uxth	r3, r3
 8001076:	b21a      	sxth	r2, r3
 8001078:	4b7b      	ldr	r3, [pc, #492]	; (8001268 <PS2DMA_ProcessingData+0x29c>)
 800107a:	801a      	strh	r2, [r3, #0]
			btn_leftLeft = (PS2Button >> 15) & 1U;
 800107c:	4b72      	ldr	r3, [pc, #456]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 800107e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001082:	13db      	asrs	r3, r3, #15
 8001084:	b21b      	sxth	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b77      	ldr	r3, [pc, #476]	; (800126c <PS2DMA_ProcessingData+0x2a0>)
 8001090:	701a      	strb	r2, [r3, #0]
			btn_leftDown = (PS2Button >> 14) & 1U;
 8001092:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 8001094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001098:	139b      	asrs	r3, r3, #14
 800109a:	b21b      	sxth	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b72      	ldr	r3, [pc, #456]	; (8001270 <PS2DMA_ProcessingData+0x2a4>)
 80010a6:	701a      	strb	r2, [r3, #0]
			btn_leftRigt = (PS2Button >> 13) & 1U;
 80010a8:	4b67      	ldr	r3, [pc, #412]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 80010aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ae:	135b      	asrs	r3, r3, #13
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b6e      	ldr	r3, [pc, #440]	; (8001274 <PS2DMA_ProcessingData+0x2a8>)
 80010bc:	701a      	strb	r2, [r3, #0]
			btn_leftUp   = (PS2Button >> 12) & 1U;
 80010be:	4b62      	ldr	r3, [pc, #392]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 80010c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c4:	131b      	asrs	r3, r3, #12
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <PS2DMA_ProcessingData+0x2ac>)
 80010d2:	701a      	strb	r2, [r3, #0]
			btn_Sta		 = (PS2Button >> 11) & 1U;
 80010d4:	4b5c      	ldr	r3, [pc, #368]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	12db      	asrs	r3, r3, #11
 80010dc:	b21b      	sxth	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b65      	ldr	r3, [pc, #404]	; (800127c <PS2DMA_ProcessingData+0x2b0>)
 80010e8:	701a      	strb	r2, [r3, #0]
			btn_joyRigt  = (PS2Button >> 10) & 1U;
 80010ea:	4b57      	ldr	r3, [pc, #348]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 80010ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f0:	129b      	asrs	r3, r3, #10
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b60      	ldr	r3, [pc, #384]	; (8001280 <PS2DMA_ProcessingData+0x2b4>)
 80010fe:	701a      	strb	r2, [r3, #0]
			btn_joyLeft  = (PS2Button >>  9) & 1U;
 8001100:	4b51      	ldr	r3, [pc, #324]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 8001102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001106:	125b      	asrs	r3, r3, #9
 8001108:	b21b      	sxth	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <PS2DMA_ProcessingData+0x2b8>)
 8001114:	701a      	strb	r2, [r3, #0]
			btn_Sel  	 = (PS2Button >>  8) & 1U;
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 8001118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111c:	121b      	asrs	r3, r3, #8
 800111e:	b21b      	sxth	r3, r3
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b57      	ldr	r3, [pc, #348]	; (8001288 <PS2DMA_ProcessingData+0x2bc>)
 800112a:	701a      	strb	r2, [r3, #0]
			btn_A  		 = (PS2Button >>  7) & 1U;
 800112c:	4b46      	ldr	r3, [pc, #280]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 800112e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001132:	11db      	asrs	r3, r3, #7
 8001134:	b21b      	sxth	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b53      	ldr	r3, [pc, #332]	; (800128c <PS2DMA_ProcessingData+0x2c0>)
 8001140:	701a      	strb	r2, [r3, #0]
			btn_X  		 = (PS2Button >>  6) & 1U;
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 8001144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001148:	119b      	asrs	r3, r3, #6
 800114a:	b21b      	sxth	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b4e      	ldr	r3, [pc, #312]	; (8001290 <PS2DMA_ProcessingData+0x2c4>)
 8001156:	701a      	strb	r2, [r3, #0]
			btn_D  		 = (PS2Button >>  5) & 1U;
 8001158:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 800115a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115e:	115b      	asrs	r3, r3, #5
 8001160:	b21b      	sxth	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <PS2DMA_ProcessingData+0x2c8>)
 800116c:	701a      	strb	r2, [r3, #0]
			btn_W  		 = (PS2Button >>  4) & 1U;
 800116e:	4b36      	ldr	r3, [pc, #216]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	111b      	asrs	r3, r3, #4
 8001176:	b21b      	sxth	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b45      	ldr	r3, [pc, #276]	; (8001298 <PS2DMA_ProcessingData+0x2cc>)
 8001182:	701a      	strb	r2, [r3, #0]
			btn_E  		 = (PS2Button >>  3) & 1U;
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	10db      	asrs	r3, r3, #3
 800118c:	b21b      	sxth	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <PS2DMA_ProcessingData+0x2d0>)
 8001198:	701a      	strb	r2, [r3, #0]
			btn_Q  		 = (PS2Button >>  2) & 1U;
 800119a:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 800119c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a0:	109b      	asrs	r3, r3, #2
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <PS2DMA_ProcessingData+0x2d4>)
 80011ae:	701a      	strb	r2, [r3, #0]
			btn_C  		 = (PS2Button >>  1) & 1U;
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 80011b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b6:	105b      	asrs	r3, r3, #1
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <PS2DMA_ProcessingData+0x2d8>)
 80011c4:	701a      	strb	r2, [r3, #0]
			btn_Z  		 = (PS2Button >>  0) & 1U;
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <PS2DMA_ProcessingData+0x27c>)
 80011c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <PS2DMA_ProcessingData+0x2dc>)
 80011d6:	701a      	strb	r2, [r3, #0]
			if(!btn_W)		//nếu nút W được nhấn
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <PS2DMA_ProcessingData+0x2cc>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d10d      	bne.n	80011fc <PS2DMA_ProcessingData+0x230>
			{
				if(HAL_GPIO_ReadPin(door_GPIO_Port, door_Pin)==GPIO_PIN_RESET)
 80011e0:	2120      	movs	r1, #32
 80011e2:	4832      	ldr	r0, [pc, #200]	; (80012ac <PS2DMA_ProcessingData+0x2e0>)
 80011e4:	f002 fc12 	bl	8003a0c <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d110      	bne.n	8001210 <PS2DMA_ProcessingData+0x244>
				{
					handEn = 1;
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <PS2DMA_ProcessingData+0x2e4>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
					handStatus = HAND_STATUS_PUT;
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <PS2DMA_ProcessingData+0x2e8>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e009      	b.n	8001210 <PS2DMA_ProcessingData+0x244>
				}
			}
			else if(!btn_X)	//nếu nút X được nhấn
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <PS2DMA_ProcessingData+0x2c4>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d105      	bne.n	8001210 <PS2DMA_ProcessingData+0x244>
			{
				handEn = 1;
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <PS2DMA_ProcessingData+0x2e4>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]
				handStatus = HAND_STATUS_WAIT;
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <PS2DMA_ProcessingData+0x2e8>)
 800120c:	2202      	movs	r2, #2
 800120e:	601a      	str	r2, [r3, #0]
			}
			if(btn_A==0)	//nếu nút A được nhấn
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <PS2DMA_ProcessingData+0x2c0>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d155      	bne.n	80012c4 <PS2DMA_ProcessingData+0x2f8>
			{
				if(btn_A_preStatus == 0)
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <PS2DMA_ProcessingData+0x2ec>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <PS2DMA_ProcessingData+0x264>
				{
					semiAutoTxPacket[0] = 'D';
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <PS2DMA_ProcessingData+0x2f0>)
 8001222:	2244      	movs	r2, #68	; 0x44
 8001224:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&semiAuto, semiAutoTxPacket, 1);
 8001226:	2201      	movs	r2, #1
 8001228:	4924      	ldr	r1, [pc, #144]	; (80012bc <PS2DMA_ProcessingData+0x2f0>)
 800122a:	4825      	ldr	r0, [pc, #148]	; (80012c0 <PS2DMA_ProcessingData+0x2f4>)
 800122c:	f004 f84b 	bl	80052c6 <HAL_UART_Transmit_IT>
				}
				btn_A_preStatus = 1;
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <PS2DMA_ProcessingData+0x2ec>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e050      	b.n	80012da <PS2DMA_ProcessingData+0x30e>
 8001238:	200000d4 	.word	0x200000d4
 800123c:	20000265 	.word	0x20000265
 8001240:	20000430 	.word	0x20000430
 8001244:	200001cc 	.word	0x200001cc
 8001248:	20000398 	.word	0x20000398
 800124c:	20000006 	.word	0x20000006
 8001250:	200001c0 	.word	0x200001c0
 8001254:	20000004 	.word	0x20000004
 8001258:	200003c8 	.word	0x200003c8
 800125c:	20000002 	.word	0x20000002
 8001260:	200004de 	.word	0x200004de
 8001264:	20000000 	.word	0x20000000
 8001268:	200004fa 	.word	0x200004fa
 800126c:	200001ac 	.word	0x200001ac
 8001270:	200003b1 	.word	0x200003b1
 8001274:	200003b0 	.word	0x200003b0
 8001278:	20000488 	.word	0x20000488
 800127c:	200003ca 	.word	0x200003ca
 8001280:	2000041d 	.word	0x2000041d
 8001284:	200004e0 	.word	0x200004e0
 8001288:	2000024c 	.word	0x2000024c
 800128c:	200003c1 	.word	0x200003c1
 8001290:	200000d8 	.word	0x200000d8
 8001294:	200001b4 	.word	0x200001b4
 8001298:	2000024f 	.word	0x2000024f
 800129c:	200001b5 	.word	0x200001b5
 80012a0:	2000041c 	.word	0x2000041c
 80012a4:	200004f8 	.word	0x200004f8
 80012a8:	20000498 	.word	0x20000498
 80012ac:	40020800 	.word	0x40020800
 80012b0:	200004f0 	.word	0x200004f0
 80012b4:	2000048c 	.word	0x2000048c
 80012b8:	200000d6 	.word	0x200000d6
 80012bc:	20000014 	.word	0x20000014
 80012c0:	2000049c 	.word	0x2000049c
			}
			else
			{
//				tracking_btn_A++;
				semiAutoTxPacket[0] = 'A';
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <PS2DMA_ProcessingData+0x364>)
 80012c6:	2241      	movs	r2, #65	; 0x41
 80012c8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&semiAuto, semiAutoTxPacket, 1);
 80012ca:	2201      	movs	r2, #1
 80012cc:	4918      	ldr	r1, [pc, #96]	; (8001330 <PS2DMA_ProcessingData+0x364>)
 80012ce:	4819      	ldr	r0, [pc, #100]	; (8001334 <PS2DMA_ProcessingData+0x368>)
 80012d0:	f003 fff9 	bl	80052c6 <HAL_UART_Transmit_IT>
				btn_A_preStatus = 0;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <PS2DMA_ProcessingData+0x36c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
			}
			if(!btn_E)	//nếu nút E được nhấn
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <PS2DMA_ProcessingData+0x370>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <PS2DMA_ProcessingData+0x336>
			{
				if(btn_E_preStatus == 0)
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <PS2DMA_ProcessingData+0x374>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d107      	bne.n	80012fa <PS2DMA_ProcessingData+0x32e>
				{
					HAL_GPIO_TogglePin(door_GPIO_Port, door_Pin);
 80012ea:	2120      	movs	r1, #32
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <PS2DMA_ProcessingData+0x378>)
 80012ee:	f002 fbbe 	bl	8003a6e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(gripper_GPIO_Port, gripper_Pin);
 80012f2:	2110      	movs	r1, #16
 80012f4:	4813      	ldr	r0, [pc, #76]	; (8001344 <PS2DMA_ProcessingData+0x378>)
 80012f6:	f002 fbba 	bl	8003a6e <HAL_GPIO_TogglePin>
				}
				btn_E_preStatus = 1;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <PS2DMA_ProcessingData+0x374>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	e002      	b.n	8001308 <PS2DMA_ProcessingData+0x33c>
			}
			else
			{
				btn_E_preStatus = 0;
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <PS2DMA_ProcessingData+0x374>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <PS2DMA_ProcessingData+0x37c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2baa      	cmp	r3, #170	; 0xaa
 800130e:	d106      	bne.n	800131e <PS2DMA_ProcessingData+0x352>
		PS2CheckbyteCount++;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <PS2DMA_ProcessingData+0x380>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <PS2DMA_ProcessingData+0x380>)
 800131a:	701a      	strb	r2, [r3, #0]
	else
		if(PS2CheckbyteCount != 4)
			PS2CheckbyteCount = 0;
}
 800131c:	e006      	b.n	800132c <PS2DMA_ProcessingData+0x360>
		if(PS2CheckbyteCount != 4)
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <PS2DMA_ProcessingData+0x380>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b04      	cmp	r3, #4
 8001324:	d002      	beq.n	800132c <PS2DMA_ProcessingData+0x360>
			PS2CheckbyteCount = 0;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <PS2DMA_ProcessingData+0x380>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000014 	.word	0x20000014
 8001334:	2000049c 	.word	0x2000049c
 8001338:	200000d6 	.word	0x200000d6
 800133c:	200001b5 	.word	0x200001b5
 8001340:	200000d5 	.word	0x200000d5
 8001344:	40020800 	.word	0x40020800
 8001348:	20000430 	.word	0x20000430
 800134c:	200000d4 	.word	0x200000d4

08001350 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <compassReset+0x24>)
 8001356:	2261      	movs	r2, #97	; 0x61
 8001358:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800135a:	2201      	movs	r2, #1
 800135c:	4905      	ldr	r1, [pc, #20]	; (8001374 <compassReset+0x24>)
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <compassReset+0x28>)
 8001360:	f003 ffb1 	bl	80052c6 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8001364:	f000 f830 	bl	80013c8 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <compassReset+0x24>)
 800136a:	227a      	movs	r2, #122	; 0x7a
 800136c:	701a      	strb	r2, [r3, #0]
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008
 8001378:	20000448 	.word	0x20000448

0800137c <compassRequest>:
void compassRequest(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	compassTxPacket[0]='z';
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <compassRequest+0x18>)
 8001382:	227a      	movs	r2, #122	; 0x7a
 8001384:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	4902      	ldr	r1, [pc, #8]	; (8001394 <compassRequest+0x18>)
 800138a:	4803      	ldr	r0, [pc, #12]	; (8001398 <compassRequest+0x1c>)
 800138c:	f003 ff9b 	bl	80052c6 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000008 	.word	0x20000008
 8001398:	20000448 	.word	0x20000448

0800139c <compassDecode>:
//	HAL_UART_Receive(&compass, compassRxPacket, 2, 50);

	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}
void compassDecode(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <compassDecode+0x24>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <compassDecode+0x24>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <compassDecode+0x28>)
 80013b4:	801a      	strh	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200001d4 	.word	0x200001d4
 80013c4:	20000250 	.word	0x20000250

080013c8 <wait4CompassTx>:
void wait4CompassTx(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 80013cc:	e004      	b.n	80013d8 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <wait4CompassTx+0x28>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <wait4CompassTx+0x28>)
 80013d6:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <wait4CompassTx+0x2c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f6      	beq.n	80013ce <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <wait4CompassTx+0x2c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20000500 	.word	0x20000500
 80013f4:	20000499 	.word	0x20000499

080013f8 <peripheralPWM_Init>:
uint8_t motor3Dir;
uint8_t motor4Dir;


void peripheralPWM_Init()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&motor1, motor1_channel);
 80013fc:	2100      	movs	r1, #0
 80013fe:	4808      	ldr	r0, [pc, #32]	; (8001420 <peripheralPWM_Init+0x28>)
 8001400:	f003 f836 	bl	8004470 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor2, motor2_channel);
 8001404:	2104      	movs	r1, #4
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <peripheralPWM_Init+0x28>)
 8001408:	f003 f832 	bl	8004470 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor3, motor3_channel);
 800140c:	2108      	movs	r1, #8
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <peripheralPWM_Init+0x2c>)
 8001410:	f003 f82e 	bl	8004470 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor4, motor4_channel);	
 8001414:	210c      	movs	r1, #12
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <peripheralPWM_Init+0x2c>)
 8001418:	f003 f82a 	bl	8004470 <HAL_TIM_PWM_Start>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000158 	.word	0x20000158
 8001424:	200003d8 	.word	0x200003d8

08001428 <controlMotor1>:

void controlMotor1(int _speed)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db05      	blt.n	8001442 <controlMotor1+0x1a>
	{
		HAL_GPIO_WritePin(motor1Dir_GPIO_Port, motor1Dir_Pin, CCW);
 8001436:	2201      	movs	r2, #1
 8001438:	2101      	movs	r1, #1
 800143a:	481b      	ldr	r0, [pc, #108]	; (80014a8 <controlMotor1+0x80>)
 800143c:	f002 fafe 	bl	8003a3c <HAL_GPIO_WritePin>
 8001440:	e004      	b.n	800144c <controlMotor1+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor1Dir_GPIO_Port, motor1Dir_Pin, FCW);
 8001442:	2200      	movs	r2, #0
 8001444:	2101      	movs	r1, #1
 8001446:	4818      	ldr	r0, [pc, #96]	; (80014a8 <controlMotor1+0x80>)
 8001448:	f002 faf8 	bl	8003a3c <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b03      	cmp	r3, #3
 8001450:	dc05      	bgt.n	800145e <controlMotor1+0x36>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f113 0f03 	cmn.w	r3, #3
 8001458:	db01      	blt.n	800145e <controlMotor1+0x36>
		_speed = 3;
 800145a:	2303      	movs	r3, #3
 800145c:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2bfa      	cmp	r3, #250	; 0xfa
 8001462:	dd01      	ble.n	8001468 <controlMotor1+0x40>
	{
		_speed = 250;
 8001464:	23fa      	movs	r3, #250	; 0xfa
 8001466:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 800146e:	da02      	bge.n	8001476 <controlMotor1+0x4e>
	{
		_speed = -250;
 8001470:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8001474:	607b      	str	r3, [r7, #4]
	}
	debugSpeed1 = abs(_speed);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	bfb8      	it	lt
 800147c:	425b      	neglt	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe fff4 	bl	800046c <__aeabi_i2d>
 8001484:	4603      	mov	r3, r0
 8001486:	460c      	mov	r4, r1
 8001488:	4a08      	ldr	r2, [pc, #32]	; (80014ac <controlMotor1+0x84>)
 800148a:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor1, motor1_channel, abs(_speed));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001494:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <controlMotor1+0x88>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	200001f0 	.word	0x200001f0
 80014b0:	20000158 	.word	0x20000158

080014b4 <controlMotor2>:
void controlMotor2(int _speed)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db05      	blt.n	80014ce <controlMotor2+0x1a>
	{
		HAL_GPIO_WritePin(motor2Dir_GPIO_Port, motor2Dir_Pin, CCW);
 80014c2:	2201      	movs	r2, #1
 80014c4:	2102      	movs	r1, #2
 80014c6:	481b      	ldr	r0, [pc, #108]	; (8001534 <controlMotor2+0x80>)
 80014c8:	f002 fab8 	bl	8003a3c <HAL_GPIO_WritePin>
 80014cc:	e004      	b.n	80014d8 <controlMotor2+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor2Dir_GPIO_Port, motor2Dir_Pin, FCW);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2102      	movs	r1, #2
 80014d2:	4818      	ldr	r0, [pc, #96]	; (8001534 <controlMotor2+0x80>)
 80014d4:	f002 fab2 	bl	8003a3c <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	dc05      	bgt.n	80014ea <controlMotor2+0x36>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f113 0f03 	cmn.w	r3, #3
 80014e4:	db01      	blt.n	80014ea <controlMotor2+0x36>
			_speed = 3;
 80014e6:	2303      	movs	r3, #3
 80014e8:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2bfa      	cmp	r3, #250	; 0xfa
 80014ee:	dd01      	ble.n	80014f4 <controlMotor2+0x40>
	{
		_speed = 250;
 80014f0:	23fa      	movs	r3, #250	; 0xfa
 80014f2:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 80014fa:	da02      	bge.n	8001502 <controlMotor2+0x4e>
	{
		_speed = -250;
 80014fc:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8001500:	607b      	str	r3, [r7, #4]
	}
	debugSpeed2 = abs(_speed);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	bfb8      	it	lt
 8001508:	425b      	neglt	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ffae 	bl	800046c <__aeabi_i2d>
 8001510:	4603      	mov	r3, r0
 8001512:	460c      	mov	r4, r1
 8001514:	4a08      	ldr	r2, [pc, #32]	; (8001538 <controlMotor2+0x84>)
 8001516:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor2, motor2_channel, abs(_speed));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001520:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <controlMotor2+0x88>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	639a      	str	r2, [r3, #56]	; 0x38
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	40020c00 	.word	0x40020c00
 8001538:	200000e0 	.word	0x200000e0
 800153c:	20000158 	.word	0x20000158

08001540 <controlMotor3>:
void controlMotor3(int _speed)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db05      	blt.n	800155a <controlMotor3+0x1a>
	{
		HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, CCW);
 800154e:	2201      	movs	r2, #1
 8001550:	2108      	movs	r1, #8
 8001552:	481b      	ldr	r0, [pc, #108]	; (80015c0 <controlMotor3+0x80>)
 8001554:	f002 fa72 	bl	8003a3c <HAL_GPIO_WritePin>
 8001558:	e004      	b.n	8001564 <controlMotor3+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, FCW);
 800155a:	2200      	movs	r2, #0
 800155c:	2108      	movs	r1, #8
 800155e:	4818      	ldr	r0, [pc, #96]	; (80015c0 <controlMotor3+0x80>)
 8001560:	f002 fa6c 	bl	8003a3c <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b03      	cmp	r3, #3
 8001568:	dc05      	bgt.n	8001576 <controlMotor3+0x36>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f113 0f03 	cmn.w	r3, #3
 8001570:	db01      	blt.n	8001576 <controlMotor3+0x36>
				_speed = 3;
 8001572:	2303      	movs	r3, #3
 8001574:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2bfa      	cmp	r3, #250	; 0xfa
 800157a:	dd01      	ble.n	8001580 <controlMotor3+0x40>
	{
		_speed = 250;
 800157c:	23fa      	movs	r3, #250	; 0xfa
 800157e:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8001586:	da02      	bge.n	800158e <controlMotor3+0x4e>
	{
		_speed = -250;
 8001588:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 800158c:	607b      	str	r3, [r7, #4]
	}
	debugSpeed3 = abs(_speed);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	bfb8      	it	lt
 8001594:	425b      	neglt	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ff68 	bl	800046c <__aeabi_i2d>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <controlMotor3+0x84>)
 80015a2:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor3, motor3_channel, abs(_speed));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015ac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <controlMotor3+0x88>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}
 80015be:	bf00      	nop
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	200001e0 	.word	0x200001e0
 80015c8:	200003d8 	.word	0x200003d8

080015cc <controlMotor4>:
void controlMotor4(int _speed)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db05      	blt.n	80015e6 <controlMotor4+0x1a>
	{
		HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, CCW);
 80015da:	2201      	movs	r2, #1
 80015dc:	2110      	movs	r1, #16
 80015de:	481b      	ldr	r0, [pc, #108]	; (800164c <controlMotor4+0x80>)
 80015e0:	f002 fa2c 	bl	8003a3c <HAL_GPIO_WritePin>
 80015e4:	e004      	b.n	80015f0 <controlMotor4+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, FCW);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2110      	movs	r1, #16
 80015ea:	4818      	ldr	r0, [pc, #96]	; (800164c <controlMotor4+0x80>)
 80015ec:	f002 fa26 	bl	8003a3c <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	dc05      	bgt.n	8001602 <controlMotor4+0x36>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f113 0f03 	cmn.w	r3, #3
 80015fc:	db01      	blt.n	8001602 <controlMotor4+0x36>
		_speed = 3;
 80015fe:	2303      	movs	r3, #3
 8001600:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2bfa      	cmp	r3, #250	; 0xfa
 8001606:	dd01      	ble.n	800160c <controlMotor4+0x40>
	{
		_speed = 250;
 8001608:	23fa      	movs	r3, #250	; 0xfa
 800160a:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8001612:	da02      	bge.n	800161a <controlMotor4+0x4e>
	{
		_speed = -250;
 8001614:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8001618:	607b      	str	r3, [r7, #4]
	}
	debugSpeed4 = abs(_speed);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	bfb8      	it	lt
 8001620:	425b      	neglt	r3, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff22 	bl	800046c <__aeabi_i2d>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	4a08      	ldr	r2, [pc, #32]	; (8001650 <controlMotor4+0x84>)
 800162e:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor4, motor4_channel, abs(_speed));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001638:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <controlMotor4+0x88>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	bf00      	nop
 800164c:	40020c00 	.word	0x40020c00
 8001650:	200002d0 	.word	0x200002d0
 8001654:	200003d8 	.word	0x200003d8

08001658 <PIDyaw>:
double yawPID;
#define MAX_YAW_PID 100 // 50// 70 //85
#define MIN_YAW_PID -MAX_YAW_PID//-50//-70

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	yawError = -_yawSetpoint + _yawValue;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	b29a      	uxth	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	b29b      	uxth	r3, r3
 800166e:	b21a      	sxth	r2, r3
 8001670:	4b4e      	ldr	r3, [pc, #312]	; (80017ac <PIDyaw+0x154>)
 8001672:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 8001674:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <PIDyaw+0x154>)
 8001676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fef6 	bl	800046c <__aeabi_i2d>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	4a4a      	ldr	r2, [pc, #296]	; (80017b0 <PIDyaw+0x158>)
 8001686:	e9c2 3400 	strd	r3, r4, [r2]
	yawD = (yawError - yawPreError);
 800168a:	4b48      	ldr	r3, [pc, #288]	; (80017ac <PIDyaw+0x154>)
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	461a      	mov	r2, r3
 8001692:	4b48      	ldr	r3, [pc, #288]	; (80017b4 <PIDyaw+0x15c>)
 8001694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fee6 	bl	800046c <__aeabi_i2d>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	4a44      	ldr	r2, [pc, #272]	; (80017b8 <PIDyaw+0x160>)
 80016a6:	e9c2 3400 	strd	r3, r4, [r2]
	yawI = yawError + yawI;
 80016aa:	4b40      	ldr	r3, [pc, #256]	; (80017ac <PIDyaw+0x154>)
 80016ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fedb 	bl	800046c <__aeabi_i2d>
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <PIDyaw+0x164>)
 80016b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016bc:	461a      	mov	r2, r3
 80016be:	4623      	mov	r3, r4
 80016c0:	f7fe fd88 	bl	80001d4 <__adddf3>
 80016c4:	4603      	mov	r3, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	4a3c      	ldr	r2, [pc, #240]	; (80017bc <PIDyaw+0x164>)
 80016ca:	e9c2 3400 	strd	r3, r4, [r2]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 80016ce:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <PIDyaw+0x168>)
 80016d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016d4:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <PIDyaw+0x158>)
 80016d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016da:	461a      	mov	r2, r3
 80016dc:	4623      	mov	r3, r4
 80016de:	f7fe ff2f 	bl	8000540 <__aeabi_dmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	460c      	mov	r4, r1
 80016e6:	461d      	mov	r5, r3
 80016e8:	4626      	mov	r6, r4
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <PIDyaw+0x16c>)
 80016ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f0:	4b31      	ldr	r3, [pc, #196]	; (80017b8 <PIDyaw+0x160>)
 80016f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016f6:	461a      	mov	r2, r3
 80016f8:	4623      	mov	r3, r4
 80016fa:	f7fe ff21 	bl	8000540 <__aeabi_dmul>
 80016fe:	4603      	mov	r3, r0
 8001700:	460c      	mov	r4, r1
 8001702:	461a      	mov	r2, r3
 8001704:	4623      	mov	r3, r4
 8001706:	4628      	mov	r0, r5
 8001708:	4631      	mov	r1, r6
 800170a:	f7fe fd63 	bl	80001d4 <__adddf3>
 800170e:	4603      	mov	r3, r0
 8001710:	460c      	mov	r4, r1
 8001712:	461d      	mov	r5, r3
 8001714:	4626      	mov	r6, r4
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <PIDyaw+0x170>)
 8001718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <PIDyaw+0x164>)
 800171e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001722:	461a      	mov	r2, r3
 8001724:	4623      	mov	r3, r4
 8001726:	f7fe ff0b 	bl	8000540 <__aeabi_dmul>
 800172a:	4603      	mov	r3, r0
 800172c:	460c      	mov	r4, r1
 800172e:	461a      	mov	r2, r3
 8001730:	4623      	mov	r3, r4
 8001732:	4628      	mov	r0, r5
 8001734:	4631      	mov	r1, r6
 8001736:	f7fe fd4d 	bl	80001d4 <__adddf3>
 800173a:	4603      	mov	r3, r0
 800173c:	460c      	mov	r4, r1
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <PIDyaw+0x174>)
 8001740:	e9c2 3400 	strd	r3, r4, [r2]
	if(yawPID > MAX_YAW_PID)
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <PIDyaw+0x174>)
 8001746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <PIDyaw+0x178>)
 8001750:	f7ff f986 	bl	8000a60 <__aeabi_dcmpgt>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <PIDyaw+0x10e>
	{
		yawPID = MAX_YAW_PID;
 800175a:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <PIDyaw+0x174>)
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	4c1b      	ldr	r4, [pc, #108]	; (80017d0 <PIDyaw+0x178>)
 8001762:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <PIDyaw+0x174>)
 8001768:	e9d3 0100 	ldrd	r0, r1, [r3]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <PIDyaw+0x17c>)
 8001772:	f7ff f957 	bl	8000a24 <__aeabi_dcmplt>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <PIDyaw+0x130>
	{
		yawPID = MIN_YAW_PID;
 800177c:	4a13      	ldr	r2, [pc, #76]	; (80017cc <PIDyaw+0x174>)
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	4c14      	ldr	r4, [pc, #80]	; (80017d4 <PIDyaw+0x17c>)
 8001784:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <PIDyaw+0x154>)
 800178a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <PIDyaw+0x15c>)
 8001790:	801a      	strh	r2, [r3, #0]
	return yawPID;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <PIDyaw+0x174>)
 8001794:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001798:	ec44 3b17 	vmov	d7, r3, r4
}
 800179c:	eeb0 0a47 	vmov.f32	s0, s14
 80017a0:	eef0 0a67 	vmov.f32	s1, s15
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000208 	.word	0x20000208
 80017b0:	20000258 	.word	0x20000258
 80017b4:	2000019a 	.word	0x2000019a
 80017b8:	20000150 	.word	0x20000150
 80017bc:	20000200 	.word	0x20000200
 80017c0:	20000028 	.word	0x20000028
 80017c4:	20000030 	.word	0x20000030
 80017c8:	20000038 	.word	0x20000038
 80017cc:	20000428 	.word	0x20000428
 80017d0:	40590000 	.word	0x40590000
 80017d4:	c0590000 	.word	0xc0590000

080017d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017de:	f001 fa67 	bl	8002cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e2:	f000 fbcd 	bl	8001f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e6:	f000 fe97 	bl	8002518 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ea:	f000 fe57 	bl	800249c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80017ee:	f000 fe01 	bl	80023f4 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80017f2:	f000 fdd5 	bl	80023a0 <MX_UART4_Init>
  MX_TIM1_Init();
 80017f6:	f000 fc2d 	bl	8002054 <MX_TIM1_Init>
  MX_TIM8_Init();
 80017fa:	f000 fd25 	bl	8002248 <MX_TIM8_Init>
  MX_TIM5_Init();
 80017fe:	f000 fcd5 	bl	80021ac <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001802:	f000 fe21 	bl	8002448 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8001806:	f7ff fbcb 	bl	8000fa0 <peripheralUART_Init>
  peripheralPWM_Init();
 800180a:	f7ff fdf5 	bl	80013f8 <peripheralPWM_Init>
  handControl_Init();
 800180e:	f7ff faef 	bl	8000df0 <handControl_Init>
  compassReset();
 8001812:	f7ff fd9d 	bl	8001350 <compassReset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//							  testPWM();
	if(joyRigtHor == 0)
 8001816:	4bce      	ldr	r3, [pc, #824]	; (8001b50 <main+0x378>)
 8001818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f040 81cf 	bne.w	8001bc0 <main+0x3e8>
	{
		PIDyaw(compassData, rotateAngle);
 8001822:	4bcc      	ldr	r3, [pc, #816]	; (8001b54 <main+0x37c>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	461d      	mov	r5, r3
 800182a:	4bcb      	ldr	r3, [pc, #812]	; (8001b58 <main+0x380>)
 800182c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001830:	4618      	mov	r0, r3
 8001832:	4621      	mov	r1, r4
 8001834:	f7ff f934 	bl	8000aa0 <__aeabi_d2iz>
 8001838:	4603      	mov	r3, r0
 800183a:	4619      	mov	r1, r3
 800183c:	4628      	mov	r0, r5
 800183e:	f7ff ff0b 	bl	8001658 <PIDyaw>
		_dir = atan2(joyLeftHor, -joyLeftVer);
 8001842:	4bc6      	ldr	r3, [pc, #792]	; (8001b5c <main+0x384>)
 8001844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe0f 	bl	800046c <__aeabi_i2d>
 800184e:	4604      	mov	r4, r0
 8001850:	460d      	mov	r5, r1
 8001852:	4bc3      	ldr	r3, [pc, #780]	; (8001b60 <main+0x388>)
 8001854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001858:	425b      	negs	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe06 	bl	800046c <__aeabi_i2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	ec43 2b11 	vmov	d1, r2, r3
 8001868:	ec45 4b10 	vmov	d0, r4, r5
 800186c:	f004 fcc4 	bl	80061f8 <atan2>
 8001870:	eeb0 7a40 	vmov.f32	s14, s0
 8001874:	eef0 7a60 	vmov.f32	s15, s1
 8001878:	4bba      	ldr	r3, [pc, #744]	; (8001b64 <main+0x38c>)
 800187a:	ed83 7b00 	vstr	d7, [r3]
		_controlSpeed = sqrt(joyLeftHor*joyLeftHor + joyLeftVer*joyLeftVer);
 800187e:	4bb7      	ldr	r3, [pc, #732]	; (8001b5c <main+0x384>)
 8001880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001884:	461a      	mov	r2, r3
 8001886:	4bb5      	ldr	r3, [pc, #724]	; (8001b5c <main+0x384>)
 8001888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188c:	fb03 f202 	mul.w	r2, r3, r2
 8001890:	4bb3      	ldr	r3, [pc, #716]	; (8001b60 <main+0x388>)
 8001892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001896:	4619      	mov	r1, r3
 8001898:	4bb1      	ldr	r3, [pc, #708]	; (8001b60 <main+0x388>)
 800189a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189e:	fb03 f301 	mul.w	r3, r3, r1
 80018a2:	4413      	add	r3, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fde1 	bl	800046c <__aeabi_i2d>
 80018aa:	4603      	mov	r3, r0
 80018ac:	460c      	mov	r4, r1
 80018ae:	ec44 3b10 	vmov	d0, r3, r4
 80018b2:	f004 fca3 	bl	80061fc <sqrt>
 80018b6:	eeb0 7a40 	vmov.f32	s14, s0
 80018ba:	eef0 7a60 	vmov.f32	s15, s1
 80018be:	4baa      	ldr	r3, [pc, #680]	; (8001b68 <main+0x390>)
 80018c0:	ed83 7b00 	vstr	d7, [r3]
		_motor1Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 80018c4:	4ba9      	ldr	r3, [pc, #676]	; (8001b6c <main+0x394>)
 80018c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ca:	4ba9      	ldr	r3, [pc, #676]	; (8001b70 <main+0x398>)
 80018cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	f7fe fe34 	bl	8000540 <__aeabi_dmul>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	461d      	mov	r5, r3
 80018de:	4626      	mov	r6, r4
 80018e0:	4ba4      	ldr	r3, [pc, #656]	; (8001b74 <main+0x39c>)
 80018e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e6:	4ba0      	ldr	r3, [pc, #640]	; (8001b68 <main+0x390>)
 80018e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	f7fe fe26 	bl	8000540 <__aeabi_dmul>
 80018f4:	4603      	mov	r3, r0
 80018f6:	460c      	mov	r4, r1
 80018f8:	4698      	mov	r8, r3
 80018fa:	46a1      	mov	r9, r4
 80018fc:	4b99      	ldr	r3, [pc, #612]	; (8001b64 <main+0x38c>)
 80018fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001902:	461a      	mov	r2, r3
 8001904:	4623      	mov	r3, r4
 8001906:	a18e      	add	r1, pc, #568	; (adr r1, 8001b40 <main+0x368>)
 8001908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800190c:	f7fe fc60 	bl	80001d0 <__aeabi_dsub>
 8001910:	4603      	mov	r3, r0
 8001912:	460c      	mov	r4, r1
 8001914:	ec44 3b17 	vmov	d7, r3, r4
 8001918:	eeb0 0a47 	vmov.f32	s0, s14
 800191c:	eef0 0a67 	vmov.f32	s1, s15
 8001920:	f004 fc26 	bl	8006170 <cos>
 8001924:	ec54 3b10 	vmov	r3, r4, d0
 8001928:	461a      	mov	r2, r3
 800192a:	4623      	mov	r3, r4
 800192c:	4640      	mov	r0, r8
 800192e:	4649      	mov	r1, r9
 8001930:	f7fe fe06 	bl	8000540 <__aeabi_dmul>
 8001934:	4603      	mov	r3, r0
 8001936:	460c      	mov	r4, r1
 8001938:	4618      	mov	r0, r3
 800193a:	4621      	mov	r1, r4
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	f7fe fc46 	bl	80001d4 <__adddf3>
 8001948:	4603      	mov	r3, r0
 800194a:	460c      	mov	r4, r1
 800194c:	461a      	mov	r2, r3
 800194e:	4623      	mov	r3, r4
 8001950:	4628      	mov	r0, r5
 8001952:	4631      	mov	r1, r6
 8001954:	f7fe fc3e 	bl	80001d4 <__adddf3>
 8001958:	4603      	mov	r3, r0
 800195a:	460c      	mov	r4, r1
 800195c:	4a86      	ldr	r2, [pc, #536]	; (8001b78 <main+0x3a0>)
 800195e:	e9c2 3400 	strd	r3, r4, [r2]
		_motor2Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 8001962:	4b82      	ldr	r3, [pc, #520]	; (8001b6c <main+0x394>)
 8001964:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001968:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <main+0x398>)
 800196a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800196e:	461a      	mov	r2, r3
 8001970:	4623      	mov	r3, r4
 8001972:	f7fe fde5 	bl	8000540 <__aeabi_dmul>
 8001976:	4603      	mov	r3, r0
 8001978:	460c      	mov	r4, r1
 800197a:	461d      	mov	r5, r3
 800197c:	4626      	mov	r6, r4
 800197e:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <main+0x39c>)
 8001980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001984:	4b78      	ldr	r3, [pc, #480]	; (8001b68 <main+0x390>)
 8001986:	e9d3 3400 	ldrd	r3, r4, [r3]
 800198a:	461a      	mov	r2, r3
 800198c:	4623      	mov	r3, r4
 800198e:	f7fe fdd7 	bl	8000540 <__aeabi_dmul>
 8001992:	4603      	mov	r3, r0
 8001994:	460c      	mov	r4, r1
 8001996:	4698      	mov	r8, r3
 8001998:	46a1      	mov	r9, r4
 800199a:	4b72      	ldr	r3, [pc, #456]	; (8001b64 <main+0x38c>)
 800199c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a0:	a367      	add	r3, pc, #412	; (adr r3, 8001b40 <main+0x368>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7fe fc15 	bl	80001d4 <__adddf3>
 80019aa:	4603      	mov	r3, r0
 80019ac:	460c      	mov	r4, r1
 80019ae:	ec44 3b17 	vmov	d7, r3, r4
 80019b2:	eeb0 0a47 	vmov.f32	s0, s14
 80019b6:	eef0 0a67 	vmov.f32	s1, s15
 80019ba:	f004 fbd9 	bl	8006170 <cos>
 80019be:	ec54 3b10 	vmov	r3, r4, d0
 80019c2:	461a      	mov	r2, r3
 80019c4:	4623      	mov	r3, r4
 80019c6:	4640      	mov	r0, r8
 80019c8:	4649      	mov	r1, r9
 80019ca:	f7fe fdb9 	bl	8000540 <__aeabi_dmul>
 80019ce:	4603      	mov	r3, r0
 80019d0:	460c      	mov	r4, r1
 80019d2:	461a      	mov	r2, r3
 80019d4:	4623      	mov	r3, r4
 80019d6:	4628      	mov	r0, r5
 80019d8:	4631      	mov	r1, r6
 80019da:	f7fe fbfb 	bl	80001d4 <__adddf3>
 80019de:	4603      	mov	r3, r0
 80019e0:	460c      	mov	r4, r1
 80019e2:	4a66      	ldr	r2, [pc, #408]	; (8001b7c <main+0x3a4>)
 80019e4:	e9c2 3400 	strd	r3, r4, [r2]
		_motor3Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 80019e8:	4b60      	ldr	r3, [pc, #384]	; (8001b6c <main+0x394>)
 80019ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ee:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <main+0x398>)
 80019f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4623      	mov	r3, r4
 80019f8:	f7fe fda2 	bl	8000540 <__aeabi_dmul>
 80019fc:	4603      	mov	r3, r0
 80019fe:	460c      	mov	r4, r1
 8001a00:	461d      	mov	r5, r3
 8001a02:	4626      	mov	r6, r4
 8001a04:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <main+0x39c>)
 8001a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0a:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <main+0x390>)
 8001a0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	f7fe fd94 	bl	8000540 <__aeabi_dmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	4698      	mov	r8, r3
 8001a1e:	46a1      	mov	r9, r4
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <main+0x38c>)
 8001a22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a26:	a348      	add	r3, pc, #288	; (adr r3, 8001b48 <main+0x370>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fbd2 	bl	80001d4 <__adddf3>
 8001a30:	4603      	mov	r3, r0
 8001a32:	460c      	mov	r4, r1
 8001a34:	ec44 3b17 	vmov	d7, r3, r4
 8001a38:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3c:	eef0 0a67 	vmov.f32	s1, s15
 8001a40:	f004 fb96 	bl	8006170 <cos>
 8001a44:	ec54 3b10 	vmov	r3, r4, d0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	4640      	mov	r0, r8
 8001a4e:	4649      	mov	r1, r9
 8001a50:	f7fe fd76 	bl	8000540 <__aeabi_dmul>
 8001a54:	4603      	mov	r3, r0
 8001a56:	460c      	mov	r4, r1
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	4631      	mov	r1, r6
 8001a60:	f7fe fbb8 	bl	80001d4 <__adddf3>
 8001a64:	4603      	mov	r3, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	4618      	mov	r0, r3
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	f7fe fbae 	bl	80001d4 <__adddf3>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	4a40      	ldr	r2, [pc, #256]	; (8001b80 <main+0x3a8>)
 8001a7e:	e9c2 3400 	strd	r3, r4, [r2]
		_motor4Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 8001a82:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <main+0x394>)
 8001a84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <main+0x398>)
 8001a8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4623      	mov	r3, r4
 8001a92:	f7fe fd55 	bl	8000540 <__aeabi_dmul>
 8001a96:	4603      	mov	r3, r0
 8001a98:	460c      	mov	r4, r1
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4626      	mov	r6, r4
 8001a9e:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <main+0x39c>)
 8001aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa4:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <main+0x390>)
 8001aa6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4623      	mov	r3, r4
 8001aae:	f7fe fd47 	bl	8000540 <__aeabi_dmul>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	4698      	mov	r8, r3
 8001ab8:	46a1      	mov	r9, r4
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <main+0x38c>)
 8001abc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	a120      	add	r1, pc, #128	; (adr r1, 8001b48 <main+0x370>)
 8001ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aca:	f7fe fb81 	bl	80001d0 <__aeabi_dsub>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	ec44 3b17 	vmov	d7, r3, r4
 8001ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8001ada:	eef0 0a67 	vmov.f32	s1, s15
 8001ade:	f004 fb47 	bl	8006170 <cos>
 8001ae2:	ec54 3b10 	vmov	r3, r4, d0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4623      	mov	r3, r4
 8001aea:	4640      	mov	r0, r8
 8001aec:	4649      	mov	r1, r9
 8001aee:	f7fe fd27 	bl	8000540 <__aeabi_dmul>
 8001af2:	4603      	mov	r3, r0
 8001af4:	460c      	mov	r4, r1
 8001af6:	461a      	mov	r2, r3
 8001af8:	4623      	mov	r3, r4
 8001afa:	4628      	mov	r0, r5
 8001afc:	4631      	mov	r1, r6
 8001afe:	f7fe fb69 	bl	80001d4 <__adddf3>
 8001b02:	4603      	mov	r3, r0
 8001b04:	460c      	mov	r4, r1
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <main+0x3ac>)
 8001b08:	e9c2 3400 	strd	r3, r4, [r2]
		controlMotor1(_motor1Speed);
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <main+0x3a0>)
 8001b0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b12:	4618      	mov	r0, r3
 8001b14:	4621      	mov	r1, r4
 8001b16:	f7fe ffc3 	bl	8000aa0 <__aeabi_d2iz>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fc83 	bl	8001428 <controlMotor1>
		controlMotor2(_motor2Speed);
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <main+0x3a4>)
 8001b24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	f7fe ffb8 	bl	8000aa0 <__aeabi_d2iz>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fcbe 	bl	80014b4 <controlMotor2>
 8001b38:	e026      	b.n	8001b88 <main+0x3b0>
 8001b3a:	bf00      	nop
 8001b3c:	f3af 8000 	nop.w
 8001b40:	7f3321d2 	.word	0x7f3321d2
 8001b44:	4002d97c 	.word	0x4002d97c
 8001b48:	54442d18 	.word	0x54442d18
 8001b4c:	3fe921fb 	.word	0x3fe921fb
 8001b50:	200001c0 	.word	0x200001c0
 8001b54:	20000250 	.word	0x20000250
 8001b58:	200004e8 	.word	0x200004e8
 8001b5c:	200004de 	.word	0x200004de
 8001b60:	200004fa 	.word	0x200004fa
 8001b64:	200001f8 	.word	0x200001f8
 8001b68:	20000390 	.word	0x20000390
 8001b6c:	20000428 	.word	0x20000428
 8001b70:	20000020 	.word	0x20000020
 8001b74:	20000018 	.word	0x20000018
 8001b78:	20000340 	.word	0x20000340
 8001b7c:	200003d0 	.word	0x200003d0
 8001b80:	20000490 	.word	0x20000490
 8001b84:	200001a0 	.word	0x200001a0
		controlMotor3(_motor3Speed);
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <main+0x3e0>)
 8001b8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	4621      	mov	r1, r4
 8001b92:	f7fe ff85 	bl	8000aa0 <__aeabi_d2iz>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fcd1 	bl	8001540 <controlMotor3>
		controlMotor4(_motor4Speed);
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <main+0x3e4>)
 8001ba0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	f7fe ff7a 	bl	8000aa0 <__aeabi_d2iz>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fd0c 	bl	80015cc <controlMotor4>
 8001bb4:	e188      	b.n	8001ec8 <main+0x6f0>
 8001bb6:	bf00      	nop
 8001bb8:	20000490 	.word	0x20000490
 8001bbc:	200001a0 	.word	0x200001a0
	}
	else
	{
		_dir = atan2(joyLeftHor, -joyLeftVer);
 8001bc0:	4bd1      	ldr	r3, [pc, #836]	; (8001f08 <main+0x730>)
 8001bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fc50 	bl	800046c <__aeabi_i2d>
 8001bcc:	4604      	mov	r4, r0
 8001bce:	460d      	mov	r5, r1
 8001bd0:	4bce      	ldr	r3, [pc, #824]	; (8001f0c <main+0x734>)
 8001bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd6:	425b      	negs	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fc47 	bl	800046c <__aeabi_i2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	ec43 2b11 	vmov	d1, r2, r3
 8001be6:	ec45 4b10 	vmov	d0, r4, r5
 8001bea:	f004 fb05 	bl	80061f8 <atan2>
 8001bee:	eeb0 7a40 	vmov.f32	s14, s0
 8001bf2:	eef0 7a60 	vmov.f32	s15, s1
 8001bf6:	4bc6      	ldr	r3, [pc, #792]	; (8001f10 <main+0x738>)
 8001bf8:	ed83 7b00 	vstr	d7, [r3]
		_controlSpeed = sqrt(joyLeftHor*joyLeftHor + joyLeftVer*joyLeftVer);
 8001bfc:	4bc2      	ldr	r3, [pc, #776]	; (8001f08 <main+0x730>)
 8001bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c02:	461a      	mov	r2, r3
 8001c04:	4bc0      	ldr	r3, [pc, #768]	; (8001f08 <main+0x730>)
 8001c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0a:	fb03 f202 	mul.w	r2, r3, r2
 8001c0e:	4bbf      	ldr	r3, [pc, #764]	; (8001f0c <main+0x734>)
 8001c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c14:	4619      	mov	r1, r3
 8001c16:	4bbd      	ldr	r3, [pc, #756]	; (8001f0c <main+0x734>)
 8001c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1c:	fb03 f301 	mul.w	r3, r3, r1
 8001c20:	4413      	add	r3, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fc22 	bl	800046c <__aeabi_i2d>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	ec44 3b10 	vmov	d0, r3, r4
 8001c30:	f004 fae4 	bl	80061fc <sqrt>
 8001c34:	eeb0 7a40 	vmov.f32	s14, s0
 8001c38:	eef0 7a60 	vmov.f32	s15, s1
 8001c3c:	4bb5      	ldr	r3, [pc, #724]	; (8001f14 <main+0x73c>)
 8001c3e:	ed83 7b00 	vstr	d7, [r3]
		_motor1Speed = joyRigtHor*1.0 + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 8001c42:	4bb5      	ldr	r3, [pc, #724]	; (8001f18 <main+0x740>)
 8001c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc0f 	bl	800046c <__aeabi_i2d>
 8001c4e:	4605      	mov	r5, r0
 8001c50:	460e      	mov	r6, r1
 8001c52:	4bb2      	ldr	r3, [pc, #712]	; (8001f1c <main+0x744>)
 8001c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c58:	4bae      	ldr	r3, [pc, #696]	; (8001f14 <main+0x73c>)
 8001c5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4623      	mov	r3, r4
 8001c62:	f7fe fc6d 	bl	8000540 <__aeabi_dmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	460c      	mov	r4, r1
 8001c6a:	4698      	mov	r8, r3
 8001c6c:	46a1      	mov	r9, r4
 8001c6e:	4ba8      	ldr	r3, [pc, #672]	; (8001f10 <main+0x738>)
 8001c70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4623      	mov	r3, r4
 8001c78:	a19f      	add	r1, pc, #636	; (adr r1, 8001ef8 <main+0x720>)
 8001c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c7e:	f7fe faa7 	bl	80001d0 <__aeabi_dsub>
 8001c82:	4603      	mov	r3, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	ec44 3b17 	vmov	d7, r3, r4
 8001c8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c8e:	eef0 0a67 	vmov.f32	s1, s15
 8001c92:	f004 fa6d 	bl	8006170 <cos>
 8001c96:	ec54 3b10 	vmov	r3, r4, d0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4623      	mov	r3, r4
 8001c9e:	4640      	mov	r0, r8
 8001ca0:	4649      	mov	r1, r9
 8001ca2:	f7fe fc4d 	bl	8000540 <__aeabi_dmul>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	460c      	mov	r4, r1
 8001caa:	4618      	mov	r0, r3
 8001cac:	4621      	mov	r1, r4
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	f7fe fa8d 	bl	80001d4 <__adddf3>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4623      	mov	r3, r4
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	4631      	mov	r1, r6
 8001cc6:	f7fe fa85 	bl	80001d4 <__adddf3>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460c      	mov	r4, r1
 8001cce:	4a94      	ldr	r2, [pc, #592]	; (8001f20 <main+0x748>)
 8001cd0:	e9c2 3400 	strd	r3, r4, [r2]
		_motor2Speed = joyRigtHor*1.0 + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 8001cd4:	4b90      	ldr	r3, [pc, #576]	; (8001f18 <main+0x740>)
 8001cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fbc6 	bl	800046c <__aeabi_i2d>
 8001ce0:	4605      	mov	r5, r0
 8001ce2:	460e      	mov	r6, r1
 8001ce4:	4b8d      	ldr	r3, [pc, #564]	; (8001f1c <main+0x744>)
 8001ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cea:	4b8a      	ldr	r3, [pc, #552]	; (8001f14 <main+0x73c>)
 8001cec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	f7fe fc24 	bl	8000540 <__aeabi_dmul>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	460c      	mov	r4, r1
 8001cfc:	4698      	mov	r8, r3
 8001cfe:	46a1      	mov	r9, r4
 8001d00:	4b83      	ldr	r3, [pc, #524]	; (8001f10 <main+0x738>)
 8001d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d06:	a37c      	add	r3, pc, #496	; (adr r3, 8001ef8 <main+0x720>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fa62 	bl	80001d4 <__adddf3>
 8001d10:	4603      	mov	r3, r0
 8001d12:	460c      	mov	r4, r1
 8001d14:	ec44 3b17 	vmov	d7, r3, r4
 8001d18:	eeb0 0a47 	vmov.f32	s0, s14
 8001d1c:	eef0 0a67 	vmov.f32	s1, s15
 8001d20:	f004 fa26 	bl	8006170 <cos>
 8001d24:	ec54 3b10 	vmov	r3, r4, d0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4623      	mov	r3, r4
 8001d2c:	4640      	mov	r0, r8
 8001d2e:	4649      	mov	r1, r9
 8001d30:	f7fe fc06 	bl	8000540 <__aeabi_dmul>
 8001d34:	4603      	mov	r3, r0
 8001d36:	460c      	mov	r4, r1
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	4631      	mov	r1, r6
 8001d40:	f7fe fa48 	bl	80001d4 <__adddf3>
 8001d44:	4603      	mov	r3, r0
 8001d46:	460c      	mov	r4, r1
 8001d48:	4a76      	ldr	r2, [pc, #472]	; (8001f24 <main+0x74c>)
 8001d4a:	e9c2 3400 	strd	r3, r4, [r2]
		_motor3Speed = joyRigtHor*1.0 +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 8001d4e:	4b72      	ldr	r3, [pc, #456]	; (8001f18 <main+0x740>)
 8001d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fb89 	bl	800046c <__aeabi_i2d>
 8001d5a:	4605      	mov	r5, r0
 8001d5c:	460e      	mov	r6, r1
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <main+0x744>)
 8001d60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d64:	4b6b      	ldr	r3, [pc, #428]	; (8001f14 <main+0x73c>)
 8001d66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4623      	mov	r3, r4
 8001d6e:	f7fe fbe7 	bl	8000540 <__aeabi_dmul>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	4698      	mov	r8, r3
 8001d78:	46a1      	mov	r9, r4
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <main+0x738>)
 8001d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d80:	a35f      	add	r3, pc, #380	; (adr r3, 8001f00 <main+0x728>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fa25 	bl	80001d4 <__adddf3>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	ec44 3b17 	vmov	d7, r3, r4
 8001d92:	eeb0 0a47 	vmov.f32	s0, s14
 8001d96:	eef0 0a67 	vmov.f32	s1, s15
 8001d9a:	f004 f9e9 	bl	8006170 <cos>
 8001d9e:	ec54 3b10 	vmov	r3, r4, d0
 8001da2:	461a      	mov	r2, r3
 8001da4:	4623      	mov	r3, r4
 8001da6:	4640      	mov	r0, r8
 8001da8:	4649      	mov	r1, r9
 8001daa:	f7fe fbc9 	bl	8000540 <__aeabi_dmul>
 8001dae:	4603      	mov	r3, r0
 8001db0:	460c      	mov	r4, r1
 8001db2:	461a      	mov	r2, r3
 8001db4:	4623      	mov	r3, r4
 8001db6:	4628      	mov	r0, r5
 8001db8:	4631      	mov	r1, r6
 8001dba:	f7fe fa0b 	bl	80001d4 <__adddf3>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460c      	mov	r4, r1
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	f7fe fa01 	bl	80001d4 <__adddf3>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460c      	mov	r4, r1
 8001dd6:	4a54      	ldr	r2, [pc, #336]	; (8001f28 <main+0x750>)
 8001dd8:	e9c2 3400 	strd	r3, r4, [r2]
		_motor4Speed = joyRigtHor*1.0 +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 8001ddc:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <main+0x740>)
 8001dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fb42 	bl	800046c <__aeabi_i2d>
 8001de8:	4605      	mov	r5, r0
 8001dea:	460e      	mov	r6, r1
 8001dec:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <main+0x744>)
 8001dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001df2:	4b48      	ldr	r3, [pc, #288]	; (8001f14 <main+0x73c>)
 8001df4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	f7fe fba0 	bl	8000540 <__aeabi_dmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	4698      	mov	r8, r3
 8001e06:	46a1      	mov	r9, r4
 8001e08:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <main+0x738>)
 8001e0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4623      	mov	r3, r4
 8001e12:	a13b      	add	r1, pc, #236	; (adr r1, 8001f00 <main+0x728>)
 8001e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e18:	f7fe f9da 	bl	80001d0 <__aeabi_dsub>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	ec44 3b17 	vmov	d7, r3, r4
 8001e24:	eeb0 0a47 	vmov.f32	s0, s14
 8001e28:	eef0 0a67 	vmov.f32	s1, s15
 8001e2c:	f004 f9a0 	bl	8006170 <cos>
 8001e30:	ec54 3b10 	vmov	r3, r4, d0
 8001e34:	461a      	mov	r2, r3
 8001e36:	4623      	mov	r3, r4
 8001e38:	4640      	mov	r0, r8
 8001e3a:	4649      	mov	r1, r9
 8001e3c:	f7fe fb80 	bl	8000540 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	461a      	mov	r2, r3
 8001e46:	4623      	mov	r3, r4
 8001e48:	4628      	mov	r0, r5
 8001e4a:	4631      	mov	r1, r6
 8001e4c:	f7fe f9c2 	bl	80001d4 <__adddf3>
 8001e50:	4603      	mov	r3, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	4a35      	ldr	r2, [pc, #212]	; (8001f2c <main+0x754>)
 8001e56:	e9c2 3400 	strd	r3, r4, [r2]
		controlMotor1(_motor1Speed);
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <main+0x748>)
 8001e5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e60:	4618      	mov	r0, r3
 8001e62:	4621      	mov	r1, r4
 8001e64:	f7fe fe1c 	bl	8000aa0 <__aeabi_d2iz>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fadc 	bl	8001428 <controlMotor1>
		controlMotor2(_motor2Speed);
 8001e70:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <main+0x74c>)
 8001e72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e76:	4618      	mov	r0, r3
 8001e78:	4621      	mov	r1, r4
 8001e7a:	f7fe fe11 	bl	8000aa0 <__aeabi_d2iz>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fb17 	bl	80014b4 <controlMotor2>
		controlMotor3(_motor3Speed);
 8001e86:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <main+0x750>)
 8001e88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	4621      	mov	r1, r4
 8001e90:	f7fe fe06 	bl	8000aa0 <__aeabi_d2iz>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fb52 	bl	8001540 <controlMotor3>
		controlMotor4(_motor4Speed);
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <main+0x754>)
 8001e9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	f7fe fdfb 	bl	8000aa0 <__aeabi_d2iz>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fb8d 	bl	80015cc <controlMotor4>
		rotateAngle = compassData;
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <main+0x758>)
 8001eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fad7 	bl	800046c <__aeabi_i2d>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <main+0x75c>)
 8001ec4:	e9c2 3400 	strd	r3, r4, [r2]
	}
//	  HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, GPIO_PIN_RESET);
	  trackingMotorDir = HAL_GPIO_ReadPin(handDir_GPIO_Port, handDir_Pin);
 8001ec8:	2104      	movs	r1, #4
 8001eca:	481b      	ldr	r0, [pc, #108]	; (8001f38 <main+0x760>)
 8001ecc:	f001 fd9e 	bl	8003a0c <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <main+0x764>)
 8001ed6:	601a      	str	r2, [r3, #0]
	  trackingMotorPul = HAL_GPIO_ReadPin(handPul_GPIO_Port, handPul_Pin);
 8001ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001edc:	4818      	ldr	r0, [pc, #96]	; (8001f40 <main+0x768>)
 8001ede:	f001 fd95 	bl	8003a0c <HAL_GPIO_ReadPin>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <main+0x76c>)
 8001ee8:	601a      	str	r2, [r3, #0]
	  trackingSwitchIn = HAL_GPIO_ReadPin(switchIn_GPIO_Port, switchIn_Pin);
 8001eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eee:	4816      	ldr	r0, [pc, #88]	; (8001f48 <main+0x770>)
 8001ef0:	f001 fd8c 	bl	8003a0c <HAL_GPIO_ReadPin>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	e029      	b.n	8001f4c <main+0x774>
 8001ef8:	7f3321d2 	.word	0x7f3321d2
 8001efc:	4002d97c 	.word	0x4002d97c
 8001f00:	54442d18 	.word	0x54442d18
 8001f04:	3fe921fb 	.word	0x3fe921fb
 8001f08:	200004de 	.word	0x200004de
 8001f0c:	200004fa 	.word	0x200004fa
 8001f10:	200001f8 	.word	0x200001f8
 8001f14:	20000390 	.word	0x20000390
 8001f18:	200001c0 	.word	0x200001c0
 8001f1c:	20000018 	.word	0x20000018
 8001f20:	20000340 	.word	0x20000340
 8001f24:	200003d0 	.word	0x200003d0
 8001f28:	20000490 	.word	0x20000490
 8001f2c:	200001a0 	.word	0x200001a0
 8001f30:	20000250 	.word	0x20000250
 8001f34:	200004e8 	.word	0x200004e8
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	200001b8 	.word	0x200001b8
 8001f40:	40020000 	.word	0x40020000
 8001f44:	20000418 	.word	0x20000418
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <main+0x798>)
 8001f50:	601a      	str	r2, [r3, #0]
	  trackingSwitchOut = HAL_GPIO_ReadPin(switchOut_GPIO_Port, switchOut_Pin);
 8001f52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f56:	4807      	ldr	r0, [pc, #28]	; (8001f74 <main+0x79c>)
 8001f58:	f001 fd58 	bl	8003a0c <HAL_GPIO_ReadPin>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <main+0x7a0>)
 8001f62:	601a      	str	r2, [r3, #0]
	  tracking++;
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <main+0x7a4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <main+0x7a4>)
 8001f6c:	6013      	str	r3, [r2, #0]
	if(joyRigtHor == 0)
 8001f6e:	e452      	b.n	8001816 <main+0x3e>
 8001f70:	200001c8 	.word	0x200001c8
 8001f74:	40020800 	.word	0x40020800
 8001f78:	20000260 	.word	0x20000260
 8001f7c:	200003c4 	.word	0x200003c4

08001f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b094      	sub	sp, #80	; 0x50
 8001f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f86:	f107 0320 	add.w	r3, r7, #32
 8001f8a:	2230      	movs	r2, #48	; 0x30
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 f8e6 	bl	8006160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <SystemClock_Config+0xcc>)
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	4a27      	ldr	r2, [pc, #156]	; (800204c <SystemClock_Config+0xcc>)
 8001fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <SystemClock_Config+0xcc>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <SystemClock_Config+0xd0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a21      	ldr	r2, [pc, #132]	; (8002050 <SystemClock_Config+0xd0>)
 8001fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <SystemClock_Config+0xd0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ff4:	23a8      	movs	r3, #168	; 0xa8
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002000:	f107 0320 	add.w	r3, r7, #32
 8002004:	4618      	mov	r0, r3
 8002006:	f001 fd4d 	bl	8003aa4 <HAL_RCC_OscConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002010:	f000 fb4c 	bl	80026ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002014:	230f      	movs	r3, #15
 8002016:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002018:	2302      	movs	r3, #2
 800201a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002020:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002024:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	2105      	movs	r1, #5
 8002032:	4618      	mov	r0, r3
 8002034:	f001 ffa6 	bl	8003f84 <HAL_RCC_ClockConfig>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800203e:	f000 fb35 	bl	80026ac <Error_Handler>
  }
}
 8002042:	bf00      	nop
 8002044:	3750      	adds	r7, #80	; 0x50
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40007000 	.word	0x40007000

08002054 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b096      	sub	sp, #88	; 0x58
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]
 8002082:	615a      	str	r2, [r3, #20]
 8002084:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	2220      	movs	r2, #32
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f004 f867 	bl	8006160 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002092:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <MX_TIM1_Init+0x150>)
 8002094:	4a44      	ldr	r2, [pc, #272]	; (80021a8 <MX_TIM1_Init+0x154>)
 8002096:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8002098:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <MX_TIM1_Init+0x150>)
 800209a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800209e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <MX_TIM1_Init+0x150>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80020a6:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <MX_TIM1_Init+0x150>)
 80020a8:	22ff      	movs	r2, #255	; 0xff
 80020aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <MX_TIM1_Init+0x150>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020b2:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <MX_TIM1_Init+0x150>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b8:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <MX_TIM1_Init+0x150>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020be:	4839      	ldr	r0, [pc, #228]	; (80021a4 <MX_TIM1_Init+0x150>)
 80020c0:	f002 f952 	bl	8004368 <HAL_TIM_Base_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020ca:	f000 faef 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020d8:	4619      	mov	r1, r3
 80020da:	4832      	ldr	r0, [pc, #200]	; (80021a4 <MX_TIM1_Init+0x150>)
 80020dc:	f002 fbd4 	bl	8004888 <HAL_TIM_ConfigClockSource>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020e6:	f000 fae1 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020ea:	482e      	ldr	r0, [pc, #184]	; (80021a4 <MX_TIM1_Init+0x150>)
 80020ec:	f002 f98b 	bl	8004406 <HAL_TIM_PWM_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020f6:	f000 fad9 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002102:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002106:	4619      	mov	r1, r3
 8002108:	4826      	ldr	r0, [pc, #152]	; (80021a4 <MX_TIM1_Init+0x150>)
 800210a:	f002 ffad 	bl	8005068 <HAL_TIMEx_MasterConfigSynchronization>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002114:	f000 faca 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002118:	2360      	movs	r3, #96	; 0x60
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002120:	2302      	movs	r3, #2
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002124:	2300      	movs	r3, #0
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800212c:	2300      	movs	r3, #0
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002138:	2208      	movs	r2, #8
 800213a:	4619      	mov	r1, r3
 800213c:	4819      	ldr	r0, [pc, #100]	; (80021a4 <MX_TIM1_Init+0x150>)
 800213e:	f002 fadd 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002148:	f000 fab0 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	220c      	movs	r2, #12
 8002152:	4619      	mov	r1, r3
 8002154:	4813      	ldr	r0, [pc, #76]	; (80021a4 <MX_TIM1_Init+0x150>)
 8002156:	f002 fad1 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002160:	f000 faa4 	bl	80026ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	4619      	mov	r1, r3
 8002184:	4807      	ldr	r0, [pc, #28]	; (80021a4 <MX_TIM1_Init+0x150>)
 8002186:	f002 ffeb 	bl	8005160 <HAL_TIMEx_ConfigBreakDeadTime>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002190:	f000 fa8c 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <MX_TIM1_Init+0x150>)
 8002196:	f000 fb0d 	bl	80027b4 <HAL_TIM_MspPostInit>

}
 800219a:	bf00      	nop
 800219c:	3758      	adds	r7, #88	; 0x58
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200003d8 	.word	0x200003d8
 80021a8:	40010000 	.word	0x40010000

080021ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c0:	463b      	mov	r3, r7
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <MX_TIM5_Init+0x94>)
 80021ca:	4a1e      	ldr	r2, [pc, #120]	; (8002244 <MX_TIM5_Init+0x98>)
 80021cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <MX_TIM5_Init+0x94>)
 80021d0:	f240 3247 	movw	r2, #839	; 0x347
 80021d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <MX_TIM5_Init+0x94>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <MX_TIM5_Init+0x94>)
 80021de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <MX_TIM5_Init+0x94>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <MX_TIM5_Init+0x94>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021f0:	4813      	ldr	r0, [pc, #76]	; (8002240 <MX_TIM5_Init+0x94>)
 80021f2:	f002 f8b9 	bl	8004368 <HAL_TIM_Base_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80021fc:	f000 fa56 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	4619      	mov	r1, r3
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <MX_TIM5_Init+0x94>)
 800220e:	f002 fb3b 	bl	8004888 <HAL_TIM_ConfigClockSource>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002218:	f000 fa48 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_TIM5_Init+0x94>)
 800222a:	f002 ff1d 	bl	8005068 <HAL_TIMEx_MasterConfigSynchronization>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002234:	f000 fa3a 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000020c 	.word	0x2000020c
 8002244:	40000c00 	.word	0x40000c00

08002248 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b096      	sub	sp, #88	; 0x58
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	611a      	str	r2, [r3, #16]
 8002276:	615a      	str	r2, [r3, #20]
 8002278:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	2220      	movs	r2, #32
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f003 ff6d 	bl	8006160 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002286:	4b44      	ldr	r3, [pc, #272]	; (8002398 <MX_TIM8_Init+0x150>)
 8002288:	4a44      	ldr	r2, [pc, #272]	; (800239c <MX_TIM8_Init+0x154>)
 800228a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1000;
 800228c:	4b42      	ldr	r3, [pc, #264]	; (8002398 <MX_TIM8_Init+0x150>)
 800228e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002292:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b40      	ldr	r3, [pc, #256]	; (8002398 <MX_TIM8_Init+0x150>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 800229a:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <MX_TIM8_Init+0x150>)
 800229c:	22ff      	movs	r2, #255	; 0xff
 800229e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <MX_TIM8_Init+0x150>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022a6:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <MX_TIM8_Init+0x150>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ac:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <MX_TIM8_Init+0x150>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022b2:	4839      	ldr	r0, [pc, #228]	; (8002398 <MX_TIM8_Init+0x150>)
 80022b4:	f002 f858 	bl	8004368 <HAL_TIM_Base_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80022be:	f000 f9f5 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022cc:	4619      	mov	r1, r3
 80022ce:	4832      	ldr	r0, [pc, #200]	; (8002398 <MX_TIM8_Init+0x150>)
 80022d0:	f002 fada 	bl	8004888 <HAL_TIM_ConfigClockSource>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80022da:	f000 f9e7 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80022de:	482e      	ldr	r0, [pc, #184]	; (8002398 <MX_TIM8_Init+0x150>)
 80022e0:	f002 f891 	bl	8004406 <HAL_TIM_PWM_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80022ea:	f000 f9df 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022fa:	4619      	mov	r1, r3
 80022fc:	4826      	ldr	r0, [pc, #152]	; (8002398 <MX_TIM8_Init+0x150>)
 80022fe:	f002 feb3 	bl	8005068 <HAL_TIMEx_MasterConfigSynchronization>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002308:	f000 f9d0 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230c:	2360      	movs	r3, #96	; 0x60
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002314:	2302      	movs	r3, #2
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002318:	2300      	movs	r3, #0
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232c:	2200      	movs	r2, #0
 800232e:	4619      	mov	r1, r3
 8002330:	4819      	ldr	r0, [pc, #100]	; (8002398 <MX_TIM8_Init+0x150>)
 8002332:	f002 f9e3 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800233c:	f000 f9b6 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002344:	2204      	movs	r2, #4
 8002346:	4619      	mov	r1, r3
 8002348:	4813      	ldr	r0, [pc, #76]	; (8002398 <MX_TIM8_Init+0x150>)
 800234a:	f002 f9d7 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002354:	f000 f9aa 	bl	80026ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4807      	ldr	r0, [pc, #28]	; (8002398 <MX_TIM8_Init+0x150>)
 800237a:	f002 fef1 	bl	8005160 <HAL_TIMEx_ConfigBreakDeadTime>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002384:	f000 f992 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002388:	4803      	ldr	r0, [pc, #12]	; (8002398 <MX_TIM8_Init+0x150>)
 800238a:	f000 fa13 	bl	80027b4 <HAL_TIM_MspPostInit>

}
 800238e:	bf00      	nop
 8002390:	3758      	adds	r7, #88	; 0x58
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000158 	.word	0x20000158
 800239c:	40010400 	.word	0x40010400

080023a0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_UART4_Init+0x4c>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <MX_UART4_Init+0x50>)
 80023a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <MX_UART4_Init+0x4c>)
 80023ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_UART4_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_UART4_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <MX_UART4_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_UART4_Init+0x4c>)
 80023c6:	220c      	movs	r2, #12
 80023c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <MX_UART4_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_UART4_Init+0x4c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80023d6:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_UART4_Init+0x4c>)
 80023d8:	f002 ff28 	bl	800522c <HAL_UART_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80023e2:	f000 f963 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000448 	.word	0x20000448
 80023f0:	40004c00 	.word	0x40004c00

080023f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_USART1_UART_Init+0x4c>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <MX_USART1_UART_Init+0x50>)
 80023fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <MX_USART1_UART_Init+0x4c>)
 8002400:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_USART1_UART_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <MX_USART1_UART_Init+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <MX_USART1_UART_Init+0x4c>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <MX_USART1_UART_Init+0x4c>)
 800241a:	220c      	movs	r2, #12
 800241c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <MX_USART1_UART_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <MX_USART1_UART_Init+0x4c>)
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_USART1_UART_Init+0x4c>)
 800242c:	f002 fefe 	bl	800522c <HAL_UART_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002436:	f000 f939 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000348 	.word	0x20000348
 8002444:	40011000 	.word	0x40011000

08002448 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <MX_USART2_UART_Init+0x50>)
 8002450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 8002454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 800246e:	220c      	movs	r2, #12
 8002470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <MX_USART2_UART_Init+0x4c>)
 8002480:	f002 fed4 	bl	800522c <HAL_UART_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800248a:	f000 f90f 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000049c 	.word	0x2000049c
 8002498:	40004400 	.word	0x40004400

0800249c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <MX_DMA_Init+0x78>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <MX_DMA_Init+0x78>)
 80024ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <MX_DMA_Init+0x78>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <MX_DMA_Init+0x78>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a13      	ldr	r2, [pc, #76]	; (8002514 <MX_DMA_Init+0x78>)
 80024c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <MX_DMA_Init+0x78>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	200d      	movs	r0, #13
 80024e0:	f000 fd33 	bl	8002f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80024e4:	200d      	movs	r0, #13
 80024e6:	f000 fd4c 	bl	8002f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	2011      	movs	r0, #17
 80024f0:	f000 fd2b 	bl	8002f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024f4:	2011      	movs	r0, #17
 80024f6:	f000 fd44 	bl	8002f82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	203a      	movs	r0, #58	; 0x3a
 8002500:	f000 fd23 	bl	8002f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002504:	203a      	movs	r0, #58	; 0x3a
 8002506:	f000 fd3c 	bl	8002f82 <HAL_NVIC_EnableIRQ>

}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	4b59      	ldr	r3, [pc, #356]	; (8002698 <MX_GPIO_Init+0x180>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a58      	ldr	r2, [pc, #352]	; (8002698 <MX_GPIO_Init+0x180>)
 8002538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b56      	ldr	r3, [pc, #344]	; (8002698 <MX_GPIO_Init+0x180>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b52      	ldr	r3, [pc, #328]	; (8002698 <MX_GPIO_Init+0x180>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a51      	ldr	r2, [pc, #324]	; (8002698 <MX_GPIO_Init+0x180>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b4f      	ldr	r3, [pc, #316]	; (8002698 <MX_GPIO_Init+0x180>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <MX_GPIO_Init+0x180>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a4a      	ldr	r2, [pc, #296]	; (8002698 <MX_GPIO_Init+0x180>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b48      	ldr	r3, [pc, #288]	; (8002698 <MX_GPIO_Init+0x180>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	4b44      	ldr	r3, [pc, #272]	; (8002698 <MX_GPIO_Init+0x180>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a43      	ldr	r2, [pc, #268]	; (8002698 <MX_GPIO_Init+0x180>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b41      	ldr	r3, [pc, #260]	; (8002698 <MX_GPIO_Init+0x180>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <MX_GPIO_Init+0x180>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a3c      	ldr	r2, [pc, #240]	; (8002698 <MX_GPIO_Init+0x180>)
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <MX_GPIO_Init+0x180>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, gripper_Pin|door_Pin, GPIO_PIN_RESET);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2130      	movs	r1, #48	; 0x30
 80025be:	4837      	ldr	r0, [pc, #220]	; (800269c <MX_GPIO_Init+0x184>)
 80025c0:	f001 fa3c 	bl	8003a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(handEn_GPIO_Port, handEn_Pin, GPIO_PIN_RESET);
 80025c4:	2200      	movs	r2, #0
 80025c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025ca:	4835      	ldr	r0, [pc, #212]	; (80026a0 <MX_GPIO_Init+0x188>)
 80025cc:	f001 fa36 	bl	8003a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(handPul_GPIO_Port, handPul_Pin, GPIO_PIN_RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025d6:	4833      	ldr	r0, [pc, #204]	; (80026a4 <MX_GPIO_Init+0x18c>)
 80025d8:	f001 fa30 	bl	8003a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, motor1Dir_Pin|motor2Dir_Pin|handDir_Pin|motor3Dir_Pin 
 80025dc:	2200      	movs	r2, #0
 80025de:	211f      	movs	r1, #31
 80025e0:	4831      	ldr	r0, [pc, #196]	; (80026a8 <MX_GPIO_Init+0x190>)
 80025e2:	f001 fa2b 	bl	8003a3c <HAL_GPIO_WritePin>
                          |motor4Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : gripper_Pin door_Pin */
  GPIO_InitStruct.Pin = gripper_Pin|door_Pin;
 80025e6:	2330      	movs	r3, #48	; 0x30
 80025e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4619      	mov	r1, r3
 80025fc:	4827      	ldr	r0, [pc, #156]	; (800269c <MX_GPIO_Init+0x184>)
 80025fe:	f001 f86b 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : handEn_Pin */
  GPIO_InitStruct.Pin = handEn_Pin;
 8002602:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002608:	2301      	movs	r3, #1
 800260a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(handEn_GPIO_Port, &GPIO_InitStruct);
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4619      	mov	r1, r3
 800261a:	4821      	ldr	r0, [pc, #132]	; (80026a0 <MX_GPIO_Init+0x188>)
 800261c:	f001 f85c 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : handPul_Pin */
  GPIO_InitStruct.Pin = handPul_Pin;
 8002620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002626:	2301      	movs	r3, #1
 8002628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(handPul_GPIO_Port, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	481a      	ldr	r0, [pc, #104]	; (80026a4 <MX_GPIO_Init+0x18c>)
 800263a:	f001 f84d 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : switchOut_Pin */
  GPIO_InitStruct.Pin = switchOut_Pin;
 800263e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002648:	2301      	movs	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(switchOut_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4619      	mov	r1, r3
 8002652:	4812      	ldr	r0, [pc, #72]	; (800269c <MX_GPIO_Init+0x184>)
 8002654:	f001 f840 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor1Dir_Pin motor2Dir_Pin handDir_Pin motor3Dir_Pin 
                           motor4Dir_Pin */
  GPIO_InitStruct.Pin = motor1Dir_Pin|motor2Dir_Pin|handDir_Pin|motor3Dir_Pin 
 8002658:	231f      	movs	r3, #31
 800265a:	617b      	str	r3, [r7, #20]
                          |motor4Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265c:	2301      	movs	r3, #1
 800265e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	480e      	ldr	r0, [pc, #56]	; (80026a8 <MX_GPIO_Init+0x190>)
 8002670:	f001 f832 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : switchIn_Pin */
  GPIO_InitStruct.Pin = switchIn_Pin;
 8002674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800267e:	2301      	movs	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(switchIn_GPIO_Port, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_GPIO_Init+0x188>)
 800268a:	f001 f825 	bl	80036d8 <HAL_GPIO_Init>

}
 800268e:	bf00      	nop
 8002690:	3728      	adds	r7, #40	; 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	40020800 	.word	0x40020800
 80026a0:	40020400 	.word	0x40020400
 80026a4:	40020000 	.word	0x40020000
 80026a8:	40020c00 	.word	0x40020c00

080026ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <HAL_MspInit+0x4c>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <HAL_MspInit+0x4c>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_MspInit+0x4c>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_MspInit+0x4c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_MspInit+0x4c>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ec:	6413      	str	r3, [r2, #64]	; 0x40
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_MspInit+0x4c>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a22      	ldr	r2, [pc, #136]	; (80027a4 <HAL_TIM_Base_MspInit+0x98>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10e      	bne.n	800273c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	4a20      	ldr	r2, [pc, #128]	; (80027a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6453      	str	r3, [r2, #68]	; 0x44
 800272e:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800273a:	e02e      	b.n	800279a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <HAL_TIM_Base_MspInit+0xa0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d116      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_TIM_Base_MspInit+0x9c>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a16      	ldr	r2, [pc, #88]	; (80027a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002750:	f043 0308 	orr.w	r3, r3, #8
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	2032      	movs	r0, #50	; 0x32
 8002768:	f000 fbef 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800276c:	2032      	movs	r0, #50	; 0x32
 800276e:	f000 fc08 	bl	8002f82 <HAL_NVIC_EnableIRQ>
}
 8002772:	e012      	b.n	800279a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <HAL_TIM_Base_MspInit+0xa4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10d      	bne.n	800279a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40010000 	.word	0x40010000
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40000c00 	.word	0x40000c00
 80027b0:	40010400 	.word	0x40010400

080027b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a24      	ldr	r2, [pc, #144]	; (8002864 <HAL_TIM_MspPostInit+0xb0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d11f      	bne.n	8002816 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <HAL_TIM_MspPostInit+0xb4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_TIM_MspPostInit+0xb4>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_TIM_MspPostInit+0xb4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002804:	2301      	movs	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	4619      	mov	r1, r3
 800280e:	4817      	ldr	r0, [pc, #92]	; (800286c <HAL_TIM_MspPostInit+0xb8>)
 8002810:	f000 ff62 	bl	80036d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002814:	e022      	b.n	800285c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a15      	ldr	r2, [pc, #84]	; (8002870 <HAL_TIM_MspPostInit+0xbc>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d11d      	bne.n	800285c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	4b10      	ldr	r3, [pc, #64]	; (8002868 <HAL_TIM_MspPostInit+0xb4>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <HAL_TIM_MspPostInit+0xb4>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6313      	str	r3, [r2, #48]	; 0x30
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <HAL_TIM_MspPostInit+0xb4>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800283c:	23c0      	movs	r3, #192	; 0xc0
 800283e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800284c:	2303      	movs	r3, #3
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	4807      	ldr	r0, [pc, #28]	; (8002874 <HAL_TIM_MspPostInit+0xc0>)
 8002858:	f000 ff3e 	bl	80036d8 <HAL_GPIO_Init>
}
 800285c:	bf00      	nop
 800285e:	3728      	adds	r7, #40	; 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40010000 	.word	0x40010000
 8002868:	40023800 	.word	0x40023800
 800286c:	40020000 	.word	0x40020000
 8002870:	40010400 	.word	0x40010400
 8002874:	40020800 	.word	0x40020800

08002878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08e      	sub	sp, #56	; 0x38
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a99      	ldr	r2, [pc, #612]	; (8002afc <HAL_UART_MspInit+0x284>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d164      	bne.n	8002964 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	4b98      	ldr	r3, [pc, #608]	; (8002b00 <HAL_UART_MspInit+0x288>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a97      	ldr	r2, [pc, #604]	; (8002b00 <HAL_UART_MspInit+0x288>)
 80028a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b95      	ldr	r3, [pc, #596]	; (8002b00 <HAL_UART_MspInit+0x288>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b2:	623b      	str	r3, [r7, #32]
 80028b4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	4b91      	ldr	r3, [pc, #580]	; (8002b00 <HAL_UART_MspInit+0x288>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a90      	ldr	r2, [pc, #576]	; (8002b00 <HAL_UART_MspInit+0x288>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b8e      	ldr	r3, [pc, #568]	; (8002b00 <HAL_UART_MspInit+0x288>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028dc:	2301      	movs	r3, #1
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	2303      	movs	r3, #3
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028e4:	2308      	movs	r3, #8
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ec:	4619      	mov	r1, r3
 80028ee:	4885      	ldr	r0, [pc, #532]	; (8002b04 <HAL_UART_MspInit+0x28c>)
 80028f0:	f000 fef2 	bl	80036d8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80028f4:	4b84      	ldr	r3, [pc, #528]	; (8002b08 <HAL_UART_MspInit+0x290>)
 80028f6:	4a85      	ldr	r2, [pc, #532]	; (8002b0c <HAL_UART_MspInit+0x294>)
 80028f8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80028fa:	4b83      	ldr	r3, [pc, #524]	; (8002b08 <HAL_UART_MspInit+0x290>)
 80028fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002900:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002902:	4b81      	ldr	r3, [pc, #516]	; (8002b08 <HAL_UART_MspInit+0x290>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002908:	4b7f      	ldr	r3, [pc, #508]	; (8002b08 <HAL_UART_MspInit+0x290>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800290e:	4b7e      	ldr	r3, [pc, #504]	; (8002b08 <HAL_UART_MspInit+0x290>)
 8002910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002914:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002916:	4b7c      	ldr	r3, [pc, #496]	; (8002b08 <HAL_UART_MspInit+0x290>)
 8002918:	2200      	movs	r2, #0
 800291a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800291c:	4b7a      	ldr	r3, [pc, #488]	; (8002b08 <HAL_UART_MspInit+0x290>)
 800291e:	2200      	movs	r2, #0
 8002920:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002922:	4b79      	ldr	r3, [pc, #484]	; (8002b08 <HAL_UART_MspInit+0x290>)
 8002924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002928:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800292a:	4b77      	ldr	r3, [pc, #476]	; (8002b08 <HAL_UART_MspInit+0x290>)
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002930:	4b75      	ldr	r3, [pc, #468]	; (8002b08 <HAL_UART_MspInit+0x290>)
 8002932:	2200      	movs	r2, #0
 8002934:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002936:	4874      	ldr	r0, [pc, #464]	; (8002b08 <HAL_UART_MspInit+0x290>)
 8002938:	f000 fb3e 	bl	8002fb8 <HAL_DMA_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002942:	f7ff feb3 	bl	80026ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a6f      	ldr	r2, [pc, #444]	; (8002b08 <HAL_UART_MspInit+0x290>)
 800294a:	635a      	str	r2, [r3, #52]	; 0x34
 800294c:	4a6e      	ldr	r2, [pc, #440]	; (8002b08 <HAL_UART_MspInit+0x290>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	2034      	movs	r0, #52	; 0x34
 8002958:	f000 faf7 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800295c:	2034      	movs	r0, #52	; 0x34
 800295e:	f000 fb10 	bl	8002f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002962:	e0c7      	b.n	8002af4 <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==USART1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <HAL_UART_MspInit+0x298>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d15b      	bne.n	8002a26 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART1_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	4b63      	ldr	r3, [pc, #396]	; (8002b00 <HAL_UART_MspInit+0x288>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4a62      	ldr	r2, [pc, #392]	; (8002b00 <HAL_UART_MspInit+0x288>)
 8002978:	f043 0310 	orr.w	r3, r3, #16
 800297c:	6453      	str	r3, [r2, #68]	; 0x44
 800297e:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <HAL_UART_MspInit+0x288>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <HAL_UART_MspInit+0x288>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a5b      	ldr	r2, [pc, #364]	; (8002b00 <HAL_UART_MspInit+0x288>)
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <HAL_UART_MspInit+0x288>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029a6:	23c0      	movs	r3, #192	; 0xc0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029b6:	2307      	movs	r3, #7
 80029b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029be:	4619      	mov	r1, r3
 80029c0:	4854      	ldr	r0, [pc, #336]	; (8002b14 <HAL_UART_MspInit+0x29c>)
 80029c2:	f000 fe89 	bl	80036d8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80029c6:	4b54      	ldr	r3, [pc, #336]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 80029c8:	4a54      	ldr	r2, [pc, #336]	; (8002b1c <HAL_UART_MspInit+0x2a4>)
 80029ca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80029cc:	4b52      	ldr	r3, [pc, #328]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 80029ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d4:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029da:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e0:	4b4d      	ldr	r3, [pc, #308]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 80029e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e8:	4b4b      	ldr	r3, [pc, #300]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ee:	4b4a      	ldr	r3, [pc, #296]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80029f4:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 80029f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029fc:	4b46      	ldr	r3, [pc, #280]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a02:	4b45      	ldr	r3, [pc, #276]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a08:	4843      	ldr	r0, [pc, #268]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 8002a0a:	f000 fad5 	bl	8002fb8 <HAL_DMA_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002a14:	f7ff fe4a 	bl	80026ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a3f      	ldr	r2, [pc, #252]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a1e:	4a3e      	ldr	r2, [pc, #248]	; (8002b18 <HAL_UART_MspInit+0x2a0>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a24:	e066      	b.n	8002af4 <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==USART2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3d      	ldr	r2, [pc, #244]	; (8002b20 <HAL_UART_MspInit+0x2a8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d161      	bne.n	8002af4 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_UART_MspInit+0x288>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	4a31      	ldr	r2, [pc, #196]	; (8002b00 <HAL_UART_MspInit+0x288>)
 8002a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a40:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <HAL_UART_MspInit+0x288>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_UART_MspInit+0x288>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	4a2a      	ldr	r2, [pc, #168]	; (8002b00 <HAL_UART_MspInit+0x288>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <HAL_UART_MspInit+0x288>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a68:	230c      	movs	r3, #12
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a78:	2307      	movs	r3, #7
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a80:	4619      	mov	r1, r3
 8002a82:	4828      	ldr	r0, [pc, #160]	; (8002b24 <HAL_UART_MspInit+0x2ac>)
 8002a84:	f000 fe28 	bl	80036d8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002a88:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002a8a:	4a28      	ldr	r2, [pc, #160]	; (8002b2c <HAL_UART_MspInit+0x2b4>)
 8002a8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002a8e:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002a90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a94:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a96:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002a98:	2240      	movs	r2, #64	; 0x40
 8002a9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9c:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa2:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ac8:	4817      	ldr	r0, [pc, #92]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002aca:	f000 fa75 	bl	8002fb8 <HAL_DMA_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8002ad4:	f7ff fdea 	bl	80026ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_UART_MspInit+0x2b0>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2026      	movs	r0, #38	; 0x26
 8002aea:	f000 fa2e 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002aee:	2026      	movs	r0, #38	; 0x26
 8002af0:	f000 fa47 	bl	8002f82 <HAL_NVIC_EnableIRQ>
}
 8002af4:	bf00      	nop
 8002af6:	3738      	adds	r7, #56	; 0x38
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40004c00 	.word	0x40004c00
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40020800 	.word	0x40020800
 8002b08:	200000f0 	.word	0x200000f0
 8002b0c:	40026040 	.word	0x40026040
 8002b10:	40011000 	.word	0x40011000
 8002b14:	40020400 	.word	0x40020400
 8002b18:	2000026c 	.word	0x2000026c
 8002b1c:	40026440 	.word	0x40026440
 8002b20:	40004400 	.word	0x40004400
 8002b24:	40020000 	.word	0x40020000
 8002b28:	200002d8 	.word	0x200002d8
 8002b2c:	400260a0 	.word	0x400260a0

08002b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b42:	e7fe      	b.n	8002b42 <HardFault_Handler+0x4>

08002b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <MemManage_Handler+0x4>

08002b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b4e:	e7fe      	b.n	8002b4e <BusFault_Handler+0x4>

08002b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <UsageFault_Handler+0x4>

08002b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(compassGetDataPeriod > 5)
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <SysTick_Handler+0x2c>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d905      	bls.n	8002b98 <SysTick_Handler+0x18>
	  {
		  compassGetDataPeriod = 0;
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <SysTick_Handler+0x2c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
		  compassRequest();
 8002b92:	f7fe fbf3 	bl	800137c <compassRequest>
 8002b96:	e005      	b.n	8002ba4 <SysTick_Handler+0x24>
	  }
	  else
	  {
		  compassGetDataPeriod++;
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <SysTick_Handler+0x2c>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	4b02      	ldr	r3, [pc, #8]	; (8002bac <SysTick_Handler+0x2c>)
 8002ba2:	701a      	strb	r2, [r3, #0]
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba4:	f000 f8d6 	bl	8002d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000338 	.word	0x20000338

08002bb0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	compassDecode();
 8002bb4:	f7fe fbf2 	bl	800139c <compassDecode>
//	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <DMA1_Stream2_IRQHandler+0x14>)
 8002bba:	f000 fb25 	bl	8003208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200000f0 	.word	0x200000f0

08002bc8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <DMA1_Stream6_IRQHandler+0x10>)
 8002bce:	f000 fb1b 	bl	8003208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200002d8 	.word	0x200002d8

08002bdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <USART2_IRQHandler+0x10>)
 8002be2:	f002 fc35 	bl	8005450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	2000049c 	.word	0x2000049c

08002bf0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <TIM5_IRQHandler+0x10>)
 8002bf6:	f001 fc79 	bl	80044ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000020c 	.word	0x2000020c

08002c04 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <UART4_IRQHandler+0x10>)
 8002c0a:	f002 fc21 	bl	8005450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000448 	.word	0x20000448

08002c18 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	PS2DMA_ProcessingData();
 8002c1c:	f7fe f9d6 	bl	8000fcc <PS2DMA_ProcessingData>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <DMA2_Stream2_IRQHandler+0x14>)
 8002c22:	f000 faf1 	bl	8003208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000026c 	.word	0x2000026c

08002c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <SystemInit+0x28>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <SystemInit+0x28>)
 8002c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <SystemInit+0x28>)
 8002c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c4a:	609a      	str	r2, [r3, #8]
#endif
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c62:	e003      	b.n	8002c6c <LoopCopyDataInit>

08002c64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c6a:	3104      	adds	r1, #4

08002c6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c6c:	480b      	ldr	r0, [pc, #44]	; (8002c9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c74:	d3f6      	bcc.n	8002c64 <CopyDataInit>
  ldr  r2, =_sbss
 8002c76:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c78:	e002      	b.n	8002c80 <LoopFillZerobss>

08002c7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c7c:	f842 3b04 	str.w	r3, [r2], #4

08002c80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c84:	d3f9      	bcc.n	8002c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c86:	f7ff ffd3 	bl	8002c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c8a:	f003 fa45 	bl	8006118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c8e:	f7fe fda3 	bl	80017d8 <main>
  bx  lr    
 8002c92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c98:	08007b20 	.word	0x08007b20
  ldr  r0, =_sdata
 8002c9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ca0:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8002ca4:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8002ca8:	20000508 	.word	0x20000508

08002cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cac:	e7fe      	b.n	8002cac <ADC_IRQHandler>
	...

08002cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_Init+0x40>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0d      	ldr	r2, [pc, #52]	; (8002cf0 <HAL_Init+0x40>)
 8002cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_Init+0x40>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <HAL_Init+0x40>)
 8002cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_Init+0x40>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_Init+0x40>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f000 f92b 	bl	8002f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f000 f808 	bl	8002cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce4:	f7ff fcea 	bl	80026bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023c00 	.word	0x40023c00

08002cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_InitTick+0x54>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_InitTick+0x58>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f943 	bl	8002f9e <HAL_SYSTICK_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00e      	b.n	8002d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	d80a      	bhi.n	8002d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f000 f90b 	bl	8002f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d34:	4a06      	ldr	r2, [pc, #24]	; (8002d50 <HAL_InitTick+0x5c>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e000      	b.n	8002d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000040 	.word	0x20000040
 8002d4c:	20000048 	.word	0x20000048
 8002d50:	20000044 	.word	0x20000044

08002d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_IncTick+0x20>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_IncTick+0x24>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_IncTick+0x24>)
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000048 	.word	0x20000048
 8002d78:	20000504 	.word	0x20000504

08002d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_GetTick+0x14>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000504 	.word	0x20000504

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4907      	ldr	r1, [pc, #28]	; (8002e30 <__NVIC_EnableIRQ+0x38>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100

08002e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	db0a      	blt.n	8002e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	490c      	ldr	r1, [pc, #48]	; (8002e80 <__NVIC_SetPriority+0x4c>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	440b      	add	r3, r1
 8002e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e5c:	e00a      	b.n	8002e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4908      	ldr	r1, [pc, #32]	; (8002e84 <__NVIC_SetPriority+0x50>)
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	3b04      	subs	r3, #4
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	440b      	add	r3, r1
 8002e72:	761a      	strb	r2, [r3, #24]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000e100 	.word	0xe000e100
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	bf28      	it	cs
 8002ea6:	2304      	movcs	r3, #4
 8002ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3304      	adds	r3, #4
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d902      	bls.n	8002eb8 <NVIC_EncodePriority+0x30>
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3b03      	subs	r3, #3
 8002eb6:	e000      	b.n	8002eba <NVIC_EncodePriority+0x32>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	401a      	ands	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43d9      	mvns	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee0:	4313      	orrs	r3, r2
         );
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	; 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f00:	d301      	bcc.n	8002f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00f      	b.n	8002f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <SysTick_Config+0x40>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0e:	210f      	movs	r1, #15
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295
 8002f14:	f7ff ff8e 	bl	8002e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <SysTick_Config+0x40>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1e:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <SysTick_Config+0x40>)
 8002f20:	2207      	movs	r2, #7
 8002f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	e000e010 	.word	0xe000e010

08002f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ff29 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5c:	f7ff ff3e 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f7ff ff8e 	bl	8002e88 <NVIC_EncodePriority>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff5d 	bl	8002e34 <__NVIC_SetPriority>
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff31 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffa2 	bl	8002ef0 <SysTick_Config>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff feda 	bl	8002d7c <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e099      	b.n	8003108 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff4:	e00f      	b.n	8003016 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ff6:	f7ff fec1 	bl	8002d7c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b05      	cmp	r3, #5
 8003002:	d908      	bls.n	8003016 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e078      	b.n	8003108 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e8      	bne.n	8002ff6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4b38      	ldr	r3, [pc, #224]	; (8003110 <HAL_DMA_Init+0x158>)
 8003030:	4013      	ands	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003042:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	2b04      	cmp	r3, #4
 800306e:	d107      	bne.n	8003080 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	4313      	orrs	r3, r2
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f023 0307 	bic.w	r3, r3, #7
 8003096:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d117      	bne.n	80030da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00e      	beq.n	80030da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fa91 	bl	80035e4 <DMA_CheckFifoParam>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2240      	movs	r2, #64	; 0x40
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030d6:	2301      	movs	r3, #1
 80030d8:	e016      	b.n	8003108 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fa48 	bl	8003578 <DMA_CalcBaseAndBitshift>
 80030e8:	4603      	mov	r3, r0
 80030ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	223f      	movs	r2, #63	; 0x3f
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	f010803f 	.word	0xf010803f

08003114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_DMA_Start_IT+0x26>
 8003136:	2302      	movs	r3, #2
 8003138:	e040      	b.n	80031bc <HAL_DMA_Start_IT+0xa8>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d12f      	bne.n	80031ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2202      	movs	r2, #2
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f9da 	bl	800351c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	223f      	movs	r2, #63	; 0x3f
 800316e:	409a      	lsls	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0216 	orr.w	r2, r2, #22
 8003182:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0208 	orr.w	r2, r2, #8
 800319a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e005      	b.n	80031ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
 80031b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d004      	beq.n	80031e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e00c      	b.n	80031fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2205      	movs	r2, #5
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003214:	4b92      	ldr	r3, [pc, #584]	; (8003460 <HAL_DMA_IRQHandler+0x258>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a92      	ldr	r2, [pc, #584]	; (8003464 <HAL_DMA_IRQHandler+0x25c>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	0a9b      	lsrs	r3, r3, #10
 8003220:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	2208      	movs	r2, #8
 8003234:	409a      	lsls	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01a      	beq.n	8003274 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d013      	beq.n	8003274 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0204 	bic.w	r2, r2, #4
 800325a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	2208      	movs	r2, #8
 8003262:	409a      	lsls	r2, r3
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	2201      	movs	r2, #1
 800327a:	409a      	lsls	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d012      	beq.n	80032aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	2201      	movs	r2, #1
 8003298:	409a      	lsls	r2, r3
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f043 0202 	orr.w	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	2204      	movs	r2, #4
 80032b0:	409a      	lsls	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	2204      	movs	r2, #4
 80032ce:	409a      	lsls	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f043 0204 	orr.w	r2, r3, #4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	2210      	movs	r2, #16
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d043      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d03c      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	2210      	movs	r2, #16
 8003304:	409a      	lsls	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d018      	beq.n	800334a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d108      	bne.n	8003338 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d024      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
 8003336:	e01f      	b.n	8003378 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01b      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
 8003348:	e016      	b.n	8003378 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d107      	bne.n	8003368 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0208 	bic.w	r2, r2, #8
 8003366:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	2220      	movs	r2, #32
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 808e 	beq.w	80034a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8086 	beq.w	80034a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	2220      	movs	r2, #32
 80033a0:	409a      	lsls	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	d136      	bne.n	8003420 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0216 	bic.w	r2, r2, #22
 80033c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <HAL_DMA_IRQHandler+0x1da>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0208 	bic.w	r2, r2, #8
 80033f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	223f      	movs	r2, #63	; 0x3f
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003412:	2b00      	cmp	r3, #0
 8003414:	d07d      	beq.n	8003512 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
        }
        return;
 800341e:	e078      	b.n	8003512 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01c      	beq.n	8003468 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d108      	bne.n	800344e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	2b00      	cmp	r3, #0
 8003442:	d030      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
 800344c:	e02b      	b.n	80034a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d027      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	e022      	b.n	80034a6 <HAL_DMA_IRQHandler+0x29e>
 8003460:	20000040 	.word	0x20000040
 8003464:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10f      	bne.n	8003496 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0210 	bic.w	r2, r2, #16
 8003484:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d032      	beq.n	8003514 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d022      	beq.n	8003500 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2205      	movs	r2, #5
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3301      	adds	r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d307      	bcc.n	80034ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f2      	bne.n	80034d2 <HAL_DMA_IRQHandler+0x2ca>
 80034ec:	e000      	b.n	80034f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
 8003510:	e000      	b.n	8003514 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003512:	bf00      	nop
    }
  }
}
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop

0800351c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003538:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	d108      	bne.n	800355c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800355a:	e007      	b.n	800356c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	3b10      	subs	r3, #16
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <DMA_CalcBaseAndBitshift+0x64>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003592:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d909      	bls.n	80035ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	1d1a      	adds	r2, r3, #4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	659a      	str	r2, [r3, #88]	; 0x58
 80035b8:	e007      	b.n	80035ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035c2:	f023 0303 	bic.w	r3, r3, #3
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	aaaaaaab 	.word	0xaaaaaaab
 80035e0:	080078e8 	.word	0x080078e8

080035e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11f      	bne.n	800363e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d855      	bhi.n	80036b0 <DMA_CheckFifoParam+0xcc>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <DMA_CheckFifoParam+0x28>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362f 	.word	0x0800362f
 8003614:	0800361d 	.word	0x0800361d
 8003618:	080036b1 	.word	0x080036b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d045      	beq.n	80036b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e042      	b.n	80036b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003636:	d13f      	bne.n	80036b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363c:	e03c      	b.n	80036b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003646:	d121      	bne.n	800368c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d836      	bhi.n	80036bc <DMA_CheckFifoParam+0xd8>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <DMA_CheckFifoParam+0x70>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003665 	.word	0x08003665
 8003658:	0800366b 	.word	0x0800366b
 800365c:	08003665 	.word	0x08003665
 8003660:	0800367d 	.word	0x0800367d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	e02f      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d024      	beq.n	80036c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367a:	e021      	b.n	80036c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003684:	d11e      	bne.n	80036c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800368a:	e01b      	b.n	80036c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d902      	bls.n	8003698 <DMA_CheckFifoParam+0xb4>
 8003692:	2b03      	cmp	r3, #3
 8003694:	d003      	beq.n	800369e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003696:	e018      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      break;
 800369c:	e015      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00e      	beq.n	80036c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
      break;
 80036ae:	e00b      	b.n	80036c8 <DMA_CheckFifoParam+0xe4>
      break;
 80036b0:	bf00      	nop
 80036b2:	e00a      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036b4:	bf00      	nop
 80036b6:	e008      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036b8:	bf00      	nop
 80036ba:	e006      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036bc:	bf00      	nop
 80036be:	e004      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036c0:	bf00      	nop
 80036c2:	e002      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;   
 80036c4:	bf00      	nop
 80036c6:	e000      	b.n	80036ca <DMA_CheckFifoParam+0xe6>
      break;
 80036c8:	bf00      	nop
    }
  } 
  
  return status; 
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	e16b      	b.n	80039cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	f040 815a 	bne.w	80039c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d00b      	beq.n	8003732 <HAL_GPIO_Init+0x5a>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d007      	beq.n	8003732 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003726:	2b11      	cmp	r3, #17
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b12      	cmp	r3, #18
 8003730:	d130      	bne.n	8003794 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003768:	2201      	movs	r2, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 0201 	and.w	r2, r3, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0xfc>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b12      	cmp	r3, #18
 80037d2:	d123      	bne.n	800381c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	08da      	lsrs	r2, r3, #3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3208      	adds	r2, #8
 80037dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	220f      	movs	r2, #15
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	08da      	lsrs	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3208      	adds	r2, #8
 8003816:	69b9      	ldr	r1, [r7, #24]
 8003818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80b4 	beq.w	80039c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	4b5f      	ldr	r3, [pc, #380]	; (80039e0 <HAL_GPIO_Init+0x308>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	4a5e      	ldr	r2, [pc, #376]	; (80039e0 <HAL_GPIO_Init+0x308>)
 8003868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800386c:	6453      	str	r3, [r2, #68]	; 0x44
 800386e:	4b5c      	ldr	r3, [pc, #368]	; (80039e0 <HAL_GPIO_Init+0x308>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387a:	4a5a      	ldr	r2, [pc, #360]	; (80039e4 <HAL_GPIO_Init+0x30c>)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	3302      	adds	r3, #2
 8003882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	220f      	movs	r2, #15
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a51      	ldr	r2, [pc, #324]	; (80039e8 <HAL_GPIO_Init+0x310>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d02b      	beq.n	80038fe <HAL_GPIO_Init+0x226>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a50      	ldr	r2, [pc, #320]	; (80039ec <HAL_GPIO_Init+0x314>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d025      	beq.n	80038fa <HAL_GPIO_Init+0x222>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4f      	ldr	r2, [pc, #316]	; (80039f0 <HAL_GPIO_Init+0x318>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <HAL_GPIO_Init+0x21e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4e      	ldr	r2, [pc, #312]	; (80039f4 <HAL_GPIO_Init+0x31c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d019      	beq.n	80038f2 <HAL_GPIO_Init+0x21a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4d      	ldr	r2, [pc, #308]	; (80039f8 <HAL_GPIO_Init+0x320>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_GPIO_Init+0x216>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4c      	ldr	r2, [pc, #304]	; (80039fc <HAL_GPIO_Init+0x324>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00d      	beq.n	80038ea <HAL_GPIO_Init+0x212>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4b      	ldr	r2, [pc, #300]	; (8003a00 <HAL_GPIO_Init+0x328>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <HAL_GPIO_Init+0x20e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a4a      	ldr	r2, [pc, #296]	; (8003a04 <HAL_GPIO_Init+0x32c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_GPIO_Init+0x20a>
 80038de:	2307      	movs	r3, #7
 80038e0:	e00e      	b.n	8003900 <HAL_GPIO_Init+0x228>
 80038e2:	2308      	movs	r3, #8
 80038e4:	e00c      	b.n	8003900 <HAL_GPIO_Init+0x228>
 80038e6:	2306      	movs	r3, #6
 80038e8:	e00a      	b.n	8003900 <HAL_GPIO_Init+0x228>
 80038ea:	2305      	movs	r3, #5
 80038ec:	e008      	b.n	8003900 <HAL_GPIO_Init+0x228>
 80038ee:	2304      	movs	r3, #4
 80038f0:	e006      	b.n	8003900 <HAL_GPIO_Init+0x228>
 80038f2:	2303      	movs	r3, #3
 80038f4:	e004      	b.n	8003900 <HAL_GPIO_Init+0x228>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e002      	b.n	8003900 <HAL_GPIO_Init+0x228>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_GPIO_Init+0x228>
 80038fe:	2300      	movs	r3, #0
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	f002 0203 	and.w	r2, r2, #3
 8003906:	0092      	lsls	r2, r2, #2
 8003908:	4093      	lsls	r3, r2
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003910:	4934      	ldr	r1, [pc, #208]	; (80039e4 <HAL_GPIO_Init+0x30c>)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	3302      	adds	r3, #2
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800391e:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <HAL_GPIO_Init+0x330>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003942:	4a31      	ldr	r2, [pc, #196]	; (8003a08 <HAL_GPIO_Init+0x330>)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003948:	4b2f      	ldr	r3, [pc, #188]	; (8003a08 <HAL_GPIO_Init+0x330>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800396c:	4a26      	ldr	r2, [pc, #152]	; (8003a08 <HAL_GPIO_Init+0x330>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003972:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_GPIO_Init+0x330>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003996:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <HAL_GPIO_Init+0x330>)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800399c:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_GPIO_Init+0x330>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039c0:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <HAL_GPIO_Init+0x330>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3301      	adds	r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b0f      	cmp	r3, #15
 80039d0:	f67f ae90 	bls.w	80036f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d4:	bf00      	nop
 80039d6:	3724      	adds	r7, #36	; 0x24
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40020000 	.word	0x40020000
 80039ec:	40020400 	.word	0x40020400
 80039f0:	40020800 	.word	0x40020800
 80039f4:	40020c00 	.word	0x40020c00
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40021400 	.word	0x40021400
 8003a00:	40021800 	.word	0x40021800
 8003a04:	40021c00 	.word	0x40021c00
 8003a08:	40013c00 	.word	0x40013c00

08003a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	887b      	ldrh	r3, [r7, #2]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
 8003a28:	e001      	b.n	8003a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a4c:	787b      	ldrb	r3, [r7, #1]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a52:	887a      	ldrh	r2, [r7, #2]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a58:	e003      	b.n	8003a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a5a:	887b      	ldrh	r3, [r7, #2]
 8003a5c:	041a      	lsls	r2, r3, #16
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	619a      	str	r2, [r3, #24]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	401a      	ands	r2, r3
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d104      	bne.n	8003a92 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a88:	887b      	ldrh	r3, [r7, #2]
 8003a8a:	041a      	lsls	r2, r3, #16
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003a90:	e002      	b.n	8003a98 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003a92:	887a      	ldrh	r2, [r7, #2]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	619a      	str	r2, [r3, #24]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e25b      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d075      	beq.n	8003bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ac2:	4ba3      	ldr	r3, [pc, #652]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d00c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ace:	4ba0      	ldr	r3, [pc, #640]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d112      	bne.n	8003b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ada:	4b9d      	ldr	r3, [pc, #628]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	4b99      	ldr	r3, [pc, #612]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d05b      	beq.n	8003bac <HAL_RCC_OscConfig+0x108>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d157      	bne.n	8003bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e236      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d106      	bne.n	8003b18 <HAL_RCC_OscConfig+0x74>
 8003b0a:	4b91      	ldr	r3, [pc, #580]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a90      	ldr	r2, [pc, #576]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xb0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x98>
 8003b22:	4b8b      	ldr	r3, [pc, #556]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a8a      	ldr	r2, [pc, #552]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b88      	ldr	r3, [pc, #544]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a87      	ldr	r2, [pc, #540]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xb0>
 8003b3c:	4b84      	ldr	r3, [pc, #528]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a83      	ldr	r2, [pc, #524]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b81      	ldr	r3, [pc, #516]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a80      	ldr	r2, [pc, #512]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7ff f90e 	bl	8002d7c <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b64:	f7ff f90a 	bl	8002d7c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e1fb      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b76      	ldr	r3, [pc, #472]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xc0>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7ff f8fa 	bl	8002d7c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7ff f8f6 	bl	8002d7c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1e7      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	4b6c      	ldr	r3, [pc, #432]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0xe8>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d063      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bba:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc6:	4b62      	ldr	r3, [pc, #392]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d11c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd2:	4b5f      	ldr	r3, [pc, #380]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d116      	bne.n	8003c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	4b5c      	ldr	r3, [pc, #368]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x152>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e1bb      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4952      	ldr	r1, [pc, #328]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	e03a      	b.n	8003c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c14:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <HAL_RCC_OscConfig+0x2b0>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7ff f8af 	bl	8002d7c <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c22:	f7ff f8ab 	bl	8002d7c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e19c      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4b43      	ldr	r3, [pc, #268]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4940      	ldr	r1, [pc, #256]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]
 8003c54:	e015      	b.n	8003c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c56:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <HAL_RCC_OscConfig+0x2b0>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7ff f88e 	bl	8002d7c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c64:	f7ff f88a 	bl	8002d7c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e17b      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d030      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c96:	4b30      	ldr	r3, [pc, #192]	; (8003d58 <HAL_RCC_OscConfig+0x2b4>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7ff f86e 	bl	8002d7c <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7ff f86a 	bl	8002d7c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e15b      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb6:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x200>
 8003cc2:	e015      	b.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_RCC_OscConfig+0x2b4>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cca:	f7ff f857 	bl	8002d7c <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7ff f853 	bl	8002d7c <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e144      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80a0 	beq.w	8003e3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d02:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a0e      	ldr	r2, [pc, #56]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_OscConfig+0x2b8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d121      	bne.n	8003d7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_RCC_OscConfig+0x2b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a07      	ldr	r2, [pc, #28]	; (8003d5c <HAL_RCC_OscConfig+0x2b8>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d46:	f7ff f819 	bl	8002d7c <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	e011      	b.n	8003d72 <HAL_RCC_OscConfig+0x2ce>
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	42470000 	.word	0x42470000
 8003d58:	42470e80 	.word	0x42470e80
 8003d5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d60:	f7ff f80c 	bl	8002d7c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0fd      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d72:	4b81      	ldr	r3, [pc, #516]	; (8003f78 <HAL_RCC_OscConfig+0x4d4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d106      	bne.n	8003d94 <HAL_RCC_OscConfig+0x2f0>
 8003d86:	4b7d      	ldr	r3, [pc, #500]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a7c      	ldr	r2, [pc, #496]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70
 8003d92:	e01c      	b.n	8003dce <HAL_RCC_OscConfig+0x32a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d10c      	bne.n	8003db6 <HAL_RCC_OscConfig+0x312>
 8003d9c:	4b77      	ldr	r3, [pc, #476]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	4a76      	ldr	r2, [pc, #472]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	6713      	str	r3, [r2, #112]	; 0x70
 8003da8:	4b74      	ldr	r3, [pc, #464]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	4a73      	ldr	r2, [pc, #460]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6713      	str	r3, [r2, #112]	; 0x70
 8003db4:	e00b      	b.n	8003dce <HAL_RCC_OscConfig+0x32a>
 8003db6:	4b71      	ldr	r3, [pc, #452]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a70      	ldr	r2, [pc, #448]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	4b6e      	ldr	r3, [pc, #440]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a6d      	ldr	r2, [pc, #436]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003dc8:	f023 0304 	bic.w	r3, r3, #4
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d015      	beq.n	8003e02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fe ffd1 	bl	8002d7c <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fe ffcd 	bl	8002d7c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0bc      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df4:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ee      	beq.n	8003dde <HAL_RCC_OscConfig+0x33a>
 8003e00:	e014      	b.n	8003e2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fe ffbb 	bl	8002d7c <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e0a:	f7fe ffb7 	bl	8002d7c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0a6      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e20:	4b56      	ldr	r3, [pc, #344]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ee      	bne.n	8003e0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d105      	bne.n	8003e3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4b52      	ldr	r3, [pc, #328]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	4a51      	ldr	r2, [pc, #324]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8092 	beq.w	8003f6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e48:	4b4c      	ldr	r3, [pc, #304]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d05c      	beq.n	8003f0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d141      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5c:	4b48      	ldr	r3, [pc, #288]	; (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e62:	f7fe ff8b 	bl	8002d7c <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fe ff87 	bl	8002d7c <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e078      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7c:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f0      	bne.n	8003e6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	019b      	lsls	r3, r3, #6
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	4933      	ldr	r1, [pc, #204]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb2:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fe ff60 	bl	8002d7c <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fe ff5c 	bl	8002d7c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e04d      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed2:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x41c>
 8003ede:	e045      	b.n	8003f6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee0:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fe ff49 	bl	8002d7c <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eee:	f7fe ff45 	bl	8002d7c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e036      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f00:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCC_OscConfig+0x44a>
 8003f0c:	e02e      	b.n	8003f6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e029      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <HAL_RCC_OscConfig+0x4d8>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d11c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d115      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f42:	4013      	ands	r3, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10d      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d106      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	42470060 	.word	0x42470060

08003f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0cc      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b68      	ldr	r3, [pc, #416]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d90c      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b65      	ldr	r3, [pc, #404]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b63      	ldr	r3, [pc, #396]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0b8      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd8:	4b59      	ldr	r3, [pc, #356]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a58      	ldr	r2, [pc, #352]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff0:	4b53      	ldr	r3, [pc, #332]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4a52      	ldr	r2, [pc, #328]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffc:	4b50      	ldr	r3, [pc, #320]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	494d      	ldr	r1, [pc, #308]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d044      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b47      	ldr	r3, [pc, #284]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d119      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e07f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d003      	beq.n	8004042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403e:	2b03      	cmp	r3, #3
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	4b3f      	ldr	r3, [pc, #252]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e06f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004052:	4b3b      	ldr	r3, [pc, #236]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e067      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004062:	4b37      	ldr	r3, [pc, #220]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4934      	ldr	r1, [pc, #208]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	4313      	orrs	r3, r2
 8004072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004074:	f7fe fe82 	bl	8002d7c <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	e00a      	b.n	8004092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407c:	f7fe fe7e 	bl	8002d7c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e04f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 020c 	and.w	r2, r3, #12
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d1eb      	bne.n	800407c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d20c      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b20      	ldr	r3, [pc, #128]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e032      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d8:	4b19      	ldr	r3, [pc, #100]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4916      	ldr	r1, [pc, #88]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	490e      	ldr	r1, [pc, #56]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800410a:	f000 f821 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800410e:	4601      	mov	r1, r0
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	5cd3      	ldrb	r3, [r2, r3]
 800411e:	fa21 f303 	lsr.w	r3, r1, r3
 8004122:	4a09      	ldr	r2, [pc, #36]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fde2 	bl	8002cf4 <HAL_InitTick>

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40023c00 	.word	0x40023c00
 8004140:	40023800 	.word	0x40023800
 8004144:	080078d0 	.word	0x080078d0
 8004148:	20000040 	.word	0x20000040
 800414c:	20000044 	.word	0x20000044

08004150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	2300      	movs	r3, #0
 8004160:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004166:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b04      	cmp	r3, #4
 8004170:	d007      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x32>
 8004172:	2b08      	cmp	r3, #8
 8004174:	d008      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x38>
 8004176:	2b00      	cmp	r3, #0
 8004178:	f040 80b4 	bne.w	80042e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b5e      	ldr	r3, [pc, #376]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800417e:	60bb      	str	r3, [r7, #8]
       break;
 8004180:	e0b3      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004182:	4b5e      	ldr	r3, [pc, #376]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004184:	60bb      	str	r3, [r7, #8]
      break;
 8004186:	e0b0      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004188:	4b5a      	ldr	r3, [pc, #360]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004190:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004192:	4b58      	ldr	r3, [pc, #352]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d04a      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419e:	4b55      	ldr	r3, [pc, #340]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	f04f 0400 	mov.w	r4, #0
 80041a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	ea03 0501 	and.w	r5, r3, r1
 80041b4:	ea04 0602 	and.w	r6, r4, r2
 80041b8:	4629      	mov	r1, r5
 80041ba:	4632      	mov	r2, r6
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	f04f 0400 	mov.w	r4, #0
 80041c4:	0154      	lsls	r4, r2, #5
 80041c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041ca:	014b      	lsls	r3, r1, #5
 80041cc:	4619      	mov	r1, r3
 80041ce:	4622      	mov	r2, r4
 80041d0:	1b49      	subs	r1, r1, r5
 80041d2:	eb62 0206 	sbc.w	r2, r2, r6
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	f04f 0400 	mov.w	r4, #0
 80041de:	0194      	lsls	r4, r2, #6
 80041e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041e4:	018b      	lsls	r3, r1, #6
 80041e6:	1a5b      	subs	r3, r3, r1
 80041e8:	eb64 0402 	sbc.w	r4, r4, r2
 80041ec:	f04f 0100 	mov.w	r1, #0
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	00e2      	lsls	r2, r4, #3
 80041f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041fa:	00d9      	lsls	r1, r3, #3
 80041fc:	460b      	mov	r3, r1
 80041fe:	4614      	mov	r4, r2
 8004200:	195b      	adds	r3, r3, r5
 8004202:	eb44 0406 	adc.w	r4, r4, r6
 8004206:	f04f 0100 	mov.w	r1, #0
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	0262      	lsls	r2, r4, #9
 8004210:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004214:	0259      	lsls	r1, r3, #9
 8004216:	460b      	mov	r3, r1
 8004218:	4614      	mov	r4, r2
 800421a:	4618      	mov	r0, r3
 800421c:	4621      	mov	r1, r4
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f04f 0400 	mov.w	r4, #0
 8004224:	461a      	mov	r2, r3
 8004226:	4623      	mov	r3, r4
 8004228:	f7fc fc62 	bl	8000af0 <__aeabi_uldivmod>
 800422c:	4603      	mov	r3, r0
 800422e:	460c      	mov	r4, r1
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	e049      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004234:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	099b      	lsrs	r3, r3, #6
 800423a:	f04f 0400 	mov.w	r4, #0
 800423e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	ea03 0501 	and.w	r5, r3, r1
 800424a:	ea04 0602 	and.w	r6, r4, r2
 800424e:	4629      	mov	r1, r5
 8004250:	4632      	mov	r2, r6
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	f04f 0400 	mov.w	r4, #0
 800425a:	0154      	lsls	r4, r2, #5
 800425c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004260:	014b      	lsls	r3, r1, #5
 8004262:	4619      	mov	r1, r3
 8004264:	4622      	mov	r2, r4
 8004266:	1b49      	subs	r1, r1, r5
 8004268:	eb62 0206 	sbc.w	r2, r2, r6
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	f04f 0400 	mov.w	r4, #0
 8004274:	0194      	lsls	r4, r2, #6
 8004276:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800427a:	018b      	lsls	r3, r1, #6
 800427c:	1a5b      	subs	r3, r3, r1
 800427e:	eb64 0402 	sbc.w	r4, r4, r2
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	00e2      	lsls	r2, r4, #3
 800428c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004290:	00d9      	lsls	r1, r3, #3
 8004292:	460b      	mov	r3, r1
 8004294:	4614      	mov	r4, r2
 8004296:	195b      	adds	r3, r3, r5
 8004298:	eb44 0406 	adc.w	r4, r4, r6
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	02a2      	lsls	r2, r4, #10
 80042a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042aa:	0299      	lsls	r1, r3, #10
 80042ac:	460b      	mov	r3, r1
 80042ae:	4614      	mov	r4, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	4621      	mov	r1, r4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f04f 0400 	mov.w	r4, #0
 80042ba:	461a      	mov	r2, r3
 80042bc:	4623      	mov	r3, r4
 80042be:	f7fc fc17 	bl	8000af0 <__aeabi_uldivmod>
 80042c2:	4603      	mov	r3, r0
 80042c4:	460c      	mov	r4, r1
 80042c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	3301      	adds	r3, #1
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	60bb      	str	r3, [r7, #8]
      break;
 80042e2:	e002      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042e6:	60bb      	str	r3, [r7, #8]
      break;
 80042e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ea:	68bb      	ldr	r3, [r7, #8]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	00f42400 	.word	0x00f42400
 80042fc:	007a1200 	.word	0x007a1200

08004300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004304:	4b03      	ldr	r3, [pc, #12]	; (8004314 <HAL_RCC_GetHCLKFreq+0x14>)
 8004306:	681b      	ldr	r3, [r3, #0]
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20000040 	.word	0x20000040

08004318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800431c:	f7ff fff0 	bl	8004300 <HAL_RCC_GetHCLKFreq>
 8004320:	4601      	mov	r1, r0
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0a9b      	lsrs	r3, r3, #10
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4a03      	ldr	r2, [pc, #12]	; (800433c <HAL_RCC_GetPCLK1Freq+0x24>)
 800432e:	5cd3      	ldrb	r3, [r2, r3]
 8004330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40023800 	.word	0x40023800
 800433c:	080078e0 	.word	0x080078e0

08004340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004344:	f7ff ffdc 	bl	8004300 <HAL_RCC_GetHCLKFreq>
 8004348:	4601      	mov	r1, r0
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0b5b      	lsrs	r3, r3, #13
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4a03      	ldr	r2, [pc, #12]	; (8004364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	fa21 f303 	lsr.w	r3, r1, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40023800 	.word	0x40023800
 8004364:	080078e0 	.word	0x080078e0

08004368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e01d      	b.n	80043b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fe f9bc 	bl	800270c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f000 fb4e 	bl	8004a48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0201 	orr.w	r2, r2, #1
 80043d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b06      	cmp	r3, #6
 80043e6:	d007      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e01d      	b.n	8004454 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d106      	bne.n	8004432 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f815 	bl	800445c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3304      	adds	r3, #4
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f000 faff 	bl	8004a48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2201      	movs	r2, #1
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fdca 	bl	800501c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <HAL_TIM_PWM_Start+0x74>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_TIM_PWM_Start+0x2c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <HAL_TIM_PWM_Start+0x78>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d101      	bne.n	80044a0 <HAL_TIM_PWM_Start+0x30>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <HAL_TIM_PWM_Start+0x32>
 80044a0:	2300      	movs	r3, #0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b06      	cmp	r3, #6
 80044c6:	d007      	beq.n	80044d8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40010400 	.word	0x40010400

080044ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d122      	bne.n	8004548 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b02      	cmp	r3, #2
 800450e:	d11b      	bne.n	8004548 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0202 	mvn.w	r2, #2
 8004518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fa6b 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 8004534:	e005      	b.n	8004542 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa5d 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fa6e 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d122      	bne.n	800459c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b04      	cmp	r3, #4
 8004562:	d11b      	bne.n	800459c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0204 	mvn.w	r2, #4
 800456c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa41 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fa33 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fa44 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d122      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d11b      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0208 	mvn.w	r2, #8
 80045c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2204      	movs	r2, #4
 80045c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa17 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fa09 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fa1a 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	2b10      	cmp	r3, #16
 80045fc:	d122      	bne.n	8004644 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b10      	cmp	r3, #16
 800460a:	d11b      	bne.n	8004644 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0210 	mvn.w	r2, #16
 8004614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2208      	movs	r2, #8
 800461a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f9ed 	bl	8004a0a <HAL_TIM_IC_CaptureCallback>
 8004630:	e005      	b.n	800463e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f9df 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f9f0 	bl	8004a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	d10e      	bne.n	8004670 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b01      	cmp	r3, #1
 800465e:	d107      	bne.n	8004670 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0201 	mvn.w	r2, #1
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc fc16 	bl	8000e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d10e      	bne.n	800469c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004688:	2b80      	cmp	r3, #128	; 0x80
 800468a:	d107      	bne.n	800469c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fdbe 	bl	8005218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d10e      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d107      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f9b5 	bl	8004a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d10e      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d107      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0220 	mvn.w	r2, #32
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fd88 	bl	8005204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f4:	bf00      	nop
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004712:	2302      	movs	r3, #2
 8004714:	e0b4      	b.n	8004880 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b0c      	cmp	r3, #12
 800472a:	f200 809f 	bhi.w	800486c <HAL_TIM_PWM_ConfigChannel+0x170>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004769 	.word	0x08004769
 8004738:	0800486d 	.word	0x0800486d
 800473c:	0800486d 	.word	0x0800486d
 8004740:	0800486d 	.word	0x0800486d
 8004744:	080047a9 	.word	0x080047a9
 8004748:	0800486d 	.word	0x0800486d
 800474c:	0800486d 	.word	0x0800486d
 8004750:	0800486d 	.word	0x0800486d
 8004754:	080047eb 	.word	0x080047eb
 8004758:	0800486d 	.word	0x0800486d
 800475c:	0800486d 	.word	0x0800486d
 8004760:	0800486d 	.word	0x0800486d
 8004764:	0800482b 	.word	0x0800482b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fa0a 	bl	8004b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0208 	orr.w	r2, r2, #8
 8004782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0204 	bic.w	r2, r2, #4
 8004792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6999      	ldr	r1, [r3, #24]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	619a      	str	r2, [r3, #24]
      break;
 80047a6:	e062      	b.n	800486e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fa5a 	bl	8004c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6999      	ldr	r1, [r3, #24]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	021a      	lsls	r2, r3, #8
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	619a      	str	r2, [r3, #24]
      break;
 80047e8:	e041      	b.n	800486e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 faaf 	bl	8004d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0208 	orr.w	r2, r2, #8
 8004804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0204 	bic.w	r2, r2, #4
 8004814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69d9      	ldr	r1, [r3, #28]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	61da      	str	r2, [r3, #28]
      break;
 8004828:	e021      	b.n	800486e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fb03 	bl	8004e3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69d9      	ldr	r1, [r3, #28]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	021a      	lsls	r2, r3, #8
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	61da      	str	r2, [r3, #28]
      break;
 800486a:	e000      	b.n	800486e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800486c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_TIM_ConfigClockSource+0x18>
 800489c:	2302      	movs	r3, #2
 800489e:	e0a6      	b.n	80049ee <HAL_TIM_ConfigClockSource+0x166>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b40      	cmp	r3, #64	; 0x40
 80048d6:	d067      	beq.n	80049a8 <HAL_TIM_ConfigClockSource+0x120>
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d80b      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x6c>
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d073      	beq.n	80049c8 <HAL_TIM_ConfigClockSource+0x140>
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d802      	bhi.n	80048ea <HAL_TIM_ConfigClockSource+0x62>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d06f      	beq.n	80049c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048e8:	e078      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d06c      	beq.n	80049c8 <HAL_TIM_ConfigClockSource+0x140>
 80048ee:	2b30      	cmp	r3, #48	; 0x30
 80048f0:	d06a      	beq.n	80049c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80048f2:	e073      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048f4:	2b70      	cmp	r3, #112	; 0x70
 80048f6:	d00d      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0x8c>
 80048f8:	2b70      	cmp	r3, #112	; 0x70
 80048fa:	d804      	bhi.n	8004906 <HAL_TIM_ConfigClockSource+0x7e>
 80048fc:	2b50      	cmp	r3, #80	; 0x50
 80048fe:	d033      	beq.n	8004968 <HAL_TIM_ConfigClockSource+0xe0>
 8004900:	2b60      	cmp	r3, #96	; 0x60
 8004902:	d041      	beq.n	8004988 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004904:	e06a      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490a:	d066      	beq.n	80049da <HAL_TIM_ConfigClockSource+0x152>
 800490c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004910:	d017      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004912:	e063      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6899      	ldr	r1, [r3, #8]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f000 fb5a 	bl	8004fdc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004936:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	609a      	str	r2, [r3, #8]
      break;
 8004940:	e04c      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6899      	ldr	r1, [r3, #8]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f000 fb43 	bl	8004fdc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004964:	609a      	str	r2, [r3, #8]
      break;
 8004966:	e039      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	6859      	ldr	r1, [r3, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	461a      	mov	r2, r3
 8004976:	f000 fab7 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2150      	movs	r1, #80	; 0x50
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fb10 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004986:	e029      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	461a      	mov	r2, r3
 8004996:	f000 fad6 	bl	8004f46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2160      	movs	r1, #96	; 0x60
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fb00 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 80049a6:	e019      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	461a      	mov	r2, r3
 80049b6:	f000 fa97 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2140      	movs	r1, #64	; 0x40
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 faf0 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 80049c6:	e009      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f000 fae7 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 80049d8:	e000      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a40      	ldr	r2, [pc, #256]	; (8004b5c <TIM_Base_SetConfig+0x114>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d013      	beq.n	8004a88 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a66:	d00f      	beq.n	8004a88 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a3d      	ldr	r2, [pc, #244]	; (8004b60 <TIM_Base_SetConfig+0x118>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00b      	beq.n	8004a88 <TIM_Base_SetConfig+0x40>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a3c      	ldr	r2, [pc, #240]	; (8004b64 <TIM_Base_SetConfig+0x11c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d007      	beq.n	8004a88 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a3b      	ldr	r2, [pc, #236]	; (8004b68 <TIM_Base_SetConfig+0x120>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a3a      	ldr	r2, [pc, #232]	; (8004b6c <TIM_Base_SetConfig+0x124>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d108      	bne.n	8004a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <TIM_Base_SetConfig+0x114>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d02b      	beq.n	8004afa <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa8:	d027      	beq.n	8004afa <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2c      	ldr	r2, [pc, #176]	; (8004b60 <TIM_Base_SetConfig+0x118>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d023      	beq.n	8004afa <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2b      	ldr	r2, [pc, #172]	; (8004b64 <TIM_Base_SetConfig+0x11c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d01f      	beq.n	8004afa <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a2a      	ldr	r2, [pc, #168]	; (8004b68 <TIM_Base_SetConfig+0x120>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d01b      	beq.n	8004afa <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a29      	ldr	r2, [pc, #164]	; (8004b6c <TIM_Base_SetConfig+0x124>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d017      	beq.n	8004afa <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a28      	ldr	r2, [pc, #160]	; (8004b70 <TIM_Base_SetConfig+0x128>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d013      	beq.n	8004afa <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <TIM_Base_SetConfig+0x12c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00f      	beq.n	8004afa <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <TIM_Base_SetConfig+0x130>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00b      	beq.n	8004afa <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a25      	ldr	r2, [pc, #148]	; (8004b7c <TIM_Base_SetConfig+0x134>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d007      	beq.n	8004afa <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a24      	ldr	r2, [pc, #144]	; (8004b80 <TIM_Base_SetConfig+0x138>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d003      	beq.n	8004afa <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a23      	ldr	r2, [pc, #140]	; (8004b84 <TIM_Base_SetConfig+0x13c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d108      	bne.n	8004b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <TIM_Base_SetConfig+0x114>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_Base_SetConfig+0xf8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a0c      	ldr	r2, [pc, #48]	; (8004b6c <TIM_Base_SetConfig+0x124>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d103      	bne.n	8004b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	615a      	str	r2, [r3, #20]
}
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40010000 	.word	0x40010000
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40000c00 	.word	0x40000c00
 8004b6c:	40010400 	.word	0x40010400
 8004b70:	40014000 	.word	0x40014000
 8004b74:	40014400 	.word	0x40014400
 8004b78:	40014800 	.word	0x40014800
 8004b7c:	40001800 	.word	0x40001800
 8004b80:	40001c00 	.word	0x40001c00
 8004b84:	40002000 	.word	0x40002000

08004b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f023 0201 	bic.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f023 0302 	bic.w	r3, r3, #2
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a20      	ldr	r2, [pc, #128]	; (8004c60 <TIM_OC1_SetConfig+0xd8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_OC1_SetConfig+0x64>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <TIM_OC1_SetConfig+0xdc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d10c      	bne.n	8004c06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 0308 	bic.w	r3, r3, #8
 8004bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f023 0304 	bic.w	r3, r3, #4
 8004c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <TIM_OC1_SetConfig+0xd8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_OC1_SetConfig+0x8e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <TIM_OC1_SetConfig+0xdc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d111      	bne.n	8004c3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	621a      	str	r2, [r3, #32]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40010400 	.word	0x40010400

08004c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f023 0210 	bic.w	r2, r3, #16
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0320 	bic.w	r3, r3, #32
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a22      	ldr	r2, [pc, #136]	; (8004d4c <TIM_OC2_SetConfig+0xe4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_OC2_SetConfig+0x68>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a21      	ldr	r2, [pc, #132]	; (8004d50 <TIM_OC2_SetConfig+0xe8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10d      	bne.n	8004cec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a17      	ldr	r2, [pc, #92]	; (8004d4c <TIM_OC2_SetConfig+0xe4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_OC2_SetConfig+0x94>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <TIM_OC2_SetConfig+0xe8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d113      	bne.n	8004d24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40010400 	.word	0x40010400

08004d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0303 	bic.w	r3, r3, #3
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <TIM_OC3_SetConfig+0xe0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_OC3_SetConfig+0x66>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a20      	ldr	r2, [pc, #128]	; (8004e38 <TIM_OC3_SetConfig+0xe4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d10d      	bne.n	8004dd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <TIM_OC3_SetConfig+0xe0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d003      	beq.n	8004de6 <TIM_OC3_SetConfig+0x92>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <TIM_OC3_SetConfig+0xe4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d113      	bne.n	8004e0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	621a      	str	r2, [r3, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	40010000 	.word	0x40010000
 8004e38:	40010400 	.word	0x40010400

08004e3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	031b      	lsls	r3, r3, #12
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <TIM_OC4_SetConfig+0xa4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_OC4_SetConfig+0x68>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a11      	ldr	r2, [pc, #68]	; (8004ee4 <TIM_OC4_SetConfig+0xa8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d109      	bne.n	8004eb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	019b      	lsls	r3, r3, #6
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	40010400 	.word	0x40010400

08004ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 030a 	bic.w	r3, r3, #10
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b087      	sub	sp, #28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0210 	bic.w	r2, r3, #16
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	031b      	lsls	r3, r3, #12
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f043 0307 	orr.w	r3, r3, #7
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	609a      	str	r2, [r3, #8]
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	021a      	lsls	r2, r3, #8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4313      	orrs	r3, r2
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	609a      	str	r2, [r3, #8]
}
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	2201      	movs	r2, #1
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1a      	ldr	r2, [r3, #32]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	43db      	mvns	r3, r3
 800503e:	401a      	ands	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a1a      	ldr	r2, [r3, #32]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 031f 	and.w	r3, r3, #31
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	fa01 f303 	lsl.w	r3, r1, r3
 8005054:	431a      	orrs	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800507c:	2302      	movs	r3, #2
 800507e:	e05a      	b.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a21      	ldr	r2, [pc, #132]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d022      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050cc:	d01d      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d018      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1b      	ldr	r2, [pc, #108]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1a      	ldr	r2, [pc, #104]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a18      	ldr	r2, [pc, #96]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a17      	ldr	r2, [pc, #92]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a15      	ldr	r2, [pc, #84]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10c      	bne.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	4313      	orrs	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40010000 	.word	0x40010000
 8005148:	40000400 	.word	0x40000400
 800514c:	40000800 	.word	0x40000800
 8005150:	40000c00 	.word	0x40000c00
 8005154:	40010400 	.word	0x40010400
 8005158:	40014000 	.word	0x40014000
 800515c:	40001800 	.word	0x40001800

08005160 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005178:	2302      	movs	r3, #2
 800517a:	e03d      	b.n	80051f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e03f      	b.n	80052be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fd fb10 	bl	8002878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2224      	movs	r2, #36	; 0x24
 800525c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800526e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fbcf 	bl	8005a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695a      	ldr	r2, [r3, #20]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	4613      	mov	r3, r2
 80052d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d130      	bne.n	8005342 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_UART_Transmit_IT+0x26>
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e029      	b.n	8005344 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Transmit_IT+0x38>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e022      	b.n	8005344 <HAL_UART_Transmit_IT+0x7e>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	88fa      	ldrh	r2, [r7, #6]
 8005310:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	88fa      	ldrh	r2, [r7, #6]
 8005316:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2221      	movs	r2, #33	; 0x21
 8005322:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800533c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	e000      	b.n	8005344 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005342:	2302      	movs	r3, #2
  }
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b20      	cmp	r3, #32
 8005368:	d166      	bne.n	8005438 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_UART_Receive_DMA+0x26>
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e05f      	b.n	800543a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_UART_Receive_DMA+0x38>
 8005384:	2302      	movs	r3, #2
 8005386:	e058      	b.n	800543a <HAL_UART_Receive_DMA+0xea>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	88fa      	ldrh	r2, [r7, #6]
 800539a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2222      	movs	r2, #34	; 0x22
 80053a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ae:	4a25      	ldr	r2, [pc, #148]	; (8005444 <HAL_UART_Receive_DMA+0xf4>)
 80053b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b6:	4a24      	ldr	r2, [pc, #144]	; (8005448 <HAL_UART_Receive_DMA+0xf8>)
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053be:	4a23      	ldr	r2, [pc, #140]	; (800544c <HAL_UART_Receive_DMA+0xfc>)
 80053c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c6:	2200      	movs	r2, #0
 80053c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3304      	adds	r3, #4
 80053da:	4619      	mov	r1, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	f7fd fe97 	bl	8003114 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005412:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005432:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	e000      	b.n	800543a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005438:	2302      	movs	r3, #2
  }
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	0800568d 	.word	0x0800568d
 8005448:	080056f5 	.word	0x080056f5
 800544c:	08005711 	.word	0x08005711

08005450 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_UART_IRQHandler+0x52>
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fa38 	bl	8005910 <UART_Receive_IT>
      return;
 80054a0:	e0d1      	b.n	8005646 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80b0 	beq.w	800560a <HAL_UART_IRQHandler+0x1ba>
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <HAL_UART_IRQHandler+0x70>
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80a5 	beq.w	800560a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_UART_IRQHandler+0x90>
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d8:	f043 0201 	orr.w	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_UART_IRQHandler+0xb0>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f8:	f043 0202 	orr.w	r2, r3, #2
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_UART_IRQHandler+0xd0>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005518:	f043 0204 	orr.w	r2, r3, #4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00f      	beq.n	800554a <HAL_UART_IRQHandler+0xfa>
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_UART_IRQHandler+0xee>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	f043 0208 	orr.w	r2, r3, #8
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d078      	beq.n	8005644 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <HAL_UART_IRQHandler+0x11c>
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9d2 	bl	8005910 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	bf0c      	ite	eq
 800557a:	2301      	moveq	r3, #1
 800557c:	2300      	movne	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <HAL_UART_IRQHandler+0x144>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d031      	beq.n	80055f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f91b 	bl	80057d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d123      	bne.n	80055f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d013      	beq.n	80055e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	4a21      	ldr	r2, [pc, #132]	; (800564c <HAL_UART_IRQHandler+0x1fc>)
 80055c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fd fdf9 	bl	80031c4 <HAL_DMA_Abort_IT>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d016      	beq.n	8005606 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055e2:	4610      	mov	r0, r2
 80055e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e6:	e00e      	b.n	8005606 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f845 	bl	8005678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ee:	e00a      	b.n	8005606 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f841 	bl	8005678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f6:	e006      	b.n	8005606 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f83d 	bl	8005678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005604:	e01e      	b.n	8005644 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005606:	bf00      	nop
    return;
 8005608:	e01c      	b.n	8005644 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_UART_IRQHandler+0x1d6>
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f908 	bl	8005834 <UART_Transmit_IT>
    return;
 8005624:	e00f      	b.n	8005646 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <HAL_UART_IRQHandler+0x1f6>
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f950 	bl	80058e0 <UART_EndTransmit_IT>
    return;
 8005640:	bf00      	nop
 8005642:	e000      	b.n	8005646 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005644:	bf00      	nop
  }
}
 8005646:	3720      	adds	r7, #32
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	0800580d 	.word	0x0800580d

08005650 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11e      	bne.n	80056e6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056bc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056dc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff ffb2 	bl	8005650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f7ff ffae 	bl	8005664 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005708:	bf00      	nop
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	2b80      	cmp	r3, #128	; 0x80
 800572e:	bf0c      	ite	eq
 8005730:	2301      	moveq	r3, #1
 8005732:	2300      	movne	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b21      	cmp	r3, #33	; 0x21
 8005742:	d108      	bne.n	8005756 <UART_DMAError+0x46>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2200      	movs	r2, #0
 800574e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005750:	68b8      	ldr	r0, [r7, #8]
 8005752:	f000 f827 	bl	80057a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	bf0c      	ite	eq
 8005764:	2301      	moveq	r3, #1
 8005766:	2300      	movne	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b22      	cmp	r3, #34	; 0x22
 8005776:	d108      	bne.n	800578a <UART_DMAError+0x7a>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2200      	movs	r2, #0
 8005782:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005784:	68b8      	ldr	r0, [r7, #8]
 8005786:	f000 f823 	bl	80057d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	f043 0210 	orr.w	r2, r3, #16
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005796:	68b8      	ldr	r0, [r7, #8]
 8005798:	f7ff ff6e 	bl	8005678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80057ba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0201 	bic.w	r2, r2, #1
 80057f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7ff ff26 	bl	8005678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b21      	cmp	r3, #33	; 0x21
 8005846:	d144      	bne.n	80058d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005850:	d11a      	bne.n	8005888 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005866:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	1c9a      	adds	r2, r3, #2
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	621a      	str	r2, [r3, #32]
 800587a:	e00e      	b.n	800589a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	621a      	str	r2, [r3, #32]
 8005886:	e008      	b.n	800589a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	1c59      	adds	r1, r3, #1
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6211      	str	r1, [r2, #32]
 8005892:	781a      	ldrb	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	4619      	mov	r1, r3
 80058a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10f      	bne.n	80058ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	e000      	b.n	80058d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80058d2:	2302      	movs	r3, #2
  }
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fb fb35 	bl	8000f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b22      	cmp	r3, #34	; 0x22
 8005922:	d171      	bne.n	8005a08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592c:	d123      	bne.n	8005976 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005932:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10e      	bne.n	800595a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	1c9a      	adds	r2, r3, #2
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	629a      	str	r2, [r3, #40]	; 0x28
 8005958:	e029      	b.n	80059ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	b29b      	uxth	r3, r3
 8005962:	b2db      	uxtb	r3, r3
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	629a      	str	r2, [r3, #40]	; 0x28
 8005974:	e01b      	b.n	80059ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6858      	ldr	r0, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005988:	1c59      	adds	r1, r3, #1
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6291      	str	r1, [r2, #40]	; 0x28
 800598e:	b2c2      	uxtb	r2, r0
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	e00c      	b.n	80059ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b2da      	uxtb	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	1c58      	adds	r0, r3, #1
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	6288      	str	r0, [r1, #40]	; 0x28
 80059a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4619      	mov	r1, r3
 80059bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d120      	bne.n	8005a04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0220 	bic.w	r2, r2, #32
 80059d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff fe28 	bl	8005650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e002      	b.n	8005a0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e000      	b.n	8005a0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005a08:	2302      	movs	r3, #2
  }
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a56:	f023 030c 	bic.w	r3, r3, #12
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	430b      	orrs	r3, r1
 8005a62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a82:	f040 818b 	bne.w	8005d9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4ac1      	ldr	r2, [pc, #772]	; (8005d90 <UART_SetConfig+0x37c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d005      	beq.n	8005a9c <UART_SetConfig+0x88>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4abf      	ldr	r2, [pc, #764]	; (8005d94 <UART_SetConfig+0x380>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	f040 80bd 	bne.w	8005c16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a9c:	f7fe fc50 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8005aa0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	461d      	mov	r5, r3
 8005aa6:	f04f 0600 	mov.w	r6, #0
 8005aaa:	46a8      	mov	r8, r5
 8005aac:	46b1      	mov	r9, r6
 8005aae:	eb18 0308 	adds.w	r3, r8, r8
 8005ab2:	eb49 0409 	adc.w	r4, r9, r9
 8005ab6:	4698      	mov	r8, r3
 8005ab8:	46a1      	mov	r9, r4
 8005aba:	eb18 0805 	adds.w	r8, r8, r5
 8005abe:	eb49 0906 	adc.w	r9, r9, r6
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ace:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ad2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ad6:	4688      	mov	r8, r1
 8005ad8:	4691      	mov	r9, r2
 8005ada:	eb18 0005 	adds.w	r0, r8, r5
 8005ade:	eb49 0106 	adc.w	r1, r9, r6
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	461d      	mov	r5, r3
 8005ae8:	f04f 0600 	mov.w	r6, #0
 8005aec:	196b      	adds	r3, r5, r5
 8005aee:	eb46 0406 	adc.w	r4, r6, r6
 8005af2:	461a      	mov	r2, r3
 8005af4:	4623      	mov	r3, r4
 8005af6:	f7fa fffb 	bl	8000af0 <__aeabi_uldivmod>
 8005afa:	4603      	mov	r3, r0
 8005afc:	460c      	mov	r4, r1
 8005afe:	461a      	mov	r2, r3
 8005b00:	4ba5      	ldr	r3, [pc, #660]	; (8005d98 <UART_SetConfig+0x384>)
 8005b02:	fba3 2302 	umull	r2, r3, r3, r2
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	461d      	mov	r5, r3
 8005b10:	f04f 0600 	mov.w	r6, #0
 8005b14:	46a9      	mov	r9, r5
 8005b16:	46b2      	mov	sl, r6
 8005b18:	eb19 0309 	adds.w	r3, r9, r9
 8005b1c:	eb4a 040a 	adc.w	r4, sl, sl
 8005b20:	4699      	mov	r9, r3
 8005b22:	46a2      	mov	sl, r4
 8005b24:	eb19 0905 	adds.w	r9, r9, r5
 8005b28:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b2c:	f04f 0100 	mov.w	r1, #0
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b40:	4689      	mov	r9, r1
 8005b42:	4692      	mov	sl, r2
 8005b44:	eb19 0005 	adds.w	r0, r9, r5
 8005b48:	eb4a 0106 	adc.w	r1, sl, r6
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	461d      	mov	r5, r3
 8005b52:	f04f 0600 	mov.w	r6, #0
 8005b56:	196b      	adds	r3, r5, r5
 8005b58:	eb46 0406 	adc.w	r4, r6, r6
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4623      	mov	r3, r4
 8005b60:	f7fa ffc6 	bl	8000af0 <__aeabi_uldivmod>
 8005b64:	4603      	mov	r3, r0
 8005b66:	460c      	mov	r4, r1
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4b8b      	ldr	r3, [pc, #556]	; (8005d98 <UART_SetConfig+0x384>)
 8005b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	2164      	movs	r1, #100	; 0x64
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	3332      	adds	r3, #50	; 0x32
 8005b7e:	4a86      	ldr	r2, [pc, #536]	; (8005d98 <UART_SetConfig+0x384>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b8c:	4498      	add	r8, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	461d      	mov	r5, r3
 8005b92:	f04f 0600 	mov.w	r6, #0
 8005b96:	46a9      	mov	r9, r5
 8005b98:	46b2      	mov	sl, r6
 8005b9a:	eb19 0309 	adds.w	r3, r9, r9
 8005b9e:	eb4a 040a 	adc.w	r4, sl, sl
 8005ba2:	4699      	mov	r9, r3
 8005ba4:	46a2      	mov	sl, r4
 8005ba6:	eb19 0905 	adds.w	r9, r9, r5
 8005baa:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bae:	f04f 0100 	mov.w	r1, #0
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bc2:	4689      	mov	r9, r1
 8005bc4:	4692      	mov	sl, r2
 8005bc6:	eb19 0005 	adds.w	r0, r9, r5
 8005bca:	eb4a 0106 	adc.w	r1, sl, r6
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	461d      	mov	r5, r3
 8005bd4:	f04f 0600 	mov.w	r6, #0
 8005bd8:	196b      	adds	r3, r5, r5
 8005bda:	eb46 0406 	adc.w	r4, r6, r6
 8005bde:	461a      	mov	r2, r3
 8005be0:	4623      	mov	r3, r4
 8005be2:	f7fa ff85 	bl	8000af0 <__aeabi_uldivmod>
 8005be6:	4603      	mov	r3, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	461a      	mov	r2, r3
 8005bec:	4b6a      	ldr	r3, [pc, #424]	; (8005d98 <UART_SetConfig+0x384>)
 8005bee:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	2164      	movs	r1, #100	; 0x64
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	3332      	adds	r3, #50	; 0x32
 8005c00:	4a65      	ldr	r2, [pc, #404]	; (8005d98 <UART_SetConfig+0x384>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	f003 0207 	and.w	r2, r3, #7
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4442      	add	r2, r8
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	e26f      	b.n	80060f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c16:	f7fe fb7f 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8005c1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	461d      	mov	r5, r3
 8005c20:	f04f 0600 	mov.w	r6, #0
 8005c24:	46a8      	mov	r8, r5
 8005c26:	46b1      	mov	r9, r6
 8005c28:	eb18 0308 	adds.w	r3, r8, r8
 8005c2c:	eb49 0409 	adc.w	r4, r9, r9
 8005c30:	4698      	mov	r8, r3
 8005c32:	46a1      	mov	r9, r4
 8005c34:	eb18 0805 	adds.w	r8, r8, r5
 8005c38:	eb49 0906 	adc.w	r9, r9, r6
 8005c3c:	f04f 0100 	mov.w	r1, #0
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c50:	4688      	mov	r8, r1
 8005c52:	4691      	mov	r9, r2
 8005c54:	eb18 0005 	adds.w	r0, r8, r5
 8005c58:	eb49 0106 	adc.w	r1, r9, r6
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	461d      	mov	r5, r3
 8005c62:	f04f 0600 	mov.w	r6, #0
 8005c66:	196b      	adds	r3, r5, r5
 8005c68:	eb46 0406 	adc.w	r4, r6, r6
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4623      	mov	r3, r4
 8005c70:	f7fa ff3e 	bl	8000af0 <__aeabi_uldivmod>
 8005c74:	4603      	mov	r3, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	461a      	mov	r2, r3
 8005c7a:	4b47      	ldr	r3, [pc, #284]	; (8005d98 <UART_SetConfig+0x384>)
 8005c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	461d      	mov	r5, r3
 8005c8a:	f04f 0600 	mov.w	r6, #0
 8005c8e:	46a9      	mov	r9, r5
 8005c90:	46b2      	mov	sl, r6
 8005c92:	eb19 0309 	adds.w	r3, r9, r9
 8005c96:	eb4a 040a 	adc.w	r4, sl, sl
 8005c9a:	4699      	mov	r9, r3
 8005c9c:	46a2      	mov	sl, r4
 8005c9e:	eb19 0905 	adds.w	r9, r9, r5
 8005ca2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ca6:	f04f 0100 	mov.w	r1, #0
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cba:	4689      	mov	r9, r1
 8005cbc:	4692      	mov	sl, r2
 8005cbe:	eb19 0005 	adds.w	r0, r9, r5
 8005cc2:	eb4a 0106 	adc.w	r1, sl, r6
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	461d      	mov	r5, r3
 8005ccc:	f04f 0600 	mov.w	r6, #0
 8005cd0:	196b      	adds	r3, r5, r5
 8005cd2:	eb46 0406 	adc.w	r4, r6, r6
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4623      	mov	r3, r4
 8005cda:	f7fa ff09 	bl	8000af0 <__aeabi_uldivmod>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4b2c      	ldr	r3, [pc, #176]	; (8005d98 <UART_SetConfig+0x384>)
 8005ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	2164      	movs	r1, #100	; 0x64
 8005cee:	fb01 f303 	mul.w	r3, r1, r3
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	3332      	adds	r3, #50	; 0x32
 8005cf8:	4a27      	ldr	r2, [pc, #156]	; (8005d98 <UART_SetConfig+0x384>)
 8005cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d06:	4498      	add	r8, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	461d      	mov	r5, r3
 8005d0c:	f04f 0600 	mov.w	r6, #0
 8005d10:	46a9      	mov	r9, r5
 8005d12:	46b2      	mov	sl, r6
 8005d14:	eb19 0309 	adds.w	r3, r9, r9
 8005d18:	eb4a 040a 	adc.w	r4, sl, sl
 8005d1c:	4699      	mov	r9, r3
 8005d1e:	46a2      	mov	sl, r4
 8005d20:	eb19 0905 	adds.w	r9, r9, r5
 8005d24:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d28:	f04f 0100 	mov.w	r1, #0
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d3c:	4689      	mov	r9, r1
 8005d3e:	4692      	mov	sl, r2
 8005d40:	eb19 0005 	adds.w	r0, r9, r5
 8005d44:	eb4a 0106 	adc.w	r1, sl, r6
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	461d      	mov	r5, r3
 8005d4e:	f04f 0600 	mov.w	r6, #0
 8005d52:	196b      	adds	r3, r5, r5
 8005d54:	eb46 0406 	adc.w	r4, r6, r6
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	f7fa fec8 	bl	8000af0 <__aeabi_uldivmod>
 8005d60:	4603      	mov	r3, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	461a      	mov	r2, r3
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <UART_SetConfig+0x384>)
 8005d68:	fba3 1302 	umull	r1, r3, r3, r2
 8005d6c:	095b      	lsrs	r3, r3, #5
 8005d6e:	2164      	movs	r1, #100	; 0x64
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	3332      	adds	r3, #50	; 0x32
 8005d7a:	4a07      	ldr	r2, [pc, #28]	; (8005d98 <UART_SetConfig+0x384>)
 8005d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	f003 0207 	and.w	r2, r3, #7
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4442      	add	r2, r8
 8005d8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005d8e:	e1b2      	b.n	80060f6 <UART_SetConfig+0x6e2>
 8005d90:	40011000 	.word	0x40011000
 8005d94:	40011400 	.word	0x40011400
 8005d98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4ad7      	ldr	r2, [pc, #860]	; (8006100 <UART_SetConfig+0x6ec>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d005      	beq.n	8005db2 <UART_SetConfig+0x39e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4ad6      	ldr	r2, [pc, #856]	; (8006104 <UART_SetConfig+0x6f0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	f040 80d1 	bne.w	8005f54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005db2:	f7fe fac5 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8005db6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	469a      	mov	sl, r3
 8005dbc:	f04f 0b00 	mov.w	fp, #0
 8005dc0:	46d0      	mov	r8, sl
 8005dc2:	46d9      	mov	r9, fp
 8005dc4:	eb18 0308 	adds.w	r3, r8, r8
 8005dc8:	eb49 0409 	adc.w	r4, r9, r9
 8005dcc:	4698      	mov	r8, r3
 8005dce:	46a1      	mov	r9, r4
 8005dd0:	eb18 080a 	adds.w	r8, r8, sl
 8005dd4:	eb49 090b 	adc.w	r9, r9, fp
 8005dd8:	f04f 0100 	mov.w	r1, #0
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005de4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005de8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dec:	4688      	mov	r8, r1
 8005dee:	4691      	mov	r9, r2
 8005df0:	eb1a 0508 	adds.w	r5, sl, r8
 8005df4:	eb4b 0609 	adc.w	r6, fp, r9
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	f04f 0200 	mov.w	r2, #0
 8005e02:	f04f 0300 	mov.w	r3, #0
 8005e06:	f04f 0400 	mov.w	r4, #0
 8005e0a:	0094      	lsls	r4, r2, #2
 8005e0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e10:	008b      	lsls	r3, r1, #2
 8005e12:	461a      	mov	r2, r3
 8005e14:	4623      	mov	r3, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	4631      	mov	r1, r6
 8005e1a:	f7fa fe69 	bl	8000af0 <__aeabi_uldivmod>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	460c      	mov	r4, r1
 8005e22:	461a      	mov	r2, r3
 8005e24:	4bb8      	ldr	r3, [pc, #736]	; (8006108 <UART_SetConfig+0x6f4>)
 8005e26:	fba3 2302 	umull	r2, r3, r3, r2
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	469b      	mov	fp, r3
 8005e34:	f04f 0c00 	mov.w	ip, #0
 8005e38:	46d9      	mov	r9, fp
 8005e3a:	46e2      	mov	sl, ip
 8005e3c:	eb19 0309 	adds.w	r3, r9, r9
 8005e40:	eb4a 040a 	adc.w	r4, sl, sl
 8005e44:	4699      	mov	r9, r3
 8005e46:	46a2      	mov	sl, r4
 8005e48:	eb19 090b 	adds.w	r9, r9, fp
 8005e4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e64:	4689      	mov	r9, r1
 8005e66:	4692      	mov	sl, r2
 8005e68:	eb1b 0509 	adds.w	r5, fp, r9
 8005e6c:	eb4c 060a 	adc.w	r6, ip, sl
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4619      	mov	r1, r3
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	f04f 0400 	mov.w	r4, #0
 8005e82:	0094      	lsls	r4, r2, #2
 8005e84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e88:	008b      	lsls	r3, r1, #2
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	4628      	mov	r0, r5
 8005e90:	4631      	mov	r1, r6
 8005e92:	f7fa fe2d 	bl	8000af0 <__aeabi_uldivmod>
 8005e96:	4603      	mov	r3, r0
 8005e98:	460c      	mov	r4, r1
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	4b9a      	ldr	r3, [pc, #616]	; (8006108 <UART_SetConfig+0x6f4>)
 8005e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	2164      	movs	r1, #100	; 0x64
 8005ea6:	fb01 f303 	mul.w	r3, r1, r3
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	3332      	adds	r3, #50	; 0x32
 8005eb0:	4a95      	ldr	r2, [pc, #596]	; (8006108 <UART_SetConfig+0x6f4>)
 8005eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ebc:	4498      	add	r8, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	469b      	mov	fp, r3
 8005ec2:	f04f 0c00 	mov.w	ip, #0
 8005ec6:	46d9      	mov	r9, fp
 8005ec8:	46e2      	mov	sl, ip
 8005eca:	eb19 0309 	adds.w	r3, r9, r9
 8005ece:	eb4a 040a 	adc.w	r4, sl, sl
 8005ed2:	4699      	mov	r9, r3
 8005ed4:	46a2      	mov	sl, r4
 8005ed6:	eb19 090b 	adds.w	r9, r9, fp
 8005eda:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ede:	f04f 0100 	mov.w	r1, #0
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005eee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ef2:	4689      	mov	r9, r1
 8005ef4:	4692      	mov	sl, r2
 8005ef6:	eb1b 0509 	adds.w	r5, fp, r9
 8005efa:	eb4c 060a 	adc.w	r6, ip, sl
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4619      	mov	r1, r3
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	f04f 0400 	mov.w	r4, #0
 8005f10:	0094      	lsls	r4, r2, #2
 8005f12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f16:	008b      	lsls	r3, r1, #2
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	4631      	mov	r1, r6
 8005f20:	f7fa fde6 	bl	8000af0 <__aeabi_uldivmod>
 8005f24:	4603      	mov	r3, r0
 8005f26:	460c      	mov	r4, r1
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4b77      	ldr	r3, [pc, #476]	; (8006108 <UART_SetConfig+0x6f4>)
 8005f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	2164      	movs	r1, #100	; 0x64
 8005f34:	fb01 f303 	mul.w	r3, r1, r3
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	3332      	adds	r3, #50	; 0x32
 8005f3e:	4a72      	ldr	r2, [pc, #456]	; (8006108 <UART_SetConfig+0x6f4>)
 8005f40:	fba2 2303 	umull	r2, r3, r2, r3
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	f003 020f 	and.w	r2, r3, #15
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4442      	add	r2, r8
 8005f50:	609a      	str	r2, [r3, #8]
 8005f52:	e0d0      	b.n	80060f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f54:	f7fe f9e0 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8005f58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	469a      	mov	sl, r3
 8005f5e:	f04f 0b00 	mov.w	fp, #0
 8005f62:	46d0      	mov	r8, sl
 8005f64:	46d9      	mov	r9, fp
 8005f66:	eb18 0308 	adds.w	r3, r8, r8
 8005f6a:	eb49 0409 	adc.w	r4, r9, r9
 8005f6e:	4698      	mov	r8, r3
 8005f70:	46a1      	mov	r9, r4
 8005f72:	eb18 080a 	adds.w	r8, r8, sl
 8005f76:	eb49 090b 	adc.w	r9, r9, fp
 8005f7a:	f04f 0100 	mov.w	r1, #0
 8005f7e:	f04f 0200 	mov.w	r2, #0
 8005f82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f8e:	4688      	mov	r8, r1
 8005f90:	4691      	mov	r9, r2
 8005f92:	eb1a 0508 	adds.w	r5, sl, r8
 8005f96:	eb4b 0609 	adc.w	r6, fp, r9
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	f04f 0400 	mov.w	r4, #0
 8005fac:	0094      	lsls	r4, r2, #2
 8005fae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fb2:	008b      	lsls	r3, r1, #2
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	4631      	mov	r1, r6
 8005fbc:	f7fa fd98 	bl	8000af0 <__aeabi_uldivmod>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4b50      	ldr	r3, [pc, #320]	; (8006108 <UART_SetConfig+0x6f4>)
 8005fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	469b      	mov	fp, r3
 8005fd6:	f04f 0c00 	mov.w	ip, #0
 8005fda:	46d9      	mov	r9, fp
 8005fdc:	46e2      	mov	sl, ip
 8005fde:	eb19 0309 	adds.w	r3, r9, r9
 8005fe2:	eb4a 040a 	adc.w	r4, sl, sl
 8005fe6:	4699      	mov	r9, r3
 8005fe8:	46a2      	mov	sl, r4
 8005fea:	eb19 090b 	adds.w	r9, r9, fp
 8005fee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ff2:	f04f 0100 	mov.w	r1, #0
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ffe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006002:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006006:	4689      	mov	r9, r1
 8006008:	4692      	mov	sl, r2
 800600a:	eb1b 0509 	adds.w	r5, fp, r9
 800600e:	eb4c 060a 	adc.w	r6, ip, sl
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4619      	mov	r1, r3
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	f04f 0400 	mov.w	r4, #0
 8006024:	0094      	lsls	r4, r2, #2
 8006026:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800602a:	008b      	lsls	r3, r1, #2
 800602c:	461a      	mov	r2, r3
 800602e:	4623      	mov	r3, r4
 8006030:	4628      	mov	r0, r5
 8006032:	4631      	mov	r1, r6
 8006034:	f7fa fd5c 	bl	8000af0 <__aeabi_uldivmod>
 8006038:	4603      	mov	r3, r0
 800603a:	460c      	mov	r4, r1
 800603c:	461a      	mov	r2, r3
 800603e:	4b32      	ldr	r3, [pc, #200]	; (8006108 <UART_SetConfig+0x6f4>)
 8006040:	fba3 1302 	umull	r1, r3, r3, r2
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	2164      	movs	r1, #100	; 0x64
 8006048:	fb01 f303 	mul.w	r3, r1, r3
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	3332      	adds	r3, #50	; 0x32
 8006052:	4a2d      	ldr	r2, [pc, #180]	; (8006108 <UART_SetConfig+0x6f4>)
 8006054:	fba2 2303 	umull	r2, r3, r2, r3
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800605e:	4498      	add	r8, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	469b      	mov	fp, r3
 8006064:	f04f 0c00 	mov.w	ip, #0
 8006068:	46d9      	mov	r9, fp
 800606a:	46e2      	mov	sl, ip
 800606c:	eb19 0309 	adds.w	r3, r9, r9
 8006070:	eb4a 040a 	adc.w	r4, sl, sl
 8006074:	4699      	mov	r9, r3
 8006076:	46a2      	mov	sl, r4
 8006078:	eb19 090b 	adds.w	r9, r9, fp
 800607c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800608c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006090:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006094:	4689      	mov	r9, r1
 8006096:	4692      	mov	sl, r2
 8006098:	eb1b 0509 	adds.w	r5, fp, r9
 800609c:	eb4c 060a 	adc.w	r6, ip, sl
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4619      	mov	r1, r3
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	f04f 0400 	mov.w	r4, #0
 80060b2:	0094      	lsls	r4, r2, #2
 80060b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060b8:	008b      	lsls	r3, r1, #2
 80060ba:	461a      	mov	r2, r3
 80060bc:	4623      	mov	r3, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	4631      	mov	r1, r6
 80060c2:	f7fa fd15 	bl	8000af0 <__aeabi_uldivmod>
 80060c6:	4603      	mov	r3, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	461a      	mov	r2, r3
 80060cc:	4b0e      	ldr	r3, [pc, #56]	; (8006108 <UART_SetConfig+0x6f4>)
 80060ce:	fba3 1302 	umull	r1, r3, r3, r2
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	2164      	movs	r1, #100	; 0x64
 80060d6:	fb01 f303 	mul.w	r3, r1, r3
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	3332      	adds	r3, #50	; 0x32
 80060e0:	4a09      	ldr	r2, [pc, #36]	; (8006108 <UART_SetConfig+0x6f4>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	f003 020f 	and.w	r2, r3, #15
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4442      	add	r2, r8
 80060f2:	609a      	str	r2, [r3, #8]
}
 80060f4:	e7ff      	b.n	80060f6 <UART_SetConfig+0x6e2>
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006100:	40011000 	.word	0x40011000
 8006104:	40011400 	.word	0x40011400
 8006108:	51eb851f 	.word	0x51eb851f

0800610c <__errno>:
 800610c:	4b01      	ldr	r3, [pc, #4]	; (8006114 <__errno+0x8>)
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	2000004c 	.word	0x2000004c

08006118 <__libc_init_array>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4e0d      	ldr	r6, [pc, #52]	; (8006150 <__libc_init_array+0x38>)
 800611c:	4c0d      	ldr	r4, [pc, #52]	; (8006154 <__libc_init_array+0x3c>)
 800611e:	1ba4      	subs	r4, r4, r6
 8006120:	10a4      	asrs	r4, r4, #2
 8006122:	2500      	movs	r5, #0
 8006124:	42a5      	cmp	r5, r4
 8006126:	d109      	bne.n	800613c <__libc_init_array+0x24>
 8006128:	4e0b      	ldr	r6, [pc, #44]	; (8006158 <__libc_init_array+0x40>)
 800612a:	4c0c      	ldr	r4, [pc, #48]	; (800615c <__libc_init_array+0x44>)
 800612c:	f001 fbc2 	bl	80078b4 <_init>
 8006130:	1ba4      	subs	r4, r4, r6
 8006132:	10a4      	asrs	r4, r4, #2
 8006134:	2500      	movs	r5, #0
 8006136:	42a5      	cmp	r5, r4
 8006138:	d105      	bne.n	8006146 <__libc_init_array+0x2e>
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006140:	4798      	blx	r3
 8006142:	3501      	adds	r5, #1
 8006144:	e7ee      	b.n	8006124 <__libc_init_array+0xc>
 8006146:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800614a:	4798      	blx	r3
 800614c:	3501      	adds	r5, #1
 800614e:	e7f2      	b.n	8006136 <__libc_init_array+0x1e>
 8006150:	08007b18 	.word	0x08007b18
 8006154:	08007b18 	.word	0x08007b18
 8006158:	08007b18 	.word	0x08007b18
 800615c:	08007b1c 	.word	0x08007b1c

08006160 <memset>:
 8006160:	4402      	add	r2, r0
 8006162:	4603      	mov	r3, r0
 8006164:	4293      	cmp	r3, r2
 8006166:	d100      	bne.n	800616a <memset+0xa>
 8006168:	4770      	bx	lr
 800616a:	f803 1b01 	strb.w	r1, [r3], #1
 800616e:	e7f9      	b.n	8006164 <memset+0x4>

08006170 <cos>:
 8006170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006172:	ec51 0b10 	vmov	r0, r1, d0
 8006176:	4a1e      	ldr	r2, [pc, #120]	; (80061f0 <cos+0x80>)
 8006178:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800617c:	4293      	cmp	r3, r2
 800617e:	dc06      	bgt.n	800618e <cos+0x1e>
 8006180:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80061e8 <cos+0x78>
 8006184:	f000 fc18 	bl	80069b8 <__kernel_cos>
 8006188:	ec51 0b10 	vmov	r0, r1, d0
 800618c:	e007      	b.n	800619e <cos+0x2e>
 800618e:	4a19      	ldr	r2, [pc, #100]	; (80061f4 <cos+0x84>)
 8006190:	4293      	cmp	r3, r2
 8006192:	dd09      	ble.n	80061a8 <cos+0x38>
 8006194:	ee10 2a10 	vmov	r2, s0
 8006198:	460b      	mov	r3, r1
 800619a:	f7fa f819 	bl	80001d0 <__aeabi_dsub>
 800619e:	ec41 0b10 	vmov	d0, r0, r1
 80061a2:	b005      	add	sp, #20
 80061a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80061a8:	4668      	mov	r0, sp
 80061aa:	f000 f961 	bl	8006470 <__ieee754_rem_pio2>
 80061ae:	f000 0003 	and.w	r0, r0, #3
 80061b2:	2801      	cmp	r0, #1
 80061b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061b8:	ed9d 0b00 	vldr	d0, [sp]
 80061bc:	d007      	beq.n	80061ce <cos+0x5e>
 80061be:	2802      	cmp	r0, #2
 80061c0:	d00e      	beq.n	80061e0 <cos+0x70>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d0de      	beq.n	8006184 <cos+0x14>
 80061c6:	2001      	movs	r0, #1
 80061c8:	f000 fffe 	bl	80071c8 <__kernel_sin>
 80061cc:	e7dc      	b.n	8006188 <cos+0x18>
 80061ce:	f000 fffb 	bl	80071c8 <__kernel_sin>
 80061d2:	ec53 2b10 	vmov	r2, r3, d0
 80061d6:	ee10 0a10 	vmov	r0, s0
 80061da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80061de:	e7de      	b.n	800619e <cos+0x2e>
 80061e0:	f000 fbea 	bl	80069b8 <__kernel_cos>
 80061e4:	e7f5      	b.n	80061d2 <cos+0x62>
 80061e6:	bf00      	nop
	...
 80061f0:	3fe921fb 	.word	0x3fe921fb
 80061f4:	7fefffff 	.word	0x7fefffff

080061f8 <atan2>:
 80061f8:	f000 b85a 	b.w	80062b0 <__ieee754_atan2>

080061fc <sqrt>:
 80061fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006200:	ed2d 8b02 	vpush	{d8}
 8006204:	b08b      	sub	sp, #44	; 0x2c
 8006206:	ec55 4b10 	vmov	r4, r5, d0
 800620a:	f000 fb23 	bl	8006854 <__ieee754_sqrt>
 800620e:	4b26      	ldr	r3, [pc, #152]	; (80062a8 <sqrt+0xac>)
 8006210:	eeb0 8a40 	vmov.f32	s16, s0
 8006214:	eef0 8a60 	vmov.f32	s17, s1
 8006218:	f993 6000 	ldrsb.w	r6, [r3]
 800621c:	1c73      	adds	r3, r6, #1
 800621e:	d02a      	beq.n	8006276 <sqrt+0x7a>
 8006220:	4622      	mov	r2, r4
 8006222:	462b      	mov	r3, r5
 8006224:	4620      	mov	r0, r4
 8006226:	4629      	mov	r1, r5
 8006228:	f7fa fc24 	bl	8000a74 <__aeabi_dcmpun>
 800622c:	4607      	mov	r7, r0
 800622e:	bb10      	cbnz	r0, 8006276 <sqrt+0x7a>
 8006230:	f04f 0800 	mov.w	r8, #0
 8006234:	f04f 0900 	mov.w	r9, #0
 8006238:	4642      	mov	r2, r8
 800623a:	464b      	mov	r3, r9
 800623c:	4620      	mov	r0, r4
 800623e:	4629      	mov	r1, r5
 8006240:	f7fa fbf0 	bl	8000a24 <__aeabi_dcmplt>
 8006244:	b1b8      	cbz	r0, 8006276 <sqrt+0x7a>
 8006246:	2301      	movs	r3, #1
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	4b18      	ldr	r3, [pc, #96]	; (80062ac <sqrt+0xb0>)
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	9708      	str	r7, [sp, #32]
 8006250:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006254:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006258:	b9b6      	cbnz	r6, 8006288 <sqrt+0x8c>
 800625a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800625e:	4668      	mov	r0, sp
 8006260:	f001 fa9e 	bl	80077a0 <matherr>
 8006264:	b1d0      	cbz	r0, 800629c <sqrt+0xa0>
 8006266:	9b08      	ldr	r3, [sp, #32]
 8006268:	b11b      	cbz	r3, 8006272 <sqrt+0x76>
 800626a:	f7ff ff4f 	bl	800610c <__errno>
 800626e:	9b08      	ldr	r3, [sp, #32]
 8006270:	6003      	str	r3, [r0, #0]
 8006272:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006276:	eeb0 0a48 	vmov.f32	s0, s16
 800627a:	eef0 0a68 	vmov.f32	s1, s17
 800627e:	b00b      	add	sp, #44	; 0x2c
 8006280:	ecbd 8b02 	vpop	{d8}
 8006284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006288:	4642      	mov	r2, r8
 800628a:	464b      	mov	r3, r9
 800628c:	4640      	mov	r0, r8
 800628e:	4649      	mov	r1, r9
 8006290:	f7fa fa80 	bl	8000794 <__aeabi_ddiv>
 8006294:	2e02      	cmp	r6, #2
 8006296:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800629a:	d1e0      	bne.n	800625e <sqrt+0x62>
 800629c:	f7ff ff36 	bl	800610c <__errno>
 80062a0:	2321      	movs	r3, #33	; 0x21
 80062a2:	6003      	str	r3, [r0, #0]
 80062a4:	e7df      	b.n	8006266 <sqrt+0x6a>
 80062a6:	bf00      	nop
 80062a8:	200000b0 	.word	0x200000b0
 80062ac:	080078f0 	.word	0x080078f0

080062b0 <__ieee754_atan2>:
 80062b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b4:	ec57 6b11 	vmov	r6, r7, d1
 80062b8:	4273      	negs	r3, r6
 80062ba:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80062be:	4333      	orrs	r3, r6
 80062c0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8006468 <__ieee754_atan2+0x1b8>
 80062c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80062c8:	4573      	cmp	r3, lr
 80062ca:	ec51 0b10 	vmov	r0, r1, d0
 80062ce:	ee11 8a10 	vmov	r8, s2
 80062d2:	d80a      	bhi.n	80062ea <__ieee754_atan2+0x3a>
 80062d4:	4244      	negs	r4, r0
 80062d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80062da:	4304      	orrs	r4, r0
 80062dc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80062e0:	4574      	cmp	r4, lr
 80062e2:	468c      	mov	ip, r1
 80062e4:	ee10 9a10 	vmov	r9, s0
 80062e8:	d907      	bls.n	80062fa <__ieee754_atan2+0x4a>
 80062ea:	4632      	mov	r2, r6
 80062ec:	463b      	mov	r3, r7
 80062ee:	f7f9 ff71 	bl	80001d4 <__adddf3>
 80062f2:	ec41 0b10 	vmov	d0, r0, r1
 80062f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062fa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80062fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006302:	4334      	orrs	r4, r6
 8006304:	d103      	bne.n	800630e <__ieee754_atan2+0x5e>
 8006306:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800630a:	f001 b819 	b.w	8007340 <atan>
 800630e:	17bc      	asrs	r4, r7, #30
 8006310:	f004 0402 	and.w	r4, r4, #2
 8006314:	ea53 0909 	orrs.w	r9, r3, r9
 8006318:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800631c:	d107      	bne.n	800632e <__ieee754_atan2+0x7e>
 800631e:	2c02      	cmp	r4, #2
 8006320:	d073      	beq.n	800640a <__ieee754_atan2+0x15a>
 8006322:	2c03      	cmp	r4, #3
 8006324:	d1e5      	bne.n	80062f2 <__ieee754_atan2+0x42>
 8006326:	a13e      	add	r1, pc, #248	; (adr r1, 8006420 <__ieee754_atan2+0x170>)
 8006328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800632c:	e7e1      	b.n	80062f2 <__ieee754_atan2+0x42>
 800632e:	ea52 0808 	orrs.w	r8, r2, r8
 8006332:	d106      	bne.n	8006342 <__ieee754_atan2+0x92>
 8006334:	f1bc 0f00 	cmp.w	ip, #0
 8006338:	da6b      	bge.n	8006412 <__ieee754_atan2+0x162>
 800633a:	a13b      	add	r1, pc, #236	; (adr r1, 8006428 <__ieee754_atan2+0x178>)
 800633c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006340:	e7d7      	b.n	80062f2 <__ieee754_atan2+0x42>
 8006342:	4572      	cmp	r2, lr
 8006344:	d120      	bne.n	8006388 <__ieee754_atan2+0xd8>
 8006346:	4293      	cmp	r3, r2
 8006348:	d111      	bne.n	800636e <__ieee754_atan2+0xbe>
 800634a:	2c02      	cmp	r4, #2
 800634c:	d007      	beq.n	800635e <__ieee754_atan2+0xae>
 800634e:	2c03      	cmp	r4, #3
 8006350:	d009      	beq.n	8006366 <__ieee754_atan2+0xb6>
 8006352:	2c01      	cmp	r4, #1
 8006354:	d155      	bne.n	8006402 <__ieee754_atan2+0x152>
 8006356:	a136      	add	r1, pc, #216	; (adr r1, 8006430 <__ieee754_atan2+0x180>)
 8006358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800635c:	e7c9      	b.n	80062f2 <__ieee754_atan2+0x42>
 800635e:	a136      	add	r1, pc, #216	; (adr r1, 8006438 <__ieee754_atan2+0x188>)
 8006360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006364:	e7c5      	b.n	80062f2 <__ieee754_atan2+0x42>
 8006366:	a136      	add	r1, pc, #216	; (adr r1, 8006440 <__ieee754_atan2+0x190>)
 8006368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800636c:	e7c1      	b.n	80062f2 <__ieee754_atan2+0x42>
 800636e:	2c02      	cmp	r4, #2
 8006370:	d04b      	beq.n	800640a <__ieee754_atan2+0x15a>
 8006372:	2c03      	cmp	r4, #3
 8006374:	d0d7      	beq.n	8006326 <__ieee754_atan2+0x76>
 8006376:	2c01      	cmp	r4, #1
 8006378:	f04f 0000 	mov.w	r0, #0
 800637c:	d102      	bne.n	8006384 <__ieee754_atan2+0xd4>
 800637e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006382:	e7b6      	b.n	80062f2 <__ieee754_atan2+0x42>
 8006384:	2100      	movs	r1, #0
 8006386:	e7b4      	b.n	80062f2 <__ieee754_atan2+0x42>
 8006388:	4573      	cmp	r3, lr
 800638a:	d0d3      	beq.n	8006334 <__ieee754_atan2+0x84>
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	151b      	asrs	r3, r3, #20
 8006390:	2b3c      	cmp	r3, #60	; 0x3c
 8006392:	dc1e      	bgt.n	80063d2 <__ieee754_atan2+0x122>
 8006394:	2f00      	cmp	r7, #0
 8006396:	da01      	bge.n	800639c <__ieee754_atan2+0xec>
 8006398:	333c      	adds	r3, #60	; 0x3c
 800639a:	db1e      	blt.n	80063da <__ieee754_atan2+0x12a>
 800639c:	4632      	mov	r2, r6
 800639e:	463b      	mov	r3, r7
 80063a0:	f7fa f9f8 	bl	8000794 <__aeabi_ddiv>
 80063a4:	ec41 0b10 	vmov	d0, r0, r1
 80063a8:	f001 f96a 	bl	8007680 <fabs>
 80063ac:	f000 ffc8 	bl	8007340 <atan>
 80063b0:	ec51 0b10 	vmov	r0, r1, d0
 80063b4:	2c01      	cmp	r4, #1
 80063b6:	d013      	beq.n	80063e0 <__ieee754_atan2+0x130>
 80063b8:	2c02      	cmp	r4, #2
 80063ba:	d015      	beq.n	80063e8 <__ieee754_atan2+0x138>
 80063bc:	2c00      	cmp	r4, #0
 80063be:	d098      	beq.n	80062f2 <__ieee754_atan2+0x42>
 80063c0:	a321      	add	r3, pc, #132	; (adr r3, 8006448 <__ieee754_atan2+0x198>)
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f7f9 ff03 	bl	80001d0 <__aeabi_dsub>
 80063ca:	a321      	add	r3, pc, #132	; (adr r3, 8006450 <__ieee754_atan2+0x1a0>)
 80063cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d0:	e014      	b.n	80063fc <__ieee754_atan2+0x14c>
 80063d2:	a121      	add	r1, pc, #132	; (adr r1, 8006458 <__ieee754_atan2+0x1a8>)
 80063d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063d8:	e7ec      	b.n	80063b4 <__ieee754_atan2+0x104>
 80063da:	2000      	movs	r0, #0
 80063dc:	2100      	movs	r1, #0
 80063de:	e7e9      	b.n	80063b4 <__ieee754_atan2+0x104>
 80063e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063e4:	4619      	mov	r1, r3
 80063e6:	e784      	b.n	80062f2 <__ieee754_atan2+0x42>
 80063e8:	a317      	add	r3, pc, #92	; (adr r3, 8006448 <__ieee754_atan2+0x198>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f7f9 feef 	bl	80001d0 <__aeabi_dsub>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	a116      	add	r1, pc, #88	; (adr r1, 8006450 <__ieee754_atan2+0x1a0>)
 80063f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063fc:	f7f9 fee8 	bl	80001d0 <__aeabi_dsub>
 8006400:	e777      	b.n	80062f2 <__ieee754_atan2+0x42>
 8006402:	a117      	add	r1, pc, #92	; (adr r1, 8006460 <__ieee754_atan2+0x1b0>)
 8006404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006408:	e773      	b.n	80062f2 <__ieee754_atan2+0x42>
 800640a:	a111      	add	r1, pc, #68	; (adr r1, 8006450 <__ieee754_atan2+0x1a0>)
 800640c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006410:	e76f      	b.n	80062f2 <__ieee754_atan2+0x42>
 8006412:	a111      	add	r1, pc, #68	; (adr r1, 8006458 <__ieee754_atan2+0x1a8>)
 8006414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006418:	e76b      	b.n	80062f2 <__ieee754_atan2+0x42>
 800641a:	bf00      	nop
 800641c:	f3af 8000 	nop.w
 8006420:	54442d18 	.word	0x54442d18
 8006424:	c00921fb 	.word	0xc00921fb
 8006428:	54442d18 	.word	0x54442d18
 800642c:	bff921fb 	.word	0xbff921fb
 8006430:	54442d18 	.word	0x54442d18
 8006434:	bfe921fb 	.word	0xbfe921fb
 8006438:	7f3321d2 	.word	0x7f3321d2
 800643c:	4002d97c 	.word	0x4002d97c
 8006440:	7f3321d2 	.word	0x7f3321d2
 8006444:	c002d97c 	.word	0xc002d97c
 8006448:	33145c07 	.word	0x33145c07
 800644c:	3ca1a626 	.word	0x3ca1a626
 8006450:	54442d18 	.word	0x54442d18
 8006454:	400921fb 	.word	0x400921fb
 8006458:	54442d18 	.word	0x54442d18
 800645c:	3ff921fb 	.word	0x3ff921fb
 8006460:	54442d18 	.word	0x54442d18
 8006464:	3fe921fb 	.word	0x3fe921fb
 8006468:	7ff00000 	.word	0x7ff00000
 800646c:	00000000 	.word	0x00000000

08006470 <__ieee754_rem_pio2>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	ec57 6b10 	vmov	r6, r7, d0
 8006478:	4bc3      	ldr	r3, [pc, #780]	; (8006788 <__ieee754_rem_pio2+0x318>)
 800647a:	b08d      	sub	sp, #52	; 0x34
 800647c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006480:	4598      	cmp	r8, r3
 8006482:	4604      	mov	r4, r0
 8006484:	9704      	str	r7, [sp, #16]
 8006486:	dc07      	bgt.n	8006498 <__ieee754_rem_pio2+0x28>
 8006488:	2200      	movs	r2, #0
 800648a:	2300      	movs	r3, #0
 800648c:	ed84 0b00 	vstr	d0, [r4]
 8006490:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006494:	2500      	movs	r5, #0
 8006496:	e027      	b.n	80064e8 <__ieee754_rem_pio2+0x78>
 8006498:	4bbc      	ldr	r3, [pc, #752]	; (800678c <__ieee754_rem_pio2+0x31c>)
 800649a:	4598      	cmp	r8, r3
 800649c:	dc75      	bgt.n	800658a <__ieee754_rem_pio2+0x11a>
 800649e:	9b04      	ldr	r3, [sp, #16]
 80064a0:	4dbb      	ldr	r5, [pc, #748]	; (8006790 <__ieee754_rem_pio2+0x320>)
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	ee10 0a10 	vmov	r0, s0
 80064a8:	a3a9      	add	r3, pc, #676	; (adr r3, 8006750 <__ieee754_rem_pio2+0x2e0>)
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	4639      	mov	r1, r7
 80064b0:	dd36      	ble.n	8006520 <__ieee754_rem_pio2+0xb0>
 80064b2:	f7f9 fe8d 	bl	80001d0 <__aeabi_dsub>
 80064b6:	45a8      	cmp	r8, r5
 80064b8:	4606      	mov	r6, r0
 80064ba:	460f      	mov	r7, r1
 80064bc:	d018      	beq.n	80064f0 <__ieee754_rem_pio2+0x80>
 80064be:	a3a6      	add	r3, pc, #664	; (adr r3, 8006758 <__ieee754_rem_pio2+0x2e8>)
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	f7f9 fe84 	bl	80001d0 <__aeabi_dsub>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	e9c4 2300 	strd	r2, r3, [r4]
 80064d0:	4630      	mov	r0, r6
 80064d2:	4639      	mov	r1, r7
 80064d4:	f7f9 fe7c 	bl	80001d0 <__aeabi_dsub>
 80064d8:	a39f      	add	r3, pc, #636	; (adr r3, 8006758 <__ieee754_rem_pio2+0x2e8>)
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	f7f9 fe77 	bl	80001d0 <__aeabi_dsub>
 80064e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80064e6:	2501      	movs	r5, #1
 80064e8:	4628      	mov	r0, r5
 80064ea:	b00d      	add	sp, #52	; 0x34
 80064ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f0:	a39b      	add	r3, pc, #620	; (adr r3, 8006760 <__ieee754_rem_pio2+0x2f0>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7f9 fe6b 	bl	80001d0 <__aeabi_dsub>
 80064fa:	a39b      	add	r3, pc, #620	; (adr r3, 8006768 <__ieee754_rem_pio2+0x2f8>)
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	4606      	mov	r6, r0
 8006502:	460f      	mov	r7, r1
 8006504:	f7f9 fe64 	bl	80001d0 <__aeabi_dsub>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	e9c4 2300 	strd	r2, r3, [r4]
 8006510:	4630      	mov	r0, r6
 8006512:	4639      	mov	r1, r7
 8006514:	f7f9 fe5c 	bl	80001d0 <__aeabi_dsub>
 8006518:	a393      	add	r3, pc, #588	; (adr r3, 8006768 <__ieee754_rem_pio2+0x2f8>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	e7de      	b.n	80064de <__ieee754_rem_pio2+0x6e>
 8006520:	f7f9 fe58 	bl	80001d4 <__adddf3>
 8006524:	45a8      	cmp	r8, r5
 8006526:	4606      	mov	r6, r0
 8006528:	460f      	mov	r7, r1
 800652a:	d016      	beq.n	800655a <__ieee754_rem_pio2+0xea>
 800652c:	a38a      	add	r3, pc, #552	; (adr r3, 8006758 <__ieee754_rem_pio2+0x2e8>)
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	f7f9 fe4f 	bl	80001d4 <__adddf3>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	e9c4 2300 	strd	r2, r3, [r4]
 800653e:	4630      	mov	r0, r6
 8006540:	4639      	mov	r1, r7
 8006542:	f7f9 fe45 	bl	80001d0 <__aeabi_dsub>
 8006546:	a384      	add	r3, pc, #528	; (adr r3, 8006758 <__ieee754_rem_pio2+0x2e8>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f7f9 fe42 	bl	80001d4 <__adddf3>
 8006550:	f04f 35ff 	mov.w	r5, #4294967295
 8006554:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006558:	e7c6      	b.n	80064e8 <__ieee754_rem_pio2+0x78>
 800655a:	a381      	add	r3, pc, #516	; (adr r3, 8006760 <__ieee754_rem_pio2+0x2f0>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7f9 fe38 	bl	80001d4 <__adddf3>
 8006564:	a380      	add	r3, pc, #512	; (adr r3, 8006768 <__ieee754_rem_pio2+0x2f8>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	4606      	mov	r6, r0
 800656c:	460f      	mov	r7, r1
 800656e:	f7f9 fe31 	bl	80001d4 <__adddf3>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	e9c4 2300 	strd	r2, r3, [r4]
 800657a:	4630      	mov	r0, r6
 800657c:	4639      	mov	r1, r7
 800657e:	f7f9 fe27 	bl	80001d0 <__aeabi_dsub>
 8006582:	a379      	add	r3, pc, #484	; (adr r3, 8006768 <__ieee754_rem_pio2+0x2f8>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	e7e0      	b.n	800654c <__ieee754_rem_pio2+0xdc>
 800658a:	4b82      	ldr	r3, [pc, #520]	; (8006794 <__ieee754_rem_pio2+0x324>)
 800658c:	4598      	cmp	r8, r3
 800658e:	f300 80d0 	bgt.w	8006732 <__ieee754_rem_pio2+0x2c2>
 8006592:	f001 f875 	bl	8007680 <fabs>
 8006596:	ec57 6b10 	vmov	r6, r7, d0
 800659a:	ee10 0a10 	vmov	r0, s0
 800659e:	a374      	add	r3, pc, #464	; (adr r3, 8006770 <__ieee754_rem_pio2+0x300>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	4639      	mov	r1, r7
 80065a6:	f7f9 ffcb 	bl	8000540 <__aeabi_dmul>
 80065aa:	2200      	movs	r2, #0
 80065ac:	4b7a      	ldr	r3, [pc, #488]	; (8006798 <__ieee754_rem_pio2+0x328>)
 80065ae:	f7f9 fe11 	bl	80001d4 <__adddf3>
 80065b2:	f7fa fa75 	bl	8000aa0 <__aeabi_d2iz>
 80065b6:	4605      	mov	r5, r0
 80065b8:	f7f9 ff58 	bl	800046c <__aeabi_i2d>
 80065bc:	a364      	add	r3, pc, #400	; (adr r3, 8006750 <__ieee754_rem_pio2+0x2e0>)
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065c6:	f7f9 ffbb 	bl	8000540 <__aeabi_dmul>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4630      	mov	r0, r6
 80065d0:	4639      	mov	r1, r7
 80065d2:	f7f9 fdfd 	bl	80001d0 <__aeabi_dsub>
 80065d6:	a360      	add	r3, pc, #384	; (adr r3, 8006758 <__ieee754_rem_pio2+0x2e8>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	4682      	mov	sl, r0
 80065de:	468b      	mov	fp, r1
 80065e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065e4:	f7f9 ffac 	bl	8000540 <__aeabi_dmul>
 80065e8:	2d1f      	cmp	r5, #31
 80065ea:	4606      	mov	r6, r0
 80065ec:	460f      	mov	r7, r1
 80065ee:	dc0c      	bgt.n	800660a <__ieee754_rem_pio2+0x19a>
 80065f0:	1e6a      	subs	r2, r5, #1
 80065f2:	4b6a      	ldr	r3, [pc, #424]	; (800679c <__ieee754_rem_pio2+0x32c>)
 80065f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f8:	4543      	cmp	r3, r8
 80065fa:	d006      	beq.n	800660a <__ieee754_rem_pio2+0x19a>
 80065fc:	4632      	mov	r2, r6
 80065fe:	463b      	mov	r3, r7
 8006600:	4650      	mov	r0, sl
 8006602:	4659      	mov	r1, fp
 8006604:	f7f9 fde4 	bl	80001d0 <__aeabi_dsub>
 8006608:	e00e      	b.n	8006628 <__ieee754_rem_pio2+0x1b8>
 800660a:	4632      	mov	r2, r6
 800660c:	463b      	mov	r3, r7
 800660e:	4650      	mov	r0, sl
 8006610:	4659      	mov	r1, fp
 8006612:	f7f9 fddd 	bl	80001d0 <__aeabi_dsub>
 8006616:	ea4f 5328 	mov.w	r3, r8, asr #20
 800661a:	9305      	str	r3, [sp, #20]
 800661c:	9a05      	ldr	r2, [sp, #20]
 800661e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b10      	cmp	r3, #16
 8006626:	dc02      	bgt.n	800662e <__ieee754_rem_pio2+0x1be>
 8006628:	e9c4 0100 	strd	r0, r1, [r4]
 800662c:	e039      	b.n	80066a2 <__ieee754_rem_pio2+0x232>
 800662e:	a34c      	add	r3, pc, #304	; (adr r3, 8006760 <__ieee754_rem_pio2+0x2f0>)
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006638:	f7f9 ff82 	bl	8000540 <__aeabi_dmul>
 800663c:	4606      	mov	r6, r0
 800663e:	460f      	mov	r7, r1
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4650      	mov	r0, sl
 8006646:	4659      	mov	r1, fp
 8006648:	f7f9 fdc2 	bl	80001d0 <__aeabi_dsub>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4680      	mov	r8, r0
 8006652:	4689      	mov	r9, r1
 8006654:	4650      	mov	r0, sl
 8006656:	4659      	mov	r1, fp
 8006658:	f7f9 fdba 	bl	80001d0 <__aeabi_dsub>
 800665c:	4632      	mov	r2, r6
 800665e:	463b      	mov	r3, r7
 8006660:	f7f9 fdb6 	bl	80001d0 <__aeabi_dsub>
 8006664:	a340      	add	r3, pc, #256	; (adr r3, 8006768 <__ieee754_rem_pio2+0x2f8>)
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	4606      	mov	r6, r0
 800666c:	460f      	mov	r7, r1
 800666e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006672:	f7f9 ff65 	bl	8000540 <__aeabi_dmul>
 8006676:	4632      	mov	r2, r6
 8006678:	463b      	mov	r3, r7
 800667a:	f7f9 fda9 	bl	80001d0 <__aeabi_dsub>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4606      	mov	r6, r0
 8006684:	460f      	mov	r7, r1
 8006686:	4640      	mov	r0, r8
 8006688:	4649      	mov	r1, r9
 800668a:	f7f9 fda1 	bl	80001d0 <__aeabi_dsub>
 800668e:	9a05      	ldr	r2, [sp, #20]
 8006690:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b31      	cmp	r3, #49	; 0x31
 8006698:	dc20      	bgt.n	80066dc <__ieee754_rem_pio2+0x26c>
 800669a:	e9c4 0100 	strd	r0, r1, [r4]
 800669e:	46c2      	mov	sl, r8
 80066a0:	46cb      	mov	fp, r9
 80066a2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80066a6:	4650      	mov	r0, sl
 80066a8:	4642      	mov	r2, r8
 80066aa:	464b      	mov	r3, r9
 80066ac:	4659      	mov	r1, fp
 80066ae:	f7f9 fd8f 	bl	80001d0 <__aeabi_dsub>
 80066b2:	463b      	mov	r3, r7
 80066b4:	4632      	mov	r2, r6
 80066b6:	f7f9 fd8b 	bl	80001d0 <__aeabi_dsub>
 80066ba:	9b04      	ldr	r3, [sp, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80066c2:	f6bf af11 	bge.w	80064e8 <__ieee754_rem_pio2+0x78>
 80066c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80066ca:	6063      	str	r3, [r4, #4]
 80066cc:	f8c4 8000 	str.w	r8, [r4]
 80066d0:	60a0      	str	r0, [r4, #8]
 80066d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066d6:	60e3      	str	r3, [r4, #12]
 80066d8:	426d      	negs	r5, r5
 80066da:	e705      	b.n	80064e8 <__ieee754_rem_pio2+0x78>
 80066dc:	a326      	add	r3, pc, #152	; (adr r3, 8006778 <__ieee754_rem_pio2+0x308>)
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066e6:	f7f9 ff2b 	bl	8000540 <__aeabi_dmul>
 80066ea:	4606      	mov	r6, r0
 80066ec:	460f      	mov	r7, r1
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4640      	mov	r0, r8
 80066f4:	4649      	mov	r1, r9
 80066f6:	f7f9 fd6b 	bl	80001d0 <__aeabi_dsub>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4682      	mov	sl, r0
 8006700:	468b      	mov	fp, r1
 8006702:	4640      	mov	r0, r8
 8006704:	4649      	mov	r1, r9
 8006706:	f7f9 fd63 	bl	80001d0 <__aeabi_dsub>
 800670a:	4632      	mov	r2, r6
 800670c:	463b      	mov	r3, r7
 800670e:	f7f9 fd5f 	bl	80001d0 <__aeabi_dsub>
 8006712:	a31b      	add	r3, pc, #108	; (adr r3, 8006780 <__ieee754_rem_pio2+0x310>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	4606      	mov	r6, r0
 800671a:	460f      	mov	r7, r1
 800671c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006720:	f7f9 ff0e 	bl	8000540 <__aeabi_dmul>
 8006724:	4632      	mov	r2, r6
 8006726:	463b      	mov	r3, r7
 8006728:	f7f9 fd52 	bl	80001d0 <__aeabi_dsub>
 800672c:	4606      	mov	r6, r0
 800672e:	460f      	mov	r7, r1
 8006730:	e764      	b.n	80065fc <__ieee754_rem_pio2+0x18c>
 8006732:	4b1b      	ldr	r3, [pc, #108]	; (80067a0 <__ieee754_rem_pio2+0x330>)
 8006734:	4598      	cmp	r8, r3
 8006736:	dd35      	ble.n	80067a4 <__ieee754_rem_pio2+0x334>
 8006738:	ee10 2a10 	vmov	r2, s0
 800673c:	463b      	mov	r3, r7
 800673e:	4630      	mov	r0, r6
 8006740:	4639      	mov	r1, r7
 8006742:	f7f9 fd45 	bl	80001d0 <__aeabi_dsub>
 8006746:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800674a:	e9c4 0100 	strd	r0, r1, [r4]
 800674e:	e6a1      	b.n	8006494 <__ieee754_rem_pio2+0x24>
 8006750:	54400000 	.word	0x54400000
 8006754:	3ff921fb 	.word	0x3ff921fb
 8006758:	1a626331 	.word	0x1a626331
 800675c:	3dd0b461 	.word	0x3dd0b461
 8006760:	1a600000 	.word	0x1a600000
 8006764:	3dd0b461 	.word	0x3dd0b461
 8006768:	2e037073 	.word	0x2e037073
 800676c:	3ba3198a 	.word	0x3ba3198a
 8006770:	6dc9c883 	.word	0x6dc9c883
 8006774:	3fe45f30 	.word	0x3fe45f30
 8006778:	2e000000 	.word	0x2e000000
 800677c:	3ba3198a 	.word	0x3ba3198a
 8006780:	252049c1 	.word	0x252049c1
 8006784:	397b839a 	.word	0x397b839a
 8006788:	3fe921fb 	.word	0x3fe921fb
 800678c:	4002d97b 	.word	0x4002d97b
 8006790:	3ff921fb 	.word	0x3ff921fb
 8006794:	413921fb 	.word	0x413921fb
 8006798:	3fe00000 	.word	0x3fe00000
 800679c:	080078f8 	.word	0x080078f8
 80067a0:	7fefffff 	.word	0x7fefffff
 80067a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80067a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80067ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80067b0:	4630      	mov	r0, r6
 80067b2:	460f      	mov	r7, r1
 80067b4:	f7fa f974 	bl	8000aa0 <__aeabi_d2iz>
 80067b8:	f7f9 fe58 	bl	800046c <__aeabi_i2d>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4630      	mov	r0, r6
 80067c2:	4639      	mov	r1, r7
 80067c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067c8:	f7f9 fd02 	bl	80001d0 <__aeabi_dsub>
 80067cc:	2200      	movs	r2, #0
 80067ce:	4b1f      	ldr	r3, [pc, #124]	; (800684c <__ieee754_rem_pio2+0x3dc>)
 80067d0:	f7f9 feb6 	bl	8000540 <__aeabi_dmul>
 80067d4:	460f      	mov	r7, r1
 80067d6:	4606      	mov	r6, r0
 80067d8:	f7fa f962 	bl	8000aa0 <__aeabi_d2iz>
 80067dc:	f7f9 fe46 	bl	800046c <__aeabi_i2d>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4630      	mov	r0, r6
 80067e6:	4639      	mov	r1, r7
 80067e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067ec:	f7f9 fcf0 	bl	80001d0 <__aeabi_dsub>
 80067f0:	2200      	movs	r2, #0
 80067f2:	4b16      	ldr	r3, [pc, #88]	; (800684c <__ieee754_rem_pio2+0x3dc>)
 80067f4:	f7f9 fea4 	bl	8000540 <__aeabi_dmul>
 80067f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80067fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006800:	f04f 0803 	mov.w	r8, #3
 8006804:	2600      	movs	r6, #0
 8006806:	2700      	movs	r7, #0
 8006808:	4632      	mov	r2, r6
 800680a:	463b      	mov	r3, r7
 800680c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006810:	f108 3aff 	add.w	sl, r8, #4294967295
 8006814:	f7fa f8fc 	bl	8000a10 <__aeabi_dcmpeq>
 8006818:	b9b0      	cbnz	r0, 8006848 <__ieee754_rem_pio2+0x3d8>
 800681a:	4b0d      	ldr	r3, [pc, #52]	; (8006850 <__ieee754_rem_pio2+0x3e0>)
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	2302      	movs	r3, #2
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	462a      	mov	r2, r5
 8006824:	4643      	mov	r3, r8
 8006826:	4621      	mov	r1, r4
 8006828:	a806      	add	r0, sp, #24
 800682a:	f000 f98d 	bl	8006b48 <__kernel_rem_pio2>
 800682e:	9b04      	ldr	r3, [sp, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	4605      	mov	r5, r0
 8006834:	f6bf ae58 	bge.w	80064e8 <__ieee754_rem_pio2+0x78>
 8006838:	6863      	ldr	r3, [r4, #4]
 800683a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800683e:	6063      	str	r3, [r4, #4]
 8006840:	68e3      	ldr	r3, [r4, #12]
 8006842:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006846:	e746      	b.n	80066d6 <__ieee754_rem_pio2+0x266>
 8006848:	46d0      	mov	r8, sl
 800684a:	e7dd      	b.n	8006808 <__ieee754_rem_pio2+0x398>
 800684c:	41700000 	.word	0x41700000
 8006850:	08007978 	.word	0x08007978

08006854 <__ieee754_sqrt>:
 8006854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006858:	4955      	ldr	r1, [pc, #340]	; (80069b0 <__ieee754_sqrt+0x15c>)
 800685a:	ec55 4b10 	vmov	r4, r5, d0
 800685e:	43a9      	bics	r1, r5
 8006860:	462b      	mov	r3, r5
 8006862:	462a      	mov	r2, r5
 8006864:	d112      	bne.n	800688c <__ieee754_sqrt+0x38>
 8006866:	ee10 2a10 	vmov	r2, s0
 800686a:	ee10 0a10 	vmov	r0, s0
 800686e:	4629      	mov	r1, r5
 8006870:	f7f9 fe66 	bl	8000540 <__aeabi_dmul>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4620      	mov	r0, r4
 800687a:	4629      	mov	r1, r5
 800687c:	f7f9 fcaa 	bl	80001d4 <__adddf3>
 8006880:	4604      	mov	r4, r0
 8006882:	460d      	mov	r5, r1
 8006884:	ec45 4b10 	vmov	d0, r4, r5
 8006888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800688c:	2d00      	cmp	r5, #0
 800688e:	ee10 0a10 	vmov	r0, s0
 8006892:	4621      	mov	r1, r4
 8006894:	dc0f      	bgt.n	80068b6 <__ieee754_sqrt+0x62>
 8006896:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800689a:	4330      	orrs	r0, r6
 800689c:	d0f2      	beq.n	8006884 <__ieee754_sqrt+0x30>
 800689e:	b155      	cbz	r5, 80068b6 <__ieee754_sqrt+0x62>
 80068a0:	ee10 2a10 	vmov	r2, s0
 80068a4:	4620      	mov	r0, r4
 80068a6:	4629      	mov	r1, r5
 80068a8:	f7f9 fc92 	bl	80001d0 <__aeabi_dsub>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	f7f9 ff70 	bl	8000794 <__aeabi_ddiv>
 80068b4:	e7e4      	b.n	8006880 <__ieee754_sqrt+0x2c>
 80068b6:	151b      	asrs	r3, r3, #20
 80068b8:	d073      	beq.n	80069a2 <__ieee754_sqrt+0x14e>
 80068ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80068be:	07dd      	lsls	r5, r3, #31
 80068c0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80068c4:	bf48      	it	mi
 80068c6:	0fc8      	lsrmi	r0, r1, #31
 80068c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80068cc:	bf44      	itt	mi
 80068ce:	0049      	lslmi	r1, r1, #1
 80068d0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80068d4:	2500      	movs	r5, #0
 80068d6:	1058      	asrs	r0, r3, #1
 80068d8:	0fcb      	lsrs	r3, r1, #31
 80068da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80068de:	0049      	lsls	r1, r1, #1
 80068e0:	2316      	movs	r3, #22
 80068e2:	462c      	mov	r4, r5
 80068e4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80068e8:	19a7      	adds	r7, r4, r6
 80068ea:	4297      	cmp	r7, r2
 80068ec:	bfde      	ittt	le
 80068ee:	19bc      	addle	r4, r7, r6
 80068f0:	1bd2      	suble	r2, r2, r7
 80068f2:	19ad      	addle	r5, r5, r6
 80068f4:	0fcf      	lsrs	r7, r1, #31
 80068f6:	3b01      	subs	r3, #1
 80068f8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80068fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006900:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006904:	d1f0      	bne.n	80068e8 <__ieee754_sqrt+0x94>
 8006906:	f04f 0c20 	mov.w	ip, #32
 800690a:	469e      	mov	lr, r3
 800690c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006910:	42a2      	cmp	r2, r4
 8006912:	eb06 070e 	add.w	r7, r6, lr
 8006916:	dc02      	bgt.n	800691e <__ieee754_sqrt+0xca>
 8006918:	d112      	bne.n	8006940 <__ieee754_sqrt+0xec>
 800691a:	428f      	cmp	r7, r1
 800691c:	d810      	bhi.n	8006940 <__ieee754_sqrt+0xec>
 800691e:	2f00      	cmp	r7, #0
 8006920:	eb07 0e06 	add.w	lr, r7, r6
 8006924:	da42      	bge.n	80069ac <__ieee754_sqrt+0x158>
 8006926:	f1be 0f00 	cmp.w	lr, #0
 800692a:	db3f      	blt.n	80069ac <__ieee754_sqrt+0x158>
 800692c:	f104 0801 	add.w	r8, r4, #1
 8006930:	1b12      	subs	r2, r2, r4
 8006932:	428f      	cmp	r7, r1
 8006934:	bf88      	it	hi
 8006936:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800693a:	1bc9      	subs	r1, r1, r7
 800693c:	4433      	add	r3, r6
 800693e:	4644      	mov	r4, r8
 8006940:	0052      	lsls	r2, r2, #1
 8006942:	f1bc 0c01 	subs.w	ip, ip, #1
 8006946:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800694a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800694e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006952:	d1dd      	bne.n	8006910 <__ieee754_sqrt+0xbc>
 8006954:	430a      	orrs	r2, r1
 8006956:	d006      	beq.n	8006966 <__ieee754_sqrt+0x112>
 8006958:	1c5c      	adds	r4, r3, #1
 800695a:	bf13      	iteet	ne
 800695c:	3301      	addne	r3, #1
 800695e:	3501      	addeq	r5, #1
 8006960:	4663      	moveq	r3, ip
 8006962:	f023 0301 	bicne.w	r3, r3, #1
 8006966:	106a      	asrs	r2, r5, #1
 8006968:	085b      	lsrs	r3, r3, #1
 800696a:	07e9      	lsls	r1, r5, #31
 800696c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006970:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006974:	bf48      	it	mi
 8006976:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800697a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800697e:	461c      	mov	r4, r3
 8006980:	e780      	b.n	8006884 <__ieee754_sqrt+0x30>
 8006982:	0aca      	lsrs	r2, r1, #11
 8006984:	3815      	subs	r0, #21
 8006986:	0549      	lsls	r1, r1, #21
 8006988:	2a00      	cmp	r2, #0
 800698a:	d0fa      	beq.n	8006982 <__ieee754_sqrt+0x12e>
 800698c:	02d6      	lsls	r6, r2, #11
 800698e:	d50a      	bpl.n	80069a6 <__ieee754_sqrt+0x152>
 8006990:	f1c3 0420 	rsb	r4, r3, #32
 8006994:	fa21 f404 	lsr.w	r4, r1, r4
 8006998:	1e5d      	subs	r5, r3, #1
 800699a:	4099      	lsls	r1, r3
 800699c:	4322      	orrs	r2, r4
 800699e:	1b43      	subs	r3, r0, r5
 80069a0:	e78b      	b.n	80068ba <__ieee754_sqrt+0x66>
 80069a2:	4618      	mov	r0, r3
 80069a4:	e7f0      	b.n	8006988 <__ieee754_sqrt+0x134>
 80069a6:	0052      	lsls	r2, r2, #1
 80069a8:	3301      	adds	r3, #1
 80069aa:	e7ef      	b.n	800698c <__ieee754_sqrt+0x138>
 80069ac:	46a0      	mov	r8, r4
 80069ae:	e7bf      	b.n	8006930 <__ieee754_sqrt+0xdc>
 80069b0:	7ff00000 	.word	0x7ff00000
 80069b4:	00000000 	.word	0x00000000

080069b8 <__kernel_cos>:
 80069b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	ec59 8b10 	vmov	r8, r9, d0
 80069c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80069c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80069c8:	ed2d 8b02 	vpush	{d8}
 80069cc:	eeb0 8a41 	vmov.f32	s16, s2
 80069d0:	eef0 8a61 	vmov.f32	s17, s3
 80069d4:	da07      	bge.n	80069e6 <__kernel_cos+0x2e>
 80069d6:	ee10 0a10 	vmov	r0, s0
 80069da:	4649      	mov	r1, r9
 80069dc:	f7fa f860 	bl	8000aa0 <__aeabi_d2iz>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	f000 8089 	beq.w	8006af8 <__kernel_cos+0x140>
 80069e6:	4642      	mov	r2, r8
 80069e8:	464b      	mov	r3, r9
 80069ea:	4640      	mov	r0, r8
 80069ec:	4649      	mov	r1, r9
 80069ee:	f7f9 fda7 	bl	8000540 <__aeabi_dmul>
 80069f2:	2200      	movs	r2, #0
 80069f4:	4b4e      	ldr	r3, [pc, #312]	; (8006b30 <__kernel_cos+0x178>)
 80069f6:	4604      	mov	r4, r0
 80069f8:	460d      	mov	r5, r1
 80069fa:	f7f9 fda1 	bl	8000540 <__aeabi_dmul>
 80069fe:	a340      	add	r3, pc, #256	; (adr r3, 8006b00 <__kernel_cos+0x148>)
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	4682      	mov	sl, r0
 8006a06:	468b      	mov	fp, r1
 8006a08:	4620      	mov	r0, r4
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	f7f9 fd98 	bl	8000540 <__aeabi_dmul>
 8006a10:	a33d      	add	r3, pc, #244	; (adr r3, 8006b08 <__kernel_cos+0x150>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7f9 fbdd 	bl	80001d4 <__adddf3>
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	f7f9 fd8f 	bl	8000540 <__aeabi_dmul>
 8006a22:	a33b      	add	r3, pc, #236	; (adr r3, 8006b10 <__kernel_cos+0x158>)
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f7f9 fbd2 	bl	80001d0 <__aeabi_dsub>
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	462b      	mov	r3, r5
 8006a30:	f7f9 fd86 	bl	8000540 <__aeabi_dmul>
 8006a34:	a338      	add	r3, pc, #224	; (adr r3, 8006b18 <__kernel_cos+0x160>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f7f9 fbcb 	bl	80001d4 <__adddf3>
 8006a3e:	4622      	mov	r2, r4
 8006a40:	462b      	mov	r3, r5
 8006a42:	f7f9 fd7d 	bl	8000540 <__aeabi_dmul>
 8006a46:	a336      	add	r3, pc, #216	; (adr r3, 8006b20 <__kernel_cos+0x168>)
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f7f9 fbc0 	bl	80001d0 <__aeabi_dsub>
 8006a50:	4622      	mov	r2, r4
 8006a52:	462b      	mov	r3, r5
 8006a54:	f7f9 fd74 	bl	8000540 <__aeabi_dmul>
 8006a58:	a333      	add	r3, pc, #204	; (adr r3, 8006b28 <__kernel_cos+0x170>)
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f7f9 fbb9 	bl	80001d4 <__adddf3>
 8006a62:	4622      	mov	r2, r4
 8006a64:	462b      	mov	r3, r5
 8006a66:	f7f9 fd6b 	bl	8000540 <__aeabi_dmul>
 8006a6a:	4622      	mov	r2, r4
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	f7f9 fd67 	bl	8000540 <__aeabi_dmul>
 8006a72:	ec53 2b18 	vmov	r2, r3, d8
 8006a76:	4604      	mov	r4, r0
 8006a78:	460d      	mov	r5, r1
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	f7f9 fd5f 	bl	8000540 <__aeabi_dmul>
 8006a82:	460b      	mov	r3, r1
 8006a84:	4602      	mov	r2, r0
 8006a86:	4629      	mov	r1, r5
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f7f9 fba1 	bl	80001d0 <__aeabi_dsub>
 8006a8e:	4b29      	ldr	r3, [pc, #164]	; (8006b34 <__kernel_cos+0x17c>)
 8006a90:	429e      	cmp	r6, r3
 8006a92:	4680      	mov	r8, r0
 8006a94:	4689      	mov	r9, r1
 8006a96:	dc11      	bgt.n	8006abc <__kernel_cos+0x104>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4650      	mov	r0, sl
 8006a9e:	4659      	mov	r1, fp
 8006aa0:	f7f9 fb96 	bl	80001d0 <__aeabi_dsub>
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4924      	ldr	r1, [pc, #144]	; (8006b38 <__kernel_cos+0x180>)
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	2000      	movs	r0, #0
 8006aac:	f7f9 fb90 	bl	80001d0 <__aeabi_dsub>
 8006ab0:	ecbd 8b02 	vpop	{d8}
 8006ab4:	ec41 0b10 	vmov	d0, r0, r1
 8006ab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abc:	4b1f      	ldr	r3, [pc, #124]	; (8006b3c <__kernel_cos+0x184>)
 8006abe:	491e      	ldr	r1, [pc, #120]	; (8006b38 <__kernel_cos+0x180>)
 8006ac0:	429e      	cmp	r6, r3
 8006ac2:	bfcc      	ite	gt
 8006ac4:	4d1e      	ldrgt	r5, [pc, #120]	; (8006b40 <__kernel_cos+0x188>)
 8006ac6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006aca:	2400      	movs	r4, #0
 8006acc:	4622      	mov	r2, r4
 8006ace:	462b      	mov	r3, r5
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	f7f9 fb7d 	bl	80001d0 <__aeabi_dsub>
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	4606      	mov	r6, r0
 8006ada:	460f      	mov	r7, r1
 8006adc:	462b      	mov	r3, r5
 8006ade:	4650      	mov	r0, sl
 8006ae0:	4659      	mov	r1, fp
 8006ae2:	f7f9 fb75 	bl	80001d0 <__aeabi_dsub>
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	464b      	mov	r3, r9
 8006aea:	f7f9 fb71 	bl	80001d0 <__aeabi_dsub>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4630      	mov	r0, r6
 8006af4:	4639      	mov	r1, r7
 8006af6:	e7d9      	b.n	8006aac <__kernel_cos+0xf4>
 8006af8:	2000      	movs	r0, #0
 8006afa:	490f      	ldr	r1, [pc, #60]	; (8006b38 <__kernel_cos+0x180>)
 8006afc:	e7d8      	b.n	8006ab0 <__kernel_cos+0xf8>
 8006afe:	bf00      	nop
 8006b00:	be8838d4 	.word	0xbe8838d4
 8006b04:	bda8fae9 	.word	0xbda8fae9
 8006b08:	bdb4b1c4 	.word	0xbdb4b1c4
 8006b0c:	3e21ee9e 	.word	0x3e21ee9e
 8006b10:	809c52ad 	.word	0x809c52ad
 8006b14:	3e927e4f 	.word	0x3e927e4f
 8006b18:	19cb1590 	.word	0x19cb1590
 8006b1c:	3efa01a0 	.word	0x3efa01a0
 8006b20:	16c15177 	.word	0x16c15177
 8006b24:	3f56c16c 	.word	0x3f56c16c
 8006b28:	5555554c 	.word	0x5555554c
 8006b2c:	3fa55555 	.word	0x3fa55555
 8006b30:	3fe00000 	.word	0x3fe00000
 8006b34:	3fd33332 	.word	0x3fd33332
 8006b38:	3ff00000 	.word	0x3ff00000
 8006b3c:	3fe90000 	.word	0x3fe90000
 8006b40:	3fd20000 	.word	0x3fd20000
 8006b44:	00000000 	.word	0x00000000

08006b48 <__kernel_rem_pio2>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	ed2d 8b02 	vpush	{d8}
 8006b50:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006b54:	1ed4      	subs	r4, r2, #3
 8006b56:	9308      	str	r3, [sp, #32]
 8006b58:	9101      	str	r1, [sp, #4]
 8006b5a:	4bc5      	ldr	r3, [pc, #788]	; (8006e70 <__kernel_rem_pio2+0x328>)
 8006b5c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006b5e:	9009      	str	r0, [sp, #36]	; 0x24
 8006b60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b64:	9304      	str	r3, [sp, #16]
 8006b66:	9b08      	ldr	r3, [sp, #32]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	9307      	str	r3, [sp, #28]
 8006b6c:	2318      	movs	r3, #24
 8006b6e:	fb94 f4f3 	sdiv	r4, r4, r3
 8006b72:	f06f 0317 	mvn.w	r3, #23
 8006b76:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006b7a:	fb04 3303 	mla	r3, r4, r3, r3
 8006b7e:	eb03 0a02 	add.w	sl, r3, r2
 8006b82:	9b04      	ldr	r3, [sp, #16]
 8006b84:	9a07      	ldr	r2, [sp, #28]
 8006b86:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006e60 <__kernel_rem_pio2+0x318>
 8006b8a:	eb03 0802 	add.w	r8, r3, r2
 8006b8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006b90:	1aa7      	subs	r7, r4, r2
 8006b92:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006b96:	ae22      	add	r6, sp, #136	; 0x88
 8006b98:	2500      	movs	r5, #0
 8006b9a:	4545      	cmp	r5, r8
 8006b9c:	dd13      	ble.n	8006bc6 <__kernel_rem_pio2+0x7e>
 8006b9e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006e60 <__kernel_rem_pio2+0x318>
 8006ba2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	9b04      	ldr	r3, [sp, #16]
 8006baa:	429e      	cmp	r6, r3
 8006bac:	dc32      	bgt.n	8006c14 <__kernel_rem_pio2+0xcc>
 8006bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb0:	9302      	str	r3, [sp, #8]
 8006bb2:	9b08      	ldr	r3, [sp, #32]
 8006bb4:	199d      	adds	r5, r3, r6
 8006bb6:	ab22      	add	r3, sp, #136	; 0x88
 8006bb8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006bbc:	9306      	str	r3, [sp, #24]
 8006bbe:	ec59 8b18 	vmov	r8, r9, d8
 8006bc2:	2700      	movs	r7, #0
 8006bc4:	e01f      	b.n	8006c06 <__kernel_rem_pio2+0xbe>
 8006bc6:	42ef      	cmn	r7, r5
 8006bc8:	d407      	bmi.n	8006bda <__kernel_rem_pio2+0x92>
 8006bca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006bce:	f7f9 fc4d 	bl	800046c <__aeabi_i2d>
 8006bd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006bd6:	3501      	adds	r5, #1
 8006bd8:	e7df      	b.n	8006b9a <__kernel_rem_pio2+0x52>
 8006bda:	ec51 0b18 	vmov	r0, r1, d8
 8006bde:	e7f8      	b.n	8006bd2 <__kernel_rem_pio2+0x8a>
 8006be0:	9906      	ldr	r1, [sp, #24]
 8006be2:	9d02      	ldr	r5, [sp, #8]
 8006be4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006be8:	9106      	str	r1, [sp, #24]
 8006bea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006bee:	9502      	str	r5, [sp, #8]
 8006bf0:	f7f9 fca6 	bl	8000540 <__aeabi_dmul>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	f7f9 faea 	bl	80001d4 <__adddf3>
 8006c00:	3701      	adds	r7, #1
 8006c02:	4680      	mov	r8, r0
 8006c04:	4689      	mov	r9, r1
 8006c06:	9b07      	ldr	r3, [sp, #28]
 8006c08:	429f      	cmp	r7, r3
 8006c0a:	dde9      	ble.n	8006be0 <__kernel_rem_pio2+0x98>
 8006c0c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006c10:	3601      	adds	r6, #1
 8006c12:	e7c9      	b.n	8006ba8 <__kernel_rem_pio2+0x60>
 8006c14:	9b04      	ldr	r3, [sp, #16]
 8006c16:	aa0e      	add	r2, sp, #56	; 0x38
 8006c18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c1c:	930c      	str	r3, [sp, #48]	; 0x30
 8006c1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006c20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006c24:	9c04      	ldr	r4, [sp, #16]
 8006c26:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c28:	ab9a      	add	r3, sp, #616	; 0x268
 8006c2a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006c2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c36:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006c3a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006c3e:	ab9a      	add	r3, sp, #616	; 0x268
 8006c40:	445b      	add	r3, fp
 8006c42:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006c46:	2500      	movs	r5, #0
 8006c48:	1b63      	subs	r3, r4, r5
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	dc78      	bgt.n	8006d40 <__kernel_rem_pio2+0x1f8>
 8006c4e:	4650      	mov	r0, sl
 8006c50:	ec49 8b10 	vmov	d0, r8, r9
 8006c54:	f000 fda8 	bl	80077a8 <scalbn>
 8006c58:	ec57 6b10 	vmov	r6, r7, d0
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006c62:	ee10 0a10 	vmov	r0, s0
 8006c66:	4639      	mov	r1, r7
 8006c68:	f7f9 fc6a 	bl	8000540 <__aeabi_dmul>
 8006c6c:	ec41 0b10 	vmov	d0, r0, r1
 8006c70:	f000 fd12 	bl	8007698 <floor>
 8006c74:	2200      	movs	r2, #0
 8006c76:	ec51 0b10 	vmov	r0, r1, d0
 8006c7a:	4b7e      	ldr	r3, [pc, #504]	; (8006e74 <__kernel_rem_pio2+0x32c>)
 8006c7c:	f7f9 fc60 	bl	8000540 <__aeabi_dmul>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4630      	mov	r0, r6
 8006c86:	4639      	mov	r1, r7
 8006c88:	f7f9 faa2 	bl	80001d0 <__aeabi_dsub>
 8006c8c:	460f      	mov	r7, r1
 8006c8e:	4606      	mov	r6, r0
 8006c90:	f7f9 ff06 	bl	8000aa0 <__aeabi_d2iz>
 8006c94:	9006      	str	r0, [sp, #24]
 8006c96:	f7f9 fbe9 	bl	800046c <__aeabi_i2d>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 fa95 	bl	80001d0 <__aeabi_dsub>
 8006ca6:	f1ba 0f00 	cmp.w	sl, #0
 8006caa:	4606      	mov	r6, r0
 8006cac:	460f      	mov	r7, r1
 8006cae:	dd6c      	ble.n	8006d8a <__kernel_rem_pio2+0x242>
 8006cb0:	1e62      	subs	r2, r4, #1
 8006cb2:	ab0e      	add	r3, sp, #56	; 0x38
 8006cb4:	f1ca 0118 	rsb	r1, sl, #24
 8006cb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006cbc:	9d06      	ldr	r5, [sp, #24]
 8006cbe:	fa40 f301 	asr.w	r3, r0, r1
 8006cc2:	441d      	add	r5, r3
 8006cc4:	408b      	lsls	r3, r1
 8006cc6:	1ac0      	subs	r0, r0, r3
 8006cc8:	ab0e      	add	r3, sp, #56	; 0x38
 8006cca:	9506      	str	r5, [sp, #24]
 8006ccc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006cd0:	f1ca 0317 	rsb	r3, sl, #23
 8006cd4:	fa40 f303 	asr.w	r3, r0, r3
 8006cd8:	9302      	str	r3, [sp, #8]
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	dd62      	ble.n	8006da6 <__kernel_rem_pio2+0x25e>
 8006ce0:	9b06      	ldr	r3, [sp, #24]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	9306      	str	r3, [sp, #24]
 8006ce8:	4615      	mov	r5, r2
 8006cea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006cee:	4294      	cmp	r4, r2
 8006cf0:	f300 8095 	bgt.w	8006e1e <__kernel_rem_pio2+0x2d6>
 8006cf4:	f1ba 0f00 	cmp.w	sl, #0
 8006cf8:	dd07      	ble.n	8006d0a <__kernel_rem_pio2+0x1c2>
 8006cfa:	f1ba 0f01 	cmp.w	sl, #1
 8006cfe:	f000 80a2 	beq.w	8006e46 <__kernel_rem_pio2+0x2fe>
 8006d02:	f1ba 0f02 	cmp.w	sl, #2
 8006d06:	f000 80c1 	beq.w	8006e8c <__kernel_rem_pio2+0x344>
 8006d0a:	9b02      	ldr	r3, [sp, #8]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d14a      	bne.n	8006da6 <__kernel_rem_pio2+0x25e>
 8006d10:	4632      	mov	r2, r6
 8006d12:	463b      	mov	r3, r7
 8006d14:	2000      	movs	r0, #0
 8006d16:	4958      	ldr	r1, [pc, #352]	; (8006e78 <__kernel_rem_pio2+0x330>)
 8006d18:	f7f9 fa5a 	bl	80001d0 <__aeabi_dsub>
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	2d00      	cmp	r5, #0
 8006d22:	d040      	beq.n	8006da6 <__kernel_rem_pio2+0x25e>
 8006d24:	4650      	mov	r0, sl
 8006d26:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006e68 <__kernel_rem_pio2+0x320>
 8006d2a:	f000 fd3d 	bl	80077a8 <scalbn>
 8006d2e:	4630      	mov	r0, r6
 8006d30:	4639      	mov	r1, r7
 8006d32:	ec53 2b10 	vmov	r2, r3, d0
 8006d36:	f7f9 fa4b 	bl	80001d0 <__aeabi_dsub>
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	460f      	mov	r7, r1
 8006d3e:	e032      	b.n	8006da6 <__kernel_rem_pio2+0x25e>
 8006d40:	2200      	movs	r2, #0
 8006d42:	4b4e      	ldr	r3, [pc, #312]	; (8006e7c <__kernel_rem_pio2+0x334>)
 8006d44:	4640      	mov	r0, r8
 8006d46:	4649      	mov	r1, r9
 8006d48:	f7f9 fbfa 	bl	8000540 <__aeabi_dmul>
 8006d4c:	f7f9 fea8 	bl	8000aa0 <__aeabi_d2iz>
 8006d50:	f7f9 fb8c 	bl	800046c <__aeabi_i2d>
 8006d54:	2200      	movs	r2, #0
 8006d56:	4b4a      	ldr	r3, [pc, #296]	; (8006e80 <__kernel_rem_pio2+0x338>)
 8006d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5c:	f7f9 fbf0 	bl	8000540 <__aeabi_dmul>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4640      	mov	r0, r8
 8006d66:	4649      	mov	r1, r9
 8006d68:	f7f9 fa32 	bl	80001d0 <__aeabi_dsub>
 8006d6c:	f7f9 fe98 	bl	8000aa0 <__aeabi_d2iz>
 8006d70:	ab0e      	add	r3, sp, #56	; 0x38
 8006d72:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006d76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d7e:	f7f9 fa29 	bl	80001d4 <__adddf3>
 8006d82:	3501      	adds	r5, #1
 8006d84:	4680      	mov	r8, r0
 8006d86:	4689      	mov	r9, r1
 8006d88:	e75e      	b.n	8006c48 <__kernel_rem_pio2+0x100>
 8006d8a:	d105      	bne.n	8006d98 <__kernel_rem_pio2+0x250>
 8006d8c:	1e63      	subs	r3, r4, #1
 8006d8e:	aa0e      	add	r2, sp, #56	; 0x38
 8006d90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006d94:	15c3      	asrs	r3, r0, #23
 8006d96:	e79f      	b.n	8006cd8 <__kernel_rem_pio2+0x190>
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4b3a      	ldr	r3, [pc, #232]	; (8006e84 <__kernel_rem_pio2+0x33c>)
 8006d9c:	f7f9 fe56 	bl	8000a4c <__aeabi_dcmpge>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d139      	bne.n	8006e18 <__kernel_rem_pio2+0x2d0>
 8006da4:	9002      	str	r0, [sp, #8]
 8006da6:	2200      	movs	r2, #0
 8006da8:	2300      	movs	r3, #0
 8006daa:	4630      	mov	r0, r6
 8006dac:	4639      	mov	r1, r7
 8006dae:	f7f9 fe2f 	bl	8000a10 <__aeabi_dcmpeq>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	f000 80c7 	beq.w	8006f46 <__kernel_rem_pio2+0x3fe>
 8006db8:	1e65      	subs	r5, r4, #1
 8006dba:	462b      	mov	r3, r5
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	9904      	ldr	r1, [sp, #16]
 8006dc0:	428b      	cmp	r3, r1
 8006dc2:	da6a      	bge.n	8006e9a <__kernel_rem_pio2+0x352>
 8006dc4:	2a00      	cmp	r2, #0
 8006dc6:	f000 8088 	beq.w	8006eda <__kernel_rem_pio2+0x392>
 8006dca:	ab0e      	add	r3, sp, #56	; 0x38
 8006dcc:	f1aa 0a18 	sub.w	sl, sl, #24
 8006dd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80b4 	beq.w	8006f42 <__kernel_rem_pio2+0x3fa>
 8006dda:	4650      	mov	r0, sl
 8006ddc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006e68 <__kernel_rem_pio2+0x320>
 8006de0:	f000 fce2 	bl	80077a8 <scalbn>
 8006de4:	00ec      	lsls	r4, r5, #3
 8006de6:	ab72      	add	r3, sp, #456	; 0x1c8
 8006de8:	191e      	adds	r6, r3, r4
 8006dea:	ec59 8b10 	vmov	r8, r9, d0
 8006dee:	f106 0a08 	add.w	sl, r6, #8
 8006df2:	462f      	mov	r7, r5
 8006df4:	2f00      	cmp	r7, #0
 8006df6:	f280 80df 	bge.w	8006fb8 <__kernel_rem_pio2+0x470>
 8006dfa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006e60 <__kernel_rem_pio2+0x318>
 8006dfe:	f04f 0a00 	mov.w	sl, #0
 8006e02:	eba5 030a 	sub.w	r3, r5, sl
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f2c0 810a 	blt.w	8007020 <__kernel_rem_pio2+0x4d8>
 8006e0c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006e88 <__kernel_rem_pio2+0x340>
 8006e10:	ec59 8b18 	vmov	r8, r9, d8
 8006e14:	2700      	movs	r7, #0
 8006e16:	e0f5      	b.n	8007004 <__kernel_rem_pio2+0x4bc>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	9302      	str	r3, [sp, #8]
 8006e1c:	e760      	b.n	8006ce0 <__kernel_rem_pio2+0x198>
 8006e1e:	ab0e      	add	r3, sp, #56	; 0x38
 8006e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e24:	b94d      	cbnz	r5, 8006e3a <__kernel_rem_pio2+0x2f2>
 8006e26:	b12b      	cbz	r3, 8006e34 <__kernel_rem_pio2+0x2ec>
 8006e28:	a80e      	add	r0, sp, #56	; 0x38
 8006e2a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006e2e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006e32:	2301      	movs	r3, #1
 8006e34:	3201      	adds	r2, #1
 8006e36:	461d      	mov	r5, r3
 8006e38:	e759      	b.n	8006cee <__kernel_rem_pio2+0x1a6>
 8006e3a:	a80e      	add	r0, sp, #56	; 0x38
 8006e3c:	1acb      	subs	r3, r1, r3
 8006e3e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006e42:	462b      	mov	r3, r5
 8006e44:	e7f6      	b.n	8006e34 <__kernel_rem_pio2+0x2ec>
 8006e46:	1e62      	subs	r2, r4, #1
 8006e48:	ab0e      	add	r3, sp, #56	; 0x38
 8006e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006e52:	a90e      	add	r1, sp, #56	; 0x38
 8006e54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006e58:	e757      	b.n	8006d0a <__kernel_rem_pio2+0x1c2>
 8006e5a:	bf00      	nop
 8006e5c:	f3af 8000 	nop.w
	...
 8006e6c:	3ff00000 	.word	0x3ff00000
 8006e70:	08007ac0 	.word	0x08007ac0
 8006e74:	40200000 	.word	0x40200000
 8006e78:	3ff00000 	.word	0x3ff00000
 8006e7c:	3e700000 	.word	0x3e700000
 8006e80:	41700000 	.word	0x41700000
 8006e84:	3fe00000 	.word	0x3fe00000
 8006e88:	08007a80 	.word	0x08007a80
 8006e8c:	1e62      	subs	r2, r4, #1
 8006e8e:	ab0e      	add	r3, sp, #56	; 0x38
 8006e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e94:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006e98:	e7db      	b.n	8006e52 <__kernel_rem_pio2+0x30a>
 8006e9a:	a90e      	add	r1, sp, #56	; 0x38
 8006e9c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	e78b      	b.n	8006dbe <__kernel_rem_pio2+0x276>
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d0fa      	beq.n	8006ea6 <__kernel_rem_pio2+0x35e>
 8006eb0:	9a08      	ldr	r2, [sp, #32]
 8006eb2:	4422      	add	r2, r4
 8006eb4:	00d2      	lsls	r2, r2, #3
 8006eb6:	a922      	add	r1, sp, #136	; 0x88
 8006eb8:	18e3      	adds	r3, r4, r3
 8006eba:	9206      	str	r2, [sp, #24]
 8006ebc:	440a      	add	r2, r1
 8006ebe:	9302      	str	r3, [sp, #8]
 8006ec0:	f10b 0108 	add.w	r1, fp, #8
 8006ec4:	f102 0308 	add.w	r3, r2, #8
 8006ec8:	1c66      	adds	r6, r4, #1
 8006eca:	910a      	str	r1, [sp, #40]	; 0x28
 8006ecc:	2500      	movs	r5, #0
 8006ece:	930d      	str	r3, [sp, #52]	; 0x34
 8006ed0:	9b02      	ldr	r3, [sp, #8]
 8006ed2:	42b3      	cmp	r3, r6
 8006ed4:	da04      	bge.n	8006ee0 <__kernel_rem_pio2+0x398>
 8006ed6:	461c      	mov	r4, r3
 8006ed8:	e6a6      	b.n	8006c28 <__kernel_rem_pio2+0xe0>
 8006eda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006edc:	2301      	movs	r3, #1
 8006ede:	e7e3      	b.n	8006ea8 <__kernel_rem_pio2+0x360>
 8006ee0:	9b06      	ldr	r3, [sp, #24]
 8006ee2:	18ef      	adds	r7, r5, r3
 8006ee4:	ab22      	add	r3, sp, #136	; 0x88
 8006ee6:	441f      	add	r7, r3
 8006ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006eee:	f7f9 fabd 	bl	800046c <__aeabi_i2d>
 8006ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef4:	461c      	mov	r4, r3
 8006ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ef8:	e9c7 0100 	strd	r0, r1, [r7]
 8006efc:	eb03 0b05 	add.w	fp, r3, r5
 8006f00:	2700      	movs	r7, #0
 8006f02:	f04f 0800 	mov.w	r8, #0
 8006f06:	f04f 0900 	mov.w	r9, #0
 8006f0a:	9b07      	ldr	r3, [sp, #28]
 8006f0c:	429f      	cmp	r7, r3
 8006f0e:	dd08      	ble.n	8006f22 <__kernel_rem_pio2+0x3da>
 8006f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f12:	aa72      	add	r2, sp, #456	; 0x1c8
 8006f14:	18eb      	adds	r3, r5, r3
 8006f16:	4413      	add	r3, r2
 8006f18:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8006f1c:	3601      	adds	r6, #1
 8006f1e:	3508      	adds	r5, #8
 8006f20:	e7d6      	b.n	8006ed0 <__kernel_rem_pio2+0x388>
 8006f22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006f26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006f2a:	f7f9 fb09 	bl	8000540 <__aeabi_dmul>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 f94d 	bl	80001d4 <__adddf3>
 8006f3a:	3701      	adds	r7, #1
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	4689      	mov	r9, r1
 8006f40:	e7e3      	b.n	8006f0a <__kernel_rem_pio2+0x3c2>
 8006f42:	3d01      	subs	r5, #1
 8006f44:	e741      	b.n	8006dca <__kernel_rem_pio2+0x282>
 8006f46:	f1ca 0000 	rsb	r0, sl, #0
 8006f4a:	ec47 6b10 	vmov	d0, r6, r7
 8006f4e:	f000 fc2b 	bl	80077a8 <scalbn>
 8006f52:	ec57 6b10 	vmov	r6, r7, d0
 8006f56:	2200      	movs	r2, #0
 8006f58:	4b99      	ldr	r3, [pc, #612]	; (80071c0 <__kernel_rem_pio2+0x678>)
 8006f5a:	ee10 0a10 	vmov	r0, s0
 8006f5e:	4639      	mov	r1, r7
 8006f60:	f7f9 fd74 	bl	8000a4c <__aeabi_dcmpge>
 8006f64:	b1f8      	cbz	r0, 8006fa6 <__kernel_rem_pio2+0x45e>
 8006f66:	2200      	movs	r2, #0
 8006f68:	4b96      	ldr	r3, [pc, #600]	; (80071c4 <__kernel_rem_pio2+0x67c>)
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	4639      	mov	r1, r7
 8006f6e:	f7f9 fae7 	bl	8000540 <__aeabi_dmul>
 8006f72:	f7f9 fd95 	bl	8000aa0 <__aeabi_d2iz>
 8006f76:	4680      	mov	r8, r0
 8006f78:	f7f9 fa78 	bl	800046c <__aeabi_i2d>
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4b90      	ldr	r3, [pc, #576]	; (80071c0 <__kernel_rem_pio2+0x678>)
 8006f80:	f7f9 fade 	bl	8000540 <__aeabi_dmul>
 8006f84:	460b      	mov	r3, r1
 8006f86:	4602      	mov	r2, r0
 8006f88:	4639      	mov	r1, r7
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f7f9 f920 	bl	80001d0 <__aeabi_dsub>
 8006f90:	f7f9 fd86 	bl	8000aa0 <__aeabi_d2iz>
 8006f94:	1c65      	adds	r5, r4, #1
 8006f96:	ab0e      	add	r3, sp, #56	; 0x38
 8006f98:	f10a 0a18 	add.w	sl, sl, #24
 8006f9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006fa0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006fa4:	e719      	b.n	8006dda <__kernel_rem_pio2+0x292>
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	4639      	mov	r1, r7
 8006faa:	f7f9 fd79 	bl	8000aa0 <__aeabi_d2iz>
 8006fae:	ab0e      	add	r3, sp, #56	; 0x38
 8006fb0:	4625      	mov	r5, r4
 8006fb2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006fb6:	e710      	b.n	8006dda <__kernel_rem_pio2+0x292>
 8006fb8:	ab0e      	add	r3, sp, #56	; 0x38
 8006fba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006fbe:	f7f9 fa55 	bl	800046c <__aeabi_i2d>
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	f7f9 fabb 	bl	8000540 <__aeabi_dmul>
 8006fca:	2200      	movs	r2, #0
 8006fcc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006fd0:	4b7c      	ldr	r3, [pc, #496]	; (80071c4 <__kernel_rem_pio2+0x67c>)
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	f7f9 fab3 	bl	8000540 <__aeabi_dmul>
 8006fda:	3f01      	subs	r7, #1
 8006fdc:	4680      	mov	r8, r0
 8006fde:	4689      	mov	r9, r1
 8006fe0:	e708      	b.n	8006df4 <__kernel_rem_pio2+0x2ac>
 8006fe2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006fee:	f7f9 faa7 	bl	8000540 <__aeabi_dmul>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	f7f9 f8eb 	bl	80001d4 <__adddf3>
 8006ffe:	3701      	adds	r7, #1
 8007000:	4680      	mov	r8, r0
 8007002:	4689      	mov	r9, r1
 8007004:	9b04      	ldr	r3, [sp, #16]
 8007006:	429f      	cmp	r7, r3
 8007008:	dc01      	bgt.n	800700e <__kernel_rem_pio2+0x4c6>
 800700a:	45ba      	cmp	sl, r7
 800700c:	dae9      	bge.n	8006fe2 <__kernel_rem_pio2+0x49a>
 800700e:	ab4a      	add	r3, sp, #296	; 0x128
 8007010:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007014:	e9c3 8900 	strd	r8, r9, [r3]
 8007018:	f10a 0a01 	add.w	sl, sl, #1
 800701c:	3e08      	subs	r6, #8
 800701e:	e6f0      	b.n	8006e02 <__kernel_rem_pio2+0x2ba>
 8007020:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007022:	2b03      	cmp	r3, #3
 8007024:	d85b      	bhi.n	80070de <__kernel_rem_pio2+0x596>
 8007026:	e8df f003 	tbb	[pc, r3]
 800702a:	264a      	.short	0x264a
 800702c:	0226      	.short	0x0226
 800702e:	ab9a      	add	r3, sp, #616	; 0x268
 8007030:	441c      	add	r4, r3
 8007032:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007036:	46a2      	mov	sl, r4
 8007038:	46ab      	mov	fp, r5
 800703a:	f1bb 0f00 	cmp.w	fp, #0
 800703e:	dc6c      	bgt.n	800711a <__kernel_rem_pio2+0x5d2>
 8007040:	46a2      	mov	sl, r4
 8007042:	46ab      	mov	fp, r5
 8007044:	f1bb 0f01 	cmp.w	fp, #1
 8007048:	f300 8086 	bgt.w	8007158 <__kernel_rem_pio2+0x610>
 800704c:	2000      	movs	r0, #0
 800704e:	2100      	movs	r1, #0
 8007050:	2d01      	cmp	r5, #1
 8007052:	f300 80a0 	bgt.w	8007196 <__kernel_rem_pio2+0x64e>
 8007056:	9b02      	ldr	r3, [sp, #8]
 8007058:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800705c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007060:	2b00      	cmp	r3, #0
 8007062:	f040 809e 	bne.w	80071a2 <__kernel_rem_pio2+0x65a>
 8007066:	9b01      	ldr	r3, [sp, #4]
 8007068:	e9c3 7800 	strd	r7, r8, [r3]
 800706c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007070:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007074:	e033      	b.n	80070de <__kernel_rem_pio2+0x596>
 8007076:	3408      	adds	r4, #8
 8007078:	ab4a      	add	r3, sp, #296	; 0x128
 800707a:	441c      	add	r4, r3
 800707c:	462e      	mov	r6, r5
 800707e:	2000      	movs	r0, #0
 8007080:	2100      	movs	r1, #0
 8007082:	2e00      	cmp	r6, #0
 8007084:	da3a      	bge.n	80070fc <__kernel_rem_pio2+0x5b4>
 8007086:	9b02      	ldr	r3, [sp, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d03d      	beq.n	8007108 <__kernel_rem_pio2+0x5c0>
 800708c:	4602      	mov	r2, r0
 800708e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007092:	9c01      	ldr	r4, [sp, #4]
 8007094:	e9c4 2300 	strd	r2, r3, [r4]
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80070a0:	f7f9 f896 	bl	80001d0 <__aeabi_dsub>
 80070a4:	ae4c      	add	r6, sp, #304	; 0x130
 80070a6:	2401      	movs	r4, #1
 80070a8:	42a5      	cmp	r5, r4
 80070aa:	da30      	bge.n	800710e <__kernel_rem_pio2+0x5c6>
 80070ac:	9b02      	ldr	r3, [sp, #8]
 80070ae:	b113      	cbz	r3, 80070b6 <__kernel_rem_pio2+0x56e>
 80070b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070b4:	4619      	mov	r1, r3
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80070bc:	e00f      	b.n	80070de <__kernel_rem_pio2+0x596>
 80070be:	ab9a      	add	r3, sp, #616	; 0x268
 80070c0:	441c      	add	r4, r3
 80070c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80070c6:	2000      	movs	r0, #0
 80070c8:	2100      	movs	r1, #0
 80070ca:	2d00      	cmp	r5, #0
 80070cc:	da10      	bge.n	80070f0 <__kernel_rem_pio2+0x5a8>
 80070ce:	9b02      	ldr	r3, [sp, #8]
 80070d0:	b113      	cbz	r3, 80070d8 <__kernel_rem_pio2+0x590>
 80070d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070d6:	4619      	mov	r1, r3
 80070d8:	9b01      	ldr	r3, [sp, #4]
 80070da:	e9c3 0100 	strd	r0, r1, [r3]
 80070de:	9b06      	ldr	r3, [sp, #24]
 80070e0:	f003 0007 	and.w	r0, r3, #7
 80070e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80070e8:	ecbd 8b02 	vpop	{d8}
 80070ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80070f4:	f7f9 f86e 	bl	80001d4 <__adddf3>
 80070f8:	3d01      	subs	r5, #1
 80070fa:	e7e6      	b.n	80070ca <__kernel_rem_pio2+0x582>
 80070fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007100:	f7f9 f868 	bl	80001d4 <__adddf3>
 8007104:	3e01      	subs	r6, #1
 8007106:	e7bc      	b.n	8007082 <__kernel_rem_pio2+0x53a>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	e7c1      	b.n	8007092 <__kernel_rem_pio2+0x54a>
 800710e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007112:	f7f9 f85f 	bl	80001d4 <__adddf3>
 8007116:	3401      	adds	r4, #1
 8007118:	e7c6      	b.n	80070a8 <__kernel_rem_pio2+0x560>
 800711a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800711e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007122:	4640      	mov	r0, r8
 8007124:	ec53 2b17 	vmov	r2, r3, d7
 8007128:	4649      	mov	r1, r9
 800712a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800712e:	f7f9 f851 	bl	80001d4 <__adddf3>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4606      	mov	r6, r0
 8007138:	460f      	mov	r7, r1
 800713a:	4640      	mov	r0, r8
 800713c:	4649      	mov	r1, r9
 800713e:	f7f9 f847 	bl	80001d0 <__aeabi_dsub>
 8007142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007146:	f7f9 f845 	bl	80001d4 <__adddf3>
 800714a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800714e:	e9ca 0100 	strd	r0, r1, [sl]
 8007152:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007156:	e770      	b.n	800703a <__kernel_rem_pio2+0x4f2>
 8007158:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800715c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007160:	4630      	mov	r0, r6
 8007162:	ec53 2b17 	vmov	r2, r3, d7
 8007166:	4639      	mov	r1, r7
 8007168:	ed8d 7b04 	vstr	d7, [sp, #16]
 800716c:	f7f9 f832 	bl	80001d4 <__adddf3>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4680      	mov	r8, r0
 8007176:	4689      	mov	r9, r1
 8007178:	4630      	mov	r0, r6
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 f828 	bl	80001d0 <__aeabi_dsub>
 8007180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007184:	f7f9 f826 	bl	80001d4 <__adddf3>
 8007188:	f10b 3bff 	add.w	fp, fp, #4294967295
 800718c:	e9ca 0100 	strd	r0, r1, [sl]
 8007190:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8007194:	e756      	b.n	8007044 <__kernel_rem_pio2+0x4fc>
 8007196:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800719a:	f7f9 f81b 	bl	80001d4 <__adddf3>
 800719e:	3d01      	subs	r5, #1
 80071a0:	e756      	b.n	8007050 <__kernel_rem_pio2+0x508>
 80071a2:	9b01      	ldr	r3, [sp, #4]
 80071a4:	9a01      	ldr	r2, [sp, #4]
 80071a6:	601f      	str	r7, [r3, #0]
 80071a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80071ac:	605c      	str	r4, [r3, #4]
 80071ae:	609d      	str	r5, [r3, #8]
 80071b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80071b4:	60d3      	str	r3, [r2, #12]
 80071b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ba:	6110      	str	r0, [r2, #16]
 80071bc:	6153      	str	r3, [r2, #20]
 80071be:	e78e      	b.n	80070de <__kernel_rem_pio2+0x596>
 80071c0:	41700000 	.word	0x41700000
 80071c4:	3e700000 	.word	0x3e700000

080071c8 <__kernel_sin>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	ec55 4b10 	vmov	r4, r5, d0
 80071d0:	b085      	sub	sp, #20
 80071d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80071d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80071da:	ed8d 1b00 	vstr	d1, [sp]
 80071de:	9002      	str	r0, [sp, #8]
 80071e0:	da06      	bge.n	80071f0 <__kernel_sin+0x28>
 80071e2:	ee10 0a10 	vmov	r0, s0
 80071e6:	4629      	mov	r1, r5
 80071e8:	f7f9 fc5a 	bl	8000aa0 <__aeabi_d2iz>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d051      	beq.n	8007294 <__kernel_sin+0xcc>
 80071f0:	4622      	mov	r2, r4
 80071f2:	462b      	mov	r3, r5
 80071f4:	4620      	mov	r0, r4
 80071f6:	4629      	mov	r1, r5
 80071f8:	f7f9 f9a2 	bl	8000540 <__aeabi_dmul>
 80071fc:	4682      	mov	sl, r0
 80071fe:	468b      	mov	fp, r1
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4620      	mov	r0, r4
 8007206:	4629      	mov	r1, r5
 8007208:	f7f9 f99a 	bl	8000540 <__aeabi_dmul>
 800720c:	a341      	add	r3, pc, #260	; (adr r3, 8007314 <__kernel_sin+0x14c>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	4680      	mov	r8, r0
 8007214:	4689      	mov	r9, r1
 8007216:	4650      	mov	r0, sl
 8007218:	4659      	mov	r1, fp
 800721a:	f7f9 f991 	bl	8000540 <__aeabi_dmul>
 800721e:	a33f      	add	r3, pc, #252	; (adr r3, 800731c <__kernel_sin+0x154>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f8 ffd4 	bl	80001d0 <__aeabi_dsub>
 8007228:	4652      	mov	r2, sl
 800722a:	465b      	mov	r3, fp
 800722c:	f7f9 f988 	bl	8000540 <__aeabi_dmul>
 8007230:	a33c      	add	r3, pc, #240	; (adr r3, 8007324 <__kernel_sin+0x15c>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f8 ffcd 	bl	80001d4 <__adddf3>
 800723a:	4652      	mov	r2, sl
 800723c:	465b      	mov	r3, fp
 800723e:	f7f9 f97f 	bl	8000540 <__aeabi_dmul>
 8007242:	a33a      	add	r3, pc, #232	; (adr r3, 800732c <__kernel_sin+0x164>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f8 ffc2 	bl	80001d0 <__aeabi_dsub>
 800724c:	4652      	mov	r2, sl
 800724e:	465b      	mov	r3, fp
 8007250:	f7f9 f976 	bl	8000540 <__aeabi_dmul>
 8007254:	a337      	add	r3, pc, #220	; (adr r3, 8007334 <__kernel_sin+0x16c>)
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f7f8 ffbb 	bl	80001d4 <__adddf3>
 800725e:	9b02      	ldr	r3, [sp, #8]
 8007260:	4606      	mov	r6, r0
 8007262:	460f      	mov	r7, r1
 8007264:	b9db      	cbnz	r3, 800729e <__kernel_sin+0xd6>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4650      	mov	r0, sl
 800726c:	4659      	mov	r1, fp
 800726e:	f7f9 f967 	bl	8000540 <__aeabi_dmul>
 8007272:	a325      	add	r3, pc, #148	; (adr r3, 8007308 <__kernel_sin+0x140>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f8 ffaa 	bl	80001d0 <__aeabi_dsub>
 800727c:	4642      	mov	r2, r8
 800727e:	464b      	mov	r3, r9
 8007280:	f7f9 f95e 	bl	8000540 <__aeabi_dmul>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4620      	mov	r0, r4
 800728a:	4629      	mov	r1, r5
 800728c:	f7f8 ffa2 	bl	80001d4 <__adddf3>
 8007290:	4604      	mov	r4, r0
 8007292:	460d      	mov	r5, r1
 8007294:	ec45 4b10 	vmov	d0, r4, r5
 8007298:	b005      	add	sp, #20
 800729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729e:	2200      	movs	r2, #0
 80072a0:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <__kernel_sin+0x148>)
 80072a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072a6:	f7f9 f94b 	bl	8000540 <__aeabi_dmul>
 80072aa:	4632      	mov	r2, r6
 80072ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b0:	463b      	mov	r3, r7
 80072b2:	4640      	mov	r0, r8
 80072b4:	4649      	mov	r1, r9
 80072b6:	f7f9 f943 	bl	8000540 <__aeabi_dmul>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072c2:	f7f8 ff85 	bl	80001d0 <__aeabi_dsub>
 80072c6:	4652      	mov	r2, sl
 80072c8:	465b      	mov	r3, fp
 80072ca:	f7f9 f939 	bl	8000540 <__aeabi_dmul>
 80072ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072d2:	f7f8 ff7d 	bl	80001d0 <__aeabi_dsub>
 80072d6:	a30c      	add	r3, pc, #48	; (adr r3, 8007308 <__kernel_sin+0x140>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	4606      	mov	r6, r0
 80072de:	460f      	mov	r7, r1
 80072e0:	4640      	mov	r0, r8
 80072e2:	4649      	mov	r1, r9
 80072e4:	f7f9 f92c 	bl	8000540 <__aeabi_dmul>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4630      	mov	r0, r6
 80072ee:	4639      	mov	r1, r7
 80072f0:	f7f8 ff70 	bl	80001d4 <__adddf3>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4620      	mov	r0, r4
 80072fa:	4629      	mov	r1, r5
 80072fc:	f7f8 ff68 	bl	80001d0 <__aeabi_dsub>
 8007300:	e7c6      	b.n	8007290 <__kernel_sin+0xc8>
 8007302:	bf00      	nop
 8007304:	f3af 8000 	nop.w
 8007308:	55555549 	.word	0x55555549
 800730c:	3fc55555 	.word	0x3fc55555
 8007310:	3fe00000 	.word	0x3fe00000
 8007314:	5acfd57c 	.word	0x5acfd57c
 8007318:	3de5d93a 	.word	0x3de5d93a
 800731c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007320:	3e5ae5e6 	.word	0x3e5ae5e6
 8007324:	57b1fe7d 	.word	0x57b1fe7d
 8007328:	3ec71de3 	.word	0x3ec71de3
 800732c:	19c161d5 	.word	0x19c161d5
 8007330:	3f2a01a0 	.word	0x3f2a01a0
 8007334:	1110f8a6 	.word	0x1110f8a6
 8007338:	3f811111 	.word	0x3f811111
 800733c:	00000000 	.word	0x00000000

08007340 <atan>:
 8007340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	ec55 4b10 	vmov	r4, r5, d0
 8007348:	4bc3      	ldr	r3, [pc, #780]	; (8007658 <atan+0x318>)
 800734a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800734e:	429e      	cmp	r6, r3
 8007350:	46ab      	mov	fp, r5
 8007352:	dd18      	ble.n	8007386 <atan+0x46>
 8007354:	4bc1      	ldr	r3, [pc, #772]	; (800765c <atan+0x31c>)
 8007356:	429e      	cmp	r6, r3
 8007358:	dc01      	bgt.n	800735e <atan+0x1e>
 800735a:	d109      	bne.n	8007370 <atan+0x30>
 800735c:	b144      	cbz	r4, 8007370 <atan+0x30>
 800735e:	4622      	mov	r2, r4
 8007360:	462b      	mov	r3, r5
 8007362:	4620      	mov	r0, r4
 8007364:	4629      	mov	r1, r5
 8007366:	f7f8 ff35 	bl	80001d4 <__adddf3>
 800736a:	4604      	mov	r4, r0
 800736c:	460d      	mov	r5, r1
 800736e:	e006      	b.n	800737e <atan+0x3e>
 8007370:	f1bb 0f00 	cmp.w	fp, #0
 8007374:	f340 8131 	ble.w	80075da <atan+0x29a>
 8007378:	a59b      	add	r5, pc, #620	; (adr r5, 80075e8 <atan+0x2a8>)
 800737a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800737e:	ec45 4b10 	vmov	d0, r4, r5
 8007382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007386:	4bb6      	ldr	r3, [pc, #728]	; (8007660 <atan+0x320>)
 8007388:	429e      	cmp	r6, r3
 800738a:	dc14      	bgt.n	80073b6 <atan+0x76>
 800738c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007390:	429e      	cmp	r6, r3
 8007392:	dc0d      	bgt.n	80073b0 <atan+0x70>
 8007394:	a396      	add	r3, pc, #600	; (adr r3, 80075f0 <atan+0x2b0>)
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	ee10 0a10 	vmov	r0, s0
 800739e:	4629      	mov	r1, r5
 80073a0:	f7f8 ff18 	bl	80001d4 <__adddf3>
 80073a4:	2200      	movs	r2, #0
 80073a6:	4baf      	ldr	r3, [pc, #700]	; (8007664 <atan+0x324>)
 80073a8:	f7f9 fb5a 	bl	8000a60 <__aeabi_dcmpgt>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d1e6      	bne.n	800737e <atan+0x3e>
 80073b0:	f04f 3aff 	mov.w	sl, #4294967295
 80073b4:	e02b      	b.n	800740e <atan+0xce>
 80073b6:	f000 f963 	bl	8007680 <fabs>
 80073ba:	4bab      	ldr	r3, [pc, #684]	; (8007668 <atan+0x328>)
 80073bc:	429e      	cmp	r6, r3
 80073be:	ec55 4b10 	vmov	r4, r5, d0
 80073c2:	f300 80bf 	bgt.w	8007544 <atan+0x204>
 80073c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80073ca:	429e      	cmp	r6, r3
 80073cc:	f300 80a0 	bgt.w	8007510 <atan+0x1d0>
 80073d0:	ee10 2a10 	vmov	r2, s0
 80073d4:	ee10 0a10 	vmov	r0, s0
 80073d8:	462b      	mov	r3, r5
 80073da:	4629      	mov	r1, r5
 80073dc:	f7f8 fefa 	bl	80001d4 <__adddf3>
 80073e0:	2200      	movs	r2, #0
 80073e2:	4ba0      	ldr	r3, [pc, #640]	; (8007664 <atan+0x324>)
 80073e4:	f7f8 fef4 	bl	80001d0 <__aeabi_dsub>
 80073e8:	2200      	movs	r2, #0
 80073ea:	4606      	mov	r6, r0
 80073ec:	460f      	mov	r7, r1
 80073ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073f2:	4620      	mov	r0, r4
 80073f4:	4629      	mov	r1, r5
 80073f6:	f7f8 feed 	bl	80001d4 <__adddf3>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4630      	mov	r0, r6
 8007400:	4639      	mov	r1, r7
 8007402:	f7f9 f9c7 	bl	8000794 <__aeabi_ddiv>
 8007406:	f04f 0a00 	mov.w	sl, #0
 800740a:	4604      	mov	r4, r0
 800740c:	460d      	mov	r5, r1
 800740e:	4622      	mov	r2, r4
 8007410:	462b      	mov	r3, r5
 8007412:	4620      	mov	r0, r4
 8007414:	4629      	mov	r1, r5
 8007416:	f7f9 f893 	bl	8000540 <__aeabi_dmul>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4680      	mov	r8, r0
 8007420:	4689      	mov	r9, r1
 8007422:	f7f9 f88d 	bl	8000540 <__aeabi_dmul>
 8007426:	a374      	add	r3, pc, #464	; (adr r3, 80075f8 <atan+0x2b8>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	4606      	mov	r6, r0
 800742e:	460f      	mov	r7, r1
 8007430:	f7f9 f886 	bl	8000540 <__aeabi_dmul>
 8007434:	a372      	add	r3, pc, #456	; (adr r3, 8007600 <atan+0x2c0>)
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f7f8 fecb 	bl	80001d4 <__adddf3>
 800743e:	4632      	mov	r2, r6
 8007440:	463b      	mov	r3, r7
 8007442:	f7f9 f87d 	bl	8000540 <__aeabi_dmul>
 8007446:	a370      	add	r3, pc, #448	; (adr r3, 8007608 <atan+0x2c8>)
 8007448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744c:	f7f8 fec2 	bl	80001d4 <__adddf3>
 8007450:	4632      	mov	r2, r6
 8007452:	463b      	mov	r3, r7
 8007454:	f7f9 f874 	bl	8000540 <__aeabi_dmul>
 8007458:	a36d      	add	r3, pc, #436	; (adr r3, 8007610 <atan+0x2d0>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	f7f8 feb9 	bl	80001d4 <__adddf3>
 8007462:	4632      	mov	r2, r6
 8007464:	463b      	mov	r3, r7
 8007466:	f7f9 f86b 	bl	8000540 <__aeabi_dmul>
 800746a:	a36b      	add	r3, pc, #428	; (adr r3, 8007618 <atan+0x2d8>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	f7f8 feb0 	bl	80001d4 <__adddf3>
 8007474:	4632      	mov	r2, r6
 8007476:	463b      	mov	r3, r7
 8007478:	f7f9 f862 	bl	8000540 <__aeabi_dmul>
 800747c:	a368      	add	r3, pc, #416	; (adr r3, 8007620 <atan+0x2e0>)
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	f7f8 fea7 	bl	80001d4 <__adddf3>
 8007486:	4642      	mov	r2, r8
 8007488:	464b      	mov	r3, r9
 800748a:	f7f9 f859 	bl	8000540 <__aeabi_dmul>
 800748e:	a366      	add	r3, pc, #408	; (adr r3, 8007628 <atan+0x2e8>)
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	4680      	mov	r8, r0
 8007496:	4689      	mov	r9, r1
 8007498:	4630      	mov	r0, r6
 800749a:	4639      	mov	r1, r7
 800749c:	f7f9 f850 	bl	8000540 <__aeabi_dmul>
 80074a0:	a363      	add	r3, pc, #396	; (adr r3, 8007630 <atan+0x2f0>)
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	f7f8 fe93 	bl	80001d0 <__aeabi_dsub>
 80074aa:	4632      	mov	r2, r6
 80074ac:	463b      	mov	r3, r7
 80074ae:	f7f9 f847 	bl	8000540 <__aeabi_dmul>
 80074b2:	a361      	add	r3, pc, #388	; (adr r3, 8007638 <atan+0x2f8>)
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	f7f8 fe8a 	bl	80001d0 <__aeabi_dsub>
 80074bc:	4632      	mov	r2, r6
 80074be:	463b      	mov	r3, r7
 80074c0:	f7f9 f83e 	bl	8000540 <__aeabi_dmul>
 80074c4:	a35e      	add	r3, pc, #376	; (adr r3, 8007640 <atan+0x300>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	f7f8 fe81 	bl	80001d0 <__aeabi_dsub>
 80074ce:	4632      	mov	r2, r6
 80074d0:	463b      	mov	r3, r7
 80074d2:	f7f9 f835 	bl	8000540 <__aeabi_dmul>
 80074d6:	a35c      	add	r3, pc, #368	; (adr r3, 8007648 <atan+0x308>)
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f7f8 fe78 	bl	80001d0 <__aeabi_dsub>
 80074e0:	4632      	mov	r2, r6
 80074e2:	463b      	mov	r3, r7
 80074e4:	f7f9 f82c 	bl	8000540 <__aeabi_dmul>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4640      	mov	r0, r8
 80074ee:	4649      	mov	r1, r9
 80074f0:	f7f8 fe70 	bl	80001d4 <__adddf3>
 80074f4:	4622      	mov	r2, r4
 80074f6:	462b      	mov	r3, r5
 80074f8:	f7f9 f822 	bl	8000540 <__aeabi_dmul>
 80074fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	d14b      	bne.n	800759e <atan+0x25e>
 8007506:	4620      	mov	r0, r4
 8007508:	4629      	mov	r1, r5
 800750a:	f7f8 fe61 	bl	80001d0 <__aeabi_dsub>
 800750e:	e72c      	b.n	800736a <atan+0x2a>
 8007510:	ee10 0a10 	vmov	r0, s0
 8007514:	2200      	movs	r2, #0
 8007516:	4b53      	ldr	r3, [pc, #332]	; (8007664 <atan+0x324>)
 8007518:	4629      	mov	r1, r5
 800751a:	f7f8 fe59 	bl	80001d0 <__aeabi_dsub>
 800751e:	2200      	movs	r2, #0
 8007520:	4606      	mov	r6, r0
 8007522:	460f      	mov	r7, r1
 8007524:	4b4f      	ldr	r3, [pc, #316]	; (8007664 <atan+0x324>)
 8007526:	4620      	mov	r0, r4
 8007528:	4629      	mov	r1, r5
 800752a:	f7f8 fe53 	bl	80001d4 <__adddf3>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4630      	mov	r0, r6
 8007534:	4639      	mov	r1, r7
 8007536:	f7f9 f92d 	bl	8000794 <__aeabi_ddiv>
 800753a:	f04f 0a01 	mov.w	sl, #1
 800753e:	4604      	mov	r4, r0
 8007540:	460d      	mov	r5, r1
 8007542:	e764      	b.n	800740e <atan+0xce>
 8007544:	4b49      	ldr	r3, [pc, #292]	; (800766c <atan+0x32c>)
 8007546:	429e      	cmp	r6, r3
 8007548:	dc1d      	bgt.n	8007586 <atan+0x246>
 800754a:	ee10 0a10 	vmov	r0, s0
 800754e:	2200      	movs	r2, #0
 8007550:	4b47      	ldr	r3, [pc, #284]	; (8007670 <atan+0x330>)
 8007552:	4629      	mov	r1, r5
 8007554:	f7f8 fe3c 	bl	80001d0 <__aeabi_dsub>
 8007558:	2200      	movs	r2, #0
 800755a:	4606      	mov	r6, r0
 800755c:	460f      	mov	r7, r1
 800755e:	4b44      	ldr	r3, [pc, #272]	; (8007670 <atan+0x330>)
 8007560:	4620      	mov	r0, r4
 8007562:	4629      	mov	r1, r5
 8007564:	f7f8 ffec 	bl	8000540 <__aeabi_dmul>
 8007568:	2200      	movs	r2, #0
 800756a:	4b3e      	ldr	r3, [pc, #248]	; (8007664 <atan+0x324>)
 800756c:	f7f8 fe32 	bl	80001d4 <__adddf3>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4630      	mov	r0, r6
 8007576:	4639      	mov	r1, r7
 8007578:	f7f9 f90c 	bl	8000794 <__aeabi_ddiv>
 800757c:	f04f 0a02 	mov.w	sl, #2
 8007580:	4604      	mov	r4, r0
 8007582:	460d      	mov	r5, r1
 8007584:	e743      	b.n	800740e <atan+0xce>
 8007586:	462b      	mov	r3, r5
 8007588:	ee10 2a10 	vmov	r2, s0
 800758c:	2000      	movs	r0, #0
 800758e:	4939      	ldr	r1, [pc, #228]	; (8007674 <atan+0x334>)
 8007590:	f7f9 f900 	bl	8000794 <__aeabi_ddiv>
 8007594:	f04f 0a03 	mov.w	sl, #3
 8007598:	4604      	mov	r4, r0
 800759a:	460d      	mov	r5, r1
 800759c:	e737      	b.n	800740e <atan+0xce>
 800759e:	4b36      	ldr	r3, [pc, #216]	; (8007678 <atan+0x338>)
 80075a0:	4e36      	ldr	r6, [pc, #216]	; (800767c <atan+0x33c>)
 80075a2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80075a6:	4456      	add	r6, sl
 80075a8:	449a      	add	sl, r3
 80075aa:	e9da 2300 	ldrd	r2, r3, [sl]
 80075ae:	f7f8 fe0f 	bl	80001d0 <__aeabi_dsub>
 80075b2:	4622      	mov	r2, r4
 80075b4:	462b      	mov	r3, r5
 80075b6:	f7f8 fe0b 	bl	80001d0 <__aeabi_dsub>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	e9d6 0100 	ldrd	r0, r1, [r6]
 80075c2:	f7f8 fe05 	bl	80001d0 <__aeabi_dsub>
 80075c6:	f1bb 0f00 	cmp.w	fp, #0
 80075ca:	4604      	mov	r4, r0
 80075cc:	460d      	mov	r5, r1
 80075ce:	f6bf aed6 	bge.w	800737e <atan+0x3e>
 80075d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075d6:	461d      	mov	r5, r3
 80075d8:	e6d1      	b.n	800737e <atan+0x3e>
 80075da:	a51d      	add	r5, pc, #116	; (adr r5, 8007650 <atan+0x310>)
 80075dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80075e0:	e6cd      	b.n	800737e <atan+0x3e>
 80075e2:	bf00      	nop
 80075e4:	f3af 8000 	nop.w
 80075e8:	54442d18 	.word	0x54442d18
 80075ec:	3ff921fb 	.word	0x3ff921fb
 80075f0:	8800759c 	.word	0x8800759c
 80075f4:	7e37e43c 	.word	0x7e37e43c
 80075f8:	e322da11 	.word	0xe322da11
 80075fc:	3f90ad3a 	.word	0x3f90ad3a
 8007600:	24760deb 	.word	0x24760deb
 8007604:	3fa97b4b 	.word	0x3fa97b4b
 8007608:	a0d03d51 	.word	0xa0d03d51
 800760c:	3fb10d66 	.word	0x3fb10d66
 8007610:	c54c206e 	.word	0xc54c206e
 8007614:	3fb745cd 	.word	0x3fb745cd
 8007618:	920083ff 	.word	0x920083ff
 800761c:	3fc24924 	.word	0x3fc24924
 8007620:	5555550d 	.word	0x5555550d
 8007624:	3fd55555 	.word	0x3fd55555
 8007628:	2c6a6c2f 	.word	0x2c6a6c2f
 800762c:	bfa2b444 	.word	0xbfa2b444
 8007630:	52defd9a 	.word	0x52defd9a
 8007634:	3fadde2d 	.word	0x3fadde2d
 8007638:	af749a6d 	.word	0xaf749a6d
 800763c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007640:	fe231671 	.word	0xfe231671
 8007644:	3fbc71c6 	.word	0x3fbc71c6
 8007648:	9998ebc4 	.word	0x9998ebc4
 800764c:	3fc99999 	.word	0x3fc99999
 8007650:	54442d18 	.word	0x54442d18
 8007654:	bff921fb 	.word	0xbff921fb
 8007658:	440fffff 	.word	0x440fffff
 800765c:	7ff00000 	.word	0x7ff00000
 8007660:	3fdbffff 	.word	0x3fdbffff
 8007664:	3ff00000 	.word	0x3ff00000
 8007668:	3ff2ffff 	.word	0x3ff2ffff
 800766c:	40037fff 	.word	0x40037fff
 8007670:	3ff80000 	.word	0x3ff80000
 8007674:	bff00000 	.word	0xbff00000
 8007678:	08007af0 	.word	0x08007af0
 800767c:	08007ad0 	.word	0x08007ad0

08007680 <fabs>:
 8007680:	ec51 0b10 	vmov	r0, r1, d0
 8007684:	ee10 2a10 	vmov	r2, s0
 8007688:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800768c:	ec43 2b10 	vmov	d0, r2, r3
 8007690:	4770      	bx	lr
 8007692:	0000      	movs	r0, r0
 8007694:	0000      	movs	r0, r0
	...

08007698 <floor>:
 8007698:	ec51 0b10 	vmov	r0, r1, d0
 800769c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80076a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80076a8:	2e13      	cmp	r6, #19
 80076aa:	460c      	mov	r4, r1
 80076ac:	ee10 5a10 	vmov	r5, s0
 80076b0:	4680      	mov	r8, r0
 80076b2:	dc34      	bgt.n	800771e <floor+0x86>
 80076b4:	2e00      	cmp	r6, #0
 80076b6:	da16      	bge.n	80076e6 <floor+0x4e>
 80076b8:	a335      	add	r3, pc, #212	; (adr r3, 8007790 <floor+0xf8>)
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	f7f8 fd89 	bl	80001d4 <__adddf3>
 80076c2:	2200      	movs	r2, #0
 80076c4:	2300      	movs	r3, #0
 80076c6:	f7f9 f9cb 	bl	8000a60 <__aeabi_dcmpgt>
 80076ca:	b148      	cbz	r0, 80076e0 <floor+0x48>
 80076cc:	2c00      	cmp	r4, #0
 80076ce:	da59      	bge.n	8007784 <floor+0xec>
 80076d0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80076d4:	4a30      	ldr	r2, [pc, #192]	; (8007798 <floor+0x100>)
 80076d6:	432b      	orrs	r3, r5
 80076d8:	2500      	movs	r5, #0
 80076da:	42ab      	cmp	r3, r5
 80076dc:	bf18      	it	ne
 80076de:	4614      	movne	r4, r2
 80076e0:	4621      	mov	r1, r4
 80076e2:	4628      	mov	r0, r5
 80076e4:	e025      	b.n	8007732 <floor+0x9a>
 80076e6:	4f2d      	ldr	r7, [pc, #180]	; (800779c <floor+0x104>)
 80076e8:	4137      	asrs	r7, r6
 80076ea:	ea01 0307 	and.w	r3, r1, r7
 80076ee:	4303      	orrs	r3, r0
 80076f0:	d01f      	beq.n	8007732 <floor+0x9a>
 80076f2:	a327      	add	r3, pc, #156	; (adr r3, 8007790 <floor+0xf8>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f7f8 fd6c 	bl	80001d4 <__adddf3>
 80076fc:	2200      	movs	r2, #0
 80076fe:	2300      	movs	r3, #0
 8007700:	f7f9 f9ae 	bl	8000a60 <__aeabi_dcmpgt>
 8007704:	2800      	cmp	r0, #0
 8007706:	d0eb      	beq.n	80076e0 <floor+0x48>
 8007708:	2c00      	cmp	r4, #0
 800770a:	bfbe      	ittt	lt
 800770c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007710:	fa43 f606 	asrlt.w	r6, r3, r6
 8007714:	19a4      	addlt	r4, r4, r6
 8007716:	ea24 0407 	bic.w	r4, r4, r7
 800771a:	2500      	movs	r5, #0
 800771c:	e7e0      	b.n	80076e0 <floor+0x48>
 800771e:	2e33      	cmp	r6, #51	; 0x33
 8007720:	dd0b      	ble.n	800773a <floor+0xa2>
 8007722:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007726:	d104      	bne.n	8007732 <floor+0x9a>
 8007728:	ee10 2a10 	vmov	r2, s0
 800772c:	460b      	mov	r3, r1
 800772e:	f7f8 fd51 	bl	80001d4 <__adddf3>
 8007732:	ec41 0b10 	vmov	d0, r0, r1
 8007736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800773a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800773e:	f04f 33ff 	mov.w	r3, #4294967295
 8007742:	fa23 f707 	lsr.w	r7, r3, r7
 8007746:	4207      	tst	r7, r0
 8007748:	d0f3      	beq.n	8007732 <floor+0x9a>
 800774a:	a311      	add	r3, pc, #68	; (adr r3, 8007790 <floor+0xf8>)
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	f7f8 fd40 	bl	80001d4 <__adddf3>
 8007754:	2200      	movs	r2, #0
 8007756:	2300      	movs	r3, #0
 8007758:	f7f9 f982 	bl	8000a60 <__aeabi_dcmpgt>
 800775c:	2800      	cmp	r0, #0
 800775e:	d0bf      	beq.n	80076e0 <floor+0x48>
 8007760:	2c00      	cmp	r4, #0
 8007762:	da02      	bge.n	800776a <floor+0xd2>
 8007764:	2e14      	cmp	r6, #20
 8007766:	d103      	bne.n	8007770 <floor+0xd8>
 8007768:	3401      	adds	r4, #1
 800776a:	ea25 0507 	bic.w	r5, r5, r7
 800776e:	e7b7      	b.n	80076e0 <floor+0x48>
 8007770:	2301      	movs	r3, #1
 8007772:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007776:	fa03 f606 	lsl.w	r6, r3, r6
 800777a:	4435      	add	r5, r6
 800777c:	4545      	cmp	r5, r8
 800777e:	bf38      	it	cc
 8007780:	18e4      	addcc	r4, r4, r3
 8007782:	e7f2      	b.n	800776a <floor+0xd2>
 8007784:	2500      	movs	r5, #0
 8007786:	462c      	mov	r4, r5
 8007788:	e7aa      	b.n	80076e0 <floor+0x48>
 800778a:	bf00      	nop
 800778c:	f3af 8000 	nop.w
 8007790:	8800759c 	.word	0x8800759c
 8007794:	7e37e43c 	.word	0x7e37e43c
 8007798:	bff00000 	.word	0xbff00000
 800779c:	000fffff 	.word	0x000fffff

080077a0 <matherr>:
 80077a0:	2000      	movs	r0, #0
 80077a2:	4770      	bx	lr
 80077a4:	0000      	movs	r0, r0
	...

080077a8 <scalbn>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	ec55 4b10 	vmov	r4, r5, d0
 80077ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80077b2:	4606      	mov	r6, r0
 80077b4:	462b      	mov	r3, r5
 80077b6:	b9aa      	cbnz	r2, 80077e4 <scalbn+0x3c>
 80077b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80077bc:	4323      	orrs	r3, r4
 80077be:	d03b      	beq.n	8007838 <scalbn+0x90>
 80077c0:	4b31      	ldr	r3, [pc, #196]	; (8007888 <scalbn+0xe0>)
 80077c2:	4629      	mov	r1, r5
 80077c4:	2200      	movs	r2, #0
 80077c6:	ee10 0a10 	vmov	r0, s0
 80077ca:	f7f8 feb9 	bl	8000540 <__aeabi_dmul>
 80077ce:	4b2f      	ldr	r3, [pc, #188]	; (800788c <scalbn+0xe4>)
 80077d0:	429e      	cmp	r6, r3
 80077d2:	4604      	mov	r4, r0
 80077d4:	460d      	mov	r5, r1
 80077d6:	da12      	bge.n	80077fe <scalbn+0x56>
 80077d8:	a327      	add	r3, pc, #156	; (adr r3, 8007878 <scalbn+0xd0>)
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	f7f8 feaf 	bl	8000540 <__aeabi_dmul>
 80077e2:	e009      	b.n	80077f8 <scalbn+0x50>
 80077e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80077e8:	428a      	cmp	r2, r1
 80077ea:	d10c      	bne.n	8007806 <scalbn+0x5e>
 80077ec:	ee10 2a10 	vmov	r2, s0
 80077f0:	4620      	mov	r0, r4
 80077f2:	4629      	mov	r1, r5
 80077f4:	f7f8 fcee 	bl	80001d4 <__adddf3>
 80077f8:	4604      	mov	r4, r0
 80077fa:	460d      	mov	r5, r1
 80077fc:	e01c      	b.n	8007838 <scalbn+0x90>
 80077fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007802:	460b      	mov	r3, r1
 8007804:	3a36      	subs	r2, #54	; 0x36
 8007806:	4432      	add	r2, r6
 8007808:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800780c:	428a      	cmp	r2, r1
 800780e:	dd0b      	ble.n	8007828 <scalbn+0x80>
 8007810:	ec45 4b11 	vmov	d1, r4, r5
 8007814:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007880 <scalbn+0xd8>
 8007818:	f000 f83c 	bl	8007894 <copysign>
 800781c:	a318      	add	r3, pc, #96	; (adr r3, 8007880 <scalbn+0xd8>)
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	ec51 0b10 	vmov	r0, r1, d0
 8007826:	e7da      	b.n	80077de <scalbn+0x36>
 8007828:	2a00      	cmp	r2, #0
 800782a:	dd08      	ble.n	800783e <scalbn+0x96>
 800782c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007830:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007834:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007838:	ec45 4b10 	vmov	d0, r4, r5
 800783c:	bd70      	pop	{r4, r5, r6, pc}
 800783e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007842:	da0d      	bge.n	8007860 <scalbn+0xb8>
 8007844:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007848:	429e      	cmp	r6, r3
 800784a:	ec45 4b11 	vmov	d1, r4, r5
 800784e:	dce1      	bgt.n	8007814 <scalbn+0x6c>
 8007850:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007878 <scalbn+0xd0>
 8007854:	f000 f81e 	bl	8007894 <copysign>
 8007858:	a307      	add	r3, pc, #28	; (adr r3, 8007878 <scalbn+0xd0>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	e7e0      	b.n	8007822 <scalbn+0x7a>
 8007860:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007864:	3236      	adds	r2, #54	; 0x36
 8007866:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800786a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800786e:	4620      	mov	r0, r4
 8007870:	4629      	mov	r1, r5
 8007872:	2200      	movs	r2, #0
 8007874:	4b06      	ldr	r3, [pc, #24]	; (8007890 <scalbn+0xe8>)
 8007876:	e7b2      	b.n	80077de <scalbn+0x36>
 8007878:	c2f8f359 	.word	0xc2f8f359
 800787c:	01a56e1f 	.word	0x01a56e1f
 8007880:	8800759c 	.word	0x8800759c
 8007884:	7e37e43c 	.word	0x7e37e43c
 8007888:	43500000 	.word	0x43500000
 800788c:	ffff3cb0 	.word	0xffff3cb0
 8007890:	3c900000 	.word	0x3c900000

08007894 <copysign>:
 8007894:	ec51 0b10 	vmov	r0, r1, d0
 8007898:	ee11 0a90 	vmov	r0, s3
 800789c:	ee10 2a10 	vmov	r2, s0
 80078a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80078a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80078a8:	ea41 0300 	orr.w	r3, r1, r0
 80078ac:	ec43 2b10 	vmov	d0, r2, r3
 80078b0:	4770      	bx	lr
	...

080078b4 <_init>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	bf00      	nop
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr

080078c0 <_fini>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	bf00      	nop
 80078c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c6:	bc08      	pop	{r3}
 80078c8:	469e      	mov	lr, r3
 80078ca:	4770      	bx	lr
