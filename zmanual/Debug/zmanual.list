
zmanual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073bc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08007548  08007548  00017548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007788  08007788  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007790  08007790  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08007798  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200000b8  0800784c  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800784c  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bddb  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000193b  00000000  00000000  0002bebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  0002d800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  0002e498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000209cf  00000000  00000000  0002f068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000884f  00000000  00000000  0004fa37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c93f9  00000000  00000000  00058286  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012167f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a1c  00000000  00000000  001216fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800752c 	.word	0x0800752c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	0800752c 	.word	0x0800752c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b972 	b.w	8000dec <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	4688      	mov	r8, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d14b      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b2e:	428a      	cmp	r2, r1
 8000b30:	4615      	mov	r5, r2
 8000b32:	d967      	bls.n	8000c04 <__udivmoddi4+0xe4>
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0720 	rsb	r7, r2, #32
 8000b3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b42:	fa20 f707 	lsr.w	r7, r0, r7
 8000b46:	4095      	lsls	r5, r2
 8000b48:	ea47 0803 	orr.w	r8, r7, r3
 8000b4c:	4094      	lsls	r4, r2
 8000b4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b52:	0c23      	lsrs	r3, r4, #16
 8000b54:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b58:	fa1f fc85 	uxth.w	ip, r5
 8000b5c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b60:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b64:	fb07 f10c 	mul.w	r1, r7, ip
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x60>
 8000b6c:	18eb      	adds	r3, r5, r3
 8000b6e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b72:	f080 811b 	bcs.w	8000dac <__udivmoddi4+0x28c>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 8118 	bls.w	8000dac <__udivmoddi4+0x28c>
 8000b7c:	3f02      	subs	r7, #2
 8000b7e:	442b      	add	r3, r5
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b94:	45a4      	cmp	ip, r4
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x8c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	442c      	add	r4, r5
 8000bac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bb0:	eba4 040c 	sub.w	r4, r4, ip
 8000bb4:	2700      	movs	r7, #0
 8000bb6:	b11e      	cbz	r6, 8000bc0 <__udivmoddi4+0xa0>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc0:	4639      	mov	r1, r7
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xbe>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80eb 	beq.w	8000da6 <__udivmoddi4+0x286>
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	4639      	mov	r1, r7
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f783 	clz	r7, r3
 8000be2:	2f00      	cmp	r7, #0
 8000be4:	d147      	bne.n	8000c76 <__udivmoddi4+0x156>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd0>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80fa 	bhi.w	8000de4 <__udivmoddi4+0x2c4>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa0>
 8000bfe:	e9c6 4800 	strd	r4, r8, [r6]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xe8>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 808f 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c12:	1b49      	subs	r1, r1, r5
 8000c14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c18:	fa1f f885 	uxth.w	r8, r5
 8000c1c:	2701      	movs	r7, #1
 8000c1e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	f200 80cd 	bhi.w	8000ddc <__udivmoddi4+0x2bc>
 8000c42:	4684      	mov	ip, r0
 8000c44:	1a59      	subs	r1, r3, r1
 8000c46:	b2a3      	uxth	r3, r4
 8000c48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c54:	fb08 f800 	mul.w	r8, r8, r0
 8000c58:	45a0      	cmp	r8, r4
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x14c>
 8000c5c:	192c      	adds	r4, r5, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x14a>
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	f200 80b6 	bhi.w	8000dd6 <__udivmoddi4+0x2b6>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	eba4 0408 	sub.w	r4, r4, r8
 8000c70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c74:	e79f      	b.n	8000bb6 <__udivmoddi4+0x96>
 8000c76:	f1c7 0c20 	rsb	ip, r7, #32
 8000c7a:	40bb      	lsls	r3, r7
 8000c7c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c80:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c84:	fa01 f407 	lsl.w	r4, r1, r7
 8000c88:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c8c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c90:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c94:	4325      	orrs	r5, r4
 8000c96:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c9a:	0c2c      	lsrs	r4, r5, #16
 8000c9c:	fb08 3319 	mls	r3, r8, r9, r3
 8000ca0:	fa1f fa8e 	uxth.w	sl, lr
 8000ca4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cac:	429c      	cmp	r4, r3
 8000cae:	fa02 f207 	lsl.w	r2, r2, r7
 8000cb2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	f080 8087 	bcs.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f240 8084 	bls.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cca:	f1a9 0902 	sub.w	r9, r9, #2
 8000cce:	4473      	add	r3, lr
 8000cd0:	1b1b      	subs	r3, r3, r4
 8000cd2:	b2ad      	uxth	r5, r5
 8000cd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cdc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ce0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce4:	45a2      	cmp	sl, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	d26b      	bcs.n	8000dca <__udivmoddi4+0x2aa>
 8000cf2:	45a2      	cmp	sl, r4
 8000cf4:	d969      	bls.n	8000dca <__udivmoddi4+0x2aa>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4474      	add	r4, lr
 8000cfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	eba4 040a 	sub.w	r4, r4, sl
 8000d06:	454c      	cmp	r4, r9
 8000d08:	46c2      	mov	sl, r8
 8000d0a:	464b      	mov	r3, r9
 8000d0c:	d354      	bcc.n	8000db8 <__udivmoddi4+0x298>
 8000d0e:	d051      	beq.n	8000db4 <__udivmoddi4+0x294>
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d069      	beq.n	8000de8 <__udivmoddi4+0x2c8>
 8000d14:	ebb1 050a 	subs.w	r5, r1, sl
 8000d18:	eb64 0403 	sbc.w	r4, r4, r3
 8000d1c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d20:	40fd      	lsrs	r5, r7
 8000d22:	40fc      	lsrs	r4, r7
 8000d24:	ea4c 0505 	orr.w	r5, ip, r5
 8000d28:	e9c6 5400 	strd	r5, r4, [r6]
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f703 	lsr.w	r7, r0, r3
 8000d38:	4095      	lsls	r5, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d46:	4338      	orrs	r0, r7
 8000d48:	0c01      	lsrs	r1, r0, #16
 8000d4a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4e:	fa1f f885 	uxth.w	r8, r5
 8000d52:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb07 f308 	mul.w	r3, r7, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	fa04 f402 	lsl.w	r4, r4, r2
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x256>
 8000d66:	1869      	adds	r1, r5, r1
 8000d68:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d6c:	d22f      	bcs.n	8000dce <__udivmoddi4+0x2ae>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d92d      	bls.n	8000dce <__udivmoddi4+0x2ae>
 8000d72:	3f02      	subs	r7, #2
 8000d74:	4429      	add	r1, r5
 8000d76:	1acb      	subs	r3, r1, r3
 8000d78:	b281      	uxth	r1, r0
 8000d7a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb00 f308 	mul.w	r3, r0, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x27e>
 8000d8e:	1869      	adds	r1, r5, r1
 8000d90:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d94:	d217      	bcs.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d915      	bls.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4429      	add	r1, r5
 8000d9e:	1ac9      	subs	r1, r1, r3
 8000da0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da4:	e73b      	b.n	8000c1e <__udivmoddi4+0xfe>
 8000da6:	4637      	mov	r7, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e709      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000dac:	4607      	mov	r7, r0
 8000dae:	e6e7      	b.n	8000b80 <__udivmoddi4+0x60>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x8c>
 8000db4:	4541      	cmp	r1, r8
 8000db6:	d2ab      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000db8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dbc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	e7a4      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc6:	4660      	mov	r0, ip
 8000dc8:	e7e9      	b.n	8000d9e <__udivmoddi4+0x27e>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	e795      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dce:	4667      	mov	r7, ip
 8000dd0:	e7d1      	b.n	8000d76 <__udivmoddi4+0x256>
 8000dd2:	4681      	mov	r9, r0
 8000dd4:	e77c      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	442c      	add	r4, r5
 8000dda:	e747      	b.n	8000c6c <__udivmoddi4+0x14c>
 8000ddc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de0:	442b      	add	r3, r5
 8000de2:	e72f      	b.n	8000c44 <__udivmoddi4+0x124>
 8000de4:	4638      	mov	r0, r7
 8000de6:	e708      	b.n	8000bfa <__udivmoddi4+0xda>
 8000de8:	4637      	mov	r7, r6
 8000dea:	e6e9      	b.n	8000bc0 <__udivmoddi4+0xa0>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <HAL_UART_TxCpltCallback>:
void wait4CompassRx(void);
void compassDeInit(void);
void compassInit(void);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_UART_TxCpltCallback+0x28>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d102      	bne.n	8000e0a <HAL_UART_TxCpltCallback+0x1a>
	{
		compassTxCplt = 1;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_UART_TxCpltCallback+0x2c>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200003d0 	.word	0x200003d0
 8000e1c:	20000421 	.word	0x20000421

08000e20 <peripheralUART_Init>:

void peripheralUART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	4905      	ldr	r1, [pc, #20]	; (8000e3c <peripheralUART_Init+0x1c>)
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <peripheralUART_Init+0x20>)
 8000e2a:	f004 f8cd 	bl	8004fc8 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 8000e2e:	2202      	movs	r2, #2
 8000e30:	4904      	ldr	r1, [pc, #16]	; (8000e44 <peripheralUART_Init+0x24>)
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <peripheralUART_Init+0x28>)
 8000e34:	f004 f8c8 	bl	8004fc8 <HAL_UART_Receive_DMA>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200003b8 	.word	0x200003b8
 8000e40:	200002d0 	.word	0x200002d0
 8000e44:	200001c4 	.word	0x200001c4
 8000e48:	200003d0 	.word	0x200003d0

08000e4c <PS2DMA_ProcessingData>:
	PS2RxCplt = 0;
}

//put in function handles DMA stream global interrupt of brainDMA Rx in stm32f4xx_it.c
void PS2DMA_ProcessingData(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
	if(PS2CheckbyteCount == 4 )
 8000e50:	4b8d      	ldr	r3, [pc, #564]	; (8001088 <PS2DMA_ProcessingData+0x23c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	f040 80ff 	bne.w	8001058 <PS2DMA_ProcessingData+0x20c>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8000e5a:	4b8c      	ldr	r3, [pc, #560]	; (800108c <PS2DMA_ProcessingData+0x240>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	b2d1      	uxtb	r1, r2
 8000e62:	4a8a      	ldr	r2, [pc, #552]	; (800108c <PS2DMA_ProcessingData+0x240>)
 8000e64:	7011      	strb	r1, [r2, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b89      	ldr	r3, [pc, #548]	; (8001090 <PS2DMA_ProcessingData+0x244>)
 8000e6a:	7819      	ldrb	r1, [r3, #0]
 8000e6c:	4b89      	ldr	r3, [pc, #548]	; (8001094 <PS2DMA_ProcessingData+0x248>)
 8000e6e:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8000e70:	4b86      	ldr	r3, [pc, #536]	; (800108c <PS2DMA_ProcessingData+0x240>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b05      	cmp	r3, #5
 8000e76:	f240 80ef 	bls.w	8001058 <PS2DMA_ProcessingData+0x20c>
		{
			PS2DataIndex = 0;
 8000e7a:	4b84      	ldr	r3, [pc, #528]	; (800108c <PS2DMA_ProcessingData+0x240>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8000e80:	4b81      	ldr	r3, [pc, #516]	; (8001088 <PS2DMA_ProcessingData+0x23c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8000e86:	4b83      	ldr	r3, [pc, #524]	; (8001094 <PS2DMA_ProcessingData+0x248>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	4b81      	ldr	r3, [pc, #516]	; (8001094 <PS2DMA_ProcessingData+0x248>)
 8000e90:	785b      	ldrb	r3, [r3, #1]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	4b7f      	ldr	r3, [pc, #508]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000e9a:	801a      	strh	r2, [r3, #0]
			joyRigtHor = PS2Data[2] - joyRigtMidHor;
 8000e9c:	4b7d      	ldr	r3, [pc, #500]	; (8001094 <PS2DMA_ProcessingData+0x248>)
 8000e9e:	789b      	ldrb	r3, [r3, #2]
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b7e      	ldr	r3, [pc, #504]	; (800109c <PS2DMA_ProcessingData+0x250>)
 8000ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <PS2DMA_ProcessingData+0x254>)
 8000eb2:	801a      	strh	r2, [r3, #0]
			joyRigtVer = PS2Data[3] - joyRigtMidVer;
 8000eb4:	4b77      	ldr	r3, [pc, #476]	; (8001094 <PS2DMA_ProcessingData+0x248>)
 8000eb6:	78db      	ldrb	r3, [r3, #3]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	4b7a      	ldr	r3, [pc, #488]	; (80010a4 <PS2DMA_ProcessingData+0x258>)
 8000ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	4b77      	ldr	r3, [pc, #476]	; (80010a8 <PS2DMA_ProcessingData+0x25c>)
 8000eca:	801a      	strh	r2, [r3, #0]
			joyLeftHor = PS2Data[4] - joyLeftMidHor;
 8000ecc:	4b71      	ldr	r3, [pc, #452]	; (8001094 <PS2DMA_ProcessingData+0x248>)
 8000ece:	791b      	ldrb	r3, [r3, #4]
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b76      	ldr	r3, [pc, #472]	; (80010ac <PS2DMA_ProcessingData+0x260>)
 8000ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	4b73      	ldr	r3, [pc, #460]	; (80010b0 <PS2DMA_ProcessingData+0x264>)
 8000ee2:	801a      	strh	r2, [r3, #0]
			joyLeftVer = PS2Data[5] - joyLeftMidVer;
 8000ee4:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <PS2DMA_ProcessingData+0x248>)
 8000ee6:	795b      	ldrb	r3, [r3, #5]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4b72      	ldr	r3, [pc, #456]	; (80010b4 <PS2DMA_ProcessingData+0x268>)
 8000eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	4b6f      	ldr	r3, [pc, #444]	; (80010b8 <PS2DMA_ProcessingData+0x26c>)
 8000efa:	801a      	strh	r2, [r3, #0]
			btn_leftLeft = (PS2Button >> 15) & 1U;
 8000efc:	4b66      	ldr	r3, [pc, #408]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f02:	13db      	asrs	r3, r3, #15
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <PS2DMA_ProcessingData+0x270>)
 8000f10:	701a      	strb	r2, [r3, #0]
			btn_leftDown = (PS2Button >> 14) & 1U;
 8000f12:	4b61      	ldr	r3, [pc, #388]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	139b      	asrs	r3, r3, #14
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b66      	ldr	r3, [pc, #408]	; (80010c0 <PS2DMA_ProcessingData+0x274>)
 8000f26:	701a      	strb	r2, [r3, #0]
			btn_leftRigt = (PS2Button >> 13) & 1U;
 8000f28:	4b5b      	ldr	r3, [pc, #364]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2e:	135b      	asrs	r3, r3, #13
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b62      	ldr	r3, [pc, #392]	; (80010c4 <PS2DMA_ProcessingData+0x278>)
 8000f3c:	701a      	strb	r2, [r3, #0]
			btn_leftUp   = (PS2Button >> 12) & 1U;
 8000f3e:	4b56      	ldr	r3, [pc, #344]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f44:	131b      	asrs	r3, r3, #12
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <PS2DMA_ProcessingData+0x27c>)
 8000f52:	701a      	strb	r2, [r3, #0]
			btn_Sta		 = (PS2Button >> 11) & 1U;
 8000f54:	4b50      	ldr	r3, [pc, #320]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	12db      	asrs	r3, r3, #11
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b59      	ldr	r3, [pc, #356]	; (80010cc <PS2DMA_ProcessingData+0x280>)
 8000f68:	701a      	strb	r2, [r3, #0]
			btn_joyRigt  = (PS2Button >> 10) & 1U;
 8000f6a:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f70:	129b      	asrs	r3, r3, #10
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <PS2DMA_ProcessingData+0x284>)
 8000f7e:	701a      	strb	r2, [r3, #0]
			btn_joyLeft  = (PS2Button >>  9) & 1U;
 8000f80:	4b45      	ldr	r3, [pc, #276]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	125b      	asrs	r3, r3, #9
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <PS2DMA_ProcessingData+0x288>)
 8000f94:	701a      	strb	r2, [r3, #0]
			btn_Sel  	 = (PS2Button >>  8) & 1U;
 8000f96:	4b40      	ldr	r3, [pc, #256]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9c:	121b      	asrs	r3, r3, #8
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <PS2DMA_ProcessingData+0x28c>)
 8000faa:	701a      	strb	r2, [r3, #0]
			btn_A  		 = (PS2Button >>  7) & 1U;
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb2:	11db      	asrs	r3, r3, #7
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b47      	ldr	r3, [pc, #284]	; (80010dc <PS2DMA_ProcessingData+0x290>)
 8000fc0:	701a      	strb	r2, [r3, #0]
			btn_X  		 = (PS2Button >>  6) & 1U;
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	119b      	asrs	r3, r3, #6
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <PS2DMA_ProcessingData+0x294>)
 8000fd6:	701a      	strb	r2, [r3, #0]
			btn_D  		 = (PS2Button >>  5) & 1U;
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fde:	115b      	asrs	r3, r3, #5
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <PS2DMA_ProcessingData+0x298>)
 8000fec:	701a      	strb	r2, [r3, #0]
			btn_W  		 = (PS2Button >>  4) & 1U;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8000ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff4:	111b      	asrs	r3, r3, #4
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <PS2DMA_ProcessingData+0x29c>)
 8001002:	701a      	strb	r2, [r3, #0]
			btn_E  		 = (PS2Button >>  3) & 1U;
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8001006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100a:	10db      	asrs	r3, r3, #3
 800100c:	b21b      	sxth	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b35      	ldr	r3, [pc, #212]	; (80010ec <PS2DMA_ProcessingData+0x2a0>)
 8001018:	701a      	strb	r2, [r3, #0]
			btn_Q  		 = (PS2Button >>  2) & 1U;
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 800101c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001020:	109b      	asrs	r3, r3, #2
 8001022:	b21b      	sxth	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <PS2DMA_ProcessingData+0x2a4>)
 800102e:	701a      	strb	r2, [r3, #0]
			btn_C  		 = (PS2Button >>  1) & 1U;
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8001032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001036:	105b      	asrs	r3, r3, #1
 8001038:	b21b      	sxth	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <PS2DMA_ProcessingData+0x2a8>)
 8001044:	701a      	strb	r2, [r3, #0]
			btn_Z  		 = (PS2Button >>  0) & 1U;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <PS2DMA_ProcessingData+0x24c>)
 8001048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <PS2DMA_ProcessingData+0x2ac>)
 8001056:	701a      	strb	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <PS2DMA_ProcessingData+0x244>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2baa      	cmp	r3, #170	; 0xaa
 800105e:	d106      	bne.n	800106e <PS2DMA_ProcessingData+0x222>
		PS2CheckbyteCount++;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <PS2DMA_ProcessingData+0x23c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <PS2DMA_ProcessingData+0x23c>)
 800106a:	701a      	strb	r2, [r3, #0]
	else
		if(PS2CheckbyteCount != 4)
			PS2CheckbyteCount = 0;
}
 800106c:	e006      	b.n	800107c <PS2DMA_ProcessingData+0x230>
		if(PS2CheckbyteCount != 4)
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <PS2DMA_ProcessingData+0x23c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b04      	cmp	r3, #4
 8001074:	d002      	beq.n	800107c <PS2DMA_ProcessingData+0x230>
			PS2CheckbyteCount = 0;
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <PS2DMA_ProcessingData+0x23c>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200000d4 	.word	0x200000d4
 800108c:	20000251 	.word	0x20000251
 8001090:	200003b8 	.word	0x200003b8
 8001094:	200001bc 	.word	0x200001bc
 8001098:	20000320 	.word	0x20000320
 800109c:	20000006 	.word	0x20000006
 80010a0:	200001b4 	.word	0x200001b4
 80010a4:	20000004 	.word	0x20000004
 80010a8:	20000350 	.word	0x20000350
 80010ac:	20000002 	.word	0x20000002
 80010b0:	20000424 	.word	0x20000424
 80010b4:	20000000 	.word	0x20000000
 80010b8:	2000043a 	.word	0x2000043a
 80010bc:	200001ac 	.word	0x200001ac
 80010c0:	20000339 	.word	0x20000339
 80010c4:	20000338 	.word	0x20000338
 80010c8:	20000410 	.word	0x20000410
 80010cc:	20000352 	.word	0x20000352
 80010d0:	200003a1 	.word	0x200003a1
 80010d4:	20000426 	.word	0x20000426
 80010d8:	2000023c 	.word	0x2000023c
 80010dc:	20000349 	.word	0x20000349
 80010e0:	200000d8 	.word	0x200000d8
 80010e4:	200001ad 	.word	0x200001ad
 80010e8:	2000023f 	.word	0x2000023f
 80010ec:	200001ae 	.word	0x200001ae
 80010f0:	200003a0 	.word	0x200003a0
 80010f4:	20000438 	.word	0x20000438
 80010f8:	20000420 	.word	0x20000420

080010fc <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <compassReset+0x24>)
 8001102:	2261      	movs	r2, #97	; 0x61
 8001104:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 8001106:	2201      	movs	r2, #1
 8001108:	4905      	ldr	r1, [pc, #20]	; (8001120 <compassReset+0x24>)
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <compassReset+0x28>)
 800110c:	f003 ff17 	bl	8004f3e <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8001110:	f000 f830 	bl	8001174 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <compassReset+0x24>)
 8001116:	227a      	movs	r2, #122	; 0x7a
 8001118:	701a      	strb	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	200003d0 	.word	0x200003d0

08001128 <compassRequest>:
void compassRequest(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	compassTxPacket[0]='z';
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <compassRequest+0x18>)
 800112e:	227a      	movs	r2, #122	; 0x7a
 8001130:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 8001132:	2201      	movs	r2, #1
 8001134:	4902      	ldr	r1, [pc, #8]	; (8001140 <compassRequest+0x18>)
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <compassRequest+0x1c>)
 8001138:	f003 ff01 	bl	8004f3e <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000008 	.word	0x20000008
 8001144:	200003d0 	.word	0x200003d0

08001148 <compassDecode>:
//	HAL_UART_Receive(&compass, compassRxPacket, 2, 50);

	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}
void compassDecode(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <compassDecode+0x24>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <compassDecode+0x24>)
 8001156:	785b      	ldrb	r3, [r3, #1]
 8001158:	b21b      	sxth	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <compassDecode+0x28>)
 8001160:	801a      	strh	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	200001c4 	.word	0x200001c4
 8001170:	20000240 	.word	0x20000240

08001174 <wait4CompassTx>:
void wait4CompassTx(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 8001178:	e004      	b.n	8001184 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <wait4CompassTx+0x28>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <wait4CompassTx+0x28>)
 8001182:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <wait4CompassTx+0x2c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f6      	beq.n	800117a <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <wait4CompassTx+0x2c>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	20000440 	.word	0x20000440
 80011a0:	20000421 	.word	0x20000421

080011a4 <peripheralPWM_Init>:
uint8_t motor3Dir;
uint8_t motor4Dir;


void peripheralPWM_Init()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&motor1, motor1_channel);
 80011a8:	2100      	movs	r1, #0
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <peripheralPWM_Init+0x28>)
 80011ac:	f002 ff9c 	bl	80040e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor2, motor2_channel);
 80011b0:	2104      	movs	r1, #4
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <peripheralPWM_Init+0x28>)
 80011b4:	f002 ff98 	bl	80040e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor3, motor3_channel);
 80011b8:	2108      	movs	r1, #8
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <peripheralPWM_Init+0x2c>)
 80011bc:	f002 ff94 	bl	80040e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&motor4, motor4_channel);	
 80011c0:	210c      	movs	r1, #12
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <peripheralPWM_Init+0x2c>)
 80011c4:	f002 ff90 	bl	80040e8 <HAL_TIM_PWM_Start>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000158 	.word	0x20000158
 80011d0:	20000360 	.word	0x20000360

080011d4 <controlMotor1>:

void controlMotor1(int _speed)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db05      	blt.n	80011ee <controlMotor1+0x1a>
	{
		HAL_GPIO_WritePin(motor1Dir_GPIO_Port, motor1Dir_Pin, CCW);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2101      	movs	r1, #1
 80011e6:	481b      	ldr	r0, [pc, #108]	; (8001254 <controlMotor1+0x80>)
 80011e8:	f002 fa64 	bl	80036b4 <HAL_GPIO_WritePin>
 80011ec:	e004      	b.n	80011f8 <controlMotor1+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor1Dir_GPIO_Port, motor1Dir_Pin, FCW);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2101      	movs	r1, #1
 80011f2:	4818      	ldr	r0, [pc, #96]	; (8001254 <controlMotor1+0x80>)
 80011f4:	f002 fa5e 	bl	80036b4 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	dc05      	bgt.n	800120a <controlMotor1+0x36>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f113 0f03 	cmn.w	r3, #3
 8001204:	db01      	blt.n	800120a <controlMotor1+0x36>
		_speed = 3;
 8001206:	2303      	movs	r3, #3
 8001208:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2bfa      	cmp	r3, #250	; 0xfa
 800120e:	dd01      	ble.n	8001214 <controlMotor1+0x40>
	{
		_speed = 250;
 8001210:	23fa      	movs	r3, #250	; 0xfa
 8001212:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 800121a:	da02      	bge.n	8001222 <controlMotor1+0x4e>
	{
		_speed = -250;
 800121c:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8001220:	607b      	str	r3, [r7, #4]
	}
	debugSpeed1 = abs(_speed);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	bfb8      	it	lt
 8001228:	425b      	neglt	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f91e 	bl	800046c <__aeabi_i2d>
 8001230:	4603      	mov	r3, r0
 8001232:	460c      	mov	r4, r1
 8001234:	4a08      	ldr	r2, [pc, #32]	; (8001258 <controlMotor1+0x84>)
 8001236:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor1, motor1_channel, abs(_speed));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001240:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <controlMotor1+0x88>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	bf00      	nop
 8001254:	40020c00 	.word	0x40020c00
 8001258:	200001e0 	.word	0x200001e0
 800125c:	20000158 	.word	0x20000158

08001260 <controlMotor2>:
void controlMotor2(int _speed)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db05      	blt.n	800127a <controlMotor2+0x1a>
	{
		HAL_GPIO_WritePin(motor2Dir_GPIO_Port, motor2Dir_Pin, CCW);
 800126e:	2201      	movs	r2, #1
 8001270:	2102      	movs	r1, #2
 8001272:	481b      	ldr	r0, [pc, #108]	; (80012e0 <controlMotor2+0x80>)
 8001274:	f002 fa1e 	bl	80036b4 <HAL_GPIO_WritePin>
 8001278:	e004      	b.n	8001284 <controlMotor2+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor2Dir_GPIO_Port, motor2Dir_Pin, FCW);
 800127a:	2200      	movs	r2, #0
 800127c:	2102      	movs	r1, #2
 800127e:	4818      	ldr	r0, [pc, #96]	; (80012e0 <controlMotor2+0x80>)
 8001280:	f002 fa18 	bl	80036b4 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b03      	cmp	r3, #3
 8001288:	dc05      	bgt.n	8001296 <controlMotor2+0x36>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f113 0f03 	cmn.w	r3, #3
 8001290:	db01      	blt.n	8001296 <controlMotor2+0x36>
			_speed = 3;
 8001292:	2303      	movs	r3, #3
 8001294:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2bfa      	cmp	r3, #250	; 0xfa
 800129a:	dd01      	ble.n	80012a0 <controlMotor2+0x40>
	{
		_speed = 250;
 800129c:	23fa      	movs	r3, #250	; 0xfa
 800129e:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 80012a6:	da02      	bge.n	80012ae <controlMotor2+0x4e>
	{
		_speed = -250;
 80012a8:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 80012ac:	607b      	str	r3, [r7, #4]
	}
	debugSpeed2 = abs(_speed);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bfb8      	it	lt
 80012b4:	425b      	neglt	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f8d8 	bl	800046c <__aeabi_i2d>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <controlMotor2+0x84>)
 80012c2:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor2, motor2_channel, abs(_speed));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <controlMotor2+0x88>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	200000e0 	.word	0x200000e0
 80012e8:	20000158 	.word	0x20000158

080012ec <controlMotor3>:
void controlMotor3(int _speed)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db05      	blt.n	8001306 <controlMotor3+0x1a>
	{
		HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, CCW);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2108      	movs	r1, #8
 80012fe:	481b      	ldr	r0, [pc, #108]	; (800136c <controlMotor3+0x80>)
 8001300:	f002 f9d8 	bl	80036b4 <HAL_GPIO_WritePin>
 8001304:	e004      	b.n	8001310 <controlMotor3+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor3Dir_GPIO_Port, motor3Dir_Pin, FCW);
 8001306:	2200      	movs	r2, #0
 8001308:	2108      	movs	r1, #8
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <controlMotor3+0x80>)
 800130c:	f002 f9d2 	bl	80036b4 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b03      	cmp	r3, #3
 8001314:	dc05      	bgt.n	8001322 <controlMotor3+0x36>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f113 0f03 	cmn.w	r3, #3
 800131c:	db01      	blt.n	8001322 <controlMotor3+0x36>
				_speed = 3;
 800131e:	2303      	movs	r3, #3
 8001320:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2bfa      	cmp	r3, #250	; 0xfa
 8001326:	dd01      	ble.n	800132c <controlMotor3+0x40>
	{
		_speed = 250;
 8001328:	23fa      	movs	r3, #250	; 0xfa
 800132a:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8001332:	da02      	bge.n	800133a <controlMotor3+0x4e>
	{
		_speed = -250;
 8001334:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8001338:	607b      	str	r3, [r7, #4]
	}
	debugSpeed3 = abs(_speed);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	bfb8      	it	lt
 8001340:	425b      	neglt	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f892 	bl	800046c <__aeabi_i2d>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <controlMotor3+0x84>)
 800134e:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor3, motor3_channel, abs(_speed));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001358:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <controlMotor3+0x88>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bd90      	pop	{r4, r7, pc}
 800136a:	bf00      	nop
 800136c:	40020c00 	.word	0x40020c00
 8001370:	200001d0 	.word	0x200001d0
 8001374:	20000360 	.word	0x20000360

08001378 <controlMotor4>:
void controlMotor4(int _speed)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	if(_speed >= 0)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db05      	blt.n	8001392 <controlMotor4+0x1a>
	{
		HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, CCW);
 8001386:	2201      	movs	r2, #1
 8001388:	2110      	movs	r1, #16
 800138a:	481b      	ldr	r0, [pc, #108]	; (80013f8 <controlMotor4+0x80>)
 800138c:	f002 f992 	bl	80036b4 <HAL_GPIO_WritePin>
 8001390:	e004      	b.n	800139c <controlMotor4+0x24>
	}
	else
	{
		HAL_GPIO_WritePin(motor4Dir_GPIO_Port, motor4Dir_Pin, FCW);
 8001392:	2200      	movs	r2, #0
 8001394:	2110      	movs	r1, #16
 8001396:	4818      	ldr	r0, [pc, #96]	; (80013f8 <controlMotor4+0x80>)
 8001398:	f002 f98c 	bl	80036b4 <HAL_GPIO_WritePin>
	}
	if((_speed <= 3)&&(_speed >= -3))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	dc05      	bgt.n	80013ae <controlMotor4+0x36>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f113 0f03 	cmn.w	r3, #3
 80013a8:	db01      	blt.n	80013ae <controlMotor4+0x36>
		_speed = 3;
 80013aa:	2303      	movs	r3, #3
 80013ac:	607b      	str	r3, [r7, #4]
	if(_speed > 250)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2bfa      	cmp	r3, #250	; 0xfa
 80013b2:	dd01      	ble.n	80013b8 <controlMotor4+0x40>
	{
		_speed = 250;
 80013b4:	23fa      	movs	r3, #250	; 0xfa
 80013b6:	607b      	str	r3, [r7, #4]
	}
	if(_speed < -250)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 80013be:	da02      	bge.n	80013c6 <controlMotor4+0x4e>
	{
		_speed = -250;
 80013c0:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 80013c4:	607b      	str	r3, [r7, #4]
	}
	debugSpeed4 = abs(_speed);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bfb8      	it	lt
 80013cc:	425b      	neglt	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f84c 	bl	800046c <__aeabi_i2d>
 80013d4:	4603      	mov	r3, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	4a08      	ldr	r2, [pc, #32]	; (80013fc <controlMotor4+0x84>)
 80013da:	e9c2 3400 	strd	r3, r4, [r2]
	__HAL_TIM_SetCompare(&motor4, motor4_channel, abs(_speed));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80013e4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <controlMotor4+0x88>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020c00 	.word	0x40020c00
 80013fc:	200002b8 	.word	0x200002b8
 8001400:	20000360 	.word	0x20000360

08001404 <handControl_Init>:
int handElapsedPulses;

uint32_t delayTick001;

void handControl_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&hand);
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <handControl_Init+0x1c>)
 800140a:	f002 fe14 	bl	8004036 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(handEn_GPIO_Port, handEn_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <handControl_Init+0x20>)
 8001416:	f002 f94d 	bl	80036b4 <HAL_GPIO_WritePin>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200001fc 	.word	0x200001fc
 8001424:	40020400 	.word	0x40020400

08001428 <HAL_TIM_PeriodElapsedCallback>:
	handEn = 1;
	handStatus = _handStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == hand.Instance)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d17f      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0x114>
	{
		delayTick001++;
 800143c:	4b42      	ldr	r3, [pc, #264]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	4a41      	ldr	r2, [pc, #260]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001444:	6013      	str	r3, [r2, #0]
		if(handEn == 1)
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d176      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0x114>
		{
			if(handStatus == HAND_STATUS_READY)
 800144e:	4b40      	ldr	r3, [pc, #256]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d122      	bne.n	800149c <HAL_TIM_PeriodElapsedCallback+0x74>
			{
				HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, handForward);		//cấu hình chân handDir để tiến
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145c:	483d      	ldr	r0, [pc, #244]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800145e:	f002 f929 	bl	80036b4 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(handPul_GPIO_Port, handPul_Pin);					//tạo xung chân handPul
 8001462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001466:	483b      	ldr	r0, [pc, #236]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001468:	f002 f93d 	bl	80036e6 <HAL_GPIO_TogglePin>
				trackingHand++;
 800146c:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	4a39      	ldr	r2, [pc, #228]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001474:	6013      	str	r3, [r2, #0]
				handElapsedPulses++;												//đếm số xung
 8001476:	4b39      	ldr	r3, [pc, #228]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	4a37      	ldr	r2, [pc, #220]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800147e:	6013      	str	r3, [r2, #0]
				debug_HAND_STATUS_READY = handElapsedPulses;
 8001480:	4b36      	ldr	r3, [pc, #216]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a36      	ldr	r2, [pc, #216]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001486:	6013      	str	r3, [r2, #0]
				if (handElapsedPulses >= HAND_PUL_RUNUP)
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2bc7      	cmp	r3, #199	; 0xc7
 800148e:	dd05      	ble.n	800149c <HAL_TIM_PeriodElapsedCallback+0x74>
				{
					handEn = 0;														//kết thúc quá trình điều khiển
 8001490:	4b2e      	ldr	r3, [pc, #184]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
					handElapsedPulses = 0;											//reset số xung
 8001496:	4b31      	ldr	r3, [pc, #196]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
				}
			}
			if(handStatus == HAND_STATUS_PUT)
 800149c:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d123      	bne.n	80014ec <HAL_TIM_PeriodElapsedCallback+0xc4>
			{
				HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, handForward);		//cấu hình chân handDir để tiến
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	482a      	ldr	r0, [pc, #168]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80014ac:	f002 f902 	bl	80036b4 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(handPul_GPIO_Port, handPul_Pin);					//tạo xung chân handPul
 80014b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b4:	4827      	ldr	r0, [pc, #156]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80014b6:	f002 f916 	bl	80036e6 <HAL_GPIO_TogglePin>
				trackingHand++;
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a25      	ldr	r2, [pc, #148]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80014c2:	6013      	str	r3, [r2, #0]
				handElapsedPulses++;												//đếm số xung
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a24      	ldr	r2, [pc, #144]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80014cc:	6013      	str	r3, [r2, #0]
				debug_HAND_STATUS_PUT = handElapsedPulses;
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a24      	ldr	r2, [pc, #144]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80014d4:	6013      	str	r3, [r2, #0]
				if (handElapsedPulses >= HAND_PUL_RUNUP2)
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80014de:	db05      	blt.n	80014ec <HAL_TIM_PeriodElapsedCallback+0xc4>
				{
					handEn = 0;														//kết thúc quá trình điều khiển
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
					handElapsedPulses = 0;											//reset số xung
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
				}
			}
			if(handStatus == HAND_STATUS_WAIT)
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d123      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0x114>
			{
				HAL_GPIO_WritePin(handDir_GPIO_Port, handDir_Pin, handBackward);	//cấu hình chân handDir để lùi
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fa:	4816      	ldr	r0, [pc, #88]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80014fc:	f002 f8da 	bl	80036b4 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(handPul_GPIO_Port, handPul_Pin);					//tạo xung chân legPul
 8001500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001504:	4813      	ldr	r0, [pc, #76]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001506:	f002 f8ee 	bl	80036e6 <HAL_GPIO_TogglePin>
				trackingHand++;
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	4a11      	ldr	r2, [pc, #68]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001512:	6013      	str	r3, [r2, #0]
				handElapsedPulses++;												//đếm số xung
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800151c:	6013      	str	r3, [r2, #0]
				debug_HAND_STATUS_WAIT = handElapsedPulses;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001524:	6013      	str	r3, [r2, #0]
				if (handElapsedPulses >= HAND_PUL_END)
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800152e:	db05      	blt.n	800153c <HAL_TIM_PeriodElapsedCallback+0x114>
				{
					handEn = 0;														//kết thúc quá trình điều khiển
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
					handElapsedPulses = 0;											//reset số xung
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200001fc 	.word	0x200001fc
 8001548:	20000334 	.word	0x20000334
 800154c:	20000430 	.word	0x20000430
 8001550:	20000414 	.word	0x20000414
 8001554:	40020400 	.word	0x40020400
 8001558:	2000043c 	.word	0x2000043c
 800155c:	200001a8 	.word	0x200001a8
 8001560:	200003c0 	.word	0x200003c0
 8001564:	200001b0 	.word	0x200001b0
 8001568:	200000ec 	.word	0x200000ec

0800156c <PIDyaw>:
double yawPID;
#define MAX_YAW_PID 100 // 50// 70 //85
#define MIN_YAW_PID -MAX_YAW_PID//-50//-70

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	yawError = -_yawSetpoint + _yawValue;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	b29a      	uxth	r2, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	b29b      	uxth	r3, r3
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b4e      	ldr	r3, [pc, #312]	; (80016c0 <PIDyaw+0x154>)
 8001586:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 8001588:	4b4d      	ldr	r3, [pc, #308]	; (80016c0 <PIDyaw+0x154>)
 800158a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ff6c 	bl	800046c <__aeabi_i2d>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	4a4a      	ldr	r2, [pc, #296]	; (80016c4 <PIDyaw+0x158>)
 800159a:	e9c2 3400 	strd	r3, r4, [r2]
	yawD = yawError - yawPreError;
 800159e:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <PIDyaw+0x154>)
 80015a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <PIDyaw+0x15c>)
 80015a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff5c 	bl	800046c <__aeabi_i2d>
 80015b4:	4603      	mov	r3, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	4a44      	ldr	r2, [pc, #272]	; (80016cc <PIDyaw+0x160>)
 80015ba:	e9c2 3400 	strd	r3, r4, [r2]
	yawI = yawError + yawI;
 80015be:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <PIDyaw+0x154>)
 80015c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff51 	bl	800046c <__aeabi_i2d>
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <PIDyaw+0x164>)
 80015cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	f7fe fdfe 	bl	80001d4 <__adddf3>
 80015d8:	4603      	mov	r3, r0
 80015da:	460c      	mov	r4, r1
 80015dc:	4a3c      	ldr	r2, [pc, #240]	; (80016d0 <PIDyaw+0x164>)
 80015de:	e9c2 3400 	strd	r3, r4, [r2]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 80015e2:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <PIDyaw+0x168>)
 80015e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015e8:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <PIDyaw+0x158>)
 80015ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015ee:	461a      	mov	r2, r3
 80015f0:	4623      	mov	r3, r4
 80015f2:	f7fe ffa5 	bl	8000540 <__aeabi_dmul>
 80015f6:	4603      	mov	r3, r0
 80015f8:	460c      	mov	r4, r1
 80015fa:	461d      	mov	r5, r3
 80015fc:	4626      	mov	r6, r4
 80015fe:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <PIDyaw+0x16c>)
 8001600:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <PIDyaw+0x160>)
 8001606:	e9d3 3400 	ldrd	r3, r4, [r3]
 800160a:	461a      	mov	r2, r3
 800160c:	4623      	mov	r3, r4
 800160e:	f7fe ff97 	bl	8000540 <__aeabi_dmul>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	461a      	mov	r2, r3
 8001618:	4623      	mov	r3, r4
 800161a:	4628      	mov	r0, r5
 800161c:	4631      	mov	r1, r6
 800161e:	f7fe fdd9 	bl	80001d4 <__adddf3>
 8001622:	4603      	mov	r3, r0
 8001624:	460c      	mov	r4, r1
 8001626:	461d      	mov	r5, r3
 8001628:	4626      	mov	r6, r4
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <PIDyaw+0x170>)
 800162c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <PIDyaw+0x164>)
 8001632:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001636:	461a      	mov	r2, r3
 8001638:	4623      	mov	r3, r4
 800163a:	f7fe ff81 	bl	8000540 <__aeabi_dmul>
 800163e:	4603      	mov	r3, r0
 8001640:	460c      	mov	r4, r1
 8001642:	461a      	mov	r2, r3
 8001644:	4623      	mov	r3, r4
 8001646:	4628      	mov	r0, r5
 8001648:	4631      	mov	r1, r6
 800164a:	f7fe fdc3 	bl	80001d4 <__adddf3>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <PIDyaw+0x174>)
 8001654:	e9c2 3400 	strd	r3, r4, [r2]
	if(yawPID > MAX_YAW_PID)
 8001658:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <PIDyaw+0x174>)
 800165a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <PIDyaw+0x178>)
 8001664:	f7ff f9fc 	bl	8000a60 <__aeabi_dcmpgt>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <PIDyaw+0x10e>
	{
		yawPID = MAX_YAW_PID;
 800166e:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <PIDyaw+0x174>)
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	4c1b      	ldr	r4, [pc, #108]	; (80016e4 <PIDyaw+0x178>)
 8001676:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <PIDyaw+0x174>)
 800167c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <PIDyaw+0x17c>)
 8001686:	f7ff f9cd 	bl	8000a24 <__aeabi_dcmplt>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <PIDyaw+0x130>
	{
		yawPID = MIN_YAW_PID;
 8001690:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <PIDyaw+0x174>)
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	4c14      	ldr	r4, [pc, #80]	; (80016e8 <PIDyaw+0x17c>)
 8001698:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <PIDyaw+0x154>)
 800169e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <PIDyaw+0x15c>)
 80016a4:	801a      	strh	r2, [r3, #0]
	return yawPID;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <PIDyaw+0x174>)
 80016a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016ac:	ec44 3b17 	vmov	d7, r3, r4
}
 80016b0:	eeb0 0a47 	vmov.f32	s0, s14
 80016b4:	eef0 0a67 	vmov.f32	s1, s15
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016be:	bf00      	nop
 80016c0:	200001f8 	.word	0x200001f8
 80016c4:	20000248 	.word	0x20000248
 80016c8:	2000019a 	.word	0x2000019a
 80016cc:	20000150 	.word	0x20000150
 80016d0:	200001f0 	.word	0x200001f0
 80016d4:	20000028 	.word	0x20000028
 80016d8:	20000030 	.word	0x20000030
 80016dc:	20000038 	.word	0x20000038
 80016e0:	200003b0 	.word	0x200003b0
 80016e4:	40590000 	.word	0x40590000
 80016e8:	c0590000 	.word	0xc0590000
 80016ec:	00000000 	.word	0x00000000

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f6:	f001 f92f 	bl	8002958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fa:	f000 fb91 	bl	8001e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fe:	f000 fe29 	bl	8002354 <MX_GPIO_Init>
  MX_DMA_Init();
 8001702:	f000 fdf1 	bl	80022e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001706:	f000 fdc5 	bl	8002294 <MX_USART1_UART_Init>
  MX_UART4_Init();
 800170a:	f000 fd99 	bl	8002240 <MX_UART4_Init>
  MX_TIM1_Init();
 800170e:	f000 fbf1 	bl	8001ef4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001712:	f000 fce9 	bl	80020e8 <MX_TIM8_Init>
  MX_TIM5_Init();
 8001716:	f000 fc99 	bl	800204c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 800171a:	f7ff fb81 	bl	8000e20 <peripheralUART_Init>
  peripheralPWM_Init();
 800171e:	f7ff fd41 	bl	80011a4 <peripheralPWM_Init>
  handControl_Init();
 8001722:	f7ff fe6f 	bl	8001404 <handControl_Init>
  compassReset();
 8001726:	f7ff fce9 	bl	80010fc <compassReset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  testPWM();
	if(joyRigtHor == 0)
 800172a:	4bcd      	ldr	r3, [pc, #820]	; (8001a60 <main+0x370>)
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 81cd 	bne.w	8001ad0 <main+0x3e0>
	{

		PIDyaw(compassData, rotateAngle);
 8001736:	4bcb      	ldr	r3, [pc, #812]	; (8001a64 <main+0x374>)
 8001738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173c:	461d      	mov	r5, r3
 800173e:	4bca      	ldr	r3, [pc, #808]	; (8001a68 <main+0x378>)
 8001740:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001744:	4618      	mov	r0, r3
 8001746:	4621      	mov	r1, r4
 8001748:	f7ff f9aa 	bl	8000aa0 <__aeabi_d2iz>
 800174c:	4603      	mov	r3, r0
 800174e:	4619      	mov	r1, r3
 8001750:	4628      	mov	r0, r5
 8001752:	f7ff ff0b 	bl	800156c <PIDyaw>
		_dir = atan2(joyLeftHor, -joyLeftVer);
 8001756:	4bc5      	ldr	r3, [pc, #788]	; (8001a6c <main+0x37c>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fe85 	bl	800046c <__aeabi_i2d>
 8001762:	4604      	mov	r4, r0
 8001764:	460d      	mov	r5, r1
 8001766:	4bc2      	ldr	r3, [pc, #776]	; (8001a70 <main+0x380>)
 8001768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176c:	425b      	negs	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fe7c 	bl	800046c <__aeabi_i2d>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	ec43 2b11 	vmov	d1, r2, r3
 800177c:	ec45 4b10 	vmov	d0, r4, r5
 8001780:	f004 fb76 	bl	8005e70 <atan2>
 8001784:	eeb0 7a40 	vmov.f32	s14, s0
 8001788:	eef0 7a60 	vmov.f32	s15, s1
 800178c:	4bb9      	ldr	r3, [pc, #740]	; (8001a74 <main+0x384>)
 800178e:	ed83 7b00 	vstr	d7, [r3]
		_controlSpeed = sqrt(joyLeftHor*joyLeftHor + joyLeftVer*joyLeftVer);
 8001792:	4bb6      	ldr	r3, [pc, #728]	; (8001a6c <main+0x37c>)
 8001794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001798:	461a      	mov	r2, r3
 800179a:	4bb4      	ldr	r3, [pc, #720]	; (8001a6c <main+0x37c>)
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	fb03 f202 	mul.w	r2, r3, r2
 80017a4:	4bb2      	ldr	r3, [pc, #712]	; (8001a70 <main+0x380>)
 80017a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4bb0      	ldr	r3, [pc, #704]	; (8001a70 <main+0x380>)
 80017ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b2:	fb03 f301 	mul.w	r3, r3, r1
 80017b6:	4413      	add	r3, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe57 	bl	800046c <__aeabi_i2d>
 80017be:	4603      	mov	r3, r0
 80017c0:	460c      	mov	r4, r1
 80017c2:	ec44 3b10 	vmov	d0, r3, r4
 80017c6:	f004 fb55 	bl	8005e74 <sqrt>
 80017ca:	eeb0 7a40 	vmov.f32	s14, s0
 80017ce:	eef0 7a60 	vmov.f32	s15, s1
 80017d2:	4ba9      	ldr	r3, [pc, #676]	; (8001a78 <main+0x388>)
 80017d4:	ed83 7b00 	vstr	d7, [r3]
		_motor1Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 80017d8:	4ba8      	ldr	r3, [pc, #672]	; (8001a7c <main+0x38c>)
 80017da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017de:	4ba8      	ldr	r3, [pc, #672]	; (8001a80 <main+0x390>)
 80017e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	f7fe feaa 	bl	8000540 <__aeabi_dmul>
 80017ec:	4603      	mov	r3, r0
 80017ee:	460c      	mov	r4, r1
 80017f0:	461d      	mov	r5, r3
 80017f2:	4626      	mov	r6, r4
 80017f4:	4ba3      	ldr	r3, [pc, #652]	; (8001a84 <main+0x394>)
 80017f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017fa:	4b9f      	ldr	r3, [pc, #636]	; (8001a78 <main+0x388>)
 80017fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	f7fe fe9c 	bl	8000540 <__aeabi_dmul>
 8001808:	4603      	mov	r3, r0
 800180a:	460c      	mov	r4, r1
 800180c:	4698      	mov	r8, r3
 800180e:	46a1      	mov	r9, r4
 8001810:	4b98      	ldr	r3, [pc, #608]	; (8001a74 <main+0x384>)
 8001812:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001816:	461a      	mov	r2, r3
 8001818:	4623      	mov	r3, r4
 800181a:	a18d      	add	r1, pc, #564	; (adr r1, 8001a50 <main+0x360>)
 800181c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001820:	f7fe fcd6 	bl	80001d0 <__aeabi_dsub>
 8001824:	4603      	mov	r3, r0
 8001826:	460c      	mov	r4, r1
 8001828:	ec44 3b17 	vmov	d7, r3, r4
 800182c:	eeb0 0a47 	vmov.f32	s0, s14
 8001830:	eef0 0a67 	vmov.f32	s1, s15
 8001834:	f004 fad8 	bl	8005de8 <cos>
 8001838:	ec54 3b10 	vmov	r3, r4, d0
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	4640      	mov	r0, r8
 8001842:	4649      	mov	r1, r9
 8001844:	f7fe fe7c 	bl	8000540 <__aeabi_dmul>
 8001848:	4603      	mov	r3, r0
 800184a:	460c      	mov	r4, r1
 800184c:	4618      	mov	r0, r3
 800184e:	4621      	mov	r1, r4
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	f7fe fcbc 	bl	80001d4 <__adddf3>
 800185c:	4603      	mov	r3, r0
 800185e:	460c      	mov	r4, r1
 8001860:	461a      	mov	r2, r3
 8001862:	4623      	mov	r3, r4
 8001864:	4628      	mov	r0, r5
 8001866:	4631      	mov	r1, r6
 8001868:	f7fe fcb4 	bl	80001d4 <__adddf3>
 800186c:	4603      	mov	r3, r0
 800186e:	460c      	mov	r4, r1
 8001870:	4a85      	ldr	r2, [pc, #532]	; (8001a88 <main+0x398>)
 8001872:	e9c2 3400 	strd	r3, r4, [r2]
		_motor2Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 8001876:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <main+0x38c>)
 8001878:	e9d3 0100 	ldrd	r0, r1, [r3]
 800187c:	4b80      	ldr	r3, [pc, #512]	; (8001a80 <main+0x390>)
 800187e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001882:	461a      	mov	r2, r3
 8001884:	4623      	mov	r3, r4
 8001886:	f7fe fe5b 	bl	8000540 <__aeabi_dmul>
 800188a:	4603      	mov	r3, r0
 800188c:	460c      	mov	r4, r1
 800188e:	461d      	mov	r5, r3
 8001890:	4626      	mov	r6, r4
 8001892:	4b7c      	ldr	r3, [pc, #496]	; (8001a84 <main+0x394>)
 8001894:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001898:	4b77      	ldr	r3, [pc, #476]	; (8001a78 <main+0x388>)
 800189a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800189e:	461a      	mov	r2, r3
 80018a0:	4623      	mov	r3, r4
 80018a2:	f7fe fe4d 	bl	8000540 <__aeabi_dmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	4698      	mov	r8, r3
 80018ac:	46a1      	mov	r9, r4
 80018ae:	4b71      	ldr	r3, [pc, #452]	; (8001a74 <main+0x384>)
 80018b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b4:	a366      	add	r3, pc, #408	; (adr r3, 8001a50 <main+0x360>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fc8b 	bl	80001d4 <__adddf3>
 80018be:	4603      	mov	r3, r0
 80018c0:	460c      	mov	r4, r1
 80018c2:	ec44 3b17 	vmov	d7, r3, r4
 80018c6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ca:	eef0 0a67 	vmov.f32	s1, s15
 80018ce:	f004 fa8b 	bl	8005de8 <cos>
 80018d2:	ec54 3b10 	vmov	r3, r4, d0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4623      	mov	r3, r4
 80018da:	4640      	mov	r0, r8
 80018dc:	4649      	mov	r1, r9
 80018de:	f7fe fe2f 	bl	8000540 <__aeabi_dmul>
 80018e2:	4603      	mov	r3, r0
 80018e4:	460c      	mov	r4, r1
 80018e6:	461a      	mov	r2, r3
 80018e8:	4623      	mov	r3, r4
 80018ea:	4628      	mov	r0, r5
 80018ec:	4631      	mov	r1, r6
 80018ee:	f7fe fc71 	bl	80001d4 <__adddf3>
 80018f2:	4603      	mov	r3, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	4a65      	ldr	r2, [pc, #404]	; (8001a8c <main+0x39c>)
 80018f8:	e9c2 3400 	strd	r3, r4, [r2]
		_motor3Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 80018fc:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <main+0x38c>)
 80018fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001902:	4b5f      	ldr	r3, [pc, #380]	; (8001a80 <main+0x390>)
 8001904:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001908:	461a      	mov	r2, r3
 800190a:	4623      	mov	r3, r4
 800190c:	f7fe fe18 	bl	8000540 <__aeabi_dmul>
 8001910:	4603      	mov	r3, r0
 8001912:	460c      	mov	r4, r1
 8001914:	461d      	mov	r5, r3
 8001916:	4626      	mov	r6, r4
 8001918:	4b5a      	ldr	r3, [pc, #360]	; (8001a84 <main+0x394>)
 800191a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800191e:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <main+0x388>)
 8001920:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001924:	461a      	mov	r2, r3
 8001926:	4623      	mov	r3, r4
 8001928:	f7fe fe0a 	bl	8000540 <__aeabi_dmul>
 800192c:	4603      	mov	r3, r0
 800192e:	460c      	mov	r4, r1
 8001930:	4698      	mov	r8, r3
 8001932:	46a1      	mov	r9, r4
 8001934:	4b4f      	ldr	r3, [pc, #316]	; (8001a74 <main+0x384>)
 8001936:	e9d3 0100 	ldrd	r0, r1, [r3]
 800193a:	a347      	add	r3, pc, #284	; (adr r3, 8001a58 <main+0x368>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7fe fc48 	bl	80001d4 <__adddf3>
 8001944:	4603      	mov	r3, r0
 8001946:	460c      	mov	r4, r1
 8001948:	ec44 3b17 	vmov	d7, r3, r4
 800194c:	eeb0 0a47 	vmov.f32	s0, s14
 8001950:	eef0 0a67 	vmov.f32	s1, s15
 8001954:	f004 fa48 	bl	8005de8 <cos>
 8001958:	ec54 3b10 	vmov	r3, r4, d0
 800195c:	461a      	mov	r2, r3
 800195e:	4623      	mov	r3, r4
 8001960:	4640      	mov	r0, r8
 8001962:	4649      	mov	r1, r9
 8001964:	f7fe fdec 	bl	8000540 <__aeabi_dmul>
 8001968:	4603      	mov	r3, r0
 800196a:	460c      	mov	r4, r1
 800196c:	461a      	mov	r2, r3
 800196e:	4623      	mov	r3, r4
 8001970:	4628      	mov	r0, r5
 8001972:	4631      	mov	r1, r6
 8001974:	f7fe fc2e 	bl	80001d4 <__adddf3>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	4618      	mov	r0, r3
 800197e:	4621      	mov	r1, r4
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	f7fe fc24 	bl	80001d4 <__adddf3>
 800198c:	4603      	mov	r3, r0
 800198e:	460c      	mov	r4, r1
 8001990:	4a3f      	ldr	r2, [pc, #252]	; (8001a90 <main+0x3a0>)
 8001992:	e9c2 3400 	strd	r3, r4, [r2]
		_motor4Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 8001996:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <main+0x38c>)
 8001998:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199c:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <main+0x390>)
 800199e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4623      	mov	r3, r4
 80019a6:	f7fe fdcb 	bl	8000540 <__aeabi_dmul>
 80019aa:	4603      	mov	r3, r0
 80019ac:	460c      	mov	r4, r1
 80019ae:	461d      	mov	r5, r3
 80019b0:	4626      	mov	r6, r4
 80019b2:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <main+0x394>)
 80019b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <main+0x388>)
 80019ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019be:	461a      	mov	r2, r3
 80019c0:	4623      	mov	r3, r4
 80019c2:	f7fe fdbd 	bl	8000540 <__aeabi_dmul>
 80019c6:	4603      	mov	r3, r0
 80019c8:	460c      	mov	r4, r1
 80019ca:	4698      	mov	r8, r3
 80019cc:	46a1      	mov	r9, r4
 80019ce:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <main+0x384>)
 80019d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	a11f      	add	r1, pc, #124	; (adr r1, 8001a58 <main+0x368>)
 80019da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019de:	f7fe fbf7 	bl	80001d0 <__aeabi_dsub>
 80019e2:	4603      	mov	r3, r0
 80019e4:	460c      	mov	r4, r1
 80019e6:	ec44 3b17 	vmov	d7, r3, r4
 80019ea:	eeb0 0a47 	vmov.f32	s0, s14
 80019ee:	eef0 0a67 	vmov.f32	s1, s15
 80019f2:	f004 f9f9 	bl	8005de8 <cos>
 80019f6:	ec54 3b10 	vmov	r3, r4, d0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4623      	mov	r3, r4
 80019fe:	4640      	mov	r0, r8
 8001a00:	4649      	mov	r1, r9
 8001a02:	f7fe fd9d 	bl	8000540 <__aeabi_dmul>
 8001a06:	4603      	mov	r3, r0
 8001a08:	460c      	mov	r4, r1
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4623      	mov	r3, r4
 8001a0e:	4628      	mov	r0, r5
 8001a10:	4631      	mov	r1, r6
 8001a12:	f7fe fbdf 	bl	80001d4 <__adddf3>
 8001a16:	4603      	mov	r3, r0
 8001a18:	460c      	mov	r4, r1
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <main+0x3a4>)
 8001a1c:	e9c2 3400 	strd	r3, r4, [r2]
		controlMotor1(_motor1Speed);
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <main+0x398>)
 8001a22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a26:	4618      	mov	r0, r3
 8001a28:	4621      	mov	r1, r4
 8001a2a:	f7ff f839 	bl	8000aa0 <__aeabi_d2iz>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fbcf 	bl	80011d4 <controlMotor1>
		controlMotor2(_motor2Speed);
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <main+0x39c>)
 8001a38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	4621      	mov	r1, r4
 8001a40:	f7ff f82e 	bl	8000aa0 <__aeabi_d2iz>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fc0a 	bl	8001260 <controlMotor2>
 8001a4c:	e024      	b.n	8001a98 <main+0x3a8>
 8001a4e:	bf00      	nop
 8001a50:	7f3321d2 	.word	0x7f3321d2
 8001a54:	4002d97c 	.word	0x4002d97c
 8001a58:	54442d18 	.word	0x54442d18
 8001a5c:	3fe921fb 	.word	0x3fe921fb
 8001a60:	200001b4 	.word	0x200001b4
 8001a64:	20000240 	.word	0x20000240
 8001a68:	20000428 	.word	0x20000428
 8001a6c:	20000424 	.word	0x20000424
 8001a70:	2000043a 	.word	0x2000043a
 8001a74:	200001e8 	.word	0x200001e8
 8001a78:	20000318 	.word	0x20000318
 8001a7c:	200003b0 	.word	0x200003b0
 8001a80:	20000020 	.word	0x20000020
 8001a84:	20000018 	.word	0x20000018
 8001a88:	200002c8 	.word	0x200002c8
 8001a8c:	20000358 	.word	0x20000358
 8001a90:	20000418 	.word	0x20000418
 8001a94:	200001a0 	.word	0x200001a0
		controlMotor3(_motor3Speed);
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <main+0x3d8>)
 8001a9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	f7fe fffd 	bl	8000aa0 <__aeabi_d2iz>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fc1f 	bl	80012ec <controlMotor3>
		controlMotor4(_motor4Speed);
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <main+0x3dc>)
 8001ab0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	f7fe fff2 	bl	8000aa0 <__aeabi_d2iz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc5a 	bl	8001378 <controlMotor4>
 8001ac4:	e631      	b.n	800172a <main+0x3a>
 8001ac6:	bf00      	nop
 8001ac8:	20000418 	.word	0x20000418
 8001acc:	200001a0 	.word	0x200001a0
	}
	else
	{
		_dir = atan2(joyLeftHor, -joyLeftVer);
 8001ad0:	4bc7      	ldr	r3, [pc, #796]	; (8001df0 <main+0x700>)
 8001ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fcc8 	bl	800046c <__aeabi_i2d>
 8001adc:	4604      	mov	r4, r0
 8001ade:	460d      	mov	r5, r1
 8001ae0:	4bc4      	ldr	r3, [pc, #784]	; (8001df4 <main+0x704>)
 8001ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae6:	425b      	negs	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fcbf 	bl	800046c <__aeabi_i2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	ec43 2b11 	vmov	d1, r2, r3
 8001af6:	ec45 4b10 	vmov	d0, r4, r5
 8001afa:	f004 f9b9 	bl	8005e70 <atan2>
 8001afe:	eeb0 7a40 	vmov.f32	s14, s0
 8001b02:	eef0 7a60 	vmov.f32	s15, s1
 8001b06:	4bbc      	ldr	r3, [pc, #752]	; (8001df8 <main+0x708>)
 8001b08:	ed83 7b00 	vstr	d7, [r3]
		_controlSpeed = sqrt(joyLeftHor*joyLeftHor + joyLeftVer*joyLeftVer);
 8001b0c:	4bb8      	ldr	r3, [pc, #736]	; (8001df0 <main+0x700>)
 8001b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b12:	461a      	mov	r2, r3
 8001b14:	4bb6      	ldr	r3, [pc, #728]	; (8001df0 <main+0x700>)
 8001b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1a:	fb03 f202 	mul.w	r2, r3, r2
 8001b1e:	4bb5      	ldr	r3, [pc, #724]	; (8001df4 <main+0x704>)
 8001b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b24:	4619      	mov	r1, r3
 8001b26:	4bb3      	ldr	r3, [pc, #716]	; (8001df4 <main+0x704>)
 8001b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2c:	fb03 f301 	mul.w	r3, r3, r1
 8001b30:	4413      	add	r3, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fc9a 	bl	800046c <__aeabi_i2d>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	ec44 3b10 	vmov	d0, r3, r4
 8001b40:	f004 f998 	bl	8005e74 <sqrt>
 8001b44:	eeb0 7a40 	vmov.f32	s14, s0
 8001b48:	eef0 7a60 	vmov.f32	s15, s1
 8001b4c:	4bab      	ldr	r3, [pc, #684]	; (8001dfc <main+0x70c>)
 8001b4e:	ed83 7b00 	vstr	d7, [r3]
		_motor1Speed = joyRigtHor*1.0 + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 8001b52:	4bab      	ldr	r3, [pc, #684]	; (8001e00 <main+0x710>)
 8001b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fc87 	bl	800046c <__aeabi_i2d>
 8001b5e:	4605      	mov	r5, r0
 8001b60:	460e      	mov	r6, r1
 8001b62:	4ba8      	ldr	r3, [pc, #672]	; (8001e04 <main+0x714>)
 8001b64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b68:	4ba4      	ldr	r3, [pc, #656]	; (8001dfc <main+0x70c>)
 8001b6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4623      	mov	r3, r4
 8001b72:	f7fe fce5 	bl	8000540 <__aeabi_dmul>
 8001b76:	4603      	mov	r3, r0
 8001b78:	460c      	mov	r4, r1
 8001b7a:	4698      	mov	r8, r3
 8001b7c:	46a1      	mov	r9, r4
 8001b7e:	4b9e      	ldr	r3, [pc, #632]	; (8001df8 <main+0x708>)
 8001b80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4623      	mov	r3, r4
 8001b88:	a195      	add	r1, pc, #596	; (adr r1, 8001de0 <main+0x6f0>)
 8001b8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b8e:	f7fe fb1f 	bl	80001d0 <__aeabi_dsub>
 8001b92:	4603      	mov	r3, r0
 8001b94:	460c      	mov	r4, r1
 8001b96:	ec44 3b17 	vmov	d7, r3, r4
 8001b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ba2:	f004 f921 	bl	8005de8 <cos>
 8001ba6:	ec54 3b10 	vmov	r3, r4, d0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4623      	mov	r3, r4
 8001bae:	4640      	mov	r0, r8
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	f7fe fcc5 	bl	8000540 <__aeabi_dmul>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460c      	mov	r4, r1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	f7fe fb05 	bl	80001d4 <__adddf3>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460c      	mov	r4, r1
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4623      	mov	r3, r4
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	4631      	mov	r1, r6
 8001bd6:	f7fe fafd 	bl	80001d4 <__adddf3>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	4a8a      	ldr	r2, [pc, #552]	; (8001e08 <main+0x718>)
 8001be0:	e9c2 3400 	strd	r3, r4, [r2]
		_motor2Speed = joyRigtHor*1.0 + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 8001be4:	4b86      	ldr	r3, [pc, #536]	; (8001e00 <main+0x710>)
 8001be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fc3e 	bl	800046c <__aeabi_i2d>
 8001bf0:	4605      	mov	r5, r0
 8001bf2:	460e      	mov	r6, r1
 8001bf4:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <main+0x714>)
 8001bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfa:	4b80      	ldr	r3, [pc, #512]	; (8001dfc <main+0x70c>)
 8001bfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4623      	mov	r3, r4
 8001c04:	f7fe fc9c 	bl	8000540 <__aeabi_dmul>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	4698      	mov	r8, r3
 8001c0e:	46a1      	mov	r9, r4
 8001c10:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <main+0x708>)
 8001c12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c16:	a372      	add	r3, pc, #456	; (adr r3, 8001de0 <main+0x6f0>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe fada 	bl	80001d4 <__adddf3>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	ec44 3b17 	vmov	d7, r3, r4
 8001c28:	eeb0 0a47 	vmov.f32	s0, s14
 8001c2c:	eef0 0a67 	vmov.f32	s1, s15
 8001c30:	f004 f8da 	bl	8005de8 <cos>
 8001c34:	ec54 3b10 	vmov	r3, r4, d0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	4640      	mov	r0, r8
 8001c3e:	4649      	mov	r1, r9
 8001c40:	f7fe fc7e 	bl	8000540 <__aeabi_dmul>
 8001c44:	4603      	mov	r3, r0
 8001c46:	460c      	mov	r4, r1
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	4631      	mov	r1, r6
 8001c50:	f7fe fac0 	bl	80001d4 <__adddf3>
 8001c54:	4603      	mov	r3, r0
 8001c56:	460c      	mov	r4, r1
 8001c58:	4a6c      	ldr	r2, [pc, #432]	; (8001e0c <main+0x71c>)
 8001c5a:	e9c2 3400 	strd	r3, r4, [r2]
		_motor3Speed = joyRigtHor*1.0 +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 8001c5e:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <main+0x710>)
 8001c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc01 	bl	800046c <__aeabi_i2d>
 8001c6a:	4605      	mov	r5, r0
 8001c6c:	460e      	mov	r6, r1
 8001c6e:	4b65      	ldr	r3, [pc, #404]	; (8001e04 <main+0x714>)
 8001c70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c74:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <main+0x70c>)
 8001c76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4623      	mov	r3, r4
 8001c7e:	f7fe fc5f 	bl	8000540 <__aeabi_dmul>
 8001c82:	4603      	mov	r3, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	4698      	mov	r8, r3
 8001c88:	46a1      	mov	r9, r4
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	; (8001df8 <main+0x708>)
 8001c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c90:	a355      	add	r3, pc, #340	; (adr r3, 8001de8 <main+0x6f8>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fa9d 	bl	80001d4 <__adddf3>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	ec44 3b17 	vmov	d7, r3, r4
 8001ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca6:	eef0 0a67 	vmov.f32	s1, s15
 8001caa:	f004 f89d 	bl	8005de8 <cos>
 8001cae:	ec54 3b10 	vmov	r3, r4, d0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4623      	mov	r3, r4
 8001cb6:	4640      	mov	r0, r8
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f7fe fc41 	bl	8000540 <__aeabi_dmul>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4623      	mov	r3, r4
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	4631      	mov	r1, r6
 8001cca:	f7fe fa83 	bl	80001d4 <__adddf3>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	f7fe fa79 	bl	80001d4 <__adddf3>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <main+0x720>)
 8001ce8:	e9c2 3400 	strd	r3, r4, [r2]
		_motor4Speed = joyRigtHor*1.0 +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 8001cec:	4b44      	ldr	r3, [pc, #272]	; (8001e00 <main+0x710>)
 8001cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fbba 	bl	800046c <__aeabi_i2d>
 8001cf8:	4605      	mov	r5, r0
 8001cfa:	460e      	mov	r6, r1
 8001cfc:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <main+0x714>)
 8001cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d02:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <main+0x70c>)
 8001d04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	f7fe fc18 	bl	8000540 <__aeabi_dmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	460c      	mov	r4, r1
 8001d14:	4698      	mov	r8, r3
 8001d16:	46a1      	mov	r9, r4
 8001d18:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <main+0x708>)
 8001d1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4623      	mov	r3, r4
 8001d22:	a131      	add	r1, pc, #196	; (adr r1, 8001de8 <main+0x6f8>)
 8001d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d28:	f7fe fa52 	bl	80001d0 <__aeabi_dsub>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	460c      	mov	r4, r1
 8001d30:	ec44 3b17 	vmov	d7, r3, r4
 8001d34:	eeb0 0a47 	vmov.f32	s0, s14
 8001d38:	eef0 0a67 	vmov.f32	s1, s15
 8001d3c:	f004 f854 	bl	8005de8 <cos>
 8001d40:	ec54 3b10 	vmov	r3, r4, d0
 8001d44:	461a      	mov	r2, r3
 8001d46:	4623      	mov	r3, r4
 8001d48:	4640      	mov	r0, r8
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	f7fe fbf8 	bl	8000540 <__aeabi_dmul>
 8001d50:	4603      	mov	r3, r0
 8001d52:	460c      	mov	r4, r1
 8001d54:	461a      	mov	r2, r3
 8001d56:	4623      	mov	r3, r4
 8001d58:	4628      	mov	r0, r5
 8001d5a:	4631      	mov	r1, r6
 8001d5c:	f7fe fa3a 	bl	80001d4 <__adddf3>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <main+0x724>)
 8001d66:	e9c2 3400 	strd	r3, r4, [r2]
		controlMotor1(_motor1Speed);
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <main+0x718>)
 8001d6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d70:	4618      	mov	r0, r3
 8001d72:	4621      	mov	r1, r4
 8001d74:	f7fe fe94 	bl	8000aa0 <__aeabi_d2iz>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fa2a 	bl	80011d4 <controlMotor1>
		controlMotor2(_motor2Speed);
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <main+0x71c>)
 8001d82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d86:	4618      	mov	r0, r3
 8001d88:	4621      	mov	r1, r4
 8001d8a:	f7fe fe89 	bl	8000aa0 <__aeabi_d2iz>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fa65 	bl	8001260 <controlMotor2>
		controlMotor3(_motor3Speed);
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <main+0x720>)
 8001d98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	4621      	mov	r1, r4
 8001da0:	f7fe fe7e 	bl	8000aa0 <__aeabi_d2iz>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff faa0 	bl	80012ec <controlMotor3>
		controlMotor4(_motor4Speed);
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <main+0x724>)
 8001dae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001db2:	4618      	mov	r0, r3
 8001db4:	4621      	mov	r1, r4
 8001db6:	f7fe fe73 	bl	8000aa0 <__aeabi_d2iz>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fadb 	bl	8001378 <controlMotor4>
		rotateAngle = compassData;
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <main+0x728>)
 8001dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fb4f 	bl	800046c <__aeabi_i2d>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <main+0x72c>)
 8001dd4:	e9c2 3400 	strd	r3, r4, [r2]
	if(joyRigtHor == 0)
 8001dd8:	e4a7      	b.n	800172a <main+0x3a>
 8001dda:	bf00      	nop
 8001ddc:	f3af 8000 	nop.w
 8001de0:	7f3321d2 	.word	0x7f3321d2
 8001de4:	4002d97c 	.word	0x4002d97c
 8001de8:	54442d18 	.word	0x54442d18
 8001dec:	3fe921fb 	.word	0x3fe921fb
 8001df0:	20000424 	.word	0x20000424
 8001df4:	2000043a 	.word	0x2000043a
 8001df8:	200001e8 	.word	0x200001e8
 8001dfc:	20000318 	.word	0x20000318
 8001e00:	200001b4 	.word	0x200001b4
 8001e04:	20000018 	.word	0x20000018
 8001e08:	200002c8 	.word	0x200002c8
 8001e0c:	20000358 	.word	0x20000358
 8001e10:	20000418 	.word	0x20000418
 8001e14:	200001a0 	.word	0x200001a0
 8001e18:	20000240 	.word	0x20000240
 8001e1c:	20000428 	.word	0x20000428

08001e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b094      	sub	sp, #80	; 0x50
 8001e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e26:	f107 0320 	add.w	r3, r7, #32
 8001e2a:	2230      	movs	r2, #48	; 0x30
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 ffd2 	bl	8005dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <SystemClock_Config+0xcc>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <SystemClock_Config+0xcc>)
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6413      	str	r3, [r2, #64]	; 0x40
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <SystemClock_Config+0xcc>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e60:	2300      	movs	r3, #0
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <SystemClock_Config+0xd0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a21      	ldr	r2, [pc, #132]	; (8001ef0 <SystemClock_Config+0xd0>)
 8001e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <SystemClock_Config+0xd0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e86:	2302      	movs	r3, #2
 8001e88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e90:	2304      	movs	r3, #4
 8001e92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e94:	23a8      	movs	r3, #168	; 0xa8
 8001e96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea0:	f107 0320 	add.w	r3, r7, #32
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 fc39 	bl	800371c <HAL_RCC_OscConfig>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001eb0:	f000 fad4 	bl	800245c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ec0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ec4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	2105      	movs	r1, #5
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fe92 	bl	8003bfc <HAL_RCC_ClockConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ede:	f000 fabd 	bl	800245c <Error_Handler>
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	3750      	adds	r7, #80	; 0x50
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40007000 	.word	0x40007000

08001ef4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b096      	sub	sp, #88	; 0x58
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001efa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
 8001f22:	615a      	str	r2, [r3, #20]
 8001f24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2220      	movs	r2, #32
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 ff53 	bl	8005dd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <MX_TIM1_Init+0x150>)
 8001f34:	4a44      	ldr	r2, [pc, #272]	; (8002048 <MX_TIM1_Init+0x154>)
 8001f36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8001f38:	4b42      	ldr	r3, [pc, #264]	; (8002044 <MX_TIM1_Init+0x150>)
 8001f3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b40      	ldr	r3, [pc, #256]	; (8002044 <MX_TIM1_Init+0x150>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001f46:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <MX_TIM1_Init+0x150>)
 8001f48:	22ff      	movs	r2, #255	; 0xff
 8001f4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4c:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <MX_TIM1_Init+0x150>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f52:	4b3c      	ldr	r3, [pc, #240]	; (8002044 <MX_TIM1_Init+0x150>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f58:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <MX_TIM1_Init+0x150>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f5e:	4839      	ldr	r0, [pc, #228]	; (8002044 <MX_TIM1_Init+0x150>)
 8001f60:	f002 f83e 	bl	8003fe0 <HAL_TIM_Base_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f6a:	f000 fa77 	bl	800245c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f72:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4832      	ldr	r0, [pc, #200]	; (8002044 <MX_TIM1_Init+0x150>)
 8001f7c:	f002 fac0 	bl	8004500 <HAL_TIM_ConfigClockSource>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f86:	f000 fa69 	bl	800245c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f8a:	482e      	ldr	r0, [pc, #184]	; (8002044 <MX_TIM1_Init+0x150>)
 8001f8c:	f002 f877 	bl	800407e <HAL_TIM_PWM_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f96:	f000 fa61 	bl	800245c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fa2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4826      	ldr	r0, [pc, #152]	; (8002044 <MX_TIM1_Init+0x150>)
 8001faa:	f002 fe99 	bl	8004ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001fb4:	f000 fa52 	bl	800245c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb8:	2360      	movs	r3, #96	; 0x60
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	2208      	movs	r2, #8
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4819      	ldr	r0, [pc, #100]	; (8002044 <MX_TIM1_Init+0x150>)
 8001fde:	f002 f9c9 	bl	8004374 <HAL_TIM_PWM_ConfigChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001fe8:	f000 fa38 	bl	800245c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	220c      	movs	r2, #12
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4813      	ldr	r0, [pc, #76]	; (8002044 <MX_TIM1_Init+0x150>)
 8001ff6:	f002 f9bd 	bl	8004374 <HAL_TIM_PWM_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002000:	f000 fa2c 	bl	800245c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	4619      	mov	r1, r3
 8002024:	4807      	ldr	r0, [pc, #28]	; (8002044 <MX_TIM1_Init+0x150>)
 8002026:	f002 fed7 	bl	8004dd8 <HAL_TIMEx_ConfigBreakDeadTime>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002030:	f000 fa14 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002034:	4803      	ldr	r0, [pc, #12]	; (8002044 <MX_TIM1_Init+0x150>)
 8002036:	f000 fa95 	bl	8002564 <HAL_TIM_MspPostInit>

}
 800203a:	bf00      	nop
 800203c:	3758      	adds	r7, #88	; 0x58
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000360 	.word	0x20000360
 8002048:	40010000 	.word	0x40010000

0800204c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	463b      	mov	r3, r7
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <MX_TIM5_Init+0x94>)
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <MX_TIM5_Init+0x98>)
 800206c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <MX_TIM5_Init+0x94>)
 8002070:	f240 3247 	movw	r2, #839	; 0x347
 8002074:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <MX_TIM5_Init+0x94>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MX_TIM5_Init+0x94>)
 800207e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002082:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <MX_TIM5_Init+0x94>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <MX_TIM5_Init+0x94>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002090:	4813      	ldr	r0, [pc, #76]	; (80020e0 <MX_TIM5_Init+0x94>)
 8002092:	f001 ffa5 	bl	8003fe0 <HAL_TIM_Base_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800209c:	f000 f9de 	bl	800245c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	4619      	mov	r1, r3
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <MX_TIM5_Init+0x94>)
 80020ae:	f002 fa27 	bl	8004500 <HAL_TIM_ConfigClockSource>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80020b8:	f000 f9d0 	bl	800245c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020c4:	463b      	mov	r3, r7
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <MX_TIM5_Init+0x94>)
 80020ca:	f002 fe09 	bl	8004ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80020d4:	f000 f9c2 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200001fc 	.word	0x200001fc
 80020e4:	40000c00 	.word	0x40000c00

080020e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b096      	sub	sp, #88	; 0x58
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
 8002116:	615a      	str	r2, [r3, #20]
 8002118:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2220      	movs	r2, #32
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f003 fe59 	bl	8005dd8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002126:	4b44      	ldr	r3, [pc, #272]	; (8002238 <MX_TIM8_Init+0x150>)
 8002128:	4a44      	ldr	r2, [pc, #272]	; (800223c <MX_TIM8_Init+0x154>)
 800212a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1000;
 800212c:	4b42      	ldr	r3, [pc, #264]	; (8002238 <MX_TIM8_Init+0x150>)
 800212e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002132:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002134:	4b40      	ldr	r3, [pc, #256]	; (8002238 <MX_TIM8_Init+0x150>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <MX_TIM8_Init+0x150>)
 800213c:	22ff      	movs	r2, #255	; 0xff
 800213e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002140:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <MX_TIM8_Init+0x150>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002146:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <MX_TIM8_Init+0x150>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214c:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <MX_TIM8_Init+0x150>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002152:	4839      	ldr	r0, [pc, #228]	; (8002238 <MX_TIM8_Init+0x150>)
 8002154:	f001 ff44 	bl	8003fe0 <HAL_TIM_Base_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800215e:	f000 f97d 	bl	800245c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002168:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800216c:	4619      	mov	r1, r3
 800216e:	4832      	ldr	r0, [pc, #200]	; (8002238 <MX_TIM8_Init+0x150>)
 8002170:	f002 f9c6 	bl	8004500 <HAL_TIM_ConfigClockSource>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800217a:	f000 f96f 	bl	800245c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800217e:	482e      	ldr	r0, [pc, #184]	; (8002238 <MX_TIM8_Init+0x150>)
 8002180:	f001 ff7d 	bl	800407e <HAL_TIM_PWM_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800218a:	f000 f967 	bl	800245c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002196:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800219a:	4619      	mov	r1, r3
 800219c:	4826      	ldr	r0, [pc, #152]	; (8002238 <MX_TIM8_Init+0x150>)
 800219e:	f002 fd9f 	bl	8004ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80021a8:	f000 f958 	bl	800245c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ac:	2360      	movs	r3, #96	; 0x60
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80021b4:	2302      	movs	r3, #2
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021b8:	2300      	movs	r3, #0
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021cc:	2200      	movs	r2, #0
 80021ce:	4619      	mov	r1, r3
 80021d0:	4819      	ldr	r0, [pc, #100]	; (8002238 <MX_TIM8_Init+0x150>)
 80021d2:	f002 f8cf 	bl	8004374 <HAL_TIM_PWM_ConfigChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80021dc:	f000 f93e 	bl	800245c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e4:	2204      	movs	r2, #4
 80021e6:	4619      	mov	r1, r3
 80021e8:	4813      	ldr	r0, [pc, #76]	; (8002238 <MX_TIM8_Init+0x150>)
 80021ea:	f002 f8c3 	bl	8004374 <HAL_TIM_PWM_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80021f4:	f000 f932 	bl	800245c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	4619      	mov	r1, r3
 8002218:	4807      	ldr	r0, [pc, #28]	; (8002238 <MX_TIM8_Init+0x150>)
 800221a:	f002 fddd 	bl	8004dd8 <HAL_TIMEx_ConfigBreakDeadTime>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002224:	f000 f91a 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002228:	4803      	ldr	r0, [pc, #12]	; (8002238 <MX_TIM8_Init+0x150>)
 800222a:	f000 f99b 	bl	8002564 <HAL_TIM_MspPostInit>

}
 800222e:	bf00      	nop
 8002230:	3758      	adds	r7, #88	; 0x58
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000158 	.word	0x20000158
 800223c:	40010400 	.word	0x40010400

08002240 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <MX_UART4_Init+0x4c>)
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <MX_UART4_Init+0x50>)
 8002248:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <MX_UART4_Init+0x4c>)
 800224c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002250:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MX_UART4_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <MX_UART4_Init+0x4c>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <MX_UART4_Init+0x4c>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <MX_UART4_Init+0x4c>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <MX_UART4_Init+0x4c>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <MX_UART4_Init+0x4c>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002276:	4805      	ldr	r0, [pc, #20]	; (800228c <MX_UART4_Init+0x4c>)
 8002278:	f002 fe14 	bl	8004ea4 <HAL_UART_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002282:	f000 f8eb 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200003d0 	.word	0x200003d0
 8002290:	40004c00 	.word	0x40004c00

08002294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <MX_USART1_UART_Init+0x50>)
 800229c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022a0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80022a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022cc:	f002 fdea 	bl	8004ea4 <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022d6:	f000 f8c1 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200002d0 	.word	0x200002d0
 80022e4:	40011000 	.word	0x40011000

080022e8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <MX_DMA_Init+0x68>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a16      	ldr	r2, [pc, #88]	; (8002350 <MX_DMA_Init+0x68>)
 80022f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <MX_DMA_Init+0x68>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <MX_DMA_Init+0x68>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <MX_DMA_Init+0x68>)
 8002314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <MX_DMA_Init+0x68>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	200d      	movs	r0, #13
 800232c:	f000 fc61 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002330:	200d      	movs	r0, #13
 8002332:	f000 fc7a 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2100      	movs	r1, #0
 800233a:	203a      	movs	r0, #58	; 0x3a
 800233c:	f000 fc59 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002340:	203a      	movs	r0, #58	; 0x3a
 8002342:	f000 fc72 	bl	8002c2a <HAL_NVIC_EnableIRQ>

}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800

08002354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b38      	ldr	r3, [pc, #224]	; (8002450 <MX_GPIO_Init+0xfc>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a37      	ldr	r2, [pc, #220]	; (8002450 <MX_GPIO_Init+0xfc>)
 8002374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b35      	ldr	r3, [pc, #212]	; (8002450 <MX_GPIO_Init+0xfc>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b31      	ldr	r3, [pc, #196]	; (8002450 <MX_GPIO_Init+0xfc>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a30      	ldr	r2, [pc, #192]	; (8002450 <MX_GPIO_Init+0xfc>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <MX_GPIO_Init+0xfc>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <MX_GPIO_Init+0xfc>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a29      	ldr	r2, [pc, #164]	; (8002450 <MX_GPIO_Init+0xfc>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b27      	ldr	r3, [pc, #156]	; (8002450 <MX_GPIO_Init+0xfc>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <MX_GPIO_Init+0xfc>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <MX_GPIO_Init+0xfc>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <MX_GPIO_Init+0xfc>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <MX_GPIO_Init+0xfc>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <MX_GPIO_Init+0xfc>)
 80023e4:	f043 0308 	orr.w	r3, r3, #8
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <MX_GPIO_Init+0xfc>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, handPul_Pin|handDir_Pin|handEn_Pin, GPIO_PIN_RESET);
 80023f6:	2200      	movs	r2, #0
 80023f8:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80023fc:	4815      	ldr	r0, [pc, #84]	; (8002454 <MX_GPIO_Init+0x100>)
 80023fe:	f001 f959 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, motor1Dir_Pin|motor2Dir_Pin|motor3Dir_Pin|motor4Dir_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	211b      	movs	r1, #27
 8002406:	4814      	ldr	r0, [pc, #80]	; (8002458 <MX_GPIO_Init+0x104>)
 8002408:	f001 f954 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : handPul_Pin handDir_Pin handEn_Pin */
  GPIO_InitStruct.Pin = handPul_Pin|handDir_Pin|handEn_Pin;
 800240c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	480b      	ldr	r0, [pc, #44]	; (8002454 <MX_GPIO_Init+0x100>)
 8002426:	f000 ffab 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor1Dir_Pin motor2Dir_Pin motor3Dir_Pin motor4Dir_Pin */
  GPIO_InitStruct.Pin = motor1Dir_Pin|motor2Dir_Pin|motor3Dir_Pin|motor4Dir_Pin;
 800242a:	231b      	movs	r3, #27
 800242c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_GPIO_Init+0x104>)
 8002442:	f000 ff9d 	bl	8003380 <HAL_GPIO_Init>

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	; 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40020400 	.word	0x40020400
 8002458:	40020c00 	.word	0x40020c00

0800245c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <HAL_MspInit+0x4c>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_MspInit+0x4c>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002480:	6453      	str	r3, [r2, #68]	; 0x44
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_MspInit+0x4c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_MspInit+0x4c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	4a08      	ldr	r2, [pc, #32]	; (80024b8 <HAL_MspInit+0x4c>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_MspInit+0x4c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a22      	ldr	r2, [pc, #136]	; (8002554 <HAL_TIM_Base_MspInit+0x98>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10e      	bne.n	80024ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_TIM_Base_MspInit+0x9c>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a20      	ldr	r2, [pc, #128]	; (8002558 <HAL_TIM_Base_MspInit+0x9c>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_TIM_Base_MspInit+0x9c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80024ea:	e02e      	b.n	800254a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1a      	ldr	r2, [pc, #104]	; (800255c <HAL_TIM_Base_MspInit+0xa0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d116      	bne.n	8002524 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <HAL_TIM_Base_MspInit+0x9c>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a16      	ldr	r2, [pc, #88]	; (8002558 <HAL_TIM_Base_MspInit+0x9c>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_TIM_Base_MspInit+0x9c>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	2032      	movs	r0, #50	; 0x32
 8002518:	f000 fb6b 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800251c:	2032      	movs	r0, #50	; 0x32
 800251e:	f000 fb84 	bl	8002c2a <HAL_NVIC_EnableIRQ>
}
 8002522:	e012      	b.n	800254a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <HAL_TIM_Base_MspInit+0xa4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d10d      	bne.n	800254a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_TIM_Base_MspInit+0x9c>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_TIM_Base_MspInit+0x9c>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	6453      	str	r3, [r2, #68]	; 0x44
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_TIM_Base_MspInit+0x9c>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	40023800 	.word	0x40023800
 800255c:	40000c00 	.word	0x40000c00
 8002560:	40010400 	.word	0x40010400

08002564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_TIM_MspPostInit+0xb0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d11f      	bne.n	80025c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_TIM_MspPostInit+0xb4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a22      	ldr	r2, [pc, #136]	; (8002618 <HAL_TIM_MspPostInit+0xb4>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_TIM_MspPostInit+0xb4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025b4:	2301      	movs	r3, #1
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	4817      	ldr	r0, [pc, #92]	; (800261c <HAL_TIM_MspPostInit+0xb8>)
 80025c0:	f000 fede 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80025c4:	e022      	b.n	800260c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_TIM_MspPostInit+0xbc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d11d      	bne.n	800260c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_TIM_MspPostInit+0xb4>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_TIM_MspPostInit+0xb4>)
 80025da:	f043 0304 	orr.w	r3, r3, #4
 80025de:	6313      	str	r3, [r2, #48]	; 0x30
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <HAL_TIM_MspPostInit+0xb4>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025ec:	23c0      	movs	r3, #192	; 0xc0
 80025ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025fc:	2303      	movs	r3, #3
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	4807      	ldr	r0, [pc, #28]	; (8002624 <HAL_TIM_MspPostInit+0xc0>)
 8002608:	f000 feba 	bl	8003380 <HAL_GPIO_Init>
}
 800260c:	bf00      	nop
 800260e:	3728      	adds	r7, #40	; 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40010000 	.word	0x40010000
 8002618:	40023800 	.word	0x40023800
 800261c:	40020000 	.word	0x40020000
 8002620:	40010400 	.word	0x40010400
 8002624:	40020800 	.word	0x40020800

08002628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	; 0x30
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a65      	ldr	r2, [pc, #404]	; (80027dc <HAL_UART_MspInit+0x1b4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d164      	bne.n	8002714 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	4b64      	ldr	r3, [pc, #400]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	4a63      	ldr	r2, [pc, #396]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 8002654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002658:	6413      	str	r3, [r2, #64]	; 0x40
 800265a:	4b61      	ldr	r3, [pc, #388]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	4b5d      	ldr	r3, [pc, #372]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a5c      	ldr	r2, [pc, #368]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b5a      	ldr	r3, [pc, #360]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002682:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800268c:	2301      	movs	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002690:	2303      	movs	r3, #3
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002694:	2308      	movs	r3, #8
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	4619      	mov	r1, r3
 800269e:	4851      	ldr	r0, [pc, #324]	; (80027e4 <HAL_UART_MspInit+0x1bc>)
 80026a0:	f000 fe6e 	bl	8003380 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80026a4:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026a6:	4a51      	ldr	r2, [pc, #324]	; (80027ec <HAL_UART_MspInit+0x1c4>)
 80026a8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80026aa:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026b0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b2:	4b4d      	ldr	r3, [pc, #308]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b8:	4b4b      	ldr	r3, [pc, #300]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026be:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c6:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026cc:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80026d2:	4b45      	ldr	r3, [pc, #276]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026d8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026da:	4b43      	ldr	r3, [pc, #268]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e0:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80026e6:	4840      	ldr	r0, [pc, #256]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026e8:	f000 faba 	bl	8002c60 <HAL_DMA_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80026f2:	f7ff feb3 	bl	800245c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026fa:	635a      	str	r2, [r3, #52]	; 0x34
 80026fc:	4a3a      	ldr	r2, [pc, #232]	; (80027e8 <HAL_UART_MspInit+0x1c0>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	2034      	movs	r0, #52	; 0x34
 8002708:	f000 fa73 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800270c:	2034      	movs	r0, #52	; 0x34
 800270e:	f000 fa8c 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002712:	e05f      	b.n	80027d4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a35      	ldr	r2, [pc, #212]	; (80027f0 <HAL_UART_MspInit+0x1c8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d15a      	bne.n	80027d4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	4a2e      	ldr	r2, [pc, #184]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 8002728:	f043 0310 	orr.w	r3, r3, #16
 800272c:	6453      	str	r3, [r2, #68]	; 0x44
 800272e:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_UART_MspInit+0x1b8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002756:	23c0      	movs	r3, #192	; 0xc0
 8002758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002766:	2307      	movs	r3, #7
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276a:	f107 031c 	add.w	r3, r7, #28
 800276e:	4619      	mov	r1, r3
 8002770:	4820      	ldr	r0, [pc, #128]	; (80027f4 <HAL_UART_MspInit+0x1cc>)
 8002772:	f000 fe05 	bl	8003380 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 8002778:	4a20      	ldr	r2, [pc, #128]	; (80027fc <HAL_UART_MspInit+0x1d4>)
 800277a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800277c:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 800277e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002782:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002784:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 8002792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002796:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 80027a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027aa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80027b8:	480f      	ldr	r0, [pc, #60]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 80027ba:	f000 fa51 	bl	8002c60 <HAL_DMA_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80027c4:	f7ff fe4a 	bl	800245c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 80027cc:	635a      	str	r2, [r3, #52]	; 0x34
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <HAL_UART_MspInit+0x1d0>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027d4:	bf00      	nop
 80027d6:	3730      	adds	r7, #48	; 0x30
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40004c00 	.word	0x40004c00
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020800 	.word	0x40020800
 80027e8:	200000f0 	.word	0x200000f0
 80027ec:	40026040 	.word	0x40026040
 80027f0:	40011000 	.word	0x40011000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	20000258 	.word	0x20000258
 80027fc:	40026440 	.word	0x40026440

08002800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <HardFault_Handler+0x4>

08002814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002818:	e7fe      	b.n	8002818 <MemManage_Handler+0x4>

0800281a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800281e:	e7fe      	b.n	800281e <BusFault_Handler+0x4>

08002820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <UsageFault_Handler+0x4>

08002826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(compassGetDataPeriod > 5)
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <SysTick_Handler+0x2c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b05      	cmp	r3, #5
 800285a:	d905      	bls.n	8002868 <SysTick_Handler+0x18>
	  {
		  compassGetDataPeriod = 0;
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <SysTick_Handler+0x2c>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
		  compassRequest();
 8002862:	f7fe fc61 	bl	8001128 <compassRequest>
 8002866:	e005      	b.n	8002874 <SysTick_Handler+0x24>
	  }
	  else
	  {
		  compassGetDataPeriod++;
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <SysTick_Handler+0x2c>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	4b02      	ldr	r3, [pc, #8]	; (800287c <SysTick_Handler+0x2c>)
 8002872:	701a      	strb	r2, [r3, #0]
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002874:	f000 f8c2 	bl	80029fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	200002c0 	.word	0x200002c0

08002880 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	compassDecode();
 8002884:	f7fe fc60 	bl	8001148 <compassDecode>
//	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <DMA1_Stream2_IRQHandler+0x14>)
 800288a:	f000 fb11 	bl	8002eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200000f0 	.word	0x200000f0

08002898 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <TIM5_IRQHandler+0x10>)
 800289e:	f001 fc61 	bl	8004164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200001fc 	.word	0x200001fc

080028ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80028b0:	4802      	ldr	r0, [pc, #8]	; (80028bc <UART4_IRQHandler+0x10>)
 80028b2:	f002 fc09 	bl	80050c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200003d0 	.word	0x200003d0

080028c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	PS2DMA_ProcessingData();
 80028c4:	f7fe fac2 	bl	8000e4c <PS2DMA_ProcessingData>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <DMA2_Stream2_IRQHandler+0x14>)
 80028ca:	f000 faf1 	bl	8002eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000258 	.word	0x20000258

080028d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <SystemInit+0x28>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	4a07      	ldr	r2, [pc, #28]	; (8002900 <SystemInit+0x28>)
 80028e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <SystemInit+0x28>)
 80028ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028f2:	609a      	str	r2, [r3, #8]
#endif
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800293c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002908:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800290a:	e003      	b.n	8002914 <LoopCopyDataInit>

0800290c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800290e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002910:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002912:	3104      	adds	r1, #4

08002914 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002914:	480b      	ldr	r0, [pc, #44]	; (8002944 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002918:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800291a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800291c:	d3f6      	bcc.n	800290c <CopyDataInit>
  ldr  r2, =_sbss
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002920:	e002      	b.n	8002928 <LoopFillZerobss>

08002922 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002922:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002924:	f842 3b04 	str.w	r3, [r2], #4

08002928 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800292a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800292c:	d3f9      	bcc.n	8002922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800292e:	f7ff ffd3 	bl	80028d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002932:	f003 fa2d 	bl	8005d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002936:	f7fe fedb 	bl	80016f0 <main>
  bx  lr    
 800293a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800293c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002940:	08007798 	.word	0x08007798
  ldr  r0, =_sdata
 8002944:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002948:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 800294c:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8002950:	20000448 	.word	0x20000448

08002954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002954:	e7fe      	b.n	8002954 <ADC_IRQHandler>
	...

08002958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_Init+0x40>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <HAL_Init+0x40>)
 8002962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_Init+0x40>)
 800296e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a07      	ldr	r2, [pc, #28]	; (8002998 <HAL_Init+0x40>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002980:	2003      	movs	r0, #3
 8002982:	f000 f92b 	bl	8002bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002986:	2000      	movs	r0, #0
 8002988:	f000 f808 	bl	800299c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800298c:	f7ff fd6e 	bl	800246c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40023c00 	.word	0x40023c00

0800299c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_InitTick+0x54>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_InitTick+0x58>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4619      	mov	r1, r3
 80029ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f943 	bl	8002c46 <HAL_SYSTICK_Config>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00e      	b.n	80029e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b0f      	cmp	r3, #15
 80029ce:	d80a      	bhi.n	80029e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d0:	2200      	movs	r2, #0
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	f000 f90b 	bl	8002bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029dc:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <HAL_InitTick+0x5c>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e000      	b.n	80029e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000040 	.word	0x20000040
 80029f4:	20000048 	.word	0x20000048
 80029f8:	20000044 	.word	0x20000044

080029fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_IncTick+0x20>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_IncTick+0x24>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <HAL_IncTick+0x24>)
 8002a0e:	6013      	str	r3, [r2, #0]
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000048 	.word	0x20000048
 8002a20:	20000444 	.word	0x20000444

08002a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return uwTick;
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_GetTick+0x14>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000444 	.word	0x20000444

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba8:	d301      	bcc.n	8002bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00f      	b.n	8002bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <SysTick_Config+0x40>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f7ff ff8e 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000e010 	.word	0xe000e010

08002bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff29 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c04:	f7ff ff3e 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff8e 	bl	8002b30 <NVIC_EncodePriority>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5d 	bl	8002adc <__NVIC_SetPriority>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff31 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ffa2 	bl	8002b98 <SysTick_Config>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff feda 	bl	8002a24 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e099      	b.n	8002db0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c9c:	e00f      	b.n	8002cbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c9e:	f7ff fec1 	bl	8002a24 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b05      	cmp	r3, #5
 8002caa:	d908      	bls.n	8002cbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e078      	b.n	8002db0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e8      	bne.n	8002c9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <HAL_DMA_Init+0x158>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d107      	bne.n	8002d28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	4313      	orrs	r3, r2
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f023 0307 	bic.w	r3, r3, #7
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d117      	bne.n	8002d82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00e      	beq.n	8002d82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa91 	bl	800328c <DMA_CheckFifoParam>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2240      	movs	r2, #64	; 0x40
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e016      	b.n	8002db0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa48 	bl	8003220 <DMA_CalcBaseAndBitshift>
 8002d90:	4603      	mov	r3, r0
 8002d92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	223f      	movs	r2, #63	; 0x3f
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	f010803f 	.word	0xf010803f

08002dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_DMA_Start_IT+0x26>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e040      	b.n	8002e64 <HAL_DMA_Start_IT+0xa8>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d12f      	bne.n	8002e56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f9da 	bl	80031c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	223f      	movs	r2, #63	; 0x3f
 8002e16:	409a      	lsls	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0216 	orr.w	r2, r2, #22
 8002e2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0208 	orr.w	r2, r2, #8
 8002e42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e005      	b.n	8002e62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d004      	beq.n	8002e8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00c      	b.n	8002ea4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ebc:	4b92      	ldr	r3, [pc, #584]	; (8003108 <HAL_DMA_IRQHandler+0x258>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a92      	ldr	r2, [pc, #584]	; (800310c <HAL_DMA_IRQHandler+0x25c>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	0a9b      	lsrs	r3, r3, #10
 8002ec8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	2208      	movs	r2, #8
 8002edc:	409a      	lsls	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01a      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	2208      	movs	r2, #8
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f043 0201 	orr.w	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	2201      	movs	r2, #1
 8002f22:	409a      	lsls	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d012      	beq.n	8002f52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	2201      	movs	r2, #1
 8002f40:	409a      	lsls	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f043 0202 	orr.w	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	2204      	movs	r2, #4
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d012      	beq.n	8002f88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	2204      	movs	r2, #4
 8002f76:	409a      	lsls	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f043 0204 	orr.w	r2, r3, #4
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d043      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d03c      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	2210      	movs	r2, #16
 8002fac:	409a      	lsls	r2, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d018      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d108      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d024      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
 8002fde:	e01f      	b.n	8003020 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01b      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
 8002ff0:	e016      	b.n	8003020 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0208 	bic.w	r2, r2, #8
 800300e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	2220      	movs	r2, #32
 8003026:	409a      	lsls	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 808e 	beq.w	800314e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8086 	beq.w	800314e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	2220      	movs	r2, #32
 8003048:	409a      	lsls	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b05      	cmp	r3, #5
 8003058:	d136      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0216 	bic.w	r2, r2, #22
 8003068:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003078:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_DMA_IRQHandler+0x1da>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0208 	bic.w	r2, r2, #8
 8003098:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	223f      	movs	r2, #63	; 0x3f
 80030a0:	409a      	lsls	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d07d      	beq.n	80031ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
        }
        return;
 80030c6:	e078      	b.n	80031ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01c      	beq.n	8003110 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d108      	bne.n	80030f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d030      	beq.n	800314e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	4798      	blx	r3
 80030f4:	e02b      	b.n	800314e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d027      	beq.n	800314e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
 8003106:	e022      	b.n	800314e <HAL_DMA_IRQHandler+0x29e>
 8003108:	20000040 	.word	0x20000040
 800310c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0210 	bic.w	r2, r2, #16
 800312c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	2b00      	cmp	r3, #0
 8003154:	d032      	beq.n	80031bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d022      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2205      	movs	r2, #5
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	3301      	adds	r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	429a      	cmp	r2, r3
 8003184:	d307      	bcc.n	8003196 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f2      	bne.n	800317a <HAL_DMA_IRQHandler+0x2ca>
 8003194:	e000      	b.n	8003198 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003196:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
 80031b8:	e000      	b.n	80031bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80031ba:	bf00      	nop
    }
  }
}
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop

080031c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d108      	bne.n	8003204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003202:	e007      	b.n	8003214 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	3b10      	subs	r3, #16
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <DMA_CalcBaseAndBitshift+0x64>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <DMA_CalcBaseAndBitshift+0x68>)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d909      	bls.n	8003262 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	; 0x58
 8003260:	e007      	b.n	8003272 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	aaaaaaab 	.word	0xaaaaaaab
 8003288:	08007560 	.word	0x08007560

0800328c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11f      	bne.n	80032e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d855      	bhi.n	8003358 <DMA_CheckFifoParam+0xcc>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <DMA_CheckFifoParam+0x28>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032d7 	.word	0x080032d7
 80032bc:	080032c5 	.word	0x080032c5
 80032c0:	08003359 	.word	0x08003359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d045      	beq.n	800335c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d4:	e042      	b.n	800335c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032de:	d13f      	bne.n	8003360 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e4:	e03c      	b.n	8003360 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	d121      	bne.n	8003334 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d836      	bhi.n	8003364 <DMA_CheckFifoParam+0xd8>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <DMA_CheckFifoParam+0x70>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	08003313 	.word	0x08003313
 8003304:	0800330d 	.word	0x0800330d
 8003308:	08003325 	.word	0x08003325
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	e02f      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d024      	beq.n	8003368 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003322:	e021      	b.n	8003368 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800332c:	d11e      	bne.n	800336c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003332:	e01b      	b.n	800336c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d902      	bls.n	8003340 <DMA_CheckFifoParam+0xb4>
 800333a:	2b03      	cmp	r3, #3
 800333c:	d003      	beq.n	8003346 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800333e:	e018      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e015      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      break;
 8003356:	e00b      	b.n	8003370 <DMA_CheckFifoParam+0xe4>
      break;
 8003358:	bf00      	nop
 800335a:	e00a      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 800335c:	bf00      	nop
 800335e:	e008      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003360:	bf00      	nop
 8003362:	e006      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003364:	bf00      	nop
 8003366:	e004      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003368:	bf00      	nop
 800336a:	e002      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;   
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003370:	bf00      	nop
    }
  } 
  
  return status; 
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	e16b      	b.n	8003674 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	f040 815a 	bne.w	800366e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d00b      	beq.n	80033da <HAL_GPIO_Init+0x5a>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ce:	2b11      	cmp	r3, #17
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b12      	cmp	r3, #18
 80033d8:	d130      	bne.n	800343c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0201 	and.w	r2, r3, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0xfc>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b12      	cmp	r3, #18
 800347a:	d123      	bne.n	80034c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	08da      	lsrs	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3208      	adds	r2, #8
 8003484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	220f      	movs	r2, #15
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	08da      	lsrs	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3208      	adds	r2, #8
 80034be:	69b9      	ldr	r1, [r7, #24]
 80034c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2203      	movs	r2, #3
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80b4 	beq.w	800366e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	4b5f      	ldr	r3, [pc, #380]	; (8003688 <HAL_GPIO_Init+0x308>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	4a5e      	ldr	r2, [pc, #376]	; (8003688 <HAL_GPIO_Init+0x308>)
 8003510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003514:	6453      	str	r3, [r2, #68]	; 0x44
 8003516:	4b5c      	ldr	r3, [pc, #368]	; (8003688 <HAL_GPIO_Init+0x308>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003522:	4a5a      	ldr	r2, [pc, #360]	; (800368c <HAL_GPIO_Init+0x30c>)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	3302      	adds	r3, #2
 800352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	220f      	movs	r2, #15
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a51      	ldr	r2, [pc, #324]	; (8003690 <HAL_GPIO_Init+0x310>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d02b      	beq.n	80035a6 <HAL_GPIO_Init+0x226>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a50      	ldr	r2, [pc, #320]	; (8003694 <HAL_GPIO_Init+0x314>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d025      	beq.n	80035a2 <HAL_GPIO_Init+0x222>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4f      	ldr	r2, [pc, #316]	; (8003698 <HAL_GPIO_Init+0x318>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01f      	beq.n	800359e <HAL_GPIO_Init+0x21e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4e      	ldr	r2, [pc, #312]	; (800369c <HAL_GPIO_Init+0x31c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d019      	beq.n	800359a <HAL_GPIO_Init+0x21a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4d      	ldr	r2, [pc, #308]	; (80036a0 <HAL_GPIO_Init+0x320>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <HAL_GPIO_Init+0x216>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4c      	ldr	r2, [pc, #304]	; (80036a4 <HAL_GPIO_Init+0x324>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00d      	beq.n	8003592 <HAL_GPIO_Init+0x212>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4b      	ldr	r2, [pc, #300]	; (80036a8 <HAL_GPIO_Init+0x328>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <HAL_GPIO_Init+0x20e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <HAL_GPIO_Init+0x32c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_GPIO_Init+0x20a>
 8003586:	2307      	movs	r3, #7
 8003588:	e00e      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800358a:	2308      	movs	r3, #8
 800358c:	e00c      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800358e:	2306      	movs	r3, #6
 8003590:	e00a      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 8003592:	2305      	movs	r3, #5
 8003594:	e008      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 8003596:	2304      	movs	r3, #4
 8003598:	e006      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800359a:	2303      	movs	r3, #3
 800359c:	e004      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800359e:	2302      	movs	r3, #2
 80035a0:	e002      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 80035a6:	2300      	movs	r3, #0
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	f002 0203 	and.w	r2, r2, #3
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	4093      	lsls	r3, r2
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b8:	4934      	ldr	r1, [pc, #208]	; (800368c <HAL_GPIO_Init+0x30c>)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	3302      	adds	r3, #2
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c6:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <HAL_GPIO_Init+0x330>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ea:	4a31      	ldr	r2, [pc, #196]	; (80036b0 <HAL_GPIO_Init+0x330>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035f0:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <HAL_GPIO_Init+0x330>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_GPIO_Init+0x330>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_GPIO_Init+0x330>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800363e:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <HAL_GPIO_Init+0x330>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <HAL_GPIO_Init+0x330>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003668:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <HAL_GPIO_Init+0x330>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3301      	adds	r3, #1
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b0f      	cmp	r3, #15
 8003678:	f67f ae90 	bls.w	800339c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800367c:	bf00      	nop
 800367e:	3724      	adds	r7, #36	; 0x24
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40023800 	.word	0x40023800
 800368c:	40013800 	.word	0x40013800
 8003690:	40020000 	.word	0x40020000
 8003694:	40020400 	.word	0x40020400
 8003698:	40020800 	.word	0x40020800
 800369c:	40020c00 	.word	0x40020c00
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40021400 	.word	0x40021400
 80036a8:	40021800 	.word	0x40021800
 80036ac:	40021c00 	.word	0x40021c00
 80036b0:	40013c00 	.word	0x40013c00

080036b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
 80036c0:	4613      	mov	r3, r2
 80036c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036d0:	e003      	b.n	80036da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036d2:	887b      	ldrh	r3, [r7, #2]
 80036d4:	041a      	lsls	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	887b      	ldrh	r3, [r7, #2]
 80036f8:	401a      	ands	r2, r3
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d104      	bne.n	800370a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	041a      	lsls	r2, r3, #16
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003708:	e002      	b.n	8003710 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	619a      	str	r2, [r3, #24]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e25b      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d075      	beq.n	8003826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800373a:	4ba3      	ldr	r3, [pc, #652]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b04      	cmp	r3, #4
 8003744:	d00c      	beq.n	8003760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003746:	4ba0      	ldr	r3, [pc, #640]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800374e:	2b08      	cmp	r3, #8
 8003750:	d112      	bne.n	8003778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003752:	4b9d      	ldr	r3, [pc, #628]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375e:	d10b      	bne.n	8003778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	4b99      	ldr	r3, [pc, #612]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05b      	beq.n	8003824 <HAL_RCC_OscConfig+0x108>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d157      	bne.n	8003824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e236      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d106      	bne.n	8003790 <HAL_RCC_OscConfig+0x74>
 8003782:	4b91      	ldr	r3, [pc, #580]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a90      	ldr	r2, [pc, #576]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e01d      	b.n	80037cc <HAL_RCC_OscConfig+0xb0>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x98>
 800379a:	4b8b      	ldr	r3, [pc, #556]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a8a      	ldr	r2, [pc, #552]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a87      	ldr	r2, [pc, #540]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e00b      	b.n	80037cc <HAL_RCC_OscConfig+0xb0>
 80037b4:	4b84      	ldr	r3, [pc, #528]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a83      	ldr	r2, [pc, #524]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b81      	ldr	r3, [pc, #516]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a80      	ldr	r2, [pc, #512]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7ff f926 	bl	8002a24 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037dc:	f7ff f922 	bl	8002a24 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e1fb      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ee:	4b76      	ldr	r3, [pc, #472]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0xc0>
 80037fa:	e014      	b.n	8003826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7ff f912 	bl	8002a24 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003804:	f7ff f90e 	bl	8002a24 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	; 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e1e7      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003816:	4b6c      	ldr	r3, [pc, #432]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0xe8>
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d063      	beq.n	80038fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003832:	4b65      	ldr	r3, [pc, #404]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383e:	4b62      	ldr	r3, [pc, #392]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003846:	2b08      	cmp	r3, #8
 8003848:	d11c      	bne.n	8003884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384a:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d116      	bne.n	8003884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003856:	4b5c      	ldr	r3, [pc, #368]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_RCC_OscConfig+0x152>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d001      	beq.n	800386e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e1bb      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386e:	4b56      	ldr	r3, [pc, #344]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4952      	ldr	r1, [pc, #328]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	e03a      	b.n	80038fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800388c:	4b4f      	ldr	r3, [pc, #316]	; (80039cc <HAL_RCC_OscConfig+0x2b0>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7ff f8c7 	bl	8002a24 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389a:	f7ff f8c3 	bl	8002a24 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e19c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ac:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b8:	4b43      	ldr	r3, [pc, #268]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4940      	ldr	r1, [pc, #256]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]
 80038cc:	e015      	b.n	80038fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ce:	4b3f      	ldr	r3, [pc, #252]	; (80039cc <HAL_RCC_OscConfig+0x2b0>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7ff f8a6 	bl	8002a24 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038dc:	f7ff f8a2 	bl	8002a24 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e17b      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ee:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d030      	beq.n	8003968 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d016      	beq.n	800393c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390e:	4b30      	ldr	r3, [pc, #192]	; (80039d0 <HAL_RCC_OscConfig+0x2b4>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7ff f886 	bl	8002a24 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800391c:	f7ff f882 	bl	8002a24 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e15b      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x200>
 800393a:	e015      	b.n	8003968 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800393c:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <HAL_RCC_OscConfig+0x2b4>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003942:	f7ff f86f 	bl	8002a24 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394a:	f7ff f86b 	bl	8002a24 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e144      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f0      	bne.n	800394a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80a0 	beq.w	8003ab6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003976:	2300      	movs	r3, #0
 8003978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397a:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10f      	bne.n	80039a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a0e      	ldr	r2, [pc, #56]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a2:	2301      	movs	r3, #1
 80039a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_OscConfig+0x2b8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d121      	bne.n	80039f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_RCC_OscConfig+0x2b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <HAL_RCC_OscConfig+0x2b8>)
 80039b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039be:	f7ff f831 	bl	8002a24 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c4:	e011      	b.n	80039ea <HAL_RCC_OscConfig+0x2ce>
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	42470000 	.word	0x42470000
 80039d0:	42470e80 	.word	0x42470e80
 80039d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7ff f824 	bl	8002a24 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e0fd      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ea:	4b81      	ldr	r3, [pc, #516]	; (8003bf0 <HAL_RCC_OscConfig+0x4d4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d106      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2f0>
 80039fe:	4b7d      	ldr	r3, [pc, #500]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a7c      	ldr	r2, [pc, #496]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0a:	e01c      	b.n	8003a46 <HAL_RCC_OscConfig+0x32a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d10c      	bne.n	8003a2e <HAL_RCC_OscConfig+0x312>
 8003a14:	4b77      	ldr	r3, [pc, #476]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a76      	ldr	r2, [pc, #472]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a1a:	f043 0304 	orr.w	r3, r3, #4
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a20:	4b74      	ldr	r3, [pc, #464]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a73      	ldr	r2, [pc, #460]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2c:	e00b      	b.n	8003a46 <HAL_RCC_OscConfig+0x32a>
 8003a2e:	4b71      	ldr	r3, [pc, #452]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a70      	ldr	r2, [pc, #448]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3a:	4b6e      	ldr	r3, [pc, #440]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a6d      	ldr	r2, [pc, #436]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a40:	f023 0304 	bic.w	r3, r3, #4
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d015      	beq.n	8003a7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7fe ffe9 	bl	8002a24 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fe ffe5 	bl	8002a24 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e0bc      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ee      	beq.n	8003a56 <HAL_RCC_OscConfig+0x33a>
 8003a78:	e014      	b.n	8003aa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7a:	f7fe ffd3 	bl	8002a24 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7fe ffcf 	bl	8002a24 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e0a6      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a98:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1ee      	bne.n	8003a82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d105      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aaa:	4b52      	ldr	r3, [pc, #328]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a51      	ldr	r2, [pc, #324]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8092 	beq.w	8003be4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ac0:	4b4c      	ldr	r3, [pc, #304]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d05c      	beq.n	8003b86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d141      	bne.n	8003b58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad4:	4b48      	ldr	r3, [pc, #288]	; (8003bf8 <HAL_RCC_OscConfig+0x4dc>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fe ffa3 	bl	8002a24 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae2:	f7fe ff9f 	bl	8002a24 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e078      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af4:	4b3f      	ldr	r3, [pc, #252]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1f0      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	019b      	lsls	r3, r3, #6
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	041b      	lsls	r3, r3, #16
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	061b      	lsls	r3, r3, #24
 8003b24:	4933      	ldr	r1, [pc, #204]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b2a:	4b33      	ldr	r3, [pc, #204]	; (8003bf8 <HAL_RCC_OscConfig+0x4dc>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fe ff78 	bl	8002a24 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fe ff74 	bl	8002a24 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e04d      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4a:	4b2a      	ldr	r3, [pc, #168]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x41c>
 8003b56:	e045      	b.n	8003be4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b58:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <HAL_RCC_OscConfig+0x4dc>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5e:	f7fe ff61 	bl	8002a24 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b66:	f7fe ff5d 	bl	8002a24 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e036      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b78:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x44a>
 8003b84:	e02e      	b.n	8003be4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e029      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b92:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <HAL_RCC_OscConfig+0x4d8>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d11c      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d115      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bba:	4013      	ands	r3, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10d      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d106      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	42470060 	.word	0x42470060

08003bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0cc      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c10:	4b68      	ldr	r3, [pc, #416]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d90c      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b65      	ldr	r3, [pc, #404]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0b8      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c68:	4b53      	ldr	r3, [pc, #332]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a52      	ldr	r2, [pc, #328]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c74:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	494d      	ldr	r1, [pc, #308]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d044      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d119      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e07f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e06f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e067      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cda:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 0203 	bic.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4934      	ldr	r1, [pc, #208]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cec:	f7fe fe9a 	bl	8002a24 <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf4:	f7fe fe96 	bl	8002a24 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e04f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 020c 	and.w	r2, r3, #12
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1eb      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d20c      	bcs.n	8003d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e032      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4916      	ldr	r1, [pc, #88]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	490e      	ldr	r1, [pc, #56]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d82:	f000 f821 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d86:	4601      	mov	r1, r0
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	4a0a      	ldr	r2, [pc, #40]	; (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	5cd3      	ldrb	r3, [r2, r3]
 8003d96:	fa21 f303 	lsr.w	r3, r1, r3
 8003d9a:	4a09      	ldr	r2, [pc, #36]	; (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fdfa 	bl	800299c <HAL_InitTick>

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40023c00 	.word	0x40023c00
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	08007548 	.word	0x08007548
 8003dc0:	20000040 	.word	0x20000040
 8003dc4:	20000044 	.word	0x20000044

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	607b      	str	r3, [r7, #4]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dde:	4b63      	ldr	r3, [pc, #396]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d007      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0x32>
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d008      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x38>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f040 80b4 	bne.w	8003f5c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b5e      	ldr	r3, [pc, #376]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003df6:	60bb      	str	r3, [r7, #8]
       break;
 8003df8:	e0b3      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dfa:	4b5e      	ldr	r3, [pc, #376]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003dfc:	60bb      	str	r3, [r7, #8]
      break;
 8003dfe:	e0b0      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e00:	4b5a      	ldr	r3, [pc, #360]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e0a:	4b58      	ldr	r3, [pc, #352]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d04a      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e16:	4b55      	ldr	r3, [pc, #340]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	099b      	lsrs	r3, r3, #6
 8003e1c:	f04f 0400 	mov.w	r4, #0
 8003e20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	ea03 0501 	and.w	r5, r3, r1
 8003e2c:	ea04 0602 	and.w	r6, r4, r2
 8003e30:	4629      	mov	r1, r5
 8003e32:	4632      	mov	r2, r6
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	f04f 0400 	mov.w	r4, #0
 8003e3c:	0154      	lsls	r4, r2, #5
 8003e3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e42:	014b      	lsls	r3, r1, #5
 8003e44:	4619      	mov	r1, r3
 8003e46:	4622      	mov	r2, r4
 8003e48:	1b49      	subs	r1, r1, r5
 8003e4a:	eb62 0206 	sbc.w	r2, r2, r6
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	f04f 0400 	mov.w	r4, #0
 8003e56:	0194      	lsls	r4, r2, #6
 8003e58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e5c:	018b      	lsls	r3, r1, #6
 8003e5e:	1a5b      	subs	r3, r3, r1
 8003e60:	eb64 0402 	sbc.w	r4, r4, r2
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	00e2      	lsls	r2, r4, #3
 8003e6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e72:	00d9      	lsls	r1, r3, #3
 8003e74:	460b      	mov	r3, r1
 8003e76:	4614      	mov	r4, r2
 8003e78:	195b      	adds	r3, r3, r5
 8003e7a:	eb44 0406 	adc.w	r4, r4, r6
 8003e7e:	f04f 0100 	mov.w	r1, #0
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	0262      	lsls	r2, r4, #9
 8003e88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e8c:	0259      	lsls	r1, r3, #9
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4614      	mov	r4, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	4621      	mov	r1, r4
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f04f 0400 	mov.w	r4, #0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4623      	mov	r3, r4
 8003ea0:	f7fc fe26 	bl	8000af0 <__aeabi_uldivmod>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	e049      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eac:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	099b      	lsrs	r3, r3, #6
 8003eb2:	f04f 0400 	mov.w	r4, #0
 8003eb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	ea03 0501 	and.w	r5, r3, r1
 8003ec2:	ea04 0602 	and.w	r6, r4, r2
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	4632      	mov	r2, r6
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	f04f 0400 	mov.w	r4, #0
 8003ed2:	0154      	lsls	r4, r2, #5
 8003ed4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ed8:	014b      	lsls	r3, r1, #5
 8003eda:	4619      	mov	r1, r3
 8003edc:	4622      	mov	r2, r4
 8003ede:	1b49      	subs	r1, r1, r5
 8003ee0:	eb62 0206 	sbc.w	r2, r2, r6
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	f04f 0400 	mov.w	r4, #0
 8003eec:	0194      	lsls	r4, r2, #6
 8003eee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ef2:	018b      	lsls	r3, r1, #6
 8003ef4:	1a5b      	subs	r3, r3, r1
 8003ef6:	eb64 0402 	sbc.w	r4, r4, r2
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	00e2      	lsls	r2, r4, #3
 8003f04:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f08:	00d9      	lsls	r1, r3, #3
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	195b      	adds	r3, r3, r5
 8003f10:	eb44 0406 	adc.w	r4, r4, r6
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	02a2      	lsls	r2, r4, #10
 8003f1e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f22:	0299      	lsls	r1, r3, #10
 8003f24:	460b      	mov	r3, r1
 8003f26:	4614      	mov	r4, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f04f 0400 	mov.w	r4, #0
 8003f32:	461a      	mov	r2, r3
 8003f34:	4623      	mov	r3, r4
 8003f36:	f7fc fddb 	bl	8000af0 <__aeabi_uldivmod>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	60bb      	str	r3, [r7, #8]
      break;
 8003f5a:	e002      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f5e:	60bb      	str	r3, [r7, #8]
      break;
 8003f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f62:	68bb      	ldr	r3, [r7, #8]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	00f42400 	.word	0x00f42400
 8003f74:	007a1200 	.word	0x007a1200

08003f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000040 	.word	0x20000040

08003f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f94:	f7ff fff0 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8003f98:	4601      	mov	r1, r0
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0a9b      	lsrs	r3, r3, #10
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4a03      	ldr	r2, [pc, #12]	; (8003fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fa6:	5cd3      	ldrb	r3, [r2, r3]
 8003fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	08007558 	.word	0x08007558

08003fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fbc:	f7ff ffdc 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	0b5b      	lsrs	r3, r3, #13
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4a03      	ldr	r2, [pc, #12]	; (8003fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	08007558 	.word	0x08007558

08003fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e01d      	b.n	800402e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fe fa58 	bl	80024bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3304      	adds	r3, #4
 800401c:	4619      	mov	r1, r3
 800401e:	4610      	mov	r0, r2
 8004020:	f000 fb4e 	bl	80046c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0201 	orr.w	r2, r2, #1
 800404c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b06      	cmp	r3, #6
 800405e:	d007      	beq.n	8004070 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e01d      	b.n	80040cc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f815 	bl	80040d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4610      	mov	r0, r2
 80040be:	f000 faff 	bl	80046c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2201      	movs	r2, #1
 80040f8:	6839      	ldr	r1, [r7, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fdca 	bl	8004c94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a15      	ldr	r2, [pc, #84]	; (800415c <HAL_TIM_PWM_Start+0x74>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIM_PWM_Start+0x2c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a14      	ldr	r2, [pc, #80]	; (8004160 <HAL_TIM_PWM_Start+0x78>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_TIM_PWM_Start+0x30>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_TIM_PWM_Start+0x32>
 8004118:	2300      	movs	r3, #0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b06      	cmp	r3, #6
 800413e:	d007      	beq.n	8004150 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40010000 	.word	0x40010000
 8004160:	40010400 	.word	0x40010400

08004164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b02      	cmp	r3, #2
 8004178:	d122      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b02      	cmp	r3, #2
 8004186:	d11b      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0202 	mvn.w	r2, #2
 8004190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa6b 	bl	8004682 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa5d 	bl	800466e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fa6e 	bl	8004696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d122      	bne.n	8004214 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d11b      	bne.n	8004214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0204 	mvn.w	r2, #4
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa41 	bl	8004682 <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fa33 	bl	800466e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fa44 	bl	8004696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b08      	cmp	r3, #8
 8004220:	d122      	bne.n	8004268 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b08      	cmp	r3, #8
 800422e:	d11b      	bne.n	8004268 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0208 	mvn.w	r2, #8
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2204      	movs	r2, #4
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa17 	bl	8004682 <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fa09 	bl	800466e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fa1a 	bl	8004696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b10      	cmp	r3, #16
 8004274:	d122      	bne.n	80042bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b10      	cmp	r3, #16
 8004282:	d11b      	bne.n	80042bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0210 	mvn.w	r2, #16
 800428c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2208      	movs	r2, #8
 8004292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f9ed 	bl	8004682 <HAL_TIM_IC_CaptureCallback>
 80042a8:	e005      	b.n	80042b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f9df 	bl	800466e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f9f0 	bl	8004696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d10e      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d107      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0201 	mvn.w	r2, #1
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fd f8a0 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d10e      	bne.n	8004314 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004300:	2b80      	cmp	r3, #128	; 0x80
 8004302:	d107      	bne.n	8004314 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fdbe 	bl	8004e90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d10e      	bne.n	8004340 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d107      	bne.n	8004340 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f9b5 	bl	80046aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b20      	cmp	r3, #32
 800434c:	d10e      	bne.n	800436c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b20      	cmp	r3, #32
 800435a:	d107      	bne.n	800436c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0220 	mvn.w	r2, #32
 8004364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fd88 	bl	8004e7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800438a:	2302      	movs	r3, #2
 800438c:	e0b4      	b.n	80044f8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	f200 809f 	bhi.w	80044e4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043e1 	.word	0x080043e1
 80043b0:	080044e5 	.word	0x080044e5
 80043b4:	080044e5 	.word	0x080044e5
 80043b8:	080044e5 	.word	0x080044e5
 80043bc:	08004421 	.word	0x08004421
 80043c0:	080044e5 	.word	0x080044e5
 80043c4:	080044e5 	.word	0x080044e5
 80043c8:	080044e5 	.word	0x080044e5
 80043cc:	08004463 	.word	0x08004463
 80043d0:	080044e5 	.word	0x080044e5
 80043d4:	080044e5 	.word	0x080044e5
 80043d8:	080044e5 	.word	0x080044e5
 80043dc:	080044a3 	.word	0x080044a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fa0a 	bl	8004800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0208 	orr.w	r2, r2, #8
 80043fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0204 	bic.w	r2, r2, #4
 800440a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6999      	ldr	r1, [r3, #24]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	619a      	str	r2, [r3, #24]
      break;
 800441e:	e062      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fa5a 	bl	80048e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6999      	ldr	r1, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	021a      	lsls	r2, r3, #8
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	619a      	str	r2, [r3, #24]
      break;
 8004460:	e041      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 faaf 	bl	80049cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0208 	orr.w	r2, r2, #8
 800447c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0204 	bic.w	r2, r2, #4
 800448c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69d9      	ldr	r1, [r3, #28]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	61da      	str	r2, [r3, #28]
      break;
 80044a0:	e021      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fb03 	bl	8004ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	021a      	lsls	r2, r3, #8
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	61da      	str	r2, [r3, #28]
      break;
 80044e2:	e000      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80044e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIM_ConfigClockSource+0x18>
 8004514:	2302      	movs	r3, #2
 8004516:	e0a6      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x166>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004536:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800453e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b40      	cmp	r3, #64	; 0x40
 800454e:	d067      	beq.n	8004620 <HAL_TIM_ConfigClockSource+0x120>
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	d80b      	bhi.n	800456c <HAL_TIM_ConfigClockSource+0x6c>
 8004554:	2b10      	cmp	r3, #16
 8004556:	d073      	beq.n	8004640 <HAL_TIM_ConfigClockSource+0x140>
 8004558:	2b10      	cmp	r3, #16
 800455a:	d802      	bhi.n	8004562 <HAL_TIM_ConfigClockSource+0x62>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d06f      	beq.n	8004640 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004560:	e078      	b.n	8004654 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004562:	2b20      	cmp	r3, #32
 8004564:	d06c      	beq.n	8004640 <HAL_TIM_ConfigClockSource+0x140>
 8004566:	2b30      	cmp	r3, #48	; 0x30
 8004568:	d06a      	beq.n	8004640 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800456a:	e073      	b.n	8004654 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800456c:	2b70      	cmp	r3, #112	; 0x70
 800456e:	d00d      	beq.n	800458c <HAL_TIM_ConfigClockSource+0x8c>
 8004570:	2b70      	cmp	r3, #112	; 0x70
 8004572:	d804      	bhi.n	800457e <HAL_TIM_ConfigClockSource+0x7e>
 8004574:	2b50      	cmp	r3, #80	; 0x50
 8004576:	d033      	beq.n	80045e0 <HAL_TIM_ConfigClockSource+0xe0>
 8004578:	2b60      	cmp	r3, #96	; 0x60
 800457a:	d041      	beq.n	8004600 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800457c:	e06a      	b.n	8004654 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004582:	d066      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x152>
 8004584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004588:	d017      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0xba>
      break;
 800458a:	e063      	b.n	8004654 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6899      	ldr	r1, [r3, #8]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f000 fb5a 	bl	8004c54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	609a      	str	r2, [r3, #8]
      break;
 80045b8:	e04c      	b.n	8004654 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6899      	ldr	r1, [r3, #8]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f000 fb43 	bl	8004c54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045dc:	609a      	str	r2, [r3, #8]
      break;
 80045de:	e039      	b.n	8004654 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6859      	ldr	r1, [r3, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	461a      	mov	r2, r3
 80045ee:	f000 fab7 	bl	8004b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2150      	movs	r1, #80	; 0x50
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fb10 	bl	8004c1e <TIM_ITRx_SetConfig>
      break;
 80045fe:	e029      	b.n	8004654 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	461a      	mov	r2, r3
 800460e:	f000 fad6 	bl	8004bbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2160      	movs	r1, #96	; 0x60
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fb00 	bl	8004c1e <TIM_ITRx_SetConfig>
      break;
 800461e:	e019      	b.n	8004654 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	461a      	mov	r2, r3
 800462e:	f000 fa97 	bl	8004b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2140      	movs	r1, #64	; 0x40
 8004638:	4618      	mov	r0, r3
 800463a:	f000 faf0 	bl	8004c1e <TIM_ITRx_SetConfig>
      break;
 800463e:	e009      	b.n	8004654 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f000 fae7 	bl	8004c1e <TIM_ITRx_SetConfig>
      break;
 8004650:	e000      	b.n	8004654 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004652:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a40      	ldr	r2, [pc, #256]	; (80047d4 <TIM_Base_SetConfig+0x114>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d013      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046de:	d00f      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a3d      	ldr	r2, [pc, #244]	; (80047d8 <TIM_Base_SetConfig+0x118>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00b      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a3c      	ldr	r2, [pc, #240]	; (80047dc <TIM_Base_SetConfig+0x11c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d007      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a3b      	ldr	r2, [pc, #236]	; (80047e0 <TIM_Base_SetConfig+0x120>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a3a      	ldr	r2, [pc, #232]	; (80047e4 <TIM_Base_SetConfig+0x124>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d108      	bne.n	8004712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2f      	ldr	r2, [pc, #188]	; (80047d4 <TIM_Base_SetConfig+0x114>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d02b      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004720:	d027      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a2c      	ldr	r2, [pc, #176]	; (80047d8 <TIM_Base_SetConfig+0x118>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d023      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a2b      	ldr	r2, [pc, #172]	; (80047dc <TIM_Base_SetConfig+0x11c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01f      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <TIM_Base_SetConfig+0x120>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01b      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a29      	ldr	r2, [pc, #164]	; (80047e4 <TIM_Base_SetConfig+0x124>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d017      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a28      	ldr	r2, [pc, #160]	; (80047e8 <TIM_Base_SetConfig+0x128>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d013      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a27      	ldr	r2, [pc, #156]	; (80047ec <TIM_Base_SetConfig+0x12c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00f      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <TIM_Base_SetConfig+0x130>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00b      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a25      	ldr	r2, [pc, #148]	; (80047f4 <TIM_Base_SetConfig+0x134>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d007      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a24      	ldr	r2, [pc, #144]	; (80047f8 <TIM_Base_SetConfig+0x138>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d003      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <TIM_Base_SetConfig+0x13c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d108      	bne.n	8004784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <TIM_Base_SetConfig+0x114>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_Base_SetConfig+0xf8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a0c      	ldr	r2, [pc, #48]	; (80047e4 <TIM_Base_SetConfig+0x124>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d103      	bne.n	80047c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	615a      	str	r2, [r3, #20]
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40010400 	.word	0x40010400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800
 80047f4:	40001800 	.word	0x40001800
 80047f8:	40001c00 	.word	0x40001c00
 80047fc:	40002000 	.word	0x40002000

08004800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 0302 	bic.w	r3, r3, #2
 8004848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a20      	ldr	r2, [pc, #128]	; (80048d8 <TIM_OC1_SetConfig+0xd8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_OC1_SetConfig+0x64>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <TIM_OC1_SetConfig+0xdc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d10c      	bne.n	800487e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 0308 	bic.w	r3, r3, #8
 800486a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 0304 	bic.w	r3, r3, #4
 800487c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a15      	ldr	r2, [pc, #84]	; (80048d8 <TIM_OC1_SetConfig+0xd8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d003      	beq.n	800488e <TIM_OC1_SetConfig+0x8e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a14      	ldr	r2, [pc, #80]	; (80048dc <TIM_OC1_SetConfig+0xdc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d111      	bne.n	80048b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800489c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	621a      	str	r2, [r3, #32]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40010400 	.word	0x40010400

080048e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f023 0210 	bic.w	r2, r3, #16
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f023 0320 	bic.w	r3, r3, #32
 800492a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a22      	ldr	r2, [pc, #136]	; (80049c4 <TIM_OC2_SetConfig+0xe4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_OC2_SetConfig+0x68>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a21      	ldr	r2, [pc, #132]	; (80049c8 <TIM_OC2_SetConfig+0xe8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d10d      	bne.n	8004964 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <TIM_OC2_SetConfig+0xe4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_OC2_SetConfig+0x94>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <TIM_OC2_SetConfig+0xe8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d113      	bne.n	800499c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800497a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40010400 	.word	0x40010400

080049cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a21      	ldr	r2, [pc, #132]	; (8004aac <TIM_OC3_SetConfig+0xe0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_OC3_SetConfig+0x66>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <TIM_OC3_SetConfig+0xe4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d10d      	bne.n	8004a4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a16      	ldr	r2, [pc, #88]	; (8004aac <TIM_OC3_SetConfig+0xe0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d003      	beq.n	8004a5e <TIM_OC3_SetConfig+0x92>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a15      	ldr	r2, [pc, #84]	; (8004ab0 <TIM_OC3_SetConfig+0xe4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d113      	bne.n	8004a86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40010400 	.word	0x40010400

08004ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	031b      	lsls	r3, r3, #12
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <TIM_OC4_SetConfig+0xa4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_OC4_SetConfig+0x68>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <TIM_OC4_SetConfig+0xa8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d109      	bne.n	8004b30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	019b      	lsls	r3, r3, #6
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	621a      	str	r2, [r3, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40010400 	.word	0x40010400

08004b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0201 	bic.w	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f023 030a 	bic.w	r3, r3, #10
 8004b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	621a      	str	r2, [r3, #32]
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b087      	sub	sp, #28
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0210 	bic.w	r2, r3, #16
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	031b      	lsls	r3, r3, #12
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b085      	sub	sp, #20
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f043 0307 	orr.w	r3, r3, #7
 8004c40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	609a      	str	r2, [r3, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	021a      	lsls	r2, r3, #8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	609a      	str	r2, [r3, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1a      	ldr	r2, [r3, #32]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	401a      	ands	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a1a      	ldr	r2, [r3, #32]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e05a      	b.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a21      	ldr	r2, [pc, #132]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d022      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d44:	d01d      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d018      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a15      	ldr	r2, [pc, #84]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d10c      	bne.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40000c00 	.word	0x40000c00
 8004dcc:	40010400 	.word	0x40010400
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	40001800 	.word	0x40001800

08004dd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e03d      	b.n	8004e70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e03f      	b.n	8004f36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fd fbac 	bl	8002628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2224      	movs	r2, #36	; 0x24
 8004ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fbcf 	bl	800568c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d130      	bne.n	8004fba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <HAL_UART_Transmit_IT+0x26>
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e029      	b.n	8004fbc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_UART_Transmit_IT+0x38>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e022      	b.n	8004fbc <HAL_UART_Transmit_IT+0x7e>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2221      	movs	r2, #33	; 0x21
 8004f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fb4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e000      	b.n	8004fbc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004fba:	2302      	movs	r3, #2
  }
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d166      	bne.n	80050b0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_UART_Receive_DMA+0x26>
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e05f      	b.n	80050b2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_UART_Receive_DMA+0x38>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e058      	b.n	80050b2 <HAL_UART_Receive_DMA+0xea>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2222      	movs	r2, #34	; 0x22
 800501e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	4a25      	ldr	r2, [pc, #148]	; (80050bc <HAL_UART_Receive_DMA+0xf4>)
 8005028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	4a24      	ldr	r2, [pc, #144]	; (80050c0 <HAL_UART_Receive_DMA+0xf8>)
 8005030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	4a23      	ldr	r2, [pc, #140]	; (80050c4 <HAL_UART_Receive_DMA+0xfc>)
 8005038:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503e:	2200      	movs	r2, #0
 8005040:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005042:	f107 0308 	add.w	r3, r7, #8
 8005046:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3304      	adds	r3, #4
 8005052:	4619      	mov	r1, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	f7fd feaf 	bl	8002dbc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800508a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695a      	ldr	r2, [r3, #20]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050aa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e000      	b.n	80050b2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	08005305 	.word	0x08005305
 80050c0:	0800536d 	.word	0x0800536d
 80050c4:	08005389 	.word	0x08005389

080050c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10d      	bne.n	800511a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <HAL_UART_IRQHandler+0x52>
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fa38 	bl	8005588 <UART_Receive_IT>
      return;
 8005118:	e0d1      	b.n	80052be <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80b0 	beq.w	8005282 <HAL_UART_IRQHandler+0x1ba>
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d105      	bne.n	8005138 <HAL_UART_IRQHandler+0x70>
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 80a5 	beq.w	8005282 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_UART_IRQHandler+0x90>
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	f043 0201 	orr.w	r2, r3, #1
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_UART_IRQHandler+0xb0>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005170:	f043 0202 	orr.w	r2, r3, #2
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <HAL_UART_IRQHandler+0xd0>
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005190:	f043 0204 	orr.w	r2, r3, #4
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00f      	beq.n	80051c2 <HAL_UART_IRQHandler+0xfa>
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d104      	bne.n	80051b6 <HAL_UART_IRQHandler+0xee>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d005      	beq.n	80051c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ba:	f043 0208 	orr.w	r2, r3, #8
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d078      	beq.n	80052bc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d007      	beq.n	80051e4 <HAL_UART_IRQHandler+0x11c>
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f9d2 	bl	8005588 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <HAL_UART_IRQHandler+0x144>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d031      	beq.n	8005270 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f91b 	bl	8005448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d123      	bne.n	8005268 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800522e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	2b00      	cmp	r3, #0
 8005236:	d013      	beq.n	8005260 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523c:	4a21      	ldr	r2, [pc, #132]	; (80052c4 <HAL_UART_IRQHandler+0x1fc>)
 800523e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005244:	4618      	mov	r0, r3
 8005246:	f7fd fe11 	bl	8002e6c <HAL_DMA_Abort_IT>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d016      	beq.n	800527e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800525a:	4610      	mov	r0, r2
 800525c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525e:	e00e      	b.n	800527e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f845 	bl	80052f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005266:	e00a      	b.n	800527e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f841 	bl	80052f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800526e:	e006      	b.n	800527e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f83d 	bl	80052f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800527c:	e01e      	b.n	80052bc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527e:	bf00      	nop
    return;
 8005280:	e01c      	b.n	80052bc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_UART_IRQHandler+0x1d6>
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f908 	bl	80054ac <UART_Transmit_IT>
    return;
 800529c:	e00f      	b.n	80052be <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <HAL_UART_IRQHandler+0x1f6>
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f950 	bl	8005558 <UART_EndTransmit_IT>
    return;
 80052b8:	bf00      	nop
 80052ba:	e000      	b.n	80052be <HAL_UART_IRQHandler+0x1f6>
    return;
 80052bc:	bf00      	nop
  }
}
 80052be:	3720      	adds	r7, #32
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	08005485 	.word	0x08005485

080052c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d11e      	bne.n	800535e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005334:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005354:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff ffb2 	bl	80052c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7ff ffae 	bl	80052dc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b21      	cmp	r3, #33	; 0x21
 80053ba:	d108      	bne.n	80053ce <UART_DMAError+0x46>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2200      	movs	r2, #0
 80053c6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80053c8:	68b8      	ldr	r0, [r7, #8]
 80053ca:	f000 f827 	bl	800541c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b22      	cmp	r3, #34	; 0x22
 80053ee:	d108      	bne.n	8005402 <UART_DMAError+0x7a>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2200      	movs	r2, #0
 80053fa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80053fc:	68b8      	ldr	r0, [r7, #8]
 80053fe:	f000 f823 	bl	8005448 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	f043 0210 	orr.w	r2, r3, #16
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800540e:	68b8      	ldr	r0, [r7, #8]
 8005410:	f7ff ff6e 	bl	80052f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005432:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800545e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0201 	bic.w	r2, r2, #1
 800546e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff ff26 	bl	80052f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b21      	cmp	r3, #33	; 0x21
 80054be:	d144      	bne.n	800554a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c8:	d11a      	bne.n	8005500 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d105      	bne.n	80054f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	1c9a      	adds	r2, r3, #2
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	621a      	str	r2, [r3, #32]
 80054f2:	e00e      	b.n	8005512 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	621a      	str	r2, [r3, #32]
 80054fe:	e008      	b.n	8005512 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	1c59      	adds	r1, r3, #1
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6211      	str	r1, [r2, #32]
 800550a:	781a      	ldrb	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29b      	uxth	r3, r3
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	4619      	mov	r1, r3
 8005520:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10f      	bne.n	8005546 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005534:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005544:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e000      	b.n	800554c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800554a:	2302      	movs	r3, #2
  }
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7fb fc39 	bl	8000df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b22      	cmp	r3, #34	; 0x22
 800559a:	d171      	bne.n	8005680 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a4:	d123      	bne.n	80055ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10e      	bne.n	80055d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	1c9a      	adds	r2, r3, #2
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28
 80055d0:	e029      	b.n	8005626 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	629a      	str	r2, [r3, #40]	; 0x28
 80055ec:	e01b      	b.n	8005626 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6858      	ldr	r0, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	1c59      	adds	r1, r3, #1
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6291      	str	r1, [r2, #40]	; 0x28
 8005606:	b2c2      	uxtb	r2, r0
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e00c      	b.n	8005626 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	1c58      	adds	r0, r3, #1
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	6288      	str	r0, [r1, #40]	; 0x28
 800561e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29b      	uxth	r3, r3
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4619      	mov	r1, r3
 8005634:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005636:	2b00      	cmp	r3, #0
 8005638:	d120      	bne.n	800567c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0220 	bic.w	r2, r2, #32
 8005648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005658:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fe28 	bl	80052c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	e002      	b.n	8005682 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	e000      	b.n	8005682 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005680:	2302      	movs	r3, #2
  }
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800568c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80056ce:	f023 030c 	bic.w	r3, r3, #12
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	430b      	orrs	r3, r1
 80056da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fa:	f040 818b 	bne.w	8005a14 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4ac1      	ldr	r2, [pc, #772]	; (8005a08 <UART_SetConfig+0x37c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d005      	beq.n	8005714 <UART_SetConfig+0x88>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4abf      	ldr	r2, [pc, #764]	; (8005a0c <UART_SetConfig+0x380>)
 800570e:	4293      	cmp	r3, r2
 8005710:	f040 80bd 	bne.w	800588e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005714:	f7fe fc50 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8005718:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	461d      	mov	r5, r3
 800571e:	f04f 0600 	mov.w	r6, #0
 8005722:	46a8      	mov	r8, r5
 8005724:	46b1      	mov	r9, r6
 8005726:	eb18 0308 	adds.w	r3, r8, r8
 800572a:	eb49 0409 	adc.w	r4, r9, r9
 800572e:	4698      	mov	r8, r3
 8005730:	46a1      	mov	r9, r4
 8005732:	eb18 0805 	adds.w	r8, r8, r5
 8005736:	eb49 0906 	adc.w	r9, r9, r6
 800573a:	f04f 0100 	mov.w	r1, #0
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005746:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800574a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800574e:	4688      	mov	r8, r1
 8005750:	4691      	mov	r9, r2
 8005752:	eb18 0005 	adds.w	r0, r8, r5
 8005756:	eb49 0106 	adc.w	r1, r9, r6
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	461d      	mov	r5, r3
 8005760:	f04f 0600 	mov.w	r6, #0
 8005764:	196b      	adds	r3, r5, r5
 8005766:	eb46 0406 	adc.w	r4, r6, r6
 800576a:	461a      	mov	r2, r3
 800576c:	4623      	mov	r3, r4
 800576e:	f7fb f9bf 	bl	8000af0 <__aeabi_uldivmod>
 8005772:	4603      	mov	r3, r0
 8005774:	460c      	mov	r4, r1
 8005776:	461a      	mov	r2, r3
 8005778:	4ba5      	ldr	r3, [pc, #660]	; (8005a10 <UART_SetConfig+0x384>)
 800577a:	fba3 2302 	umull	r2, r3, r3, r2
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	461d      	mov	r5, r3
 8005788:	f04f 0600 	mov.w	r6, #0
 800578c:	46a9      	mov	r9, r5
 800578e:	46b2      	mov	sl, r6
 8005790:	eb19 0309 	adds.w	r3, r9, r9
 8005794:	eb4a 040a 	adc.w	r4, sl, sl
 8005798:	4699      	mov	r9, r3
 800579a:	46a2      	mov	sl, r4
 800579c:	eb19 0905 	adds.w	r9, r9, r5
 80057a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80057a4:	f04f 0100 	mov.w	r1, #0
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057b8:	4689      	mov	r9, r1
 80057ba:	4692      	mov	sl, r2
 80057bc:	eb19 0005 	adds.w	r0, r9, r5
 80057c0:	eb4a 0106 	adc.w	r1, sl, r6
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	461d      	mov	r5, r3
 80057ca:	f04f 0600 	mov.w	r6, #0
 80057ce:	196b      	adds	r3, r5, r5
 80057d0:	eb46 0406 	adc.w	r4, r6, r6
 80057d4:	461a      	mov	r2, r3
 80057d6:	4623      	mov	r3, r4
 80057d8:	f7fb f98a 	bl	8000af0 <__aeabi_uldivmod>
 80057dc:	4603      	mov	r3, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	461a      	mov	r2, r3
 80057e2:	4b8b      	ldr	r3, [pc, #556]	; (8005a10 <UART_SetConfig+0x384>)
 80057e4:	fba3 1302 	umull	r1, r3, r3, r2
 80057e8:	095b      	lsrs	r3, r3, #5
 80057ea:	2164      	movs	r1, #100	; 0x64
 80057ec:	fb01 f303 	mul.w	r3, r1, r3
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	3332      	adds	r3, #50	; 0x32
 80057f6:	4a86      	ldr	r2, [pc, #536]	; (8005a10 <UART_SetConfig+0x384>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005804:	4498      	add	r8, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	461d      	mov	r5, r3
 800580a:	f04f 0600 	mov.w	r6, #0
 800580e:	46a9      	mov	r9, r5
 8005810:	46b2      	mov	sl, r6
 8005812:	eb19 0309 	adds.w	r3, r9, r9
 8005816:	eb4a 040a 	adc.w	r4, sl, sl
 800581a:	4699      	mov	r9, r3
 800581c:	46a2      	mov	sl, r4
 800581e:	eb19 0905 	adds.w	r9, r9, r5
 8005822:	eb4a 0a06 	adc.w	sl, sl, r6
 8005826:	f04f 0100 	mov.w	r1, #0
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005832:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005836:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800583a:	4689      	mov	r9, r1
 800583c:	4692      	mov	sl, r2
 800583e:	eb19 0005 	adds.w	r0, r9, r5
 8005842:	eb4a 0106 	adc.w	r1, sl, r6
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	461d      	mov	r5, r3
 800584c:	f04f 0600 	mov.w	r6, #0
 8005850:	196b      	adds	r3, r5, r5
 8005852:	eb46 0406 	adc.w	r4, r6, r6
 8005856:	461a      	mov	r2, r3
 8005858:	4623      	mov	r3, r4
 800585a:	f7fb f949 	bl	8000af0 <__aeabi_uldivmod>
 800585e:	4603      	mov	r3, r0
 8005860:	460c      	mov	r4, r1
 8005862:	461a      	mov	r2, r3
 8005864:	4b6a      	ldr	r3, [pc, #424]	; (8005a10 <UART_SetConfig+0x384>)
 8005866:	fba3 1302 	umull	r1, r3, r3, r2
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	2164      	movs	r1, #100	; 0x64
 800586e:	fb01 f303 	mul.w	r3, r1, r3
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	3332      	adds	r3, #50	; 0x32
 8005878:	4a65      	ldr	r2, [pc, #404]	; (8005a10 <UART_SetConfig+0x384>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	f003 0207 	and.w	r2, r3, #7
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4442      	add	r2, r8
 800588a:	609a      	str	r2, [r3, #8]
 800588c:	e26f      	b.n	8005d6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800588e:	f7fe fb7f 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 8005892:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	461d      	mov	r5, r3
 8005898:	f04f 0600 	mov.w	r6, #0
 800589c:	46a8      	mov	r8, r5
 800589e:	46b1      	mov	r9, r6
 80058a0:	eb18 0308 	adds.w	r3, r8, r8
 80058a4:	eb49 0409 	adc.w	r4, r9, r9
 80058a8:	4698      	mov	r8, r3
 80058aa:	46a1      	mov	r9, r4
 80058ac:	eb18 0805 	adds.w	r8, r8, r5
 80058b0:	eb49 0906 	adc.w	r9, r9, r6
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058c8:	4688      	mov	r8, r1
 80058ca:	4691      	mov	r9, r2
 80058cc:	eb18 0005 	adds.w	r0, r8, r5
 80058d0:	eb49 0106 	adc.w	r1, r9, r6
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	461d      	mov	r5, r3
 80058da:	f04f 0600 	mov.w	r6, #0
 80058de:	196b      	adds	r3, r5, r5
 80058e0:	eb46 0406 	adc.w	r4, r6, r6
 80058e4:	461a      	mov	r2, r3
 80058e6:	4623      	mov	r3, r4
 80058e8:	f7fb f902 	bl	8000af0 <__aeabi_uldivmod>
 80058ec:	4603      	mov	r3, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	461a      	mov	r2, r3
 80058f2:	4b47      	ldr	r3, [pc, #284]	; (8005a10 <UART_SetConfig+0x384>)
 80058f4:	fba3 2302 	umull	r2, r3, r3, r2
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	461d      	mov	r5, r3
 8005902:	f04f 0600 	mov.w	r6, #0
 8005906:	46a9      	mov	r9, r5
 8005908:	46b2      	mov	sl, r6
 800590a:	eb19 0309 	adds.w	r3, r9, r9
 800590e:	eb4a 040a 	adc.w	r4, sl, sl
 8005912:	4699      	mov	r9, r3
 8005914:	46a2      	mov	sl, r4
 8005916:	eb19 0905 	adds.w	r9, r9, r5
 800591a:	eb4a 0a06 	adc.w	sl, sl, r6
 800591e:	f04f 0100 	mov.w	r1, #0
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800592a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800592e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005932:	4689      	mov	r9, r1
 8005934:	4692      	mov	sl, r2
 8005936:	eb19 0005 	adds.w	r0, r9, r5
 800593a:	eb4a 0106 	adc.w	r1, sl, r6
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	461d      	mov	r5, r3
 8005944:	f04f 0600 	mov.w	r6, #0
 8005948:	196b      	adds	r3, r5, r5
 800594a:	eb46 0406 	adc.w	r4, r6, r6
 800594e:	461a      	mov	r2, r3
 8005950:	4623      	mov	r3, r4
 8005952:	f7fb f8cd 	bl	8000af0 <__aeabi_uldivmod>
 8005956:	4603      	mov	r3, r0
 8005958:	460c      	mov	r4, r1
 800595a:	461a      	mov	r2, r3
 800595c:	4b2c      	ldr	r3, [pc, #176]	; (8005a10 <UART_SetConfig+0x384>)
 800595e:	fba3 1302 	umull	r1, r3, r3, r2
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	2164      	movs	r1, #100	; 0x64
 8005966:	fb01 f303 	mul.w	r3, r1, r3
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	3332      	adds	r3, #50	; 0x32
 8005970:	4a27      	ldr	r2, [pc, #156]	; (8005a10 <UART_SetConfig+0x384>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800597e:	4498      	add	r8, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	461d      	mov	r5, r3
 8005984:	f04f 0600 	mov.w	r6, #0
 8005988:	46a9      	mov	r9, r5
 800598a:	46b2      	mov	sl, r6
 800598c:	eb19 0309 	adds.w	r3, r9, r9
 8005990:	eb4a 040a 	adc.w	r4, sl, sl
 8005994:	4699      	mov	r9, r3
 8005996:	46a2      	mov	sl, r4
 8005998:	eb19 0905 	adds.w	r9, r9, r5
 800599c:	eb4a 0a06 	adc.w	sl, sl, r6
 80059a0:	f04f 0100 	mov.w	r1, #0
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059b4:	4689      	mov	r9, r1
 80059b6:	4692      	mov	sl, r2
 80059b8:	eb19 0005 	adds.w	r0, r9, r5
 80059bc:	eb4a 0106 	adc.w	r1, sl, r6
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	461d      	mov	r5, r3
 80059c6:	f04f 0600 	mov.w	r6, #0
 80059ca:	196b      	adds	r3, r5, r5
 80059cc:	eb46 0406 	adc.w	r4, r6, r6
 80059d0:	461a      	mov	r2, r3
 80059d2:	4623      	mov	r3, r4
 80059d4:	f7fb f88c 	bl	8000af0 <__aeabi_uldivmod>
 80059d8:	4603      	mov	r3, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	461a      	mov	r2, r3
 80059de:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <UART_SetConfig+0x384>)
 80059e0:	fba3 1302 	umull	r1, r3, r3, r2
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	2164      	movs	r1, #100	; 0x64
 80059e8:	fb01 f303 	mul.w	r3, r1, r3
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	3332      	adds	r3, #50	; 0x32
 80059f2:	4a07      	ldr	r2, [pc, #28]	; (8005a10 <UART_SetConfig+0x384>)
 80059f4:	fba2 2303 	umull	r2, r3, r2, r3
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	f003 0207 	and.w	r2, r3, #7
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4442      	add	r2, r8
 8005a04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005a06:	e1b2      	b.n	8005d6e <UART_SetConfig+0x6e2>
 8005a08:	40011000 	.word	0x40011000
 8005a0c:	40011400 	.word	0x40011400
 8005a10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4ad7      	ldr	r2, [pc, #860]	; (8005d78 <UART_SetConfig+0x6ec>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d005      	beq.n	8005a2a <UART_SetConfig+0x39e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4ad6      	ldr	r2, [pc, #856]	; (8005d7c <UART_SetConfig+0x6f0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	f040 80d1 	bne.w	8005bcc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a2a:	f7fe fac5 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8005a2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	469a      	mov	sl, r3
 8005a34:	f04f 0b00 	mov.w	fp, #0
 8005a38:	46d0      	mov	r8, sl
 8005a3a:	46d9      	mov	r9, fp
 8005a3c:	eb18 0308 	adds.w	r3, r8, r8
 8005a40:	eb49 0409 	adc.w	r4, r9, r9
 8005a44:	4698      	mov	r8, r3
 8005a46:	46a1      	mov	r9, r4
 8005a48:	eb18 080a 	adds.w	r8, r8, sl
 8005a4c:	eb49 090b 	adc.w	r9, r9, fp
 8005a50:	f04f 0100 	mov.w	r1, #0
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a64:	4688      	mov	r8, r1
 8005a66:	4691      	mov	r9, r2
 8005a68:	eb1a 0508 	adds.w	r5, sl, r8
 8005a6c:	eb4b 0609 	adc.w	r6, fp, r9
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	4619      	mov	r1, r3
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	f04f 0400 	mov.w	r4, #0
 8005a82:	0094      	lsls	r4, r2, #2
 8005a84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a88:	008b      	lsls	r3, r1, #2
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	4623      	mov	r3, r4
 8005a8e:	4628      	mov	r0, r5
 8005a90:	4631      	mov	r1, r6
 8005a92:	f7fb f82d 	bl	8000af0 <__aeabi_uldivmod>
 8005a96:	4603      	mov	r3, r0
 8005a98:	460c      	mov	r4, r1
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4bb8      	ldr	r3, [pc, #736]	; (8005d80 <UART_SetConfig+0x6f4>)
 8005a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	469b      	mov	fp, r3
 8005aac:	f04f 0c00 	mov.w	ip, #0
 8005ab0:	46d9      	mov	r9, fp
 8005ab2:	46e2      	mov	sl, ip
 8005ab4:	eb19 0309 	adds.w	r3, r9, r9
 8005ab8:	eb4a 040a 	adc.w	r4, sl, sl
 8005abc:	4699      	mov	r9, r3
 8005abe:	46a2      	mov	sl, r4
 8005ac0:	eb19 090b 	adds.w	r9, r9, fp
 8005ac4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ac8:	f04f 0100 	mov.w	r1, #0
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ad4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ad8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005adc:	4689      	mov	r9, r1
 8005ade:	4692      	mov	sl, r2
 8005ae0:	eb1b 0509 	adds.w	r5, fp, r9
 8005ae4:	eb4c 060a 	adc.w	r6, ip, sl
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	4619      	mov	r1, r3
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	f04f 0400 	mov.w	r4, #0
 8005afa:	0094      	lsls	r4, r2, #2
 8005afc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b00:	008b      	lsls	r3, r1, #2
 8005b02:	461a      	mov	r2, r3
 8005b04:	4623      	mov	r3, r4
 8005b06:	4628      	mov	r0, r5
 8005b08:	4631      	mov	r1, r6
 8005b0a:	f7fa fff1 	bl	8000af0 <__aeabi_uldivmod>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	460c      	mov	r4, r1
 8005b12:	461a      	mov	r2, r3
 8005b14:	4b9a      	ldr	r3, [pc, #616]	; (8005d80 <UART_SetConfig+0x6f4>)
 8005b16:	fba3 1302 	umull	r1, r3, r3, r2
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	2164      	movs	r1, #100	; 0x64
 8005b1e:	fb01 f303 	mul.w	r3, r1, r3
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	3332      	adds	r3, #50	; 0x32
 8005b28:	4a95      	ldr	r2, [pc, #596]	; (8005d80 <UART_SetConfig+0x6f4>)
 8005b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b34:	4498      	add	r8, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	469b      	mov	fp, r3
 8005b3a:	f04f 0c00 	mov.w	ip, #0
 8005b3e:	46d9      	mov	r9, fp
 8005b40:	46e2      	mov	sl, ip
 8005b42:	eb19 0309 	adds.w	r3, r9, r9
 8005b46:	eb4a 040a 	adc.w	r4, sl, sl
 8005b4a:	4699      	mov	r9, r3
 8005b4c:	46a2      	mov	sl, r4
 8005b4e:	eb19 090b 	adds.w	r9, r9, fp
 8005b52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b56:	f04f 0100 	mov.w	r1, #0
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b6a:	4689      	mov	r9, r1
 8005b6c:	4692      	mov	sl, r2
 8005b6e:	eb1b 0509 	adds.w	r5, fp, r9
 8005b72:	eb4c 060a 	adc.w	r6, ip, sl
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	f04f 0400 	mov.w	r4, #0
 8005b88:	0094      	lsls	r4, r2, #2
 8005b8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b8e:	008b      	lsls	r3, r1, #2
 8005b90:	461a      	mov	r2, r3
 8005b92:	4623      	mov	r3, r4
 8005b94:	4628      	mov	r0, r5
 8005b96:	4631      	mov	r1, r6
 8005b98:	f7fa ffaa 	bl	8000af0 <__aeabi_uldivmod>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4b77      	ldr	r3, [pc, #476]	; (8005d80 <UART_SetConfig+0x6f4>)
 8005ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	2164      	movs	r1, #100	; 0x64
 8005bac:	fb01 f303 	mul.w	r3, r1, r3
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	3332      	adds	r3, #50	; 0x32
 8005bb6:	4a72      	ldr	r2, [pc, #456]	; (8005d80 <UART_SetConfig+0x6f4>)
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	f003 020f 	and.w	r2, r3, #15
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4442      	add	r2, r8
 8005bc8:	609a      	str	r2, [r3, #8]
 8005bca:	e0d0      	b.n	8005d6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bcc:	f7fe f9e0 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 8005bd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	469a      	mov	sl, r3
 8005bd6:	f04f 0b00 	mov.w	fp, #0
 8005bda:	46d0      	mov	r8, sl
 8005bdc:	46d9      	mov	r9, fp
 8005bde:	eb18 0308 	adds.w	r3, r8, r8
 8005be2:	eb49 0409 	adc.w	r4, r9, r9
 8005be6:	4698      	mov	r8, r3
 8005be8:	46a1      	mov	r9, r4
 8005bea:	eb18 080a 	adds.w	r8, r8, sl
 8005bee:	eb49 090b 	adc.w	r9, r9, fp
 8005bf2:	f04f 0100 	mov.w	r1, #0
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c06:	4688      	mov	r8, r1
 8005c08:	4691      	mov	r9, r2
 8005c0a:	eb1a 0508 	adds.w	r5, sl, r8
 8005c0e:	eb4b 0609 	adc.w	r6, fp, r9
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4619      	mov	r1, r3
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	f04f 0400 	mov.w	r4, #0
 8005c24:	0094      	lsls	r4, r2, #2
 8005c26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c2a:	008b      	lsls	r3, r1, #2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4623      	mov	r3, r4
 8005c30:	4628      	mov	r0, r5
 8005c32:	4631      	mov	r1, r6
 8005c34:	f7fa ff5c 	bl	8000af0 <__aeabi_uldivmod>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4b50      	ldr	r3, [pc, #320]	; (8005d80 <UART_SetConfig+0x6f4>)
 8005c40:	fba3 2302 	umull	r2, r3, r3, r2
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	469b      	mov	fp, r3
 8005c4e:	f04f 0c00 	mov.w	ip, #0
 8005c52:	46d9      	mov	r9, fp
 8005c54:	46e2      	mov	sl, ip
 8005c56:	eb19 0309 	adds.w	r3, r9, r9
 8005c5a:	eb4a 040a 	adc.w	r4, sl, sl
 8005c5e:	4699      	mov	r9, r3
 8005c60:	46a2      	mov	sl, r4
 8005c62:	eb19 090b 	adds.w	r9, r9, fp
 8005c66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c6a:	f04f 0100 	mov.w	r1, #0
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c7e:	4689      	mov	r9, r1
 8005c80:	4692      	mov	sl, r2
 8005c82:	eb1b 0509 	adds.w	r5, fp, r9
 8005c86:	eb4c 060a 	adc.w	r6, ip, sl
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	f04f 0400 	mov.w	r4, #0
 8005c9c:	0094      	lsls	r4, r2, #2
 8005c9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ca2:	008b      	lsls	r3, r1, #2
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	4623      	mov	r3, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	4631      	mov	r1, r6
 8005cac:	f7fa ff20 	bl	8000af0 <__aeabi_uldivmod>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4b32      	ldr	r3, [pc, #200]	; (8005d80 <UART_SetConfig+0x6f4>)
 8005cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	2164      	movs	r1, #100	; 0x64
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	3332      	adds	r3, #50	; 0x32
 8005cca:	4a2d      	ldr	r2, [pc, #180]	; (8005d80 <UART_SetConfig+0x6f4>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cd6:	4498      	add	r8, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	469b      	mov	fp, r3
 8005cdc:	f04f 0c00 	mov.w	ip, #0
 8005ce0:	46d9      	mov	r9, fp
 8005ce2:	46e2      	mov	sl, ip
 8005ce4:	eb19 0309 	adds.w	r3, r9, r9
 8005ce8:	eb4a 040a 	adc.w	r4, sl, sl
 8005cec:	4699      	mov	r9, r3
 8005cee:	46a2      	mov	sl, r4
 8005cf0:	eb19 090b 	adds.w	r9, r9, fp
 8005cf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005cf8:	f04f 0100 	mov.w	r1, #0
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d0c:	4689      	mov	r9, r1
 8005d0e:	4692      	mov	sl, r2
 8005d10:	eb1b 0509 	adds.w	r5, fp, r9
 8005d14:	eb4c 060a 	adc.w	r6, ip, sl
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	f04f 0400 	mov.w	r4, #0
 8005d2a:	0094      	lsls	r4, r2, #2
 8005d2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d30:	008b      	lsls	r3, r1, #2
 8005d32:	461a      	mov	r2, r3
 8005d34:	4623      	mov	r3, r4
 8005d36:	4628      	mov	r0, r5
 8005d38:	4631      	mov	r1, r6
 8005d3a:	f7fa fed9 	bl	8000af0 <__aeabi_uldivmod>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	460c      	mov	r4, r1
 8005d42:	461a      	mov	r2, r3
 8005d44:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <UART_SetConfig+0x6f4>)
 8005d46:	fba3 1302 	umull	r1, r3, r3, r2
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	2164      	movs	r1, #100	; 0x64
 8005d4e:	fb01 f303 	mul.w	r3, r1, r3
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	3332      	adds	r3, #50	; 0x32
 8005d58:	4a09      	ldr	r2, [pc, #36]	; (8005d80 <UART_SetConfig+0x6f4>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	f003 020f 	and.w	r2, r3, #15
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4442      	add	r2, r8
 8005d6a:	609a      	str	r2, [r3, #8]
}
 8005d6c:	e7ff      	b.n	8005d6e <UART_SetConfig+0x6e2>
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d78:	40011000 	.word	0x40011000
 8005d7c:	40011400 	.word	0x40011400
 8005d80:	51eb851f 	.word	0x51eb851f

08005d84 <__errno>:
 8005d84:	4b01      	ldr	r3, [pc, #4]	; (8005d8c <__errno+0x8>)
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	2000004c 	.word	0x2000004c

08005d90 <__libc_init_array>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4e0d      	ldr	r6, [pc, #52]	; (8005dc8 <__libc_init_array+0x38>)
 8005d94:	4c0d      	ldr	r4, [pc, #52]	; (8005dcc <__libc_init_array+0x3c>)
 8005d96:	1ba4      	subs	r4, r4, r6
 8005d98:	10a4      	asrs	r4, r4, #2
 8005d9a:	2500      	movs	r5, #0
 8005d9c:	42a5      	cmp	r5, r4
 8005d9e:	d109      	bne.n	8005db4 <__libc_init_array+0x24>
 8005da0:	4e0b      	ldr	r6, [pc, #44]	; (8005dd0 <__libc_init_array+0x40>)
 8005da2:	4c0c      	ldr	r4, [pc, #48]	; (8005dd4 <__libc_init_array+0x44>)
 8005da4:	f001 fbc2 	bl	800752c <_init>
 8005da8:	1ba4      	subs	r4, r4, r6
 8005daa:	10a4      	asrs	r4, r4, #2
 8005dac:	2500      	movs	r5, #0
 8005dae:	42a5      	cmp	r5, r4
 8005db0:	d105      	bne.n	8005dbe <__libc_init_array+0x2e>
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005db8:	4798      	blx	r3
 8005dba:	3501      	adds	r5, #1
 8005dbc:	e7ee      	b.n	8005d9c <__libc_init_array+0xc>
 8005dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dc2:	4798      	blx	r3
 8005dc4:	3501      	adds	r5, #1
 8005dc6:	e7f2      	b.n	8005dae <__libc_init_array+0x1e>
 8005dc8:	08007790 	.word	0x08007790
 8005dcc:	08007790 	.word	0x08007790
 8005dd0:	08007790 	.word	0x08007790
 8005dd4:	08007794 	.word	0x08007794

08005dd8 <memset>:
 8005dd8:	4402      	add	r2, r0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d100      	bne.n	8005de2 <memset+0xa>
 8005de0:	4770      	bx	lr
 8005de2:	f803 1b01 	strb.w	r1, [r3], #1
 8005de6:	e7f9      	b.n	8005ddc <memset+0x4>

08005de8 <cos>:
 8005de8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dea:	ec51 0b10 	vmov	r0, r1, d0
 8005dee:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <cos+0x80>)
 8005df0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005df4:	4293      	cmp	r3, r2
 8005df6:	dc06      	bgt.n	8005e06 <cos+0x1e>
 8005df8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8005e60 <cos+0x78>
 8005dfc:	f000 fc18 	bl	8006630 <__kernel_cos>
 8005e00:	ec51 0b10 	vmov	r0, r1, d0
 8005e04:	e007      	b.n	8005e16 <cos+0x2e>
 8005e06:	4a19      	ldr	r2, [pc, #100]	; (8005e6c <cos+0x84>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	dd09      	ble.n	8005e20 <cos+0x38>
 8005e0c:	ee10 2a10 	vmov	r2, s0
 8005e10:	460b      	mov	r3, r1
 8005e12:	f7fa f9dd 	bl	80001d0 <__aeabi_dsub>
 8005e16:	ec41 0b10 	vmov	d0, r0, r1
 8005e1a:	b005      	add	sp, #20
 8005e1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e20:	4668      	mov	r0, sp
 8005e22:	f000 f961 	bl	80060e8 <__ieee754_rem_pio2>
 8005e26:	f000 0003 	and.w	r0, r0, #3
 8005e2a:	2801      	cmp	r0, #1
 8005e2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e30:	ed9d 0b00 	vldr	d0, [sp]
 8005e34:	d007      	beq.n	8005e46 <cos+0x5e>
 8005e36:	2802      	cmp	r0, #2
 8005e38:	d00e      	beq.n	8005e58 <cos+0x70>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	d0de      	beq.n	8005dfc <cos+0x14>
 8005e3e:	2001      	movs	r0, #1
 8005e40:	f000 fffe 	bl	8006e40 <__kernel_sin>
 8005e44:	e7dc      	b.n	8005e00 <cos+0x18>
 8005e46:	f000 fffb 	bl	8006e40 <__kernel_sin>
 8005e4a:	ec53 2b10 	vmov	r2, r3, d0
 8005e4e:	ee10 0a10 	vmov	r0, s0
 8005e52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e56:	e7de      	b.n	8005e16 <cos+0x2e>
 8005e58:	f000 fbea 	bl	8006630 <__kernel_cos>
 8005e5c:	e7f5      	b.n	8005e4a <cos+0x62>
 8005e5e:	bf00      	nop
	...
 8005e68:	3fe921fb 	.word	0x3fe921fb
 8005e6c:	7fefffff 	.word	0x7fefffff

08005e70 <atan2>:
 8005e70:	f000 b85a 	b.w	8005f28 <__ieee754_atan2>

08005e74 <sqrt>:
 8005e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e78:	ed2d 8b02 	vpush	{d8}
 8005e7c:	b08b      	sub	sp, #44	; 0x2c
 8005e7e:	ec55 4b10 	vmov	r4, r5, d0
 8005e82:	f000 fb23 	bl	80064cc <__ieee754_sqrt>
 8005e86:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <sqrt+0xac>)
 8005e88:	eeb0 8a40 	vmov.f32	s16, s0
 8005e8c:	eef0 8a60 	vmov.f32	s17, s1
 8005e90:	f993 6000 	ldrsb.w	r6, [r3]
 8005e94:	1c73      	adds	r3, r6, #1
 8005e96:	d02a      	beq.n	8005eee <sqrt+0x7a>
 8005e98:	4622      	mov	r2, r4
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7fa fde8 	bl	8000a74 <__aeabi_dcmpun>
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	bb10      	cbnz	r0, 8005eee <sqrt+0x7a>
 8005ea8:	f04f 0800 	mov.w	r8, #0
 8005eac:	f04f 0900 	mov.w	r9, #0
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	f7fa fdb4 	bl	8000a24 <__aeabi_dcmplt>
 8005ebc:	b1b8      	cbz	r0, 8005eee <sqrt+0x7a>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <sqrt+0xb0>)
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	9708      	str	r7, [sp, #32]
 8005ec8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005ecc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005ed0:	b9b6      	cbnz	r6, 8005f00 <sqrt+0x8c>
 8005ed2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005ed6:	4668      	mov	r0, sp
 8005ed8:	f001 fa9e 	bl	8007418 <matherr>
 8005edc:	b1d0      	cbz	r0, 8005f14 <sqrt+0xa0>
 8005ede:	9b08      	ldr	r3, [sp, #32]
 8005ee0:	b11b      	cbz	r3, 8005eea <sqrt+0x76>
 8005ee2:	f7ff ff4f 	bl	8005d84 <__errno>
 8005ee6:	9b08      	ldr	r3, [sp, #32]
 8005ee8:	6003      	str	r3, [r0, #0]
 8005eea:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005eee:	eeb0 0a48 	vmov.f32	s0, s16
 8005ef2:	eef0 0a68 	vmov.f32	s1, s17
 8005ef6:	b00b      	add	sp, #44	; 0x2c
 8005ef8:	ecbd 8b02 	vpop	{d8}
 8005efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f00:	4642      	mov	r2, r8
 8005f02:	464b      	mov	r3, r9
 8005f04:	4640      	mov	r0, r8
 8005f06:	4649      	mov	r1, r9
 8005f08:	f7fa fc44 	bl	8000794 <__aeabi_ddiv>
 8005f0c:	2e02      	cmp	r6, #2
 8005f0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f12:	d1e0      	bne.n	8005ed6 <sqrt+0x62>
 8005f14:	f7ff ff36 	bl	8005d84 <__errno>
 8005f18:	2321      	movs	r3, #33	; 0x21
 8005f1a:	6003      	str	r3, [r0, #0]
 8005f1c:	e7df      	b.n	8005ede <sqrt+0x6a>
 8005f1e:	bf00      	nop
 8005f20:	200000b0 	.word	0x200000b0
 8005f24:	08007568 	.word	0x08007568

08005f28 <__ieee754_atan2>:
 8005f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f2c:	ec57 6b11 	vmov	r6, r7, d1
 8005f30:	4273      	negs	r3, r6
 8005f32:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8005f36:	4333      	orrs	r3, r6
 8005f38:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80060e0 <__ieee754_atan2+0x1b8>
 8005f3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005f40:	4573      	cmp	r3, lr
 8005f42:	ec51 0b10 	vmov	r0, r1, d0
 8005f46:	ee11 8a10 	vmov	r8, s2
 8005f4a:	d80a      	bhi.n	8005f62 <__ieee754_atan2+0x3a>
 8005f4c:	4244      	negs	r4, r0
 8005f4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f52:	4304      	orrs	r4, r0
 8005f54:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005f58:	4574      	cmp	r4, lr
 8005f5a:	468c      	mov	ip, r1
 8005f5c:	ee10 9a10 	vmov	r9, s0
 8005f60:	d907      	bls.n	8005f72 <__ieee754_atan2+0x4a>
 8005f62:	4632      	mov	r2, r6
 8005f64:	463b      	mov	r3, r7
 8005f66:	f7fa f935 	bl	80001d4 <__adddf3>
 8005f6a:	ec41 0b10 	vmov	d0, r0, r1
 8005f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f72:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005f76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005f7a:	4334      	orrs	r4, r6
 8005f7c:	d103      	bne.n	8005f86 <__ieee754_atan2+0x5e>
 8005f7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f82:	f001 b819 	b.w	8006fb8 <atan>
 8005f86:	17bc      	asrs	r4, r7, #30
 8005f88:	f004 0402 	and.w	r4, r4, #2
 8005f8c:	ea53 0909 	orrs.w	r9, r3, r9
 8005f90:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005f94:	d107      	bne.n	8005fa6 <__ieee754_atan2+0x7e>
 8005f96:	2c02      	cmp	r4, #2
 8005f98:	d073      	beq.n	8006082 <__ieee754_atan2+0x15a>
 8005f9a:	2c03      	cmp	r4, #3
 8005f9c:	d1e5      	bne.n	8005f6a <__ieee754_atan2+0x42>
 8005f9e:	a13e      	add	r1, pc, #248	; (adr r1, 8006098 <__ieee754_atan2+0x170>)
 8005fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa4:	e7e1      	b.n	8005f6a <__ieee754_atan2+0x42>
 8005fa6:	ea52 0808 	orrs.w	r8, r2, r8
 8005faa:	d106      	bne.n	8005fba <__ieee754_atan2+0x92>
 8005fac:	f1bc 0f00 	cmp.w	ip, #0
 8005fb0:	da6b      	bge.n	800608a <__ieee754_atan2+0x162>
 8005fb2:	a13b      	add	r1, pc, #236	; (adr r1, 80060a0 <__ieee754_atan2+0x178>)
 8005fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fb8:	e7d7      	b.n	8005f6a <__ieee754_atan2+0x42>
 8005fba:	4572      	cmp	r2, lr
 8005fbc:	d120      	bne.n	8006000 <__ieee754_atan2+0xd8>
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d111      	bne.n	8005fe6 <__ieee754_atan2+0xbe>
 8005fc2:	2c02      	cmp	r4, #2
 8005fc4:	d007      	beq.n	8005fd6 <__ieee754_atan2+0xae>
 8005fc6:	2c03      	cmp	r4, #3
 8005fc8:	d009      	beq.n	8005fde <__ieee754_atan2+0xb6>
 8005fca:	2c01      	cmp	r4, #1
 8005fcc:	d155      	bne.n	800607a <__ieee754_atan2+0x152>
 8005fce:	a136      	add	r1, pc, #216	; (adr r1, 80060a8 <__ieee754_atan2+0x180>)
 8005fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fd4:	e7c9      	b.n	8005f6a <__ieee754_atan2+0x42>
 8005fd6:	a136      	add	r1, pc, #216	; (adr r1, 80060b0 <__ieee754_atan2+0x188>)
 8005fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fdc:	e7c5      	b.n	8005f6a <__ieee754_atan2+0x42>
 8005fde:	a136      	add	r1, pc, #216	; (adr r1, 80060b8 <__ieee754_atan2+0x190>)
 8005fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fe4:	e7c1      	b.n	8005f6a <__ieee754_atan2+0x42>
 8005fe6:	2c02      	cmp	r4, #2
 8005fe8:	d04b      	beq.n	8006082 <__ieee754_atan2+0x15a>
 8005fea:	2c03      	cmp	r4, #3
 8005fec:	d0d7      	beq.n	8005f9e <__ieee754_atan2+0x76>
 8005fee:	2c01      	cmp	r4, #1
 8005ff0:	f04f 0000 	mov.w	r0, #0
 8005ff4:	d102      	bne.n	8005ffc <__ieee754_atan2+0xd4>
 8005ff6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005ffa:	e7b6      	b.n	8005f6a <__ieee754_atan2+0x42>
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	e7b4      	b.n	8005f6a <__ieee754_atan2+0x42>
 8006000:	4573      	cmp	r3, lr
 8006002:	d0d3      	beq.n	8005fac <__ieee754_atan2+0x84>
 8006004:	1a9b      	subs	r3, r3, r2
 8006006:	151b      	asrs	r3, r3, #20
 8006008:	2b3c      	cmp	r3, #60	; 0x3c
 800600a:	dc1e      	bgt.n	800604a <__ieee754_atan2+0x122>
 800600c:	2f00      	cmp	r7, #0
 800600e:	da01      	bge.n	8006014 <__ieee754_atan2+0xec>
 8006010:	333c      	adds	r3, #60	; 0x3c
 8006012:	db1e      	blt.n	8006052 <__ieee754_atan2+0x12a>
 8006014:	4632      	mov	r2, r6
 8006016:	463b      	mov	r3, r7
 8006018:	f7fa fbbc 	bl	8000794 <__aeabi_ddiv>
 800601c:	ec41 0b10 	vmov	d0, r0, r1
 8006020:	f001 f96a 	bl	80072f8 <fabs>
 8006024:	f000 ffc8 	bl	8006fb8 <atan>
 8006028:	ec51 0b10 	vmov	r0, r1, d0
 800602c:	2c01      	cmp	r4, #1
 800602e:	d013      	beq.n	8006058 <__ieee754_atan2+0x130>
 8006030:	2c02      	cmp	r4, #2
 8006032:	d015      	beq.n	8006060 <__ieee754_atan2+0x138>
 8006034:	2c00      	cmp	r4, #0
 8006036:	d098      	beq.n	8005f6a <__ieee754_atan2+0x42>
 8006038:	a321      	add	r3, pc, #132	; (adr r3, 80060c0 <__ieee754_atan2+0x198>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa f8c7 	bl	80001d0 <__aeabi_dsub>
 8006042:	a321      	add	r3, pc, #132	; (adr r3, 80060c8 <__ieee754_atan2+0x1a0>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	e014      	b.n	8006074 <__ieee754_atan2+0x14c>
 800604a:	a121      	add	r1, pc, #132	; (adr r1, 80060d0 <__ieee754_atan2+0x1a8>)
 800604c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006050:	e7ec      	b.n	800602c <__ieee754_atan2+0x104>
 8006052:	2000      	movs	r0, #0
 8006054:	2100      	movs	r1, #0
 8006056:	e7e9      	b.n	800602c <__ieee754_atan2+0x104>
 8006058:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800605c:	4619      	mov	r1, r3
 800605e:	e784      	b.n	8005f6a <__ieee754_atan2+0x42>
 8006060:	a317      	add	r3, pc, #92	; (adr r3, 80060c0 <__ieee754_atan2+0x198>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f7fa f8b3 	bl	80001d0 <__aeabi_dsub>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	a116      	add	r1, pc, #88	; (adr r1, 80060c8 <__ieee754_atan2+0x1a0>)
 8006070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006074:	f7fa f8ac 	bl	80001d0 <__aeabi_dsub>
 8006078:	e777      	b.n	8005f6a <__ieee754_atan2+0x42>
 800607a:	a117      	add	r1, pc, #92	; (adr r1, 80060d8 <__ieee754_atan2+0x1b0>)
 800607c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006080:	e773      	b.n	8005f6a <__ieee754_atan2+0x42>
 8006082:	a111      	add	r1, pc, #68	; (adr r1, 80060c8 <__ieee754_atan2+0x1a0>)
 8006084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006088:	e76f      	b.n	8005f6a <__ieee754_atan2+0x42>
 800608a:	a111      	add	r1, pc, #68	; (adr r1, 80060d0 <__ieee754_atan2+0x1a8>)
 800608c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006090:	e76b      	b.n	8005f6a <__ieee754_atan2+0x42>
 8006092:	bf00      	nop
 8006094:	f3af 8000 	nop.w
 8006098:	54442d18 	.word	0x54442d18
 800609c:	c00921fb 	.word	0xc00921fb
 80060a0:	54442d18 	.word	0x54442d18
 80060a4:	bff921fb 	.word	0xbff921fb
 80060a8:	54442d18 	.word	0x54442d18
 80060ac:	bfe921fb 	.word	0xbfe921fb
 80060b0:	7f3321d2 	.word	0x7f3321d2
 80060b4:	4002d97c 	.word	0x4002d97c
 80060b8:	7f3321d2 	.word	0x7f3321d2
 80060bc:	c002d97c 	.word	0xc002d97c
 80060c0:	33145c07 	.word	0x33145c07
 80060c4:	3ca1a626 	.word	0x3ca1a626
 80060c8:	54442d18 	.word	0x54442d18
 80060cc:	400921fb 	.word	0x400921fb
 80060d0:	54442d18 	.word	0x54442d18
 80060d4:	3ff921fb 	.word	0x3ff921fb
 80060d8:	54442d18 	.word	0x54442d18
 80060dc:	3fe921fb 	.word	0x3fe921fb
 80060e0:	7ff00000 	.word	0x7ff00000
 80060e4:	00000000 	.word	0x00000000

080060e8 <__ieee754_rem_pio2>:
 80060e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ec:	ec57 6b10 	vmov	r6, r7, d0
 80060f0:	4bc3      	ldr	r3, [pc, #780]	; (8006400 <__ieee754_rem_pio2+0x318>)
 80060f2:	b08d      	sub	sp, #52	; 0x34
 80060f4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80060f8:	4598      	cmp	r8, r3
 80060fa:	4604      	mov	r4, r0
 80060fc:	9704      	str	r7, [sp, #16]
 80060fe:	dc07      	bgt.n	8006110 <__ieee754_rem_pio2+0x28>
 8006100:	2200      	movs	r2, #0
 8006102:	2300      	movs	r3, #0
 8006104:	ed84 0b00 	vstr	d0, [r4]
 8006108:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800610c:	2500      	movs	r5, #0
 800610e:	e027      	b.n	8006160 <__ieee754_rem_pio2+0x78>
 8006110:	4bbc      	ldr	r3, [pc, #752]	; (8006404 <__ieee754_rem_pio2+0x31c>)
 8006112:	4598      	cmp	r8, r3
 8006114:	dc75      	bgt.n	8006202 <__ieee754_rem_pio2+0x11a>
 8006116:	9b04      	ldr	r3, [sp, #16]
 8006118:	4dbb      	ldr	r5, [pc, #748]	; (8006408 <__ieee754_rem_pio2+0x320>)
 800611a:	2b00      	cmp	r3, #0
 800611c:	ee10 0a10 	vmov	r0, s0
 8006120:	a3a9      	add	r3, pc, #676	; (adr r3, 80063c8 <__ieee754_rem_pio2+0x2e0>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	4639      	mov	r1, r7
 8006128:	dd36      	ble.n	8006198 <__ieee754_rem_pio2+0xb0>
 800612a:	f7fa f851 	bl	80001d0 <__aeabi_dsub>
 800612e:	45a8      	cmp	r8, r5
 8006130:	4606      	mov	r6, r0
 8006132:	460f      	mov	r7, r1
 8006134:	d018      	beq.n	8006168 <__ieee754_rem_pio2+0x80>
 8006136:	a3a6      	add	r3, pc, #664	; (adr r3, 80063d0 <__ieee754_rem_pio2+0x2e8>)
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f7fa f848 	bl	80001d0 <__aeabi_dsub>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	e9c4 2300 	strd	r2, r3, [r4]
 8006148:	4630      	mov	r0, r6
 800614a:	4639      	mov	r1, r7
 800614c:	f7fa f840 	bl	80001d0 <__aeabi_dsub>
 8006150:	a39f      	add	r3, pc, #636	; (adr r3, 80063d0 <__ieee754_rem_pio2+0x2e8>)
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f7fa f83b 	bl	80001d0 <__aeabi_dsub>
 800615a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800615e:	2501      	movs	r5, #1
 8006160:	4628      	mov	r0, r5
 8006162:	b00d      	add	sp, #52	; 0x34
 8006164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006168:	a39b      	add	r3, pc, #620	; (adr r3, 80063d8 <__ieee754_rem_pio2+0x2f0>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f7fa f82f 	bl	80001d0 <__aeabi_dsub>
 8006172:	a39b      	add	r3, pc, #620	; (adr r3, 80063e0 <__ieee754_rem_pio2+0x2f8>)
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	4606      	mov	r6, r0
 800617a:	460f      	mov	r7, r1
 800617c:	f7fa f828 	bl	80001d0 <__aeabi_dsub>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	e9c4 2300 	strd	r2, r3, [r4]
 8006188:	4630      	mov	r0, r6
 800618a:	4639      	mov	r1, r7
 800618c:	f7fa f820 	bl	80001d0 <__aeabi_dsub>
 8006190:	a393      	add	r3, pc, #588	; (adr r3, 80063e0 <__ieee754_rem_pio2+0x2f8>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	e7de      	b.n	8006156 <__ieee754_rem_pio2+0x6e>
 8006198:	f7fa f81c 	bl	80001d4 <__adddf3>
 800619c:	45a8      	cmp	r8, r5
 800619e:	4606      	mov	r6, r0
 80061a0:	460f      	mov	r7, r1
 80061a2:	d016      	beq.n	80061d2 <__ieee754_rem_pio2+0xea>
 80061a4:	a38a      	add	r3, pc, #552	; (adr r3, 80063d0 <__ieee754_rem_pio2+0x2e8>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f7fa f813 	bl	80001d4 <__adddf3>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	e9c4 2300 	strd	r2, r3, [r4]
 80061b6:	4630      	mov	r0, r6
 80061b8:	4639      	mov	r1, r7
 80061ba:	f7fa f809 	bl	80001d0 <__aeabi_dsub>
 80061be:	a384      	add	r3, pc, #528	; (adr r3, 80063d0 <__ieee754_rem_pio2+0x2e8>)
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f7fa f806 	bl	80001d4 <__adddf3>
 80061c8:	f04f 35ff 	mov.w	r5, #4294967295
 80061cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80061d0:	e7c6      	b.n	8006160 <__ieee754_rem_pio2+0x78>
 80061d2:	a381      	add	r3, pc, #516	; (adr r3, 80063d8 <__ieee754_rem_pio2+0x2f0>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f7f9 fffc 	bl	80001d4 <__adddf3>
 80061dc:	a380      	add	r3, pc, #512	; (adr r3, 80063e0 <__ieee754_rem_pio2+0x2f8>)
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	4606      	mov	r6, r0
 80061e4:	460f      	mov	r7, r1
 80061e6:	f7f9 fff5 	bl	80001d4 <__adddf3>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	e9c4 2300 	strd	r2, r3, [r4]
 80061f2:	4630      	mov	r0, r6
 80061f4:	4639      	mov	r1, r7
 80061f6:	f7f9 ffeb 	bl	80001d0 <__aeabi_dsub>
 80061fa:	a379      	add	r3, pc, #484	; (adr r3, 80063e0 <__ieee754_rem_pio2+0x2f8>)
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	e7e0      	b.n	80061c4 <__ieee754_rem_pio2+0xdc>
 8006202:	4b82      	ldr	r3, [pc, #520]	; (800640c <__ieee754_rem_pio2+0x324>)
 8006204:	4598      	cmp	r8, r3
 8006206:	f300 80d0 	bgt.w	80063aa <__ieee754_rem_pio2+0x2c2>
 800620a:	f001 f875 	bl	80072f8 <fabs>
 800620e:	ec57 6b10 	vmov	r6, r7, d0
 8006212:	ee10 0a10 	vmov	r0, s0
 8006216:	a374      	add	r3, pc, #464	; (adr r3, 80063e8 <__ieee754_rem_pio2+0x300>)
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	4639      	mov	r1, r7
 800621e:	f7fa f98f 	bl	8000540 <__aeabi_dmul>
 8006222:	2200      	movs	r2, #0
 8006224:	4b7a      	ldr	r3, [pc, #488]	; (8006410 <__ieee754_rem_pio2+0x328>)
 8006226:	f7f9 ffd5 	bl	80001d4 <__adddf3>
 800622a:	f7fa fc39 	bl	8000aa0 <__aeabi_d2iz>
 800622e:	4605      	mov	r5, r0
 8006230:	f7fa f91c 	bl	800046c <__aeabi_i2d>
 8006234:	a364      	add	r3, pc, #400	; (adr r3, 80063c8 <__ieee754_rem_pio2+0x2e0>)
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800623e:	f7fa f97f 	bl	8000540 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4630      	mov	r0, r6
 8006248:	4639      	mov	r1, r7
 800624a:	f7f9 ffc1 	bl	80001d0 <__aeabi_dsub>
 800624e:	a360      	add	r3, pc, #384	; (adr r3, 80063d0 <__ieee754_rem_pio2+0x2e8>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	4682      	mov	sl, r0
 8006256:	468b      	mov	fp, r1
 8006258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800625c:	f7fa f970 	bl	8000540 <__aeabi_dmul>
 8006260:	2d1f      	cmp	r5, #31
 8006262:	4606      	mov	r6, r0
 8006264:	460f      	mov	r7, r1
 8006266:	dc0c      	bgt.n	8006282 <__ieee754_rem_pio2+0x19a>
 8006268:	1e6a      	subs	r2, r5, #1
 800626a:	4b6a      	ldr	r3, [pc, #424]	; (8006414 <__ieee754_rem_pio2+0x32c>)
 800626c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006270:	4543      	cmp	r3, r8
 8006272:	d006      	beq.n	8006282 <__ieee754_rem_pio2+0x19a>
 8006274:	4632      	mov	r2, r6
 8006276:	463b      	mov	r3, r7
 8006278:	4650      	mov	r0, sl
 800627a:	4659      	mov	r1, fp
 800627c:	f7f9 ffa8 	bl	80001d0 <__aeabi_dsub>
 8006280:	e00e      	b.n	80062a0 <__ieee754_rem_pio2+0x1b8>
 8006282:	4632      	mov	r2, r6
 8006284:	463b      	mov	r3, r7
 8006286:	4650      	mov	r0, sl
 8006288:	4659      	mov	r1, fp
 800628a:	f7f9 ffa1 	bl	80001d0 <__aeabi_dsub>
 800628e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006292:	9305      	str	r3, [sp, #20]
 8006294:	9a05      	ldr	r2, [sp, #20]
 8006296:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b10      	cmp	r3, #16
 800629e:	dc02      	bgt.n	80062a6 <__ieee754_rem_pio2+0x1be>
 80062a0:	e9c4 0100 	strd	r0, r1, [r4]
 80062a4:	e039      	b.n	800631a <__ieee754_rem_pio2+0x232>
 80062a6:	a34c      	add	r3, pc, #304	; (adr r3, 80063d8 <__ieee754_rem_pio2+0x2f0>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b0:	f7fa f946 	bl	8000540 <__aeabi_dmul>
 80062b4:	4606      	mov	r6, r0
 80062b6:	460f      	mov	r7, r1
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4650      	mov	r0, sl
 80062be:	4659      	mov	r1, fp
 80062c0:	f7f9 ff86 	bl	80001d0 <__aeabi_dsub>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4680      	mov	r8, r0
 80062ca:	4689      	mov	r9, r1
 80062cc:	4650      	mov	r0, sl
 80062ce:	4659      	mov	r1, fp
 80062d0:	f7f9 ff7e 	bl	80001d0 <__aeabi_dsub>
 80062d4:	4632      	mov	r2, r6
 80062d6:	463b      	mov	r3, r7
 80062d8:	f7f9 ff7a 	bl	80001d0 <__aeabi_dsub>
 80062dc:	a340      	add	r3, pc, #256	; (adr r3, 80063e0 <__ieee754_rem_pio2+0x2f8>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	4606      	mov	r6, r0
 80062e4:	460f      	mov	r7, r1
 80062e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ea:	f7fa f929 	bl	8000540 <__aeabi_dmul>
 80062ee:	4632      	mov	r2, r6
 80062f0:	463b      	mov	r3, r7
 80062f2:	f7f9 ff6d 	bl	80001d0 <__aeabi_dsub>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4606      	mov	r6, r0
 80062fc:	460f      	mov	r7, r1
 80062fe:	4640      	mov	r0, r8
 8006300:	4649      	mov	r1, r9
 8006302:	f7f9 ff65 	bl	80001d0 <__aeabi_dsub>
 8006306:	9a05      	ldr	r2, [sp, #20]
 8006308:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b31      	cmp	r3, #49	; 0x31
 8006310:	dc20      	bgt.n	8006354 <__ieee754_rem_pio2+0x26c>
 8006312:	e9c4 0100 	strd	r0, r1, [r4]
 8006316:	46c2      	mov	sl, r8
 8006318:	46cb      	mov	fp, r9
 800631a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800631e:	4650      	mov	r0, sl
 8006320:	4642      	mov	r2, r8
 8006322:	464b      	mov	r3, r9
 8006324:	4659      	mov	r1, fp
 8006326:	f7f9 ff53 	bl	80001d0 <__aeabi_dsub>
 800632a:	463b      	mov	r3, r7
 800632c:	4632      	mov	r2, r6
 800632e:	f7f9 ff4f 	bl	80001d0 <__aeabi_dsub>
 8006332:	9b04      	ldr	r3, [sp, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800633a:	f6bf af11 	bge.w	8006160 <__ieee754_rem_pio2+0x78>
 800633e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006342:	6063      	str	r3, [r4, #4]
 8006344:	f8c4 8000 	str.w	r8, [r4]
 8006348:	60a0      	str	r0, [r4, #8]
 800634a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800634e:	60e3      	str	r3, [r4, #12]
 8006350:	426d      	negs	r5, r5
 8006352:	e705      	b.n	8006160 <__ieee754_rem_pio2+0x78>
 8006354:	a326      	add	r3, pc, #152	; (adr r3, 80063f0 <__ieee754_rem_pio2+0x308>)
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800635e:	f7fa f8ef 	bl	8000540 <__aeabi_dmul>
 8006362:	4606      	mov	r6, r0
 8006364:	460f      	mov	r7, r1
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4640      	mov	r0, r8
 800636c:	4649      	mov	r1, r9
 800636e:	f7f9 ff2f 	bl	80001d0 <__aeabi_dsub>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4682      	mov	sl, r0
 8006378:	468b      	mov	fp, r1
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	f7f9 ff27 	bl	80001d0 <__aeabi_dsub>
 8006382:	4632      	mov	r2, r6
 8006384:	463b      	mov	r3, r7
 8006386:	f7f9 ff23 	bl	80001d0 <__aeabi_dsub>
 800638a:	a31b      	add	r3, pc, #108	; (adr r3, 80063f8 <__ieee754_rem_pio2+0x310>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	4606      	mov	r6, r0
 8006392:	460f      	mov	r7, r1
 8006394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006398:	f7fa f8d2 	bl	8000540 <__aeabi_dmul>
 800639c:	4632      	mov	r2, r6
 800639e:	463b      	mov	r3, r7
 80063a0:	f7f9 ff16 	bl	80001d0 <__aeabi_dsub>
 80063a4:	4606      	mov	r6, r0
 80063a6:	460f      	mov	r7, r1
 80063a8:	e764      	b.n	8006274 <__ieee754_rem_pio2+0x18c>
 80063aa:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <__ieee754_rem_pio2+0x330>)
 80063ac:	4598      	cmp	r8, r3
 80063ae:	dd35      	ble.n	800641c <__ieee754_rem_pio2+0x334>
 80063b0:	ee10 2a10 	vmov	r2, s0
 80063b4:	463b      	mov	r3, r7
 80063b6:	4630      	mov	r0, r6
 80063b8:	4639      	mov	r1, r7
 80063ba:	f7f9 ff09 	bl	80001d0 <__aeabi_dsub>
 80063be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80063c2:	e9c4 0100 	strd	r0, r1, [r4]
 80063c6:	e6a1      	b.n	800610c <__ieee754_rem_pio2+0x24>
 80063c8:	54400000 	.word	0x54400000
 80063cc:	3ff921fb 	.word	0x3ff921fb
 80063d0:	1a626331 	.word	0x1a626331
 80063d4:	3dd0b461 	.word	0x3dd0b461
 80063d8:	1a600000 	.word	0x1a600000
 80063dc:	3dd0b461 	.word	0x3dd0b461
 80063e0:	2e037073 	.word	0x2e037073
 80063e4:	3ba3198a 	.word	0x3ba3198a
 80063e8:	6dc9c883 	.word	0x6dc9c883
 80063ec:	3fe45f30 	.word	0x3fe45f30
 80063f0:	2e000000 	.word	0x2e000000
 80063f4:	3ba3198a 	.word	0x3ba3198a
 80063f8:	252049c1 	.word	0x252049c1
 80063fc:	397b839a 	.word	0x397b839a
 8006400:	3fe921fb 	.word	0x3fe921fb
 8006404:	4002d97b 	.word	0x4002d97b
 8006408:	3ff921fb 	.word	0x3ff921fb
 800640c:	413921fb 	.word	0x413921fb
 8006410:	3fe00000 	.word	0x3fe00000
 8006414:	08007570 	.word	0x08007570
 8006418:	7fefffff 	.word	0x7fefffff
 800641c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006420:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006424:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006428:	4630      	mov	r0, r6
 800642a:	460f      	mov	r7, r1
 800642c:	f7fa fb38 	bl	8000aa0 <__aeabi_d2iz>
 8006430:	f7fa f81c 	bl	800046c <__aeabi_i2d>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006440:	f7f9 fec6 	bl	80001d0 <__aeabi_dsub>
 8006444:	2200      	movs	r2, #0
 8006446:	4b1f      	ldr	r3, [pc, #124]	; (80064c4 <__ieee754_rem_pio2+0x3dc>)
 8006448:	f7fa f87a 	bl	8000540 <__aeabi_dmul>
 800644c:	460f      	mov	r7, r1
 800644e:	4606      	mov	r6, r0
 8006450:	f7fa fb26 	bl	8000aa0 <__aeabi_d2iz>
 8006454:	f7fa f80a 	bl	800046c <__aeabi_i2d>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4630      	mov	r0, r6
 800645e:	4639      	mov	r1, r7
 8006460:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006464:	f7f9 feb4 	bl	80001d0 <__aeabi_dsub>
 8006468:	2200      	movs	r2, #0
 800646a:	4b16      	ldr	r3, [pc, #88]	; (80064c4 <__ieee754_rem_pio2+0x3dc>)
 800646c:	f7fa f868 	bl	8000540 <__aeabi_dmul>
 8006470:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006474:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006478:	f04f 0803 	mov.w	r8, #3
 800647c:	2600      	movs	r6, #0
 800647e:	2700      	movs	r7, #0
 8006480:	4632      	mov	r2, r6
 8006482:	463b      	mov	r3, r7
 8006484:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006488:	f108 3aff 	add.w	sl, r8, #4294967295
 800648c:	f7fa fac0 	bl	8000a10 <__aeabi_dcmpeq>
 8006490:	b9b0      	cbnz	r0, 80064c0 <__ieee754_rem_pio2+0x3d8>
 8006492:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <__ieee754_rem_pio2+0x3e0>)
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	2302      	movs	r3, #2
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	462a      	mov	r2, r5
 800649c:	4643      	mov	r3, r8
 800649e:	4621      	mov	r1, r4
 80064a0:	a806      	add	r0, sp, #24
 80064a2:	f000 f98d 	bl	80067c0 <__kernel_rem_pio2>
 80064a6:	9b04      	ldr	r3, [sp, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	4605      	mov	r5, r0
 80064ac:	f6bf ae58 	bge.w	8006160 <__ieee754_rem_pio2+0x78>
 80064b0:	6863      	ldr	r3, [r4, #4]
 80064b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80064b6:	6063      	str	r3, [r4, #4]
 80064b8:	68e3      	ldr	r3, [r4, #12]
 80064ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80064be:	e746      	b.n	800634e <__ieee754_rem_pio2+0x266>
 80064c0:	46d0      	mov	r8, sl
 80064c2:	e7dd      	b.n	8006480 <__ieee754_rem_pio2+0x398>
 80064c4:	41700000 	.word	0x41700000
 80064c8:	080075f0 	.word	0x080075f0

080064cc <__ieee754_sqrt>:
 80064cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d0:	4955      	ldr	r1, [pc, #340]	; (8006628 <__ieee754_sqrt+0x15c>)
 80064d2:	ec55 4b10 	vmov	r4, r5, d0
 80064d6:	43a9      	bics	r1, r5
 80064d8:	462b      	mov	r3, r5
 80064da:	462a      	mov	r2, r5
 80064dc:	d112      	bne.n	8006504 <__ieee754_sqrt+0x38>
 80064de:	ee10 2a10 	vmov	r2, s0
 80064e2:	ee10 0a10 	vmov	r0, s0
 80064e6:	4629      	mov	r1, r5
 80064e8:	f7fa f82a 	bl	8000540 <__aeabi_dmul>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4620      	mov	r0, r4
 80064f2:	4629      	mov	r1, r5
 80064f4:	f7f9 fe6e 	bl	80001d4 <__adddf3>
 80064f8:	4604      	mov	r4, r0
 80064fa:	460d      	mov	r5, r1
 80064fc:	ec45 4b10 	vmov	d0, r4, r5
 8006500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006504:	2d00      	cmp	r5, #0
 8006506:	ee10 0a10 	vmov	r0, s0
 800650a:	4621      	mov	r1, r4
 800650c:	dc0f      	bgt.n	800652e <__ieee754_sqrt+0x62>
 800650e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006512:	4330      	orrs	r0, r6
 8006514:	d0f2      	beq.n	80064fc <__ieee754_sqrt+0x30>
 8006516:	b155      	cbz	r5, 800652e <__ieee754_sqrt+0x62>
 8006518:	ee10 2a10 	vmov	r2, s0
 800651c:	4620      	mov	r0, r4
 800651e:	4629      	mov	r1, r5
 8006520:	f7f9 fe56 	bl	80001d0 <__aeabi_dsub>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	f7fa f934 	bl	8000794 <__aeabi_ddiv>
 800652c:	e7e4      	b.n	80064f8 <__ieee754_sqrt+0x2c>
 800652e:	151b      	asrs	r3, r3, #20
 8006530:	d073      	beq.n	800661a <__ieee754_sqrt+0x14e>
 8006532:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006536:	07dd      	lsls	r5, r3, #31
 8006538:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800653c:	bf48      	it	mi
 800653e:	0fc8      	lsrmi	r0, r1, #31
 8006540:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006544:	bf44      	itt	mi
 8006546:	0049      	lslmi	r1, r1, #1
 8006548:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800654c:	2500      	movs	r5, #0
 800654e:	1058      	asrs	r0, r3, #1
 8006550:	0fcb      	lsrs	r3, r1, #31
 8006552:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006556:	0049      	lsls	r1, r1, #1
 8006558:	2316      	movs	r3, #22
 800655a:	462c      	mov	r4, r5
 800655c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006560:	19a7      	adds	r7, r4, r6
 8006562:	4297      	cmp	r7, r2
 8006564:	bfde      	ittt	le
 8006566:	19bc      	addle	r4, r7, r6
 8006568:	1bd2      	suble	r2, r2, r7
 800656a:	19ad      	addle	r5, r5, r6
 800656c:	0fcf      	lsrs	r7, r1, #31
 800656e:	3b01      	subs	r3, #1
 8006570:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006574:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006578:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800657c:	d1f0      	bne.n	8006560 <__ieee754_sqrt+0x94>
 800657e:	f04f 0c20 	mov.w	ip, #32
 8006582:	469e      	mov	lr, r3
 8006584:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006588:	42a2      	cmp	r2, r4
 800658a:	eb06 070e 	add.w	r7, r6, lr
 800658e:	dc02      	bgt.n	8006596 <__ieee754_sqrt+0xca>
 8006590:	d112      	bne.n	80065b8 <__ieee754_sqrt+0xec>
 8006592:	428f      	cmp	r7, r1
 8006594:	d810      	bhi.n	80065b8 <__ieee754_sqrt+0xec>
 8006596:	2f00      	cmp	r7, #0
 8006598:	eb07 0e06 	add.w	lr, r7, r6
 800659c:	da42      	bge.n	8006624 <__ieee754_sqrt+0x158>
 800659e:	f1be 0f00 	cmp.w	lr, #0
 80065a2:	db3f      	blt.n	8006624 <__ieee754_sqrt+0x158>
 80065a4:	f104 0801 	add.w	r8, r4, #1
 80065a8:	1b12      	subs	r2, r2, r4
 80065aa:	428f      	cmp	r7, r1
 80065ac:	bf88      	it	hi
 80065ae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80065b2:	1bc9      	subs	r1, r1, r7
 80065b4:	4433      	add	r3, r6
 80065b6:	4644      	mov	r4, r8
 80065b8:	0052      	lsls	r2, r2, #1
 80065ba:	f1bc 0c01 	subs.w	ip, ip, #1
 80065be:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80065c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80065c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80065ca:	d1dd      	bne.n	8006588 <__ieee754_sqrt+0xbc>
 80065cc:	430a      	orrs	r2, r1
 80065ce:	d006      	beq.n	80065de <__ieee754_sqrt+0x112>
 80065d0:	1c5c      	adds	r4, r3, #1
 80065d2:	bf13      	iteet	ne
 80065d4:	3301      	addne	r3, #1
 80065d6:	3501      	addeq	r5, #1
 80065d8:	4663      	moveq	r3, ip
 80065da:	f023 0301 	bicne.w	r3, r3, #1
 80065de:	106a      	asrs	r2, r5, #1
 80065e0:	085b      	lsrs	r3, r3, #1
 80065e2:	07e9      	lsls	r1, r5, #31
 80065e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80065e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80065ec:	bf48      	it	mi
 80065ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80065f2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80065f6:	461c      	mov	r4, r3
 80065f8:	e780      	b.n	80064fc <__ieee754_sqrt+0x30>
 80065fa:	0aca      	lsrs	r2, r1, #11
 80065fc:	3815      	subs	r0, #21
 80065fe:	0549      	lsls	r1, r1, #21
 8006600:	2a00      	cmp	r2, #0
 8006602:	d0fa      	beq.n	80065fa <__ieee754_sqrt+0x12e>
 8006604:	02d6      	lsls	r6, r2, #11
 8006606:	d50a      	bpl.n	800661e <__ieee754_sqrt+0x152>
 8006608:	f1c3 0420 	rsb	r4, r3, #32
 800660c:	fa21 f404 	lsr.w	r4, r1, r4
 8006610:	1e5d      	subs	r5, r3, #1
 8006612:	4099      	lsls	r1, r3
 8006614:	4322      	orrs	r2, r4
 8006616:	1b43      	subs	r3, r0, r5
 8006618:	e78b      	b.n	8006532 <__ieee754_sqrt+0x66>
 800661a:	4618      	mov	r0, r3
 800661c:	e7f0      	b.n	8006600 <__ieee754_sqrt+0x134>
 800661e:	0052      	lsls	r2, r2, #1
 8006620:	3301      	adds	r3, #1
 8006622:	e7ef      	b.n	8006604 <__ieee754_sqrt+0x138>
 8006624:	46a0      	mov	r8, r4
 8006626:	e7bf      	b.n	80065a8 <__ieee754_sqrt+0xdc>
 8006628:	7ff00000 	.word	0x7ff00000
 800662c:	00000000 	.word	0x00000000

08006630 <__kernel_cos>:
 8006630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	ec59 8b10 	vmov	r8, r9, d0
 8006638:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800663c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006640:	ed2d 8b02 	vpush	{d8}
 8006644:	eeb0 8a41 	vmov.f32	s16, s2
 8006648:	eef0 8a61 	vmov.f32	s17, s3
 800664c:	da07      	bge.n	800665e <__kernel_cos+0x2e>
 800664e:	ee10 0a10 	vmov	r0, s0
 8006652:	4649      	mov	r1, r9
 8006654:	f7fa fa24 	bl	8000aa0 <__aeabi_d2iz>
 8006658:	2800      	cmp	r0, #0
 800665a:	f000 8089 	beq.w	8006770 <__kernel_cos+0x140>
 800665e:	4642      	mov	r2, r8
 8006660:	464b      	mov	r3, r9
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	f7f9 ff6b 	bl	8000540 <__aeabi_dmul>
 800666a:	2200      	movs	r2, #0
 800666c:	4b4e      	ldr	r3, [pc, #312]	; (80067a8 <__kernel_cos+0x178>)
 800666e:	4604      	mov	r4, r0
 8006670:	460d      	mov	r5, r1
 8006672:	f7f9 ff65 	bl	8000540 <__aeabi_dmul>
 8006676:	a340      	add	r3, pc, #256	; (adr r3, 8006778 <__kernel_cos+0x148>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	4682      	mov	sl, r0
 800667e:	468b      	mov	fp, r1
 8006680:	4620      	mov	r0, r4
 8006682:	4629      	mov	r1, r5
 8006684:	f7f9 ff5c 	bl	8000540 <__aeabi_dmul>
 8006688:	a33d      	add	r3, pc, #244	; (adr r3, 8006780 <__kernel_cos+0x150>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f7f9 fda1 	bl	80001d4 <__adddf3>
 8006692:	4622      	mov	r2, r4
 8006694:	462b      	mov	r3, r5
 8006696:	f7f9 ff53 	bl	8000540 <__aeabi_dmul>
 800669a:	a33b      	add	r3, pc, #236	; (adr r3, 8006788 <__kernel_cos+0x158>)
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	f7f9 fd96 	bl	80001d0 <__aeabi_dsub>
 80066a4:	4622      	mov	r2, r4
 80066a6:	462b      	mov	r3, r5
 80066a8:	f7f9 ff4a 	bl	8000540 <__aeabi_dmul>
 80066ac:	a338      	add	r3, pc, #224	; (adr r3, 8006790 <__kernel_cos+0x160>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f7f9 fd8f 	bl	80001d4 <__adddf3>
 80066b6:	4622      	mov	r2, r4
 80066b8:	462b      	mov	r3, r5
 80066ba:	f7f9 ff41 	bl	8000540 <__aeabi_dmul>
 80066be:	a336      	add	r3, pc, #216	; (adr r3, 8006798 <__kernel_cos+0x168>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f7f9 fd84 	bl	80001d0 <__aeabi_dsub>
 80066c8:	4622      	mov	r2, r4
 80066ca:	462b      	mov	r3, r5
 80066cc:	f7f9 ff38 	bl	8000540 <__aeabi_dmul>
 80066d0:	a333      	add	r3, pc, #204	; (adr r3, 80067a0 <__kernel_cos+0x170>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f7f9 fd7d 	bl	80001d4 <__adddf3>
 80066da:	4622      	mov	r2, r4
 80066dc:	462b      	mov	r3, r5
 80066de:	f7f9 ff2f 	bl	8000540 <__aeabi_dmul>
 80066e2:	4622      	mov	r2, r4
 80066e4:	462b      	mov	r3, r5
 80066e6:	f7f9 ff2b 	bl	8000540 <__aeabi_dmul>
 80066ea:	ec53 2b18 	vmov	r2, r3, d8
 80066ee:	4604      	mov	r4, r0
 80066f0:	460d      	mov	r5, r1
 80066f2:	4640      	mov	r0, r8
 80066f4:	4649      	mov	r1, r9
 80066f6:	f7f9 ff23 	bl	8000540 <__aeabi_dmul>
 80066fa:	460b      	mov	r3, r1
 80066fc:	4602      	mov	r2, r0
 80066fe:	4629      	mov	r1, r5
 8006700:	4620      	mov	r0, r4
 8006702:	f7f9 fd65 	bl	80001d0 <__aeabi_dsub>
 8006706:	4b29      	ldr	r3, [pc, #164]	; (80067ac <__kernel_cos+0x17c>)
 8006708:	429e      	cmp	r6, r3
 800670a:	4680      	mov	r8, r0
 800670c:	4689      	mov	r9, r1
 800670e:	dc11      	bgt.n	8006734 <__kernel_cos+0x104>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4650      	mov	r0, sl
 8006716:	4659      	mov	r1, fp
 8006718:	f7f9 fd5a 	bl	80001d0 <__aeabi_dsub>
 800671c:	460b      	mov	r3, r1
 800671e:	4924      	ldr	r1, [pc, #144]	; (80067b0 <__kernel_cos+0x180>)
 8006720:	4602      	mov	r2, r0
 8006722:	2000      	movs	r0, #0
 8006724:	f7f9 fd54 	bl	80001d0 <__aeabi_dsub>
 8006728:	ecbd 8b02 	vpop	{d8}
 800672c:	ec41 0b10 	vmov	d0, r0, r1
 8006730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006734:	4b1f      	ldr	r3, [pc, #124]	; (80067b4 <__kernel_cos+0x184>)
 8006736:	491e      	ldr	r1, [pc, #120]	; (80067b0 <__kernel_cos+0x180>)
 8006738:	429e      	cmp	r6, r3
 800673a:	bfcc      	ite	gt
 800673c:	4d1e      	ldrgt	r5, [pc, #120]	; (80067b8 <__kernel_cos+0x188>)
 800673e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006742:	2400      	movs	r4, #0
 8006744:	4622      	mov	r2, r4
 8006746:	462b      	mov	r3, r5
 8006748:	2000      	movs	r0, #0
 800674a:	f7f9 fd41 	bl	80001d0 <__aeabi_dsub>
 800674e:	4622      	mov	r2, r4
 8006750:	4606      	mov	r6, r0
 8006752:	460f      	mov	r7, r1
 8006754:	462b      	mov	r3, r5
 8006756:	4650      	mov	r0, sl
 8006758:	4659      	mov	r1, fp
 800675a:	f7f9 fd39 	bl	80001d0 <__aeabi_dsub>
 800675e:	4642      	mov	r2, r8
 8006760:	464b      	mov	r3, r9
 8006762:	f7f9 fd35 	bl	80001d0 <__aeabi_dsub>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	4630      	mov	r0, r6
 800676c:	4639      	mov	r1, r7
 800676e:	e7d9      	b.n	8006724 <__kernel_cos+0xf4>
 8006770:	2000      	movs	r0, #0
 8006772:	490f      	ldr	r1, [pc, #60]	; (80067b0 <__kernel_cos+0x180>)
 8006774:	e7d8      	b.n	8006728 <__kernel_cos+0xf8>
 8006776:	bf00      	nop
 8006778:	be8838d4 	.word	0xbe8838d4
 800677c:	bda8fae9 	.word	0xbda8fae9
 8006780:	bdb4b1c4 	.word	0xbdb4b1c4
 8006784:	3e21ee9e 	.word	0x3e21ee9e
 8006788:	809c52ad 	.word	0x809c52ad
 800678c:	3e927e4f 	.word	0x3e927e4f
 8006790:	19cb1590 	.word	0x19cb1590
 8006794:	3efa01a0 	.word	0x3efa01a0
 8006798:	16c15177 	.word	0x16c15177
 800679c:	3f56c16c 	.word	0x3f56c16c
 80067a0:	5555554c 	.word	0x5555554c
 80067a4:	3fa55555 	.word	0x3fa55555
 80067a8:	3fe00000 	.word	0x3fe00000
 80067ac:	3fd33332 	.word	0x3fd33332
 80067b0:	3ff00000 	.word	0x3ff00000
 80067b4:	3fe90000 	.word	0x3fe90000
 80067b8:	3fd20000 	.word	0x3fd20000
 80067bc:	00000000 	.word	0x00000000

080067c0 <__kernel_rem_pio2>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	ed2d 8b02 	vpush	{d8}
 80067c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80067cc:	1ed4      	subs	r4, r2, #3
 80067ce:	9308      	str	r3, [sp, #32]
 80067d0:	9101      	str	r1, [sp, #4]
 80067d2:	4bc5      	ldr	r3, [pc, #788]	; (8006ae8 <__kernel_rem_pio2+0x328>)
 80067d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80067d6:	9009      	str	r0, [sp, #36]	; 0x24
 80067d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067dc:	9304      	str	r3, [sp, #16]
 80067de:	9b08      	ldr	r3, [sp, #32]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	9307      	str	r3, [sp, #28]
 80067e4:	2318      	movs	r3, #24
 80067e6:	fb94 f4f3 	sdiv	r4, r4, r3
 80067ea:	f06f 0317 	mvn.w	r3, #23
 80067ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80067f2:	fb04 3303 	mla	r3, r4, r3, r3
 80067f6:	eb03 0a02 	add.w	sl, r3, r2
 80067fa:	9b04      	ldr	r3, [sp, #16]
 80067fc:	9a07      	ldr	r2, [sp, #28]
 80067fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006ad8 <__kernel_rem_pio2+0x318>
 8006802:	eb03 0802 	add.w	r8, r3, r2
 8006806:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006808:	1aa7      	subs	r7, r4, r2
 800680a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800680e:	ae22      	add	r6, sp, #136	; 0x88
 8006810:	2500      	movs	r5, #0
 8006812:	4545      	cmp	r5, r8
 8006814:	dd13      	ble.n	800683e <__kernel_rem_pio2+0x7e>
 8006816:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006ad8 <__kernel_rem_pio2+0x318>
 800681a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800681e:	2600      	movs	r6, #0
 8006820:	9b04      	ldr	r3, [sp, #16]
 8006822:	429e      	cmp	r6, r3
 8006824:	dc32      	bgt.n	800688c <__kernel_rem_pio2+0xcc>
 8006826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006828:	9302      	str	r3, [sp, #8]
 800682a:	9b08      	ldr	r3, [sp, #32]
 800682c:	199d      	adds	r5, r3, r6
 800682e:	ab22      	add	r3, sp, #136	; 0x88
 8006830:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006834:	9306      	str	r3, [sp, #24]
 8006836:	ec59 8b18 	vmov	r8, r9, d8
 800683a:	2700      	movs	r7, #0
 800683c:	e01f      	b.n	800687e <__kernel_rem_pio2+0xbe>
 800683e:	42ef      	cmn	r7, r5
 8006840:	d407      	bmi.n	8006852 <__kernel_rem_pio2+0x92>
 8006842:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006846:	f7f9 fe11 	bl	800046c <__aeabi_i2d>
 800684a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800684e:	3501      	adds	r5, #1
 8006850:	e7df      	b.n	8006812 <__kernel_rem_pio2+0x52>
 8006852:	ec51 0b18 	vmov	r0, r1, d8
 8006856:	e7f8      	b.n	800684a <__kernel_rem_pio2+0x8a>
 8006858:	9906      	ldr	r1, [sp, #24]
 800685a:	9d02      	ldr	r5, [sp, #8]
 800685c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006860:	9106      	str	r1, [sp, #24]
 8006862:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006866:	9502      	str	r5, [sp, #8]
 8006868:	f7f9 fe6a 	bl	8000540 <__aeabi_dmul>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4640      	mov	r0, r8
 8006872:	4649      	mov	r1, r9
 8006874:	f7f9 fcae 	bl	80001d4 <__adddf3>
 8006878:	3701      	adds	r7, #1
 800687a:	4680      	mov	r8, r0
 800687c:	4689      	mov	r9, r1
 800687e:	9b07      	ldr	r3, [sp, #28]
 8006880:	429f      	cmp	r7, r3
 8006882:	dde9      	ble.n	8006858 <__kernel_rem_pio2+0x98>
 8006884:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006888:	3601      	adds	r6, #1
 800688a:	e7c9      	b.n	8006820 <__kernel_rem_pio2+0x60>
 800688c:	9b04      	ldr	r3, [sp, #16]
 800688e:	aa0e      	add	r2, sp, #56	; 0x38
 8006890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006894:	930c      	str	r3, [sp, #48]	; 0x30
 8006896:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006898:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800689c:	9c04      	ldr	r4, [sp, #16]
 800689e:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a0:	ab9a      	add	r3, sp, #616	; 0x268
 80068a2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80068a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80068b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80068b6:	ab9a      	add	r3, sp, #616	; 0x268
 80068b8:	445b      	add	r3, fp
 80068ba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80068be:	2500      	movs	r5, #0
 80068c0:	1b63      	subs	r3, r4, r5
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dc78      	bgt.n	80069b8 <__kernel_rem_pio2+0x1f8>
 80068c6:	4650      	mov	r0, sl
 80068c8:	ec49 8b10 	vmov	d0, r8, r9
 80068cc:	f000 fda8 	bl	8007420 <scalbn>
 80068d0:	ec57 6b10 	vmov	r6, r7, d0
 80068d4:	2200      	movs	r2, #0
 80068d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80068da:	ee10 0a10 	vmov	r0, s0
 80068de:	4639      	mov	r1, r7
 80068e0:	f7f9 fe2e 	bl	8000540 <__aeabi_dmul>
 80068e4:	ec41 0b10 	vmov	d0, r0, r1
 80068e8:	f000 fd12 	bl	8007310 <floor>
 80068ec:	2200      	movs	r2, #0
 80068ee:	ec51 0b10 	vmov	r0, r1, d0
 80068f2:	4b7e      	ldr	r3, [pc, #504]	; (8006aec <__kernel_rem_pio2+0x32c>)
 80068f4:	f7f9 fe24 	bl	8000540 <__aeabi_dmul>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7f9 fc66 	bl	80001d0 <__aeabi_dsub>
 8006904:	460f      	mov	r7, r1
 8006906:	4606      	mov	r6, r0
 8006908:	f7fa f8ca 	bl	8000aa0 <__aeabi_d2iz>
 800690c:	9006      	str	r0, [sp, #24]
 800690e:	f7f9 fdad 	bl	800046c <__aeabi_i2d>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	4630      	mov	r0, r6
 8006918:	4639      	mov	r1, r7
 800691a:	f7f9 fc59 	bl	80001d0 <__aeabi_dsub>
 800691e:	f1ba 0f00 	cmp.w	sl, #0
 8006922:	4606      	mov	r6, r0
 8006924:	460f      	mov	r7, r1
 8006926:	dd6c      	ble.n	8006a02 <__kernel_rem_pio2+0x242>
 8006928:	1e62      	subs	r2, r4, #1
 800692a:	ab0e      	add	r3, sp, #56	; 0x38
 800692c:	f1ca 0118 	rsb	r1, sl, #24
 8006930:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006934:	9d06      	ldr	r5, [sp, #24]
 8006936:	fa40 f301 	asr.w	r3, r0, r1
 800693a:	441d      	add	r5, r3
 800693c:	408b      	lsls	r3, r1
 800693e:	1ac0      	subs	r0, r0, r3
 8006940:	ab0e      	add	r3, sp, #56	; 0x38
 8006942:	9506      	str	r5, [sp, #24]
 8006944:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006948:	f1ca 0317 	rsb	r3, sl, #23
 800694c:	fa40 f303 	asr.w	r3, r0, r3
 8006950:	9302      	str	r3, [sp, #8]
 8006952:	9b02      	ldr	r3, [sp, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	dd62      	ble.n	8006a1e <__kernel_rem_pio2+0x25e>
 8006958:	9b06      	ldr	r3, [sp, #24]
 800695a:	2200      	movs	r2, #0
 800695c:	3301      	adds	r3, #1
 800695e:	9306      	str	r3, [sp, #24]
 8006960:	4615      	mov	r5, r2
 8006962:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006966:	4294      	cmp	r4, r2
 8006968:	f300 8095 	bgt.w	8006a96 <__kernel_rem_pio2+0x2d6>
 800696c:	f1ba 0f00 	cmp.w	sl, #0
 8006970:	dd07      	ble.n	8006982 <__kernel_rem_pio2+0x1c2>
 8006972:	f1ba 0f01 	cmp.w	sl, #1
 8006976:	f000 80a2 	beq.w	8006abe <__kernel_rem_pio2+0x2fe>
 800697a:	f1ba 0f02 	cmp.w	sl, #2
 800697e:	f000 80c1 	beq.w	8006b04 <__kernel_rem_pio2+0x344>
 8006982:	9b02      	ldr	r3, [sp, #8]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d14a      	bne.n	8006a1e <__kernel_rem_pio2+0x25e>
 8006988:	4632      	mov	r2, r6
 800698a:	463b      	mov	r3, r7
 800698c:	2000      	movs	r0, #0
 800698e:	4958      	ldr	r1, [pc, #352]	; (8006af0 <__kernel_rem_pio2+0x330>)
 8006990:	f7f9 fc1e 	bl	80001d0 <__aeabi_dsub>
 8006994:	4606      	mov	r6, r0
 8006996:	460f      	mov	r7, r1
 8006998:	2d00      	cmp	r5, #0
 800699a:	d040      	beq.n	8006a1e <__kernel_rem_pio2+0x25e>
 800699c:	4650      	mov	r0, sl
 800699e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006ae0 <__kernel_rem_pio2+0x320>
 80069a2:	f000 fd3d 	bl	8007420 <scalbn>
 80069a6:	4630      	mov	r0, r6
 80069a8:	4639      	mov	r1, r7
 80069aa:	ec53 2b10 	vmov	r2, r3, d0
 80069ae:	f7f9 fc0f 	bl	80001d0 <__aeabi_dsub>
 80069b2:	4606      	mov	r6, r0
 80069b4:	460f      	mov	r7, r1
 80069b6:	e032      	b.n	8006a1e <__kernel_rem_pio2+0x25e>
 80069b8:	2200      	movs	r2, #0
 80069ba:	4b4e      	ldr	r3, [pc, #312]	; (8006af4 <__kernel_rem_pio2+0x334>)
 80069bc:	4640      	mov	r0, r8
 80069be:	4649      	mov	r1, r9
 80069c0:	f7f9 fdbe 	bl	8000540 <__aeabi_dmul>
 80069c4:	f7fa f86c 	bl	8000aa0 <__aeabi_d2iz>
 80069c8:	f7f9 fd50 	bl	800046c <__aeabi_i2d>
 80069cc:	2200      	movs	r2, #0
 80069ce:	4b4a      	ldr	r3, [pc, #296]	; (8006af8 <__kernel_rem_pio2+0x338>)
 80069d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069d4:	f7f9 fdb4 	bl	8000540 <__aeabi_dmul>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4640      	mov	r0, r8
 80069de:	4649      	mov	r1, r9
 80069e0:	f7f9 fbf6 	bl	80001d0 <__aeabi_dsub>
 80069e4:	f7fa f85c 	bl	8000aa0 <__aeabi_d2iz>
 80069e8:	ab0e      	add	r3, sp, #56	; 0x38
 80069ea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80069ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80069f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069f6:	f7f9 fbed 	bl	80001d4 <__adddf3>
 80069fa:	3501      	adds	r5, #1
 80069fc:	4680      	mov	r8, r0
 80069fe:	4689      	mov	r9, r1
 8006a00:	e75e      	b.n	80068c0 <__kernel_rem_pio2+0x100>
 8006a02:	d105      	bne.n	8006a10 <__kernel_rem_pio2+0x250>
 8006a04:	1e63      	subs	r3, r4, #1
 8006a06:	aa0e      	add	r2, sp, #56	; 0x38
 8006a08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006a0c:	15c3      	asrs	r3, r0, #23
 8006a0e:	e79f      	b.n	8006950 <__kernel_rem_pio2+0x190>
 8006a10:	2200      	movs	r2, #0
 8006a12:	4b3a      	ldr	r3, [pc, #232]	; (8006afc <__kernel_rem_pio2+0x33c>)
 8006a14:	f7fa f81a 	bl	8000a4c <__aeabi_dcmpge>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d139      	bne.n	8006a90 <__kernel_rem_pio2+0x2d0>
 8006a1c:	9002      	str	r0, [sp, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2300      	movs	r3, #0
 8006a22:	4630      	mov	r0, r6
 8006a24:	4639      	mov	r1, r7
 8006a26:	f7f9 fff3 	bl	8000a10 <__aeabi_dcmpeq>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	f000 80c7 	beq.w	8006bbe <__kernel_rem_pio2+0x3fe>
 8006a30:	1e65      	subs	r5, r4, #1
 8006a32:	462b      	mov	r3, r5
 8006a34:	2200      	movs	r2, #0
 8006a36:	9904      	ldr	r1, [sp, #16]
 8006a38:	428b      	cmp	r3, r1
 8006a3a:	da6a      	bge.n	8006b12 <__kernel_rem_pio2+0x352>
 8006a3c:	2a00      	cmp	r2, #0
 8006a3e:	f000 8088 	beq.w	8006b52 <__kernel_rem_pio2+0x392>
 8006a42:	ab0e      	add	r3, sp, #56	; 0x38
 8006a44:	f1aa 0a18 	sub.w	sl, sl, #24
 8006a48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 80b4 	beq.w	8006bba <__kernel_rem_pio2+0x3fa>
 8006a52:	4650      	mov	r0, sl
 8006a54:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006ae0 <__kernel_rem_pio2+0x320>
 8006a58:	f000 fce2 	bl	8007420 <scalbn>
 8006a5c:	00ec      	lsls	r4, r5, #3
 8006a5e:	ab72      	add	r3, sp, #456	; 0x1c8
 8006a60:	191e      	adds	r6, r3, r4
 8006a62:	ec59 8b10 	vmov	r8, r9, d0
 8006a66:	f106 0a08 	add.w	sl, r6, #8
 8006a6a:	462f      	mov	r7, r5
 8006a6c:	2f00      	cmp	r7, #0
 8006a6e:	f280 80df 	bge.w	8006c30 <__kernel_rem_pio2+0x470>
 8006a72:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006ad8 <__kernel_rem_pio2+0x318>
 8006a76:	f04f 0a00 	mov.w	sl, #0
 8006a7a:	eba5 030a 	sub.w	r3, r5, sl
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f2c0 810a 	blt.w	8006c98 <__kernel_rem_pio2+0x4d8>
 8006a84:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006b00 <__kernel_rem_pio2+0x340>
 8006a88:	ec59 8b18 	vmov	r8, r9, d8
 8006a8c:	2700      	movs	r7, #0
 8006a8e:	e0f5      	b.n	8006c7c <__kernel_rem_pio2+0x4bc>
 8006a90:	2302      	movs	r3, #2
 8006a92:	9302      	str	r3, [sp, #8]
 8006a94:	e760      	b.n	8006958 <__kernel_rem_pio2+0x198>
 8006a96:	ab0e      	add	r3, sp, #56	; 0x38
 8006a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9c:	b94d      	cbnz	r5, 8006ab2 <__kernel_rem_pio2+0x2f2>
 8006a9e:	b12b      	cbz	r3, 8006aac <__kernel_rem_pio2+0x2ec>
 8006aa0:	a80e      	add	r0, sp, #56	; 0x38
 8006aa2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006aa6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006aaa:	2301      	movs	r3, #1
 8006aac:	3201      	adds	r2, #1
 8006aae:	461d      	mov	r5, r3
 8006ab0:	e759      	b.n	8006966 <__kernel_rem_pio2+0x1a6>
 8006ab2:	a80e      	add	r0, sp, #56	; 0x38
 8006ab4:	1acb      	subs	r3, r1, r3
 8006ab6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006aba:	462b      	mov	r3, r5
 8006abc:	e7f6      	b.n	8006aac <__kernel_rem_pio2+0x2ec>
 8006abe:	1e62      	subs	r2, r4, #1
 8006ac0:	ab0e      	add	r3, sp, #56	; 0x38
 8006ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006aca:	a90e      	add	r1, sp, #56	; 0x38
 8006acc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006ad0:	e757      	b.n	8006982 <__kernel_rem_pio2+0x1c2>
 8006ad2:	bf00      	nop
 8006ad4:	f3af 8000 	nop.w
	...
 8006ae4:	3ff00000 	.word	0x3ff00000
 8006ae8:	08007738 	.word	0x08007738
 8006aec:	40200000 	.word	0x40200000
 8006af0:	3ff00000 	.word	0x3ff00000
 8006af4:	3e700000 	.word	0x3e700000
 8006af8:	41700000 	.word	0x41700000
 8006afc:	3fe00000 	.word	0x3fe00000
 8006b00:	080076f8 	.word	0x080076f8
 8006b04:	1e62      	subs	r2, r4, #1
 8006b06:	ab0e      	add	r3, sp, #56	; 0x38
 8006b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006b10:	e7db      	b.n	8006aca <__kernel_rem_pio2+0x30a>
 8006b12:	a90e      	add	r1, sp, #56	; 0x38
 8006b14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	e78b      	b.n	8006a36 <__kernel_rem_pio2+0x276>
 8006b1e:	3301      	adds	r3, #1
 8006b20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006b24:	2900      	cmp	r1, #0
 8006b26:	d0fa      	beq.n	8006b1e <__kernel_rem_pio2+0x35e>
 8006b28:	9a08      	ldr	r2, [sp, #32]
 8006b2a:	4422      	add	r2, r4
 8006b2c:	00d2      	lsls	r2, r2, #3
 8006b2e:	a922      	add	r1, sp, #136	; 0x88
 8006b30:	18e3      	adds	r3, r4, r3
 8006b32:	9206      	str	r2, [sp, #24]
 8006b34:	440a      	add	r2, r1
 8006b36:	9302      	str	r3, [sp, #8]
 8006b38:	f10b 0108 	add.w	r1, fp, #8
 8006b3c:	f102 0308 	add.w	r3, r2, #8
 8006b40:	1c66      	adds	r6, r4, #1
 8006b42:	910a      	str	r1, [sp, #40]	; 0x28
 8006b44:	2500      	movs	r5, #0
 8006b46:	930d      	str	r3, [sp, #52]	; 0x34
 8006b48:	9b02      	ldr	r3, [sp, #8]
 8006b4a:	42b3      	cmp	r3, r6
 8006b4c:	da04      	bge.n	8006b58 <__kernel_rem_pio2+0x398>
 8006b4e:	461c      	mov	r4, r3
 8006b50:	e6a6      	b.n	80068a0 <__kernel_rem_pio2+0xe0>
 8006b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b54:	2301      	movs	r3, #1
 8006b56:	e7e3      	b.n	8006b20 <__kernel_rem_pio2+0x360>
 8006b58:	9b06      	ldr	r3, [sp, #24]
 8006b5a:	18ef      	adds	r7, r5, r3
 8006b5c:	ab22      	add	r3, sp, #136	; 0x88
 8006b5e:	441f      	add	r7, r3
 8006b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006b66:	f7f9 fc81 	bl	800046c <__aeabi_i2d>
 8006b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6c:	461c      	mov	r4, r3
 8006b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b70:	e9c7 0100 	strd	r0, r1, [r7]
 8006b74:	eb03 0b05 	add.w	fp, r3, r5
 8006b78:	2700      	movs	r7, #0
 8006b7a:	f04f 0800 	mov.w	r8, #0
 8006b7e:	f04f 0900 	mov.w	r9, #0
 8006b82:	9b07      	ldr	r3, [sp, #28]
 8006b84:	429f      	cmp	r7, r3
 8006b86:	dd08      	ble.n	8006b9a <__kernel_rem_pio2+0x3da>
 8006b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b8a:	aa72      	add	r2, sp, #456	; 0x1c8
 8006b8c:	18eb      	adds	r3, r5, r3
 8006b8e:	4413      	add	r3, r2
 8006b90:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8006b94:	3601      	adds	r6, #1
 8006b96:	3508      	adds	r5, #8
 8006b98:	e7d6      	b.n	8006b48 <__kernel_rem_pio2+0x388>
 8006b9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006b9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006ba2:	f7f9 fccd 	bl	8000540 <__aeabi_dmul>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	f7f9 fb11 	bl	80001d4 <__adddf3>
 8006bb2:	3701      	adds	r7, #1
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	4689      	mov	r9, r1
 8006bb8:	e7e3      	b.n	8006b82 <__kernel_rem_pio2+0x3c2>
 8006bba:	3d01      	subs	r5, #1
 8006bbc:	e741      	b.n	8006a42 <__kernel_rem_pio2+0x282>
 8006bbe:	f1ca 0000 	rsb	r0, sl, #0
 8006bc2:	ec47 6b10 	vmov	d0, r6, r7
 8006bc6:	f000 fc2b 	bl	8007420 <scalbn>
 8006bca:	ec57 6b10 	vmov	r6, r7, d0
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4b99      	ldr	r3, [pc, #612]	; (8006e38 <__kernel_rem_pio2+0x678>)
 8006bd2:	ee10 0a10 	vmov	r0, s0
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f7f9 ff38 	bl	8000a4c <__aeabi_dcmpge>
 8006bdc:	b1f8      	cbz	r0, 8006c1e <__kernel_rem_pio2+0x45e>
 8006bde:	2200      	movs	r2, #0
 8006be0:	4b96      	ldr	r3, [pc, #600]	; (8006e3c <__kernel_rem_pio2+0x67c>)
 8006be2:	4630      	mov	r0, r6
 8006be4:	4639      	mov	r1, r7
 8006be6:	f7f9 fcab 	bl	8000540 <__aeabi_dmul>
 8006bea:	f7f9 ff59 	bl	8000aa0 <__aeabi_d2iz>
 8006bee:	4680      	mov	r8, r0
 8006bf0:	f7f9 fc3c 	bl	800046c <__aeabi_i2d>
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	4b90      	ldr	r3, [pc, #576]	; (8006e38 <__kernel_rem_pio2+0x678>)
 8006bf8:	f7f9 fca2 	bl	8000540 <__aeabi_dmul>
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4602      	mov	r2, r0
 8006c00:	4639      	mov	r1, r7
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7f9 fae4 	bl	80001d0 <__aeabi_dsub>
 8006c08:	f7f9 ff4a 	bl	8000aa0 <__aeabi_d2iz>
 8006c0c:	1c65      	adds	r5, r4, #1
 8006c0e:	ab0e      	add	r3, sp, #56	; 0x38
 8006c10:	f10a 0a18 	add.w	sl, sl, #24
 8006c14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006c18:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006c1c:	e719      	b.n	8006a52 <__kernel_rem_pio2+0x292>
 8006c1e:	4630      	mov	r0, r6
 8006c20:	4639      	mov	r1, r7
 8006c22:	f7f9 ff3d 	bl	8000aa0 <__aeabi_d2iz>
 8006c26:	ab0e      	add	r3, sp, #56	; 0x38
 8006c28:	4625      	mov	r5, r4
 8006c2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006c2e:	e710      	b.n	8006a52 <__kernel_rem_pio2+0x292>
 8006c30:	ab0e      	add	r3, sp, #56	; 0x38
 8006c32:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006c36:	f7f9 fc19 	bl	800046c <__aeabi_i2d>
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	f7f9 fc7f 	bl	8000540 <__aeabi_dmul>
 8006c42:	2200      	movs	r2, #0
 8006c44:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006c48:	4b7c      	ldr	r3, [pc, #496]	; (8006e3c <__kernel_rem_pio2+0x67c>)
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	f7f9 fc77 	bl	8000540 <__aeabi_dmul>
 8006c52:	3f01      	subs	r7, #1
 8006c54:	4680      	mov	r8, r0
 8006c56:	4689      	mov	r9, r1
 8006c58:	e708      	b.n	8006a6c <__kernel_rem_pio2+0x2ac>
 8006c5a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006c66:	f7f9 fc6b 	bl	8000540 <__aeabi_dmul>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4640      	mov	r0, r8
 8006c70:	4649      	mov	r1, r9
 8006c72:	f7f9 faaf 	bl	80001d4 <__adddf3>
 8006c76:	3701      	adds	r7, #1
 8006c78:	4680      	mov	r8, r0
 8006c7a:	4689      	mov	r9, r1
 8006c7c:	9b04      	ldr	r3, [sp, #16]
 8006c7e:	429f      	cmp	r7, r3
 8006c80:	dc01      	bgt.n	8006c86 <__kernel_rem_pio2+0x4c6>
 8006c82:	45ba      	cmp	sl, r7
 8006c84:	dae9      	bge.n	8006c5a <__kernel_rem_pio2+0x49a>
 8006c86:	ab4a      	add	r3, sp, #296	; 0x128
 8006c88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c8c:	e9c3 8900 	strd	r8, r9, [r3]
 8006c90:	f10a 0a01 	add.w	sl, sl, #1
 8006c94:	3e08      	subs	r6, #8
 8006c96:	e6f0      	b.n	8006a7a <__kernel_rem_pio2+0x2ba>
 8006c98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d85b      	bhi.n	8006d56 <__kernel_rem_pio2+0x596>
 8006c9e:	e8df f003 	tbb	[pc, r3]
 8006ca2:	264a      	.short	0x264a
 8006ca4:	0226      	.short	0x0226
 8006ca6:	ab9a      	add	r3, sp, #616	; 0x268
 8006ca8:	441c      	add	r4, r3
 8006caa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006cae:	46a2      	mov	sl, r4
 8006cb0:	46ab      	mov	fp, r5
 8006cb2:	f1bb 0f00 	cmp.w	fp, #0
 8006cb6:	dc6c      	bgt.n	8006d92 <__kernel_rem_pio2+0x5d2>
 8006cb8:	46a2      	mov	sl, r4
 8006cba:	46ab      	mov	fp, r5
 8006cbc:	f1bb 0f01 	cmp.w	fp, #1
 8006cc0:	f300 8086 	bgt.w	8006dd0 <__kernel_rem_pio2+0x610>
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	2d01      	cmp	r5, #1
 8006cca:	f300 80a0 	bgt.w	8006e0e <__kernel_rem_pio2+0x64e>
 8006cce:	9b02      	ldr	r3, [sp, #8]
 8006cd0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006cd4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 809e 	bne.w	8006e1a <__kernel_rem_pio2+0x65a>
 8006cde:	9b01      	ldr	r3, [sp, #4]
 8006ce0:	e9c3 7800 	strd	r7, r8, [r3]
 8006ce4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006ce8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006cec:	e033      	b.n	8006d56 <__kernel_rem_pio2+0x596>
 8006cee:	3408      	adds	r4, #8
 8006cf0:	ab4a      	add	r3, sp, #296	; 0x128
 8006cf2:	441c      	add	r4, r3
 8006cf4:	462e      	mov	r6, r5
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	2e00      	cmp	r6, #0
 8006cfc:	da3a      	bge.n	8006d74 <__kernel_rem_pio2+0x5b4>
 8006cfe:	9b02      	ldr	r3, [sp, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d03d      	beq.n	8006d80 <__kernel_rem_pio2+0x5c0>
 8006d04:	4602      	mov	r2, r0
 8006d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d0a:	9c01      	ldr	r4, [sp, #4]
 8006d0c:	e9c4 2300 	strd	r2, r3, [r4]
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006d18:	f7f9 fa5a 	bl	80001d0 <__aeabi_dsub>
 8006d1c:	ae4c      	add	r6, sp, #304	; 0x130
 8006d1e:	2401      	movs	r4, #1
 8006d20:	42a5      	cmp	r5, r4
 8006d22:	da30      	bge.n	8006d86 <__kernel_rem_pio2+0x5c6>
 8006d24:	9b02      	ldr	r3, [sp, #8]
 8006d26:	b113      	cbz	r3, 8006d2e <__kernel_rem_pio2+0x56e>
 8006d28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006d34:	e00f      	b.n	8006d56 <__kernel_rem_pio2+0x596>
 8006d36:	ab9a      	add	r3, sp, #616	; 0x268
 8006d38:	441c      	add	r4, r3
 8006d3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006d3e:	2000      	movs	r0, #0
 8006d40:	2100      	movs	r1, #0
 8006d42:	2d00      	cmp	r5, #0
 8006d44:	da10      	bge.n	8006d68 <__kernel_rem_pio2+0x5a8>
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	b113      	cbz	r3, 8006d50 <__kernel_rem_pio2+0x590>
 8006d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d4e:	4619      	mov	r1, r3
 8006d50:	9b01      	ldr	r3, [sp, #4]
 8006d52:	e9c3 0100 	strd	r0, r1, [r3]
 8006d56:	9b06      	ldr	r3, [sp, #24]
 8006d58:	f003 0007 	and.w	r0, r3, #7
 8006d5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006d60:	ecbd 8b02 	vpop	{d8}
 8006d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d6c:	f7f9 fa32 	bl	80001d4 <__adddf3>
 8006d70:	3d01      	subs	r5, #1
 8006d72:	e7e6      	b.n	8006d42 <__kernel_rem_pio2+0x582>
 8006d74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d78:	f7f9 fa2c 	bl	80001d4 <__adddf3>
 8006d7c:	3e01      	subs	r6, #1
 8006d7e:	e7bc      	b.n	8006cfa <__kernel_rem_pio2+0x53a>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	e7c1      	b.n	8006d0a <__kernel_rem_pio2+0x54a>
 8006d86:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006d8a:	f7f9 fa23 	bl	80001d4 <__adddf3>
 8006d8e:	3401      	adds	r4, #1
 8006d90:	e7c6      	b.n	8006d20 <__kernel_rem_pio2+0x560>
 8006d92:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8006d96:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	ec53 2b17 	vmov	r2, r3, d7
 8006da0:	4649      	mov	r1, r9
 8006da2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006da6:	f7f9 fa15 	bl	80001d4 <__adddf3>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4606      	mov	r6, r0
 8006db0:	460f      	mov	r7, r1
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f7f9 fa0b 	bl	80001d0 <__aeabi_dsub>
 8006dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dbe:	f7f9 fa09 	bl	80001d4 <__adddf3>
 8006dc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dc6:	e9ca 0100 	strd	r0, r1, [sl]
 8006dca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006dce:	e770      	b.n	8006cb2 <__kernel_rem_pio2+0x4f2>
 8006dd0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006dd4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006dd8:	4630      	mov	r0, r6
 8006dda:	ec53 2b17 	vmov	r2, r3, d7
 8006dde:	4639      	mov	r1, r7
 8006de0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006de4:	f7f9 f9f6 	bl	80001d4 <__adddf3>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4680      	mov	r8, r0
 8006dee:	4689      	mov	r9, r1
 8006df0:	4630      	mov	r0, r6
 8006df2:	4639      	mov	r1, r7
 8006df4:	f7f9 f9ec 	bl	80001d0 <__aeabi_dsub>
 8006df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dfc:	f7f9 f9ea 	bl	80001d4 <__adddf3>
 8006e00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e04:	e9ca 0100 	strd	r0, r1, [sl]
 8006e08:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006e0c:	e756      	b.n	8006cbc <__kernel_rem_pio2+0x4fc>
 8006e0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006e12:	f7f9 f9df 	bl	80001d4 <__adddf3>
 8006e16:	3d01      	subs	r5, #1
 8006e18:	e756      	b.n	8006cc8 <__kernel_rem_pio2+0x508>
 8006e1a:	9b01      	ldr	r3, [sp, #4]
 8006e1c:	9a01      	ldr	r2, [sp, #4]
 8006e1e:	601f      	str	r7, [r3, #0]
 8006e20:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006e24:	605c      	str	r4, [r3, #4]
 8006e26:	609d      	str	r5, [r3, #8]
 8006e28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006e2c:	60d3      	str	r3, [r2, #12]
 8006e2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e32:	6110      	str	r0, [r2, #16]
 8006e34:	6153      	str	r3, [r2, #20]
 8006e36:	e78e      	b.n	8006d56 <__kernel_rem_pio2+0x596>
 8006e38:	41700000 	.word	0x41700000
 8006e3c:	3e700000 	.word	0x3e700000

08006e40 <__kernel_sin>:
 8006e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	ec55 4b10 	vmov	r4, r5, d0
 8006e48:	b085      	sub	sp, #20
 8006e4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006e4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006e52:	ed8d 1b00 	vstr	d1, [sp]
 8006e56:	9002      	str	r0, [sp, #8]
 8006e58:	da06      	bge.n	8006e68 <__kernel_sin+0x28>
 8006e5a:	ee10 0a10 	vmov	r0, s0
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f7f9 fe1e 	bl	8000aa0 <__aeabi_d2iz>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d051      	beq.n	8006f0c <__kernel_sin+0xcc>
 8006e68:	4622      	mov	r2, r4
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7f9 fb66 	bl	8000540 <__aeabi_dmul>
 8006e74:	4682      	mov	sl, r0
 8006e76:	468b      	mov	fp, r1
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	4629      	mov	r1, r5
 8006e80:	f7f9 fb5e 	bl	8000540 <__aeabi_dmul>
 8006e84:	a341      	add	r3, pc, #260	; (adr r3, 8006f8c <__kernel_sin+0x14c>)
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	4689      	mov	r9, r1
 8006e8e:	4650      	mov	r0, sl
 8006e90:	4659      	mov	r1, fp
 8006e92:	f7f9 fb55 	bl	8000540 <__aeabi_dmul>
 8006e96:	a33f      	add	r3, pc, #252	; (adr r3, 8006f94 <__kernel_sin+0x154>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f7f9 f998 	bl	80001d0 <__aeabi_dsub>
 8006ea0:	4652      	mov	r2, sl
 8006ea2:	465b      	mov	r3, fp
 8006ea4:	f7f9 fb4c 	bl	8000540 <__aeabi_dmul>
 8006ea8:	a33c      	add	r3, pc, #240	; (adr r3, 8006f9c <__kernel_sin+0x15c>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	f7f9 f991 	bl	80001d4 <__adddf3>
 8006eb2:	4652      	mov	r2, sl
 8006eb4:	465b      	mov	r3, fp
 8006eb6:	f7f9 fb43 	bl	8000540 <__aeabi_dmul>
 8006eba:	a33a      	add	r3, pc, #232	; (adr r3, 8006fa4 <__kernel_sin+0x164>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f7f9 f986 	bl	80001d0 <__aeabi_dsub>
 8006ec4:	4652      	mov	r2, sl
 8006ec6:	465b      	mov	r3, fp
 8006ec8:	f7f9 fb3a 	bl	8000540 <__aeabi_dmul>
 8006ecc:	a337      	add	r3, pc, #220	; (adr r3, 8006fac <__kernel_sin+0x16c>)
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f7f9 f97f 	bl	80001d4 <__adddf3>
 8006ed6:	9b02      	ldr	r3, [sp, #8]
 8006ed8:	4606      	mov	r6, r0
 8006eda:	460f      	mov	r7, r1
 8006edc:	b9db      	cbnz	r3, 8006f16 <__kernel_sin+0xd6>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4650      	mov	r0, sl
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	f7f9 fb2b 	bl	8000540 <__aeabi_dmul>
 8006eea:	a325      	add	r3, pc, #148	; (adr r3, 8006f80 <__kernel_sin+0x140>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 f96e 	bl	80001d0 <__aeabi_dsub>
 8006ef4:	4642      	mov	r2, r8
 8006ef6:	464b      	mov	r3, r9
 8006ef8:	f7f9 fb22 	bl	8000540 <__aeabi_dmul>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4620      	mov	r0, r4
 8006f02:	4629      	mov	r1, r5
 8006f04:	f7f9 f966 	bl	80001d4 <__adddf3>
 8006f08:	4604      	mov	r4, r0
 8006f0a:	460d      	mov	r5, r1
 8006f0c:	ec45 4b10 	vmov	d0, r4, r5
 8006f10:	b005      	add	sp, #20
 8006f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f16:	2200      	movs	r2, #0
 8006f18:	4b1b      	ldr	r3, [pc, #108]	; (8006f88 <__kernel_sin+0x148>)
 8006f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f1e:	f7f9 fb0f 	bl	8000540 <__aeabi_dmul>
 8006f22:	4632      	mov	r2, r6
 8006f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f28:	463b      	mov	r3, r7
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	f7f9 fb07 	bl	8000540 <__aeabi_dmul>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f3a:	f7f9 f949 	bl	80001d0 <__aeabi_dsub>
 8006f3e:	4652      	mov	r2, sl
 8006f40:	465b      	mov	r3, fp
 8006f42:	f7f9 fafd 	bl	8000540 <__aeabi_dmul>
 8006f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f4a:	f7f9 f941 	bl	80001d0 <__aeabi_dsub>
 8006f4e:	a30c      	add	r3, pc, #48	; (adr r3, 8006f80 <__kernel_sin+0x140>)
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	4606      	mov	r6, r0
 8006f56:	460f      	mov	r7, r1
 8006f58:	4640      	mov	r0, r8
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	f7f9 faf0 	bl	8000540 <__aeabi_dmul>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4630      	mov	r0, r6
 8006f66:	4639      	mov	r1, r7
 8006f68:	f7f9 f934 	bl	80001d4 <__adddf3>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4620      	mov	r0, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	f7f9 f92c 	bl	80001d0 <__aeabi_dsub>
 8006f78:	e7c6      	b.n	8006f08 <__kernel_sin+0xc8>
 8006f7a:	bf00      	nop
 8006f7c:	f3af 8000 	nop.w
 8006f80:	55555549 	.word	0x55555549
 8006f84:	3fc55555 	.word	0x3fc55555
 8006f88:	3fe00000 	.word	0x3fe00000
 8006f8c:	5acfd57c 	.word	0x5acfd57c
 8006f90:	3de5d93a 	.word	0x3de5d93a
 8006f94:	8a2b9ceb 	.word	0x8a2b9ceb
 8006f98:	3e5ae5e6 	.word	0x3e5ae5e6
 8006f9c:	57b1fe7d 	.word	0x57b1fe7d
 8006fa0:	3ec71de3 	.word	0x3ec71de3
 8006fa4:	19c161d5 	.word	0x19c161d5
 8006fa8:	3f2a01a0 	.word	0x3f2a01a0
 8006fac:	1110f8a6 	.word	0x1110f8a6
 8006fb0:	3f811111 	.word	0x3f811111
 8006fb4:	00000000 	.word	0x00000000

08006fb8 <atan>:
 8006fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbc:	ec55 4b10 	vmov	r4, r5, d0
 8006fc0:	4bc3      	ldr	r3, [pc, #780]	; (80072d0 <atan+0x318>)
 8006fc2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006fc6:	429e      	cmp	r6, r3
 8006fc8:	46ab      	mov	fp, r5
 8006fca:	dd18      	ble.n	8006ffe <atan+0x46>
 8006fcc:	4bc1      	ldr	r3, [pc, #772]	; (80072d4 <atan+0x31c>)
 8006fce:	429e      	cmp	r6, r3
 8006fd0:	dc01      	bgt.n	8006fd6 <atan+0x1e>
 8006fd2:	d109      	bne.n	8006fe8 <atan+0x30>
 8006fd4:	b144      	cbz	r4, 8006fe8 <atan+0x30>
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	462b      	mov	r3, r5
 8006fda:	4620      	mov	r0, r4
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7f9 f8f9 	bl	80001d4 <__adddf3>
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	460d      	mov	r5, r1
 8006fe6:	e006      	b.n	8006ff6 <atan+0x3e>
 8006fe8:	f1bb 0f00 	cmp.w	fp, #0
 8006fec:	f340 8131 	ble.w	8007252 <atan+0x29a>
 8006ff0:	a59b      	add	r5, pc, #620	; (adr r5, 8007260 <atan+0x2a8>)
 8006ff2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ff6:	ec45 4b10 	vmov	d0, r4, r5
 8006ffa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffe:	4bb6      	ldr	r3, [pc, #728]	; (80072d8 <atan+0x320>)
 8007000:	429e      	cmp	r6, r3
 8007002:	dc14      	bgt.n	800702e <atan+0x76>
 8007004:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007008:	429e      	cmp	r6, r3
 800700a:	dc0d      	bgt.n	8007028 <atan+0x70>
 800700c:	a396      	add	r3, pc, #600	; (adr r3, 8007268 <atan+0x2b0>)
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	ee10 0a10 	vmov	r0, s0
 8007016:	4629      	mov	r1, r5
 8007018:	f7f9 f8dc 	bl	80001d4 <__adddf3>
 800701c:	2200      	movs	r2, #0
 800701e:	4baf      	ldr	r3, [pc, #700]	; (80072dc <atan+0x324>)
 8007020:	f7f9 fd1e 	bl	8000a60 <__aeabi_dcmpgt>
 8007024:	2800      	cmp	r0, #0
 8007026:	d1e6      	bne.n	8006ff6 <atan+0x3e>
 8007028:	f04f 3aff 	mov.w	sl, #4294967295
 800702c:	e02b      	b.n	8007086 <atan+0xce>
 800702e:	f000 f963 	bl	80072f8 <fabs>
 8007032:	4bab      	ldr	r3, [pc, #684]	; (80072e0 <atan+0x328>)
 8007034:	429e      	cmp	r6, r3
 8007036:	ec55 4b10 	vmov	r4, r5, d0
 800703a:	f300 80bf 	bgt.w	80071bc <atan+0x204>
 800703e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007042:	429e      	cmp	r6, r3
 8007044:	f300 80a0 	bgt.w	8007188 <atan+0x1d0>
 8007048:	ee10 2a10 	vmov	r2, s0
 800704c:	ee10 0a10 	vmov	r0, s0
 8007050:	462b      	mov	r3, r5
 8007052:	4629      	mov	r1, r5
 8007054:	f7f9 f8be 	bl	80001d4 <__adddf3>
 8007058:	2200      	movs	r2, #0
 800705a:	4ba0      	ldr	r3, [pc, #640]	; (80072dc <atan+0x324>)
 800705c:	f7f9 f8b8 	bl	80001d0 <__aeabi_dsub>
 8007060:	2200      	movs	r2, #0
 8007062:	4606      	mov	r6, r0
 8007064:	460f      	mov	r7, r1
 8007066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800706a:	4620      	mov	r0, r4
 800706c:	4629      	mov	r1, r5
 800706e:	f7f9 f8b1 	bl	80001d4 <__adddf3>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4630      	mov	r0, r6
 8007078:	4639      	mov	r1, r7
 800707a:	f7f9 fb8b 	bl	8000794 <__aeabi_ddiv>
 800707e:	f04f 0a00 	mov.w	sl, #0
 8007082:	4604      	mov	r4, r0
 8007084:	460d      	mov	r5, r1
 8007086:	4622      	mov	r2, r4
 8007088:	462b      	mov	r3, r5
 800708a:	4620      	mov	r0, r4
 800708c:	4629      	mov	r1, r5
 800708e:	f7f9 fa57 	bl	8000540 <__aeabi_dmul>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4680      	mov	r8, r0
 8007098:	4689      	mov	r9, r1
 800709a:	f7f9 fa51 	bl	8000540 <__aeabi_dmul>
 800709e:	a374      	add	r3, pc, #464	; (adr r3, 8007270 <atan+0x2b8>)
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	4606      	mov	r6, r0
 80070a6:	460f      	mov	r7, r1
 80070a8:	f7f9 fa4a 	bl	8000540 <__aeabi_dmul>
 80070ac:	a372      	add	r3, pc, #456	; (adr r3, 8007278 <atan+0x2c0>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f7f9 f88f 	bl	80001d4 <__adddf3>
 80070b6:	4632      	mov	r2, r6
 80070b8:	463b      	mov	r3, r7
 80070ba:	f7f9 fa41 	bl	8000540 <__aeabi_dmul>
 80070be:	a370      	add	r3, pc, #448	; (adr r3, 8007280 <atan+0x2c8>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	f7f9 f886 	bl	80001d4 <__adddf3>
 80070c8:	4632      	mov	r2, r6
 80070ca:	463b      	mov	r3, r7
 80070cc:	f7f9 fa38 	bl	8000540 <__aeabi_dmul>
 80070d0:	a36d      	add	r3, pc, #436	; (adr r3, 8007288 <atan+0x2d0>)
 80070d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d6:	f7f9 f87d 	bl	80001d4 <__adddf3>
 80070da:	4632      	mov	r2, r6
 80070dc:	463b      	mov	r3, r7
 80070de:	f7f9 fa2f 	bl	8000540 <__aeabi_dmul>
 80070e2:	a36b      	add	r3, pc, #428	; (adr r3, 8007290 <atan+0x2d8>)
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f7f9 f874 	bl	80001d4 <__adddf3>
 80070ec:	4632      	mov	r2, r6
 80070ee:	463b      	mov	r3, r7
 80070f0:	f7f9 fa26 	bl	8000540 <__aeabi_dmul>
 80070f4:	a368      	add	r3, pc, #416	; (adr r3, 8007298 <atan+0x2e0>)
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	f7f9 f86b 	bl	80001d4 <__adddf3>
 80070fe:	4642      	mov	r2, r8
 8007100:	464b      	mov	r3, r9
 8007102:	f7f9 fa1d 	bl	8000540 <__aeabi_dmul>
 8007106:	a366      	add	r3, pc, #408	; (adr r3, 80072a0 <atan+0x2e8>)
 8007108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710c:	4680      	mov	r8, r0
 800710e:	4689      	mov	r9, r1
 8007110:	4630      	mov	r0, r6
 8007112:	4639      	mov	r1, r7
 8007114:	f7f9 fa14 	bl	8000540 <__aeabi_dmul>
 8007118:	a363      	add	r3, pc, #396	; (adr r3, 80072a8 <atan+0x2f0>)
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f7f9 f857 	bl	80001d0 <__aeabi_dsub>
 8007122:	4632      	mov	r2, r6
 8007124:	463b      	mov	r3, r7
 8007126:	f7f9 fa0b 	bl	8000540 <__aeabi_dmul>
 800712a:	a361      	add	r3, pc, #388	; (adr r3, 80072b0 <atan+0x2f8>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	f7f9 f84e 	bl	80001d0 <__aeabi_dsub>
 8007134:	4632      	mov	r2, r6
 8007136:	463b      	mov	r3, r7
 8007138:	f7f9 fa02 	bl	8000540 <__aeabi_dmul>
 800713c:	a35e      	add	r3, pc, #376	; (adr r3, 80072b8 <atan+0x300>)
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f7f9 f845 	bl	80001d0 <__aeabi_dsub>
 8007146:	4632      	mov	r2, r6
 8007148:	463b      	mov	r3, r7
 800714a:	f7f9 f9f9 	bl	8000540 <__aeabi_dmul>
 800714e:	a35c      	add	r3, pc, #368	; (adr r3, 80072c0 <atan+0x308>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f7f9 f83c 	bl	80001d0 <__aeabi_dsub>
 8007158:	4632      	mov	r2, r6
 800715a:	463b      	mov	r3, r7
 800715c:	f7f9 f9f0 	bl	8000540 <__aeabi_dmul>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4640      	mov	r0, r8
 8007166:	4649      	mov	r1, r9
 8007168:	f7f9 f834 	bl	80001d4 <__adddf3>
 800716c:	4622      	mov	r2, r4
 800716e:	462b      	mov	r3, r5
 8007170:	f7f9 f9e6 	bl	8000540 <__aeabi_dmul>
 8007174:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	d14b      	bne.n	8007216 <atan+0x25e>
 800717e:	4620      	mov	r0, r4
 8007180:	4629      	mov	r1, r5
 8007182:	f7f9 f825 	bl	80001d0 <__aeabi_dsub>
 8007186:	e72c      	b.n	8006fe2 <atan+0x2a>
 8007188:	ee10 0a10 	vmov	r0, s0
 800718c:	2200      	movs	r2, #0
 800718e:	4b53      	ldr	r3, [pc, #332]	; (80072dc <atan+0x324>)
 8007190:	4629      	mov	r1, r5
 8007192:	f7f9 f81d 	bl	80001d0 <__aeabi_dsub>
 8007196:	2200      	movs	r2, #0
 8007198:	4606      	mov	r6, r0
 800719a:	460f      	mov	r7, r1
 800719c:	4b4f      	ldr	r3, [pc, #316]	; (80072dc <atan+0x324>)
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7f9 f817 	bl	80001d4 <__adddf3>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	4630      	mov	r0, r6
 80071ac:	4639      	mov	r1, r7
 80071ae:	f7f9 faf1 	bl	8000794 <__aeabi_ddiv>
 80071b2:	f04f 0a01 	mov.w	sl, #1
 80071b6:	4604      	mov	r4, r0
 80071b8:	460d      	mov	r5, r1
 80071ba:	e764      	b.n	8007086 <atan+0xce>
 80071bc:	4b49      	ldr	r3, [pc, #292]	; (80072e4 <atan+0x32c>)
 80071be:	429e      	cmp	r6, r3
 80071c0:	dc1d      	bgt.n	80071fe <atan+0x246>
 80071c2:	ee10 0a10 	vmov	r0, s0
 80071c6:	2200      	movs	r2, #0
 80071c8:	4b47      	ldr	r3, [pc, #284]	; (80072e8 <atan+0x330>)
 80071ca:	4629      	mov	r1, r5
 80071cc:	f7f9 f800 	bl	80001d0 <__aeabi_dsub>
 80071d0:	2200      	movs	r2, #0
 80071d2:	4606      	mov	r6, r0
 80071d4:	460f      	mov	r7, r1
 80071d6:	4b44      	ldr	r3, [pc, #272]	; (80072e8 <atan+0x330>)
 80071d8:	4620      	mov	r0, r4
 80071da:	4629      	mov	r1, r5
 80071dc:	f7f9 f9b0 	bl	8000540 <__aeabi_dmul>
 80071e0:	2200      	movs	r2, #0
 80071e2:	4b3e      	ldr	r3, [pc, #248]	; (80072dc <atan+0x324>)
 80071e4:	f7f8 fff6 	bl	80001d4 <__adddf3>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4630      	mov	r0, r6
 80071ee:	4639      	mov	r1, r7
 80071f0:	f7f9 fad0 	bl	8000794 <__aeabi_ddiv>
 80071f4:	f04f 0a02 	mov.w	sl, #2
 80071f8:	4604      	mov	r4, r0
 80071fa:	460d      	mov	r5, r1
 80071fc:	e743      	b.n	8007086 <atan+0xce>
 80071fe:	462b      	mov	r3, r5
 8007200:	ee10 2a10 	vmov	r2, s0
 8007204:	2000      	movs	r0, #0
 8007206:	4939      	ldr	r1, [pc, #228]	; (80072ec <atan+0x334>)
 8007208:	f7f9 fac4 	bl	8000794 <__aeabi_ddiv>
 800720c:	f04f 0a03 	mov.w	sl, #3
 8007210:	4604      	mov	r4, r0
 8007212:	460d      	mov	r5, r1
 8007214:	e737      	b.n	8007086 <atan+0xce>
 8007216:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <atan+0x338>)
 8007218:	4e36      	ldr	r6, [pc, #216]	; (80072f4 <atan+0x33c>)
 800721a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800721e:	4456      	add	r6, sl
 8007220:	449a      	add	sl, r3
 8007222:	e9da 2300 	ldrd	r2, r3, [sl]
 8007226:	f7f8 ffd3 	bl	80001d0 <__aeabi_dsub>
 800722a:	4622      	mov	r2, r4
 800722c:	462b      	mov	r3, r5
 800722e:	f7f8 ffcf 	bl	80001d0 <__aeabi_dsub>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	e9d6 0100 	ldrd	r0, r1, [r6]
 800723a:	f7f8 ffc9 	bl	80001d0 <__aeabi_dsub>
 800723e:	f1bb 0f00 	cmp.w	fp, #0
 8007242:	4604      	mov	r4, r0
 8007244:	460d      	mov	r5, r1
 8007246:	f6bf aed6 	bge.w	8006ff6 <atan+0x3e>
 800724a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800724e:	461d      	mov	r5, r3
 8007250:	e6d1      	b.n	8006ff6 <atan+0x3e>
 8007252:	a51d      	add	r5, pc, #116	; (adr r5, 80072c8 <atan+0x310>)
 8007254:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007258:	e6cd      	b.n	8006ff6 <atan+0x3e>
 800725a:	bf00      	nop
 800725c:	f3af 8000 	nop.w
 8007260:	54442d18 	.word	0x54442d18
 8007264:	3ff921fb 	.word	0x3ff921fb
 8007268:	8800759c 	.word	0x8800759c
 800726c:	7e37e43c 	.word	0x7e37e43c
 8007270:	e322da11 	.word	0xe322da11
 8007274:	3f90ad3a 	.word	0x3f90ad3a
 8007278:	24760deb 	.word	0x24760deb
 800727c:	3fa97b4b 	.word	0x3fa97b4b
 8007280:	a0d03d51 	.word	0xa0d03d51
 8007284:	3fb10d66 	.word	0x3fb10d66
 8007288:	c54c206e 	.word	0xc54c206e
 800728c:	3fb745cd 	.word	0x3fb745cd
 8007290:	920083ff 	.word	0x920083ff
 8007294:	3fc24924 	.word	0x3fc24924
 8007298:	5555550d 	.word	0x5555550d
 800729c:	3fd55555 	.word	0x3fd55555
 80072a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80072a4:	bfa2b444 	.word	0xbfa2b444
 80072a8:	52defd9a 	.word	0x52defd9a
 80072ac:	3fadde2d 	.word	0x3fadde2d
 80072b0:	af749a6d 	.word	0xaf749a6d
 80072b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80072b8:	fe231671 	.word	0xfe231671
 80072bc:	3fbc71c6 	.word	0x3fbc71c6
 80072c0:	9998ebc4 	.word	0x9998ebc4
 80072c4:	3fc99999 	.word	0x3fc99999
 80072c8:	54442d18 	.word	0x54442d18
 80072cc:	bff921fb 	.word	0xbff921fb
 80072d0:	440fffff 	.word	0x440fffff
 80072d4:	7ff00000 	.word	0x7ff00000
 80072d8:	3fdbffff 	.word	0x3fdbffff
 80072dc:	3ff00000 	.word	0x3ff00000
 80072e0:	3ff2ffff 	.word	0x3ff2ffff
 80072e4:	40037fff 	.word	0x40037fff
 80072e8:	3ff80000 	.word	0x3ff80000
 80072ec:	bff00000 	.word	0xbff00000
 80072f0:	08007768 	.word	0x08007768
 80072f4:	08007748 	.word	0x08007748

080072f8 <fabs>:
 80072f8:	ec51 0b10 	vmov	r0, r1, d0
 80072fc:	ee10 2a10 	vmov	r2, s0
 8007300:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007304:	ec43 2b10 	vmov	d0, r2, r3
 8007308:	4770      	bx	lr
 800730a:	0000      	movs	r0, r0
 800730c:	0000      	movs	r0, r0
	...

08007310 <floor>:
 8007310:	ec51 0b10 	vmov	r0, r1, d0
 8007314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007318:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800731c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007320:	2e13      	cmp	r6, #19
 8007322:	460c      	mov	r4, r1
 8007324:	ee10 5a10 	vmov	r5, s0
 8007328:	4680      	mov	r8, r0
 800732a:	dc34      	bgt.n	8007396 <floor+0x86>
 800732c:	2e00      	cmp	r6, #0
 800732e:	da16      	bge.n	800735e <floor+0x4e>
 8007330:	a335      	add	r3, pc, #212	; (adr r3, 8007408 <floor+0xf8>)
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f7f8 ff4d 	bl	80001d4 <__adddf3>
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	f7f9 fb8f 	bl	8000a60 <__aeabi_dcmpgt>
 8007342:	b148      	cbz	r0, 8007358 <floor+0x48>
 8007344:	2c00      	cmp	r4, #0
 8007346:	da59      	bge.n	80073fc <floor+0xec>
 8007348:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800734c:	4a30      	ldr	r2, [pc, #192]	; (8007410 <floor+0x100>)
 800734e:	432b      	orrs	r3, r5
 8007350:	2500      	movs	r5, #0
 8007352:	42ab      	cmp	r3, r5
 8007354:	bf18      	it	ne
 8007356:	4614      	movne	r4, r2
 8007358:	4621      	mov	r1, r4
 800735a:	4628      	mov	r0, r5
 800735c:	e025      	b.n	80073aa <floor+0x9a>
 800735e:	4f2d      	ldr	r7, [pc, #180]	; (8007414 <floor+0x104>)
 8007360:	4137      	asrs	r7, r6
 8007362:	ea01 0307 	and.w	r3, r1, r7
 8007366:	4303      	orrs	r3, r0
 8007368:	d01f      	beq.n	80073aa <floor+0x9a>
 800736a:	a327      	add	r3, pc, #156	; (adr r3, 8007408 <floor+0xf8>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f7f8 ff30 	bl	80001d4 <__adddf3>
 8007374:	2200      	movs	r2, #0
 8007376:	2300      	movs	r3, #0
 8007378:	f7f9 fb72 	bl	8000a60 <__aeabi_dcmpgt>
 800737c:	2800      	cmp	r0, #0
 800737e:	d0eb      	beq.n	8007358 <floor+0x48>
 8007380:	2c00      	cmp	r4, #0
 8007382:	bfbe      	ittt	lt
 8007384:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007388:	fa43 f606 	asrlt.w	r6, r3, r6
 800738c:	19a4      	addlt	r4, r4, r6
 800738e:	ea24 0407 	bic.w	r4, r4, r7
 8007392:	2500      	movs	r5, #0
 8007394:	e7e0      	b.n	8007358 <floor+0x48>
 8007396:	2e33      	cmp	r6, #51	; 0x33
 8007398:	dd0b      	ble.n	80073b2 <floor+0xa2>
 800739a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800739e:	d104      	bne.n	80073aa <floor+0x9a>
 80073a0:	ee10 2a10 	vmov	r2, s0
 80073a4:	460b      	mov	r3, r1
 80073a6:	f7f8 ff15 	bl	80001d4 <__adddf3>
 80073aa:	ec41 0b10 	vmov	d0, r0, r1
 80073ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80073b6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ba:	fa23 f707 	lsr.w	r7, r3, r7
 80073be:	4207      	tst	r7, r0
 80073c0:	d0f3      	beq.n	80073aa <floor+0x9a>
 80073c2:	a311      	add	r3, pc, #68	; (adr r3, 8007408 <floor+0xf8>)
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f7f8 ff04 	bl	80001d4 <__adddf3>
 80073cc:	2200      	movs	r2, #0
 80073ce:	2300      	movs	r3, #0
 80073d0:	f7f9 fb46 	bl	8000a60 <__aeabi_dcmpgt>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	d0bf      	beq.n	8007358 <floor+0x48>
 80073d8:	2c00      	cmp	r4, #0
 80073da:	da02      	bge.n	80073e2 <floor+0xd2>
 80073dc:	2e14      	cmp	r6, #20
 80073de:	d103      	bne.n	80073e8 <floor+0xd8>
 80073e0:	3401      	adds	r4, #1
 80073e2:	ea25 0507 	bic.w	r5, r5, r7
 80073e6:	e7b7      	b.n	8007358 <floor+0x48>
 80073e8:	2301      	movs	r3, #1
 80073ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80073ee:	fa03 f606 	lsl.w	r6, r3, r6
 80073f2:	4435      	add	r5, r6
 80073f4:	4545      	cmp	r5, r8
 80073f6:	bf38      	it	cc
 80073f8:	18e4      	addcc	r4, r4, r3
 80073fa:	e7f2      	b.n	80073e2 <floor+0xd2>
 80073fc:	2500      	movs	r5, #0
 80073fe:	462c      	mov	r4, r5
 8007400:	e7aa      	b.n	8007358 <floor+0x48>
 8007402:	bf00      	nop
 8007404:	f3af 8000 	nop.w
 8007408:	8800759c 	.word	0x8800759c
 800740c:	7e37e43c 	.word	0x7e37e43c
 8007410:	bff00000 	.word	0xbff00000
 8007414:	000fffff 	.word	0x000fffff

08007418 <matherr>:
 8007418:	2000      	movs	r0, #0
 800741a:	4770      	bx	lr
 800741c:	0000      	movs	r0, r0
	...

08007420 <scalbn>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	ec55 4b10 	vmov	r4, r5, d0
 8007426:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800742a:	4606      	mov	r6, r0
 800742c:	462b      	mov	r3, r5
 800742e:	b9aa      	cbnz	r2, 800745c <scalbn+0x3c>
 8007430:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007434:	4323      	orrs	r3, r4
 8007436:	d03b      	beq.n	80074b0 <scalbn+0x90>
 8007438:	4b31      	ldr	r3, [pc, #196]	; (8007500 <scalbn+0xe0>)
 800743a:	4629      	mov	r1, r5
 800743c:	2200      	movs	r2, #0
 800743e:	ee10 0a10 	vmov	r0, s0
 8007442:	f7f9 f87d 	bl	8000540 <__aeabi_dmul>
 8007446:	4b2f      	ldr	r3, [pc, #188]	; (8007504 <scalbn+0xe4>)
 8007448:	429e      	cmp	r6, r3
 800744a:	4604      	mov	r4, r0
 800744c:	460d      	mov	r5, r1
 800744e:	da12      	bge.n	8007476 <scalbn+0x56>
 8007450:	a327      	add	r3, pc, #156	; (adr r3, 80074f0 <scalbn+0xd0>)
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	f7f9 f873 	bl	8000540 <__aeabi_dmul>
 800745a:	e009      	b.n	8007470 <scalbn+0x50>
 800745c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007460:	428a      	cmp	r2, r1
 8007462:	d10c      	bne.n	800747e <scalbn+0x5e>
 8007464:	ee10 2a10 	vmov	r2, s0
 8007468:	4620      	mov	r0, r4
 800746a:	4629      	mov	r1, r5
 800746c:	f7f8 feb2 	bl	80001d4 <__adddf3>
 8007470:	4604      	mov	r4, r0
 8007472:	460d      	mov	r5, r1
 8007474:	e01c      	b.n	80074b0 <scalbn+0x90>
 8007476:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800747a:	460b      	mov	r3, r1
 800747c:	3a36      	subs	r2, #54	; 0x36
 800747e:	4432      	add	r2, r6
 8007480:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007484:	428a      	cmp	r2, r1
 8007486:	dd0b      	ble.n	80074a0 <scalbn+0x80>
 8007488:	ec45 4b11 	vmov	d1, r4, r5
 800748c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80074f8 <scalbn+0xd8>
 8007490:	f000 f83c 	bl	800750c <copysign>
 8007494:	a318      	add	r3, pc, #96	; (adr r3, 80074f8 <scalbn+0xd8>)
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	ec51 0b10 	vmov	r0, r1, d0
 800749e:	e7da      	b.n	8007456 <scalbn+0x36>
 80074a0:	2a00      	cmp	r2, #0
 80074a2:	dd08      	ble.n	80074b6 <scalbn+0x96>
 80074a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80074a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80074b0:	ec45 4b10 	vmov	d0, r4, r5
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
 80074b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80074ba:	da0d      	bge.n	80074d8 <scalbn+0xb8>
 80074bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80074c0:	429e      	cmp	r6, r3
 80074c2:	ec45 4b11 	vmov	d1, r4, r5
 80074c6:	dce1      	bgt.n	800748c <scalbn+0x6c>
 80074c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80074f0 <scalbn+0xd0>
 80074cc:	f000 f81e 	bl	800750c <copysign>
 80074d0:	a307      	add	r3, pc, #28	; (adr r3, 80074f0 <scalbn+0xd0>)
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	e7e0      	b.n	800749a <scalbn+0x7a>
 80074d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80074dc:	3236      	adds	r2, #54	; 0x36
 80074de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80074e6:	4620      	mov	r0, r4
 80074e8:	4629      	mov	r1, r5
 80074ea:	2200      	movs	r2, #0
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <scalbn+0xe8>)
 80074ee:	e7b2      	b.n	8007456 <scalbn+0x36>
 80074f0:	c2f8f359 	.word	0xc2f8f359
 80074f4:	01a56e1f 	.word	0x01a56e1f
 80074f8:	8800759c 	.word	0x8800759c
 80074fc:	7e37e43c 	.word	0x7e37e43c
 8007500:	43500000 	.word	0x43500000
 8007504:	ffff3cb0 	.word	0xffff3cb0
 8007508:	3c900000 	.word	0x3c900000

0800750c <copysign>:
 800750c:	ec51 0b10 	vmov	r0, r1, d0
 8007510:	ee11 0a90 	vmov	r0, s3
 8007514:	ee10 2a10 	vmov	r2, s0
 8007518:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800751c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007520:	ea41 0300 	orr.w	r3, r1, r0
 8007524:	ec43 2b10 	vmov	d0, r2, r3
 8007528:	4770      	bx	lr
	...

0800752c <_init>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	bf00      	nop
 8007530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007532:	bc08      	pop	{r3}
 8007534:	469e      	mov	lr, r3
 8007536:	4770      	bx	lr

08007538 <_fini>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	bf00      	nop
 800753c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753e:	bc08      	pop	{r3}
 8007540:	469e      	mov	lr, r3
 8007542:	4770      	bx	lr
